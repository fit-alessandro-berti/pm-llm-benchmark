Sure, let's consider a simple hypothetical Purchase-to-Pay process with following steps:

1. Request Purchase Order (PO_REQ)
2. Approve Purchase Order (PO_APP)
3. Create Purchase Order (PO_CRE)
4. Receive Goods (G_REC)
5. Invoice Receipt (INV_REC)
6. Pay Supplier (SUP_PAY)

We can design a process tree as following where all these six steps should be executed sequentially.

Here is how we can construct the above mentioned hypothetical Purchase-to-Pay process in Python pm4py library:

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# create root of the process tree
root = ProcessTree(operator=Operator.SEQUENCE)

# create leafs of the process tree
PO_REQ = ProcessTree(label="PO_REQ", parent=root)
PO_APP = ProcessTree(label="PO_APP", parent=root)
PO_CRE = ProcessTree(label="PO_CRE", parent=root)
G_REC = ProcessTree(label="G_REC", parent=root)
INV_REC = ProcessTree(label="INV_REC", parent=root)
SUP_PAY = ProcessTree(label="SUP_PAY", parent=root)

# add children to the root node
root.children.append(PO_REQ)
root.children.append(PO_APP)
root.children.append(PO_CRE)
root.children.append(G_REC)
root.children.append(INV_REC)
root.children.append(SUP_PAY)
```

Please note that the parent-child relationship is important for correctly generating the process tree. If other tasks can be executed concurrently or in-loop, please adjust the process tree accordingly.