Here's a Python function that generates a temporal profile for the Purchase-to-Pay process:

```python
import random
import numpy as np
from datetime import timedelta

def generate_temporal_profile():
    # Define the average and standard deviation times for each coupling of activities
    # These are just examples and may need to be adjusted based on actual process data
    temporal_profile = {
        ('Create PO', 'Send PO'): (timedelta(days=1), timedelta(days=0.5)),
        ('Send PO', 'Wait for Goods Reception'): (timedelta(days=10), timedelta(days=5)),
        ('Wait for Goods Reception', 'Goods Reception'): (timedelta(days=5), timedelta(days=2)),
        ('Goods Reception', 'Determine if Received Goods are Correct'): (timedelta(days=3), timedelta(days=1)),
        ('Determine if Received Goods are Correct', 'Return Goods'): (timedelta(days=5), timedelta(days=2)),
        ('Return Goods', 'Determine Corrected Goods'): (timedelta(days=10), timedelta(days=5)),
        ('Determine Corrected Goods', 'Issue Corrected Goods Invoice'): (timedelta(days=7), timedelta(days=3)),
        ('Issue Corrected Goods Invoice', 'Post Invoice'): (timedelta(days=2), timedelta(days=1)),
        ('Post Invoice', 'Mark Invoice as Paid'): (timedelta(days=1), timedelta(days=0.5)),
        ('Mark Invoice as Paid', 'Close PO'): (timedelta(days=7), timedelta(days=3)),
    }

    # Convert timedelta objects to decimal hours for storage in a dictionary
    for (a, b), (avg, stdev) in temporal_profile.items():
        total_seconds_avg = avg.days * 24 * 3600 + avg.seconds
        total_seconds_stdev = stdev.days * 24 * 3600 + stdev.seconds

        # Normalize the standard deviation to be in hours
        hours = total_seconds_avg / 3600
        stdev_hours = total_seconds_stdev / 3600
        stdev_scaled = stdev_hours / hours
        stdev_scaled_tuple = (stdev_hours, stdev_scaled_hours)

        temporal_profile[(a, b)] = (hours, stdev_scaled_tuple)

    return temporal_profile

# Example usage:
temporal_profile = generate_temporal_profile()

print(temporal_profile)
```

Please adjust the times as necessary, but keep the same format for storing the average and standard deviation times in the dictionary.