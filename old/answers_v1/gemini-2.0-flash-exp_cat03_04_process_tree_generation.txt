```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

def construct_purchase_to_pay_process_tree():
    """
    Constructs a process tree representing a Purchase-to-Pay process.

    The process tree represents the following:
    1. A Purchase Order is created.
    2. In parallel, the following activities can take place:
        - The Purchase Order is approved or rejected (exclusive choice).
        - An Invoice is received.
    3. If the Purchase Order is approved, then a Payment is made.
       If rejected, the process ends.
    4. There is a loop: The PO and the invoice can be processed more than once.

    Returns:
        ProcessTree: The root node of the constructed process tree.
    """

    # Root node: Parallel execution
    root = ProcessTree(operator=Operator.PARALLEL)

    # Leaf: Create Purchase Order
    create_po = ProcessTree(label="Create PO", parent=root)
    
    # Parallel branch: Approval/Rejection and Invoice reception
    parallel_branch = ProcessTree(operator=Operator.PARALLEL, parent=root)
    
    # XOR branch (Approval/Rejection)
    xor_approval = ProcessTree(operator=Operator.XOR, parent=parallel_branch)
    
    # Leaf: Approve Purchase Order
    approve_po = ProcessTree(label="Approve PO", parent=xor_approval)

    # Leaf: Reject Purchase Order
    reject_po = ProcessTree(label="Reject PO", parent=xor_approval)
    
    # Leaf: Receive Invoice
    receive_invoice = ProcessTree(label="Receive Invoice", parent=parallel_branch)

    # Loop branch
    loop_branch = ProcessTree(operator=Operator.LOOP, parent=root)
    
    # Sequence branch of loop. Sequence of receiving invoice and making payment after approval.
    sequence_loop = ProcessTree(operator=Operator.SEQUENCE, parent=loop_branch)

    # Leaf: Make Payment
    make_payment = ProcessTree(label="Make Payment", parent=sequence_loop)


    # Connecting nodes to each other
    root.children.append(create_po)
    root.children.append(parallel_branch)
    root.children.append(loop_branch)

    parallel_branch.children.append(xor_approval)
    parallel_branch.children.append(receive_invoice)

    xor_approval.children.append(approve_po)
    xor_approval.children.append(reject_po)
    
    loop_branch.children.append(create_po)
    loop_branch.children.append(sequence_loop)

    sequence_loop.children.append(receive_invoice)
    sequence_loop.children.append(make_payment)
    
    return root


if __name__ == '__main__':
    process_tree = construct_purchase_to_pay_process_tree()

    # Example of traversing the process tree (for verification)
    def traverse_tree(node, indent=0):
      print(" " * indent, end="")
      if node.label:
        print(f"Leaf: {node.label}")
      else:
        print(f"Operator: {node.operator}")
      for child in node.children:
          traverse_tree(child, indent+2)

    traverse_tree(process_tree)
```

**Explanation:**

1.  **Import necessary classes:** We import `ProcessTree` and `Operator` from `pm4py.objects.process_tree.obj`.
2.  **`construct_purchase_to_pay_process_tree()` function:**
    *   It initializes the root node with `Operator.PARALLEL` because the main activities can happen in parallel.
    *   It creates leaf nodes for "Create PO", "Approve PO", "Reject PO", "Receive Invoice" and "Make Payment", and sets their respective labels.
    *   It creates the intermediate nodes for `Operator.XOR`, `Operator.SEQUENCE`, and `Operator.LOOP` operators to model the behaviour.
    *   Critically, it sets the `parent` attribute of each child node to their respective parent nodes.
    *   It adds the children to the children list of their parent node.
    *   The function returns the `root` node.
3.  **Main Execution Block**
    * The code calls the function `construct_purchase_to_pay_process_tree` to generate the ProcessTree.
    * The function `traverse_tree` is used to print the process tree structure to verify it.
    
**How the Process Tree Reflects the Purchase-to-Pay Process:**

*   The root node with the `Operator.PARALLEL` operator indicates that creating the PO, processing the invoice, and the approval process can happen in parallel.
*   The `Operator.XOR` operator signifies the choice between approving or rejecting the Purchase Order.
*   The `Operator.SEQUENCE` operator indicates the sequence of receiving the invoice, and making the payment.
*   The `Operator.LOOP` operator allows the activities to happen multiple times.

**Important Considerations:**

*   **`parent` Attribute:**  Setting the `parent` attribute is *crucial* for the Process Tree to be correctly structured within `pm4py`.
*   **Operator choice**: The correct choice of the operator is very important. The root must be set correctly according to the business process requirements.
*   **Leaf Node Definition**: Note that a leaf node is defined using a `label` attribute.

This code provides a complete and working example of how to construct a process tree representing a Purchase-to-Pay process using pm4py. You can further expand on this process tree by including more details and more complex behaviors by combining the operators and the leaf nodes.
