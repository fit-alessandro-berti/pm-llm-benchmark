```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

def create_purchase_to_pay_process_tree():
    """
    Creates a process tree for a hypothetical Purchase-to-Pay process.
    """

    # Root of the tree (sequence of main phases)
    root = ProcessTree(operator=Operator.SEQUENCE)

    # 1. Requisition Phase (can have internal parallelism)
    requisition_phase = ProcessTree(operator=Operator.PARALLEL, parent=root)
    root.children.append(requisition_phase)

    create_requisition = ProcessTree(label="Create Requisition", parent=requisition_phase)
    requisition_phase.children.append(create_requisition)

    approve_requisition = ProcessTree(label="Approve Requisition", parent=requisition_phase)
    requisition_phase.children.append(approve_requisition)

    # 2. Ordering Phase (choice between creating a PO or handling without PO)
    ordering_phase = ProcessTree(operator=Operator.XOR, parent=root)
    root.children.append(ordering_phase)

    with_po = ProcessTree(operator=Operator.SEQUENCE, parent=ordering_phase)
    ordering_phase.children.append(with_po)

    create_po = ProcessTree(label="Create Purchase Order", parent=with_po)
    with_po.children.append(create_po)

    send_po = ProcessTree(label="Send Purchase Order", parent=with_po)
    with_po.children.append(send_po)

    without_po = ProcessTree(label="Handle without PO", parent=ordering_phase)
    ordering_phase.children.append(without_po)

    # 3. Goods Receipt / Service Entry (only if PO was created)
    # This is modeled with a sequence after the XOR (with PO / without PO)
    # to implicitly model that Goods Receipt only happens if a PO was created.
    goods_receipt = ProcessTree(label="Goods Receipt / Service Entry", parent=root)
    root.children.append(goods_receipt)

    # 4. Invoice Handling Phase
    invoice_phase = ProcessTree(operator=Operator.SEQUENCE, parent=root)
    root.children.append(invoice_phase)

    receive_invoice = ProcessTree(label="Receive Invoice", parent=invoice_phase)
    invoice_phase.children.append(receive_invoice)

    # Invoice verification can be a loop (rework)
    invoice_verification_loop = ProcessTree(operator=Operator.LOOP, parent=invoice_phase)
    invoice_phase.children.append(invoice_verification_loop)

    verify_invoice = ProcessTree(label="Verify Invoice", parent=invoice_verification_loop)
    invoice_verification_loop.children.append(verify_invoice)

    rework_invoice = ProcessTree(label="Rework Invoice", parent=invoice_verification_loop)
    invoice_verification_loop.children.append(rework_invoice)

    approve_invoice = ProcessTree(label="Approve Invoice", parent=invoice_phase)
    invoice_phase.children.append(approve_invoice)

    # 5. Payment Phase
    payment_phase = ProcessTree(operator=Operator.SEQUENCE, parent=root)
    root.children.append(payment_phase)

    schedule_payment = ProcessTree(label="Schedule Payment", parent=payment_phase)
    payment_phase.children.append(schedule_payment)
    
    execute_payment = ProcessTree(label="Execute Payment", parent=payment_phase)
    payment_phase.children.append(execute_payment)

    return root

# Example usage:
ptree = create_purchase_to_pay_process_tree()

# You can now visualize or analyze this process tree using pm4py functions
# For example, to visualize it:
# from pm4py.visualization.process_tree import visualizer as pt_visualizer
# gviz = pt_visualizer.apply(ptree)
# pt_visualizer.view(gviz)
```

**Explanation:**

1. **Root Node:** The root node is a sequence operator because the Purchase-to-Pay process generally follows a sequence of phases: Requisition, Ordering, Goods Receipt, Invoice Handling, and Payment.
2. **Requisition Phase:** This phase involves creating and approving a requisition. These two activities can often happen concurrently, so a parallel operator is used.
3. **Ordering Phase:** Here, there's a choice between creating a formal Purchase Order (PO) or handling the order without a PO. This is modeled using an exclusive choice (XOR) operator.
4. **Goods Receipt/Service Entry:** This step typically happens only if a PO was created. The model implicitly represents this dependency by placing 'Goods Receipt' sequentially after the XOR that contains the 'Create PO' branch.
5. **Invoice Handling Phase:**
    *   The invoice is received.
    *   Invoice verification might involve a loop if rework is needed. We use a loop operator with "Verify Invoice" as the main activity and "Rework Invoice" as the redo activity.
    *   Finally, the invoice is approved.
6. **Payment Phase:** The payment is scheduled and then executed, representing a sequence.

**Important Notes:**

*   The `parent` attribute must be set correctly for each node to ensure the tree structure is valid.
*   This is a simplified model of a Purchase-to-Pay process. Real-world processes are often much more complex and might involve additional steps, exceptions, and variations.
*   You can use pm4py's visualization capabilities (as shown in the commented-out code) to get a graphical representation of the process tree, which can help in understanding and analyzing the model.
*   The silent steps (tau) are not used in this example, but they can be included if needed to represent internal process actions that are not visible to the outside. For example, you might add a tau step before "Create Purchase Order" to represent an internal system check or validation.