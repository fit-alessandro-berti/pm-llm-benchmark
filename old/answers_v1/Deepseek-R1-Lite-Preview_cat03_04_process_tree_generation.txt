**Step-by-Step Explanation:**

1. **Understand the Purchase-to-Pay Process:**
   - **Purchase Request:** Initiate the process.
   - **Approve Purchase:** Review and approve the request.
   - **Generate Purchase Order:** Create the PO based on the approved request.
   - **Receive Goods:** Vendor sends the goods.
   - **Inspect Goods:** Check the goods upon receipt.
   - **Accept Goods:** If inspection is successful.
   - **Generate Invoice:** Create an invoice for the delivered goods.
   - **Process Payment:** Pay the invoice.
   - **Optional Steps:** Send reminders for payment if delayed.
   - **Parallel Activities:** Tracking order status alongside main steps.

2. **Map Process Steps to Process Tree Operators:**
   - **Sequence (->):** Steps that must follow each other.
   - **Exclusive Choice (X):** Decide between different options.
   - **Parallel (+):** Activities that can happen concurrently.
   - **Loop (*):** Repeating steps until a condition is met.

3. **Design the Process Tree Structure:**
   - **Root:** Start of the process.
   - **Main Sequence:**
     - Purchase Request -> Approve Purchase -> Generate Purchase Order
     - Generate Purchase Order -> Receive Goods -> Inspect Goods -> Accept Goods
     - Accept Goods -> Generate Invoice
     - Generate Invoice -> Process Payment
   - **Optional Loop:**
     - Process Payment may loop back to Generate Invoice if payment is rejected.
   - **Parallel Activity:**
     - Tracking Order Status can happen in parallel with the main sequence.

4. **Construct the Process Tree Using pm4py:**
   - Import necessary classes from pm4py.
   - Create ProcessTree objects for each step and operator.
   - Set parent-child relationships explicitly.
   - Assemble the tree by adding children to their respective parents.

**Python Code:**

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Define the operators for readability
SEQUENCE = Operator.SEQUENCE
XOR = Operator.XOR
PARALLEL = Operator.PARALLEL
LOOP = Operator.LOOP

# Create the root of the process tree with a sequence operator
root = ProcessTree(operator=SEQUENCE)

# Main sequence of activities
main_sequence = ProcessTree(operator=SEQUENCE, parent=root)

# Step 1: Purchase Request
purchase_request = ProcessTree(label="Purchase Request", parent=main_sequence)

# Step 2: Approve Purchase
approve_purchase = ProcessTree(label="Approve Purchase", parent=main_sequence)

# Step 3: Generate Purchase Order
generate_po = ProcessTree(label="Generate Purchase Order", parent=main_sequence)

# Step 4: Receive Goods
receive_goods = ProcessTree(label="Receive Goods", parent=main_sequence)

# Step 5: Inspect Goods
inspect_goods = ProcessTree(label="Inspect Goods", parent=main_sequence)

# Step 6: Accept Goods
accept_goods = ProcessTree(label="Accept Goods", parent=main_sequence)

# Invoice and Payment Loop
invoice_payment_loop = ProcessTree(operator=LOOP, parent=main_sequence)

# Generate Invoice
generate_invoice = ProcessTree(label="Generate Invoice", parent=invoice_payment_loop)

# Process Payment
process_payment = ProcessTree(label="Process Payment", parent=invoice_payment_loop)

# Optional: If payment is rejected, loop back to Generate Invoice
# No additional steps needed for the loop as per pm4py's LOOP operator definition

# Parallel Activity: Tracking Order Status
parallel_activity = ProcessTree(operator=PARALLEL, parent=root)

# Tracking Order Status
track_order = ProcessTree(label="Track Order Status", parent=parallel_activity)

# Optional Step: Send Reminder (exclusive choice if needed)
optional_steps = ProcessTree(operator=XOR, parent=parallel_activity)
send_reminder = ProcessTree(label="Send Reminder", parent=optional_steps)
tau = ProcessTree(label="tau", parent=optional_steps)  # Silent step for no action

# Assemble the tree
main_sequence.children = [
    purchase_request,
    approve_purchase,
    generate_po,
    receive_goods,
    inspect_goods,
    accept_goods,
    invoice_payment_loop
]

invoice_payment_loop.children = [
    generate_invoice,
    process_payment
]

parallel_activity.children = [
    track_order,
    optional_steps
]

root.children = [
    main_sequence,
    parallel_activity
]

# The process tree is now fully defined
```

**Explanation:**

- **Root Node:** The root is a sequence operator that combines the main sequence of activities and the parallel activity.
- **Main Sequence:**
  - Follows the order of activities from Purchase Request to Accept Goods.
  - Includes a loop for generating an invoice and processing payment, allowing for reprocessing if needed.
- **Parallel Activity:**
  - Tracks the order status in parallel with the main sequence.
  - Offers an exclusive choice between sending a reminder or taking no action (silent step).
- **Parent-Child Relationships:** Each node's parent is explicitly set to ensure the tree structure is correctly defined.