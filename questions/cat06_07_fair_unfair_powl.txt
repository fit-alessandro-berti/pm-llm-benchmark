The following is a long textual description of a complex hiring process at a multinational corporation called “GlobalTeq Solutions.” The process involves multiple stages: initial screening, skill-based assessments, cultural fit evaluations, and final hiring decisions. Although the process is meant to be fair and transparent, subtle biases can creep in. In particular, certain applicants who have local community affiliations or come from a particular educational background may be given preferential treatment, causing subtle unfairness.

---

**Process Description:**

GlobalTeq Solutions receives job applications from a variety of sources. Applicants first submit their resumes and are then prompted to fill out a detailed questionnaire (including optional information such as association memberships and extracurricular affiliations). Once the basic application data is received:

1. **Resume Parsing & Initial Data Check:**  
   An automated system scans resumes for key qualifications, degrees, and past work experiences. Any missing information triggers a loop process where the applicant is asked to provide additional details before proceeding. If the resume is complete and structured correctly, the process continues.

2. **Preliminary Skill Assessment:**  
   Applicants take an online skill test assessing domain-specific knowledge (e.g., coding tests for software roles or scenario-based problem solving for consulting roles). The results are scored automatically. Applicants below a certain score threshold may be disqualified, while those above the threshold proceed.

3. **Cultural Fit & Community Affiliation Check (Potential Bias Point):**  
   At this stage, the company attempts to gauge whether applicants align with the company’s stated values. However, the process is not purely merit-based. Applicants who indicate membership in the “Global Business Leaders Club” or are flagged as local residents receive a slight subjective uplift in their cultural alignment evaluation. This step is often an XOR choice in the process: either you go through a standard cultural fit assessment or you take a path where community affiliation leads to implicit score adjustments.

4. **Managerial Review & Final Decision:**  
   A human reviewer (hiring manager) examines borderline candidates. In the presence of implicit affiliations or local-community-based cues, reviewers may—consciously or unconsciously—view these candidates more favorably. The final decision is then made, either approving the candidate for hire or rejecting them.

In summary, the process includes loops (to ensure data completeness), XOR choices (to apply different evaluative paths), and sequential ordering of tasks. It is in the XOR branch that subtle bias can be introduced.

---

Using the above textual description, produce two POWL models. Both models should reflect a hiring process with the steps described, but differ in how they handle the cultural fit and affiliation check.

1. **POWL Model with Potential Unfairness:**  
   Represent a workflow where after the skill assessment, there is an XOR branching. One branch leads to a standard cultural fit evaluation, and the other to a “CommunityAffiliationCheck” activity that gives a subtle advantage if the applicant is affiliated with a known local group. The presence of this branch can create an unfair tilt.

2. **POWL Model Without Unfairness:**  
   Represent a similar workflow but ensure no special community-based branch exists. Instead, all applicants undergo the same cultural fit evaluation process. You might still have a loop for data completeness and a sequence for skill checks, but no XOR branch providing selective advantages.

You can use an approach similar to the example given in the instructions, but now, choose appropriate activity labels from the description (e.g., “ReceiveApplication,” “DataCompletenessCheck,” “RequestMoreInfo” for the loop, “SkillAssessment,” “CulturalFitCheck,” “CommunityAffiliationCheck,” “ManagerialReview,” “FinalDecision”). Add edges and operators as needed. Ensure that your first model demonstrates where unfairness could appear, and that your second model removes that potential source of bias.


---

POWL (PARTIALLY ORDERED WORKFLOW LANGUAGE) MODELS
A partially ordered workflow language (POWL) is a partially ordered graph representation of a process, extended with control-flow operators for modeling choice and loop structures. There are four types of POWL models:
- an activity (identified by its label, i.e., 'M' identifies the activity M). Silent activities with empty labels (tau labels) are also supported.
- a choice of other POWL models (an exclusive choice between the sub-models A and B is identified by X ( A, B ) )
- a loop node between two POWL models (a loop between the sub-models A and B is identified by * ( A, B ) and tells that you execute A, then you either exit the loop or execute B and then A again, this is repeated until you exit the loop).
- a partial order over a set of POWL models. A partial order is a binary relation that is irreflexive, transitive, and asymmetric. A partial order sets an execution order between the sub-models (i.e., the target node cannot be executed before the source node is completed). Unconnected nodes in a partial order are considered to be concurrent. An example is PO=(nodes={ NODE1, NODE2 }, order={ })
where NODE1 and NODE2 are independent and can be executed in parallel. Another example is PO=(nodes={ NODE1, NODE2 }, order={ NODE1-->NODE2 }) where NODE2 can only be executed after NODE1 is completed.
A more advanced example: PO=(nodes={ NODE1, NODE2, NODE3, X ( NODE4, NODE5 ) }, order={ NODE1-->NODE2, NODE1-->X ( NODE4, NODE5 ), NODE2-->X ( NODE4, NODE5 ) }), in this case, NODE2 can be executed only after NODE1 is completed, while the choice between NODE4 and NODE5 needs to wait until both NODE1 and NODE2 are finalized.

POWL models are defined in pm4py.objects.powl.obj in different classes:
- SilentTransition defines a silent transition (without operator and without label)
- Transition defines a transition with label (without operator)
- StrictPartialOrder defines a POWL model with a main property: nodes (the children POWL models). The order between elements can be added with the method .order.add_edge(source_node, target_node). The nodes must be provided in the constructor, and cannot be modified afterwards.
- OperatorPOWL defines a POWL model with two main properties: children (the children POWL models) and operator (which can be either pm4py.objects.process_tree.obj.Operator.XOR or pm4py.objects.process_tree.obj.Operator.LOOP). The children must be provided in the constructor, and cannot be modified afterwards.
The properties are mimcked in the construtors. In this example, a POWL model is constructed where a loop between A and B is followed by either C or a silent transition.

import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
A = Transition(label="A")
B = Transition(label="B")
C = Transition(label="C")
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[A, B])
xor = OperatorPOWL(operator=Operator.XOR, children=[C, skip])
root = StrictPartialOrder(nodes=[loop, xor])
root.order.add_edge(loop, xor)
