**Prompt:**

Below is a process tree model representing a simplified "Procure-to-Pay" process. The process is intended to follow this standard logic:

1. **Create Purchase Requisition**  
2. **Approve Purchase Requisition**  
3. **Create Purchase Order**  
4. **Receive Goods**  
5. **Receive Invoice**  
6. **Match Invoice to PO**  
7. **Pay Invoice**  
8. **Close Case**

However, the provided process tree model is underfitting and allows unwanted behavior.

Your task is to inspect the given model and then propose a modified (fixed) version of the process tree. The fixed model should retain all the same activities but enforce a sequence and structure that only allows the normal, domain-appropriate order of events.

**Current Underfitting Process Tree Model (Pseudocode):**
```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# Define activities
create_req = ProcessTree(label="Create_Purchase_Requisition")
approve_req = ProcessTree(label="Approve_Purchase_Requisition")
create_po = ProcessTree(label="Create_Purchase_Order")
receive_goods = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice = ProcessTree(label="Pay_Invoice")
close_case = ProcessTree(label="Close_Case")

# Current underfitting structure:
# A sequence that starts with creating and approving the requisition,
# then a parallel block (AND) for the rest of the steps, allowing them to occur in any order,
# followed by closing the case.
# This allows, for example, paying the invoice before receiving goods or receiving the invoice.
parallel_block = ProcessTree(operator=Operator.PARALLEL, children=[
    create_po,
    receive_goods,
    receive_invoice,
    match_invoice,
    pay_invoice
])

root = ProcessTree(operator=Operator.SEQUENCE, children=[create_req, approve_req, parallel_block, close_case])
```

**Your Task:**

1. Identify the issues with the current model. Which activities should occur strictly in sequence, and which should not occur in parallel or out of order?

2. Produce a corrected process tree model that enforces the proper "Procure-to-Pay" order. Keep the same activities and overall structure but refine the operators (e.g., replace parallel blocks with sequences, introduce choices only where necessary) so that the resulting model only allows normal, intended behavior.

3. Explain how the updated process tree ensures conformance to the domainâ€™s logic and prevents unwanted behavior.