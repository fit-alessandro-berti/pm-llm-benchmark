**Prompt:**

ACCEPTING PETRI NET  
A Petri net plus an initial and a final marking is an accepting Petri net.  
The markings are dictionaries defined in the class `pm4py.objects.petri_net.obj.Marking`. They associate to a subset of places of the Petri net the corresponding number of tokens. The initial marking is the initial state of the Petri net, while the final marking is the final state of the Petri net.

Example construction and destruction of an accepting Petri net:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils
net = PetriNet(name="example")

source = PetriNet.Place(name="source")
sink = PetriNet.Place(name="sink")
execute_activity = PetriNet.Transition(name="execute_activity", label="Execute Activity")

net.places.add(source)
net.places.add(sink)
net.transitions.add(execute_activity)
petri_utils.add_arc_from_to(source, execute_activity, net)
petri_utils.add_arc_from_to(execute_activity, sink, net)

im = Marking()
im[source] = 1
fm = Marking()
fm[sink] = 1

# finally, remove the sink place
petri_utils.remove_place(net, sink)
del fm[sink]
```

---

**Scenario:**

Consider a complex insurance claim management process for a global insurance company. A customer files an **Insurance Claim (C)**, after which the following steps take place:

1. **Claim Registration (CR):** The claim is logged into the system.  
2. **Document Verification (DV):** Customer’s documents (policies, identity proofs, etc.) are verified.  
3. **Fraud Check (FC):** The claim is examined by a special unit to ensure there’s no fraudulent activity.  
4. **Claim Assessment (CA):** The claim is assessed by an adjuster who decides the compensation amount.  
5. **Approval (AP):** The claim must be approved by a senior manager if the amount surpasses a certain threshold.  
6. **Payment (P):** The approved claim is paid out to the customer.  
7. **Notification (N):** The customer is notified about the claim resolution and payment details.  
8. **Closure (CL):** The claim is closed and archived in the system.

In some cases, if documents are incomplete after Document Verification (DV), a re-submission of documents step occurs (**Re-Document Submission (RDS)**) before the process continues. Similarly, if the Fraud Check (FC) raises doubts, an additional **In-depth Investigation (II)** is performed. This can happen multiple times before proceeding to Claim Assessment (CA).

At the end of the process, once the claim is paid, a notification is sent, and finally the claim is closed, the process should reach the final marking.

**Your task:**  
Construct an accepting Petri net for this scenario. The Petri net should have places representing states between these activities, transitions labeled with the activity names, and arcs connecting them to form a logical sequence with possible loops (e.g., between DV and RDS if documents need re-submission, between FC and II if in-depth investigation is required multiple times). The initial marking should place a token in a start place, representing a new claim arriving. The final marking should represent a closed claim. Provide the Python code for constructing the Petri net using `pm4py.objects.petri_net.obj.PetriNet`, `pm4py.objects.petri_net.obj.Marking`, and `pm4py.objects.petri_net.utils.petri_utils`, and define both the initial marking (im) and final marking (fm).