POWL (PARTIALLY ORDERED WORKFLOW LANGUAGE) MODELS
A partially ordered workflow language (POWL) is a partially ordered graph representation of a process, extended with control-flow operators for modeling choice and loop structures. There are four types of POWL models:
- an activity (identified by its label, i.e., 'M' identifies the activity M). Silent activities with empty labels (tau labels) are also supported.
- a choice of other POWL models (an exclusive choice between the sub-models A and B is identified by X ( A, B ) )
- a loop node between two POWL models (a loop between the sub-models A and B is identified by * ( A, B ) and tells that you execute A, then you either exit the loop or execute B and then A again, this is repeated until you exit the loop).
- a partial order over a set of POWL models. A partial order is a binary relation that is irreflexive, transitive, and asymmetric. A partial order sets an execution order between the sub-models (i.e., the target node cannot be executed before the source node is completed). Unconnected nodes in a partial order are considered to be concurrent. An example is PO=(nodes={ NODE1, NODE2 }, order={ })
where NODE1 and NODE2 are independent and can be executed in parallel. Another example is PO=(nodes={ NODE1, NODE2 }, order={ NODE1-->NODE2 }) where NODE2 can only be executed after NODE1 is completed.
A more advanced example: PO=(nodes={ NODE1, NODE2, NODE3, X ( NODE4, NODE5 ) }, order={ NODE1-->NODE2, NODE1-->X ( NODE4, NODE5 ), NODE2-->X ( NODE4, NODE5 ) }), in this case, NODE2 can be executed only after NODE1 is completed, while the choice between NODE4 and NODE5 needs to wait until both NODE1 and NODE2 are finalized.

POWL models are defined in pm4py.objects.powl.obj in different classes:
- SilentTransition defines a silent transition (without operator and without label)
- Transition defines a transition with label (without operator)
- StrictPartialOrder defines a POWL model with a main property: nodes (the children POWL models). The order between elements can be added with the method .order.add_edge(source_node, target_node). The nodes must be provided in the constructor, and cannot be modified afterwards.
- OperatorPOWL defines a POWL model with two main properties: children (the children POWL models) and operator (which can be either pm4py.objects.process_tree.obj.Operator.XOR or pm4py.objects.process_tree.obj.Operator.LOOP). The children must be provided in the constructor, and cannot be modified afterwards.
The properties are mimcked in the construtors. In this example, a POWL model is constructed where a loop between A and B is followed by either C or a silent transition.

import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
A = Transition(label="A")
B = Transition(label="B")
C = Transition(label="C")
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[A, B])
xor = OperatorPOWL(operator=Operator.XOR, children=[C, skip])
root = StrictPartialOrder(nodes=[loop, xor])
root.order.add_edge(loop, xor)

can you generate the Python code necessary to implement in pm4py a POWL model for an hypothetical Purchase-to-Pay process?
