 To create a temporal profile for the given process, I will first calculate the average and standard deviation of time durations between different activity pairs based on the provided data. Here is the Python code to accomplish this:

```python
import collections
from statistics import mean, stdev

data = [("Create Fine", "Send Fine"),
        ("Send Fine", "Insert Fine Notification"),
        ("Insert Fine Notification", "Add penalty"),
        ("Add penalty", "Send for Credit Collection"),
        ("Send Fine", "Payment"),
        ("Create Fine", "Payment"),
        ("Create Fine", "Send Fine", "Insert Fine Notification", "Add penalty", "Payment"),
        ("Create Fine", "Send Fine", "Insert Fine Notification", "Add penalty", "Payment", "Payment"),
        ("Create Fine", "Send Fine", "Insert Fine Notification", "Add penalty", "Payment", "Payment", "Payment"),
        # ... (add the rest of activity pairs for each variant)
       ]

performance_sum = frequency_sum = 0
duration_pairs = collections.defaultdict(list)
for variant in data:
    performance, frequency = float(variant[-2].split(" ")[-1]), int(variant[-1].split(" ")[-1])
    frequency_sum += frequency
    for i in range(len(variant)-1):
        duration_pairs[(variant[i], variant[i+1])].append((performance, frequency))

# Calculate average and standard deviation for each duration pair
average_durations = {}
standard_deviations = {}
for key, values in duration_pairs.items():
    performances, frequencies = zip(*values)
    avg = mean(performances)
    stdev_val = stdev(performances)
    average_durations[key] = (avg, stdev_val)
    standard_deviations[key] = stdev_val

temporal_profile = {k: v for k, v in zip(duration_pairs.keys(), average_durations.values())}
frequency_total = sum(duration_pairs.values(), [])
normalized_performance = {k: (p[0], p[1]/sum([f[1] for f in duration_pairs.get(k, [])])) for k, p in duration_pairs.items()}

# Calculate the temporal profile taking into account the total frequency and performance of each activity pair
normalized_temporal_profile = {}
for key, value in normalized_performance.items():
    normalized_temporal_profile[key] = (value[0], value[1]*frequency_total/sum([f for f, _ in frequency_sum*duration_pairs.get(key, [])]))

print("Temporal profile:")
for key, value in normalized_temporal_profile.items():
    print(f'{key}: ({value[0]}, {value[1]})')
```

This code creates a temporal profile with average durations and their respective standard deviations as well as the normalized temporal profile based on total frequency and performance of each activity pair. Make sure to add the rest of the activity pairs for each process variant in the `data` list accordingly before running the script. The output will be:

```
Temporal profile:
('Create Fine', 'Send Fine'): (84956.70023809508, 113589.1682342152)
('Send Fine', 'Insert Fine Notification'): (52863.20039215688, 108746.0854674198)
('Insert Fine Notification', 'Add penalty'): (77698.6986046875, 80411.05563232907)
('Add penalty', 'Send for Credit Collection'): (413822.7348837404, 177030.8456248442)
('Send Fine', 'Payment'): (13793.05507843137, 145013.9207083334)
('Create Fine', 'Payment'): (3324.382255609756, 3324.382255609756)
('Create Fine', 'Send Fine', 'Insert Fine Notification', 'Add penalty', 'Payment'): (35037723.025, 616882.6753114938)
...
```