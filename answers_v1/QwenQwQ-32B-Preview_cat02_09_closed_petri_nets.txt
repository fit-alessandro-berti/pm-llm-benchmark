I'm going to tackle this task by first understanding what each of these Petri net concepts means, and then proposing both an opposite concept and a more general concept for each one. Petri nets are a mathematical modeling language used to describe and analyze concurrent systems, and these concepts are fundamental to their structure and behavior.

1. **Source Place**

   - **Definition**: A source place in a Petri net is a place that has no input arcs, meaning no transitions can put tokens into it directly. It usually starts with a certain number of tokens and is used to initiate the net's behavior.

   - **Opposite Concept**: A **sink place**. This would be a place with no output arcs, meaning tokens can enter it but not leave. It accumulates tokens but doesn't participate further in the net's activity.

   - **More General Concept**: A **place with restricted input**. This could include places that have input arcs but under specific conditions, such as only from certain transitions or with certain weights. This generalizes the idea of token sources with more complex constraints.

2. **Immediate Transition**

   - **Definition**: An immediate transition is one that fires as soon as all its input places have the required tokens, without any delay. It's often used to model instantaneous events.

   - **Opposite Concept**: A **timed transition**. This type of transition doesn't fire immediately but only after a specified time delay has passed since its enabling.

   - **More General Concept**: A **conditional transition**. This could fire based on various conditions beyond just the presence of tokens, such as time constraints, external events, or specific sequences of token arrivals.

3. **Live Transition**

   - **Definition**: A live transition is one that can fire an infinite number of times during the execution of the net, given that the net is live. This means there's always a possibility for the transition to be enabled again after firing.

   - **Opposite Concept**: A **dead transition**. This is a transition that can never fire because it's impossible for its input places to have the required tokens, or it becomes impossible after some sequence of firings.

   - **More General Concept**: A **potentially live transition**. This refers to transitions that could be live under certain conditions or in certain states of the net, but not necessarily in all states.

4. **Bounded Net**

   - **Definition**: A bounded net is one in which the number of tokens in any place never exceeds a certain fixed number during any execution sequence. This property is important for preventing uncontrolled token accumulation.

   - **Opposite Concept**: An **unbounded net**. In such nets, places can accumulate an arbitrarily large number of tokens, which can lead to potential issues like buffer overflows or performance degradation.

   - **More General Concept**: A **partially bounded net**. This would be a net where some places are bounded while others are not. This allows for more flexibility in modeling systems where certain resources are limited, but others are not.

5. **Free Choice Net**

   - **Definition**: A free choice net is a type of Petri net where each transition is either an input transition of at most one place, or it is an input transition of several places, all of which have only that transition as their input transition. This structure allows for a certain level of choice in the system's behavior.

   - **Opposite Concept**: A **state machine** or **Marked graph**. In these nets, each place has exactly one input and one output transition, representing a strict sequence of events without choice.

   - **More General Concept**: A **choice net**. This would encompass various degrees of choice beyond the specific constraints of free choice nets, allowing for more complex interactions between transitions and places.

In summary, for each concept in Petri nets, there is an opposite concept that represents the lack or reversal of that property, and a more general concept that expands the idea to include additional variations or conditions. This exploration helps in understanding the spectrum of possibilities within the Petri net framework and in choosing the right level of abstraction for modeling specific systems.