I'll create a temporal profile for a typical Purchase-to-Pay (P2P) process with realistic time estimates. Let's consider the following activities:

1. PR - Purchase Requisition
2. PO - Purchase Order Creation
3. GR - Goods Receipt
4. IR - Invoice Receipt
5. PM - Payment

Here's a realistic temporal profile with times in seconds (for better precision):

```python
temporal_profile = {
    ('PR', 'PO'): (7200, 3600),      # 2 hours avg, 1 hour std (approval and PO creation)
    ('PR', 'GR'): (432000, 86400),    # 5 days avg, 1 day std (from requisition to delivery)
    ('PR', 'IR'): (518400, 172800),   # 6 days avg, 2 days std (from requisition to invoice)
    ('PR', 'PM'): (864000, 259200),   # 10 days avg, 3 days std (total process)
    ('PO', 'GR'): (345600, 86400),    # 4 days avg, 1 day std (delivery time)
    ('PO', 'IR'): (432000, 172800),   # 5 days avg, 2 days std (PO to invoice)
    ('PO', 'PM'): (777600, 259200),   # 9 days avg, 3 days std (PO to payment)
    ('GR', 'IR'): (86400, 43200),     # 1 day avg, 12 hours std (delivery to invoice)
    ('GR', 'PM'): (432000, 172800),   # 5 days avg, 2 days std (delivery to payment)
    ('IR', 'PM'): (345600, 86400),    # 4 days avg, 1 day std (invoice to payment)
}
```

This temporal profile reflects:
1. Quick internal processes (PR to PO)
2. Variable delivery times (PO to GR)
3. Standard payment terms (IR to PM)
4. Increasing variance as the process progresses
5. Realistic dependencies between activities

With ZETA=2, you would detect anomalies like:
- Rush orders (much faster than normal)
- Delayed deliveries
- Late payments
- Unusually quick payments (potential fraud)