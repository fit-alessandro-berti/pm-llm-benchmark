1. Problems with the current model  

•	The activities Create Purchase Order, Receive Goods, Receive Invoice, Match Invoice to PO and Pay Invoice are placed inside one big AND-block.  
–	Inside an AND-block every child may start as soon as the block is entered and their internal order is completely free.  
–	This means the model allows, for example, “Pay Invoice” before “Receive Goods”, “Match Invoice to PO” before the invoice is even present, etc.  
•	For a standard procure-to-pay process the logical/mandatory order is:  
1.	Create Purchase Requisition  
2.	Approve Purchase Requisition  
3.	Create Purchase Order  
4.	(Receive Goods AND Receive Invoice) – either may come first, but both must be completed  
5.	Match Invoice to PO (needs PO + invoice + goods receipt)  
6.	Pay Invoice  
7.	Close Case  

  Thus only “Receive Goods” and “Receive Invoice” may legitimately be concurrent; everything else has to be in sequence.

2. Corrected (fixed) process tree model  

```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# leaf nodes
create_req      = ProcessTree(label="Create_Purchase_Requisition")
approve_req     = ProcessTree(label="Approve_Purchase_Requisition")
create_po       = ProcessTree(label="Create_Purchase_Order")
receive_goods   = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice   = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice     = ProcessTree(label="Pay_Invoice")
close_case      = ProcessTree(label="Close_Case")

# Parallel block that really may happen in any order
goods_and_invoice = ProcessTree(
        operator=Operator.PARALLEL,           # AND-block
        children=[receive_goods, receive_invoice]
)

# Final, fully specified tree
root = ProcessTree(
        operator=Operator.SEQUENCE,
        children=[
            create_req,
            approve_req,
            create_po,
            goods_and_invoice,               # both goods + invoice must be finished
            match_invoice,
            pay_invoice,
            close_case
        ]
)
```

(If you prefer a slightly stricter variant you may replace the AND-block by an XOR–SEQUENCE choice that first receives goods and then the invoice; the structure above is the usual business-friendly version that tolerates either arrival order.)

3. Why the new tree is conformant  

•	The tree is *driven by a single SEQUENCE* from start to end, so no activity that sits later in the list can be executed before all its predecessors are completed.  
•	Only “Receive Goods” and “Receive Invoice” are inside an AND-block; this allows them to occur in any order or even in parallel, but the SEQUENCE node that follows forces the process to wait until both are finished before moving on to “Match Invoice to PO”.  
•	Because “Match Invoice to PO” is now after the an AND-block, it is impossible to perform the match unless both the goods receipt and the invoice are present.  
•	“Pay Invoice” comes strictly after the matching step, preventing payments for unmatched or unmatched-yet invoices.  
•	Finally, “Close Case” can only happen when every preceding activity—including the payment—has been completed, ensuring business completeness.

This corrected process tree therefore eliminates the under-fitting behaviour of the original model while retaining the flexibility that is genuinely required by the domain.