8.0

**Grading Rationale:**

The provided SQL query is perfect. It is correct, efficient, and idiomatic for the requested task. It correctly uses a subquery with `GROUP BY` and `HAVING` to identify the target cases and then filters the main table using `IN`. From a purely functional standpoint, the query is a 10/10.

However, the answer includes a detailed explanation which contains a significant technical inaccuracy and a questionable claim, which must be penalized under the "hypercritical" grading instructions.

*   **Major Flaw:** The explanation in point #2 incorrectly describes the subquery as "correlated". An `IN` subquery that can be run independently of the outer query (as this one can) is a non-correlated subquery. A correlated subquery references columns from the outer query and is conceptually re-evaluated for each outer row. This is a fundamental misunderstanding of SQL terminology.
*   **Minor Flaw:** The same point claims the query "avoids expensive joins or CTEs". This is misleading. A modern query optimizer will almost certainly rewrite the `IN (subquery)` as a `SEMI JOIN`, and its performance would be very similar, if not identical, to an explicit `JOIN` on a CTE. The claim suggests a performance benefit that doesn't necessarily exist, showing a shallow understanding of query execution plans.

While the query itself is flawless, the flawed explanation detracts from the overall quality of the answer. Given the instruction to be hypercritical, the conceptual error in the explanation warrants a significant deduction. The answer provides a correct solution but demonstrates an imperfect understanding of the concepts behind it.