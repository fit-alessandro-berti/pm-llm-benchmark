10.0
```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define all places
places = {
    'C': PetriNet.Place(name="C"),    # Initial state: Claim Filed
    'CR_done': PetriNet.Place(name="CR_done"),  # State after Claim Registration
    'DV_done': PetriNet.Place(name="DV_done"),  # State after Document Verification
    'RDS_done': PetriNet.Place(name="RDS_done"), # State after Re-Document Submission
    'FC_done': PetriNet.Place(name="FC_done"),  # State after Fraud Check
    'II_done': PetriNet.Place(name="II_done"),  # State after In-depth Investigation
    'CA_done': PetriNet.Place(name="CA_done"),  # State after Claim Assessment
    'AP_done': PetriNet.Place(name="AP_done"),  # State after Approval
    'P_done': PetriNet.Place(name="P_done"),   # State after Payment
    'N_done': PetriNet.Place(name="N_done"),   # State after Notification
    'CL_done': PetriNet.Place(name="CL_done"), # Final State: Claim Closed
}

# Add all places to the net
for place in places.values():
    net.places.add(place)

# Define all transitions
transitions = {
    'CR': PetriNet.Transition(name="CR", label="Claim Registration"),
    'DV': PetriNet.Transition(name="DV", label="Document Verification"),
    'RDS': PetriNet.Transition(name="RDS", label="Re-Document Submission"),
    'FC': PetriNet.Transition(name="FC", label="Fraud Check"),
    'II': PetriNet.Transition(name="II", label="In-depth Investigation"),
    'CA': PetriNet.Transition(name="CA", label="Claim Assessment"),
    'AP': PetriNet.Transition(name="AP", label="Approval"),
    'P': PetriNet.Transition(name="P", label="Payment"),
    'N': PetriNet.Transition(name="N", label="Notification"),
    'CL': PetriNet.Transition(name="CL", label="Closure"),
}

# Add all transitions to the net
for trans in transitions.values():
    net.transitions.add(trans)

# Add arcs to model the process flow

# 1. Claim Registration (CR): C -> CR_done
petri_utils.add_arc_from_to(places['C'], transitions['CR'], net)
petri_utils.add_arc_from_to(transitions['CR'], places['CR_done'], net)

# 2. Document Verification (DV): CR_done -> DV_done
# DV can also be reached after RDS (RDS_done -> DV)
petri_utils.add_arc_from_to(places['CR_done'], transitions['DV'], net)
petri_utils.add_arc_from_to(places['RDS_done'], transitions['DV'], net) # Input from RDS loop
petri_utils.add_arc_from_to(transitions['DV'], places['DV_done'], net)

# 3. From DV_done: choice of RDS or FC
#   3a. Re-Document Submission (RDS): DV_done -> RDS_done (then loops back to DV)
petri_utils.add_arc_from_to(places['DV_done'], transitions['RDS'], net)
petri_utils.add_arc_from_to(transitions['RDS'], places['RDS_done'], net)
# Loop back: RDS_done -> DV is handled by DV's inputs already

#   3b. Fraud Check (FC): DV_done -> FC_done
# FC can also be reached after II (II_done -> FC)
petri_utils.add_arc_from_to(places['DV_done'], transitions['FC'], net) # Path if DV is complete
petri_utils.add_arc_from_to(places['II_done'], transitions['FC'], net)   # Input from II loop
petri_utils.add_arc_from_to(transitions['FC'], places['FC_done'], net)

# 4. From FC_done: choice of II or CA
#   4a. In-depth Investigation (II): FC_done -> II_done (then loops back to FC)
petri_utils.add_arc_from_to(places['FC_done'], transitions['II'], net)
petri_utils.add_arc_from_to(transitions['II'], places['II_done'], net)
# Loop back: II_done -> FC is handled by FC's inputs already

#   4b. Claim Assessment (CA): FC_done -> CA_done
petri_utils.add_arc_from_to(places['FC_done'], transitions['CA'], net) # Path if FC is clear
petri_utils.add_arc_from_to(transitions['CA'], places['CA_done'], net)

# 5. From CA_done: choice of AP or P
#   5a. Approval (AP): CA_done -> AP_done
petri_utils.add_arc_from_to(places['CA_done'], transitions['AP'], net)
petri_utils.add_arc_from_to(transitions['AP'], places['AP_done'], net)

#   5b. Payment (P): Can be reached from CA_done (if no AP needed) or AP_done
petri_utils.add_arc_from_to(places['CA_done'], transitions['P'], net) # Path if AP not needed
petri_utils.add_arc_from_to(places['AP_done'], transitions['P'], net)   # Path after AP
petri_utils.add_arc_from_to(transitions['P'], places['P_done'], net)

# 6. Notification (N): P_done -> N_done
petri_utils.add_arc_from_to(places['P_done'], transitions['N'], net)
petri_utils.add_arc_from_to(transitions['N'], places['N_done'], net)

# 7. Closure (CL): N_done -> CL_done
petri_utils.add_arc_from_to(places['N_done'], transitions['CL'], net)
petri_utils.add_arc_from_to(transitions['CL'], places['CL_done'], net)

# Define initial and final markings
im = Marking()
im[places['C']] = 1  # Start with a token in the initial place 'C'

fm = Marking()
fm[places['CL_done']] = 1  # Final marking is when the claim is closed
```