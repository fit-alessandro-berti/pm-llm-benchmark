{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 1,
      "instances": [
        {
          "snippet": "`never_together` omits feasible scenario where 'Receive Order' and 'Dispatch' occur together",
          "why": "The constraint excludes successful orders by forbidding 'Receive Order' and 'Dispatch' in the same case, ignoring logical process flow.",
          "severity": "high"
        }
      ]
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 1,
      "instances": [
        {
          "snippet": "`activ_freq` set to exactly {1} for all activities",
          "why": "Assigning frequency {1} for all activities ignores the possibility of zero or multiple occurrences in complex processes, unsupported by prompt or domain logic.",
          "severity": "critical"
        }
      ]
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 2,
      "instances": [
        {
          "snippet": "`always_before` tuples reversed, e.g. ('Check Availability', 'Reserve Items')",
          "why": "The tuples contradict the intended semantics, reversing order and thus drawing conclusions unsupported by the actual definitions.",
          "severity": "high"
        },
        {
          "snippet": "`always_after` tuples reversed, e.g. ('Reserve Items', 'Check Availability')",
          "why": "The reversed tuples assert that activities occur in the opposite order, unsupported and contradicting the definitions and intended logical flow.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 1,
      "instances": [
        {
          "snippet": "`always_before` and `always_after` constraints contradict each other",
          "why": "The answer's tuples contradict within the same answer by reversing the flow of identical activity pairs between the two constraints.",
          "severity": "high"
        }
      ]
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 0,
      "instances": []
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 5
  }
}