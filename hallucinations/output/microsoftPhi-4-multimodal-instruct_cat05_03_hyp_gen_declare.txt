{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 0,
      "instances": []
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 3,
      "instances": [
        {
          "snippet": "The answer incorrectly states the model suggests E and C \"can coexist,\" whereas noncoexistence(E, C) explicitly forbids this.",
          "why": "The conclusion that E and C can coexist contradicts explicitly stated constraints, indicating an unsupported leap beyond given facts.",
          "severity": "high"
        },
        {
          "snippet": "Claims the model suggests E and C \"might perhaps occur together,\" opposite of what noncoexistence(E, C) dictates.",
          "why": "This explicitly contradicts the DECLARE model constraint, concluding incorrectly E and C coexistence without justification.",
          "severity": "critical"
        },
        {
          "snippet": "It makes confusing statements about E not being allowed when C is closed, but does not clearly identify anomalies from precedence(C, R) interaction.",
          "why": "The explanation draws conclusions that are not logically justified by the precedence rule and confuses constraints.",
          "severity": "medium"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 1,
      "instances": [
        {
          "snippet": "Answer states E and C \"can coexist\" but also implies noncoexistence forbids this, conflicting statements.",
          "why": "Within the same answer, it contradicts itself by both allowing coexistence and citing noncoexistence constraints.",
          "severity": "high"
        }
      ]
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 2,
      "instances": [
        {
          "snippet": "Query 1 uses c.claim_status = 'C' though claims table schema has no claim_status column.",
          "why": "The SQL syntax references a non-existent column, causing an invalid query.",
          "severity": "critical"
        },
        {
          "snippet": "Query 1 selects c.claim_id twice redundantly.",
          "why": "This is a syntax error leading to unnecessary duplication in SELECT clause.",
          "severity": "low"
        }
      ]
    },
    "4b_model_semantics_breach": {
      "count": 1,
      "instances": [
        {
          "snippet": "Query 3 INNER JOIN adjusters on ce.resource = ae.adjuster_id assumes resource always matches adjuster_id format.",
          "why": "This breaks schema semantics because resource can be system or adjuster ID; INNER JOIN wrongly filters out valid events.",
          "severity": "high"
        }
      ]
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 8
  }
}