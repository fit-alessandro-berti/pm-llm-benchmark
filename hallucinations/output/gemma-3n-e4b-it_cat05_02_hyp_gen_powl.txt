{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 0,
      "instances": []
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 5,
      "instances": [
        {
          "snippet": "The statement \"The model doesn't strictly enforce the completion of the loop (E, P) before moving to the XOR\" is incorrect",
          "why": "This conclusion conflicts with the evident presence of an explicit edge enforcing that the loop must complete before XOR, showing the claim isn't supported by given facts.",
          "severity": "high"
        },
        {
          "snippet": "JOIN adjusters a ON c.claim_id = a.adjuster_id is incorrect",
          "why": "The join condition is logically invalid since claim_id and adjuster_id are unrelated identifiers, invalidating the query's logic.",
          "severity": "critical"
        },
        {
          "snippet": "Query identifying skips counts claims where Notify Customer event occurred, which is opposite of 'skips'",
          "why": "The query's logic is fundamentally flawed, as it identifies events that happened rather than those skipped, invalidating its conclusion.",
          "severity": "critical"
        },
        {
          "snippet": "Query for 'stuck' claims uses MAX(ce.timestamp) < MAX(Close Claim) condition, selecting closed claims",
          "why": "This logic wrongly interprets normal behavior as stuck cases, leading to unsupported conclusions.",
          "severity": "high"
        },
        {
          "snippet": "QUERY 5's subquery MAX(timestamp) uncorrelated; comparison logic does not check assignment before evaluation",
          "why": "Using a global max timestamp and failing to focus on per-claim timings causes unsupported conclusions on adjuster assignment timing.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 0,
      "instances": []
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 0,
      "instances": []
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 5
  }
}