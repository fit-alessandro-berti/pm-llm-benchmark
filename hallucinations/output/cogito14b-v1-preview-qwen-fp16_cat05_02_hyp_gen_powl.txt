{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 0,
      "instances": []
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 5,
      "instances": [
        {
          "snippet": "Selects `submission_date` from `claim_events` (ce1), but this column exists in the `claims` table, not `claim_events`.",
          "why": "The conclusion that submission_date is in the wrong table is based on schema knowledge, but no evidence or sources justify this in the prompt; the query logic is incorrectly assumed.",
          "severity": "high"
        },
        {
          "snippet": "The query identifies claims closed ('C') without any preceding 'E' or 'P', but misses cases where C occurs after A but before E or P completion.",
          "why": "This logic fails to capture the full anomaly described, making an unsupported leap from problem to query adequacy.",
          "severity": "high"
        },
        {
          "snippet": "Query b) uses HAVING COUNT(DISTINCT activity) > 1, identifying claims with both 'E' and 'P', but fails to detect multiple occurrences of the same event type (e.g., multiple 'E's).",
          "why": "This logic incorrectly assumes that multiple different events equal multiple evaluations, which is unsupported by the stated anomaly and is logically flawed.",
          "severity": "high"
        },
        {
          "snippet": "Query c selects `ae.adjuster_id` without defining or joining alias `ae` and assumes `adjuster_id` in claim_events, which actually has `resource`.",
          "why": "This assumption about schema correctness is unsupported and results in invalid query logic, reflecting an unsupported leap.",
          "severity": "high"
        },
        {
          "snippet": "Query d's logic tests if C occurs before A, while the anomaly implies C occurs prematurely after A but before E or P; the query mismatches the anomaly description.",
          "why": "Mismatch between anomaly description and query logic shows unsupported inference about what the anomaly means and how to detect it.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 0,
      "instances": []
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 1,
      "instances": [
        {
          "snippet": "The query selects `ae.adjuster_id` but does not define or join the alias `ae`.",
          "why": "Selecting from an undefined alias causes a syntax error in SQL, invalidating the query as-is.",
          "severity": "critical"
        }
      ]
    },
    "4b_model_semantics_breach": {
      "count": 1,
      "instances": [
        {
          "snippet": "Query d uses `FROM adjusters a JOIN claims c ON TRUE`, causing a CROSS JOIN likely unintended and semantically incorrect in this context.",
          "why": "Using CROSS JOIN (join on TRUE) violates intended model semantics by linking uncorrelated tables, making the query logically flawed.",
          "severity": "high"
        }
      ]
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 7
  }
}