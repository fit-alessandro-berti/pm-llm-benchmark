{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 0,
      "instances": []
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 6,
      "instances": [
        {
          "snippet": "`equivalence: set()` is empty despite activ_freq requiring all activities to occur once.",
          "why": "The empty equivalence set contradicts the definition that any pair of activities have equal counts since all must occur once.",
          "severity": "high"
        },
        {
          "snippet": "`always_before` set only includes immediate pairs despite definition requiring all predecessors.",
          "why": "Only immediate succession pairs are included, missing all transitive predecessors contradicting the constraint definition.",
          "severity": "high"
        },
        {
          "snippet": "`always_after: set()` empty though logically it should mirror `always_before` pairs reversed.",
          "why": "Empty set contradicts the distinct semantics of always_after, which must include all pairs where one activity follows another.",
          "severity": "high"
        },
        {
          "snippet": "Claim that no `directly_follows` constraints exist despite linear sequential process.",
          "why": "Ignoring directly_follows is unjustified since direct succession clearly exists in a linear flow.",
          "severity": "medium"
        },
        {
          "snippet": "`activ_freq` assumes exactly one occurrence per activity despite 'complex' process description.",
          "why": "Strong simplification of the process disregards potential variations expected in a complex workflow.",
          "severity": "medium"
        },
        {
          "snippet": "Incorrect reasoning conflating `always_after` and reversed `always_before` constraints.",
          "why": "States `always_after` implies `always_before` in reverse, which is logically flawed and leads to wrong constraint sets.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 0,
      "instances": []
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 0,
      "instances": []
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": { "hallucinations_overall": 6 }
}