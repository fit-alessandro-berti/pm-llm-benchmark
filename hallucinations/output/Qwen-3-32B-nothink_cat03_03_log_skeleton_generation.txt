{
  "categories": {
    "1a_instruction_override": { "count": 0, "instances": [] },
    "1b_context_omission": { "count": 0, "instances": [] },
    "1c_prompt_contradiction": { "count": 0, "instances": [] },
    "2a_concept_fabrication": { "count": 0, "instances": [] },
    "2b_spurious_numeric": { "count": 0, "instances": [] },
    "2c_false_citation": { "count": 0, "instances": [] },
    "3a_unsupported_leap": {
      "count": 3,
      "instances": [
        {
          "snippet": "`activ_freq` set to `{1}` for all activities, ignoring process exceptions or alternative paths",
          "why": "Assuming all activities occur exactly once excludes realistic process variations and exceptions, thus unjustifying the rigid modeling approach.",
          "severity": "high"
        },
        {
          "snippet": "`always_before` pairs reversed, e.g., `('Check Availability', 'Reserve Items')` instead of `(Reserve Items, Check Availability)`",
          "why": "The answer wrongly uses the pairs in reverse order, misunderstanding the semantics of the constraint, leading to incorrect conclusions about ordering.",
          "severity": "high"
        },
        {
          "snippet": "`always_after` pairs reversed, e.g., `('Reserve Items', 'Check Availability')` instead of `(Check Availability, Reserve Items)`",
          "why": "Similar to `always_before`, pairs are inverted, invalidating the constraint and showing flawed reasoning about event order.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 1,
      "instances": [
        {
          "snippet": "`never_together` constraint conflicts with `activ_freq={1}` for all activities",
          "why": "Both activities in `never_together` pairs are forced to occur exactly once, directly contradicting the mutual exclusion requirement in the model.",
          "severity": "critical"
        }
      ]
    },
    "3c_circular_reasoning": { "count": 0, "instances": [] },
    "4a_syntax_error": { "count": 0, "instances": [] },
    "4b_model_semantics_breach": {
      "count": 2,
      "instances": [
        {
          "snippet": "`equivalence` constraint `('Invoice Customer', 'Record Payment')` fails to model payment non-occurrence",
          "why": "The constraint unrealistically enforces equal counts assuming payment always follows invoicing, breaching realistic semantics of optional events.",
          "severity": "medium"
        },
        {
          "snippet": "`directly_follows` with `activ_freq={1}` enforces a strict linear sequence disallowing parallelism or alternatives",
          "why": "This rigid sequencing violates realistic process semantics where activities can be concurrent or optional in a complex process.",
          "severity": "medium"
        }
      ]
    },
    "4c_visual_descr_mismatch": { "count": 0, "instances": [] }
  },
  "totals": { "hallucinations_overall": 7 }
}