{
  "categories": {
    "1a_instruction_override": { "count": 0, "instances": [] },
    "1b_context_omission": {
      "count": 3,
      "instances": [
        {
          "snippet": "missed that case_id = 1003 is also missing the 'Validate Stock' activity",
          "why": "The response omitted a prompt-required anomaly detection for missing activities in case 1003, dropping needed context for complete anomaly identification.",
          "severity": "medium"
        },
        {
          "snippet": "missed that case_id = 1004 is missing the 'Perform Credit Check' activity",
          "why": "The answer did not explicitly detect a prompt-relevant missing activity anomaly, omitting key context despite partial query coverage.",
          "severity": "medium"
        },
        {
          "snippet": "description for Anomaly 2â€¦ incorrectly cites case 1003's \"Confirm Shipment\" after \"Ship Goods\" as missing; it's ordering issue",
          "why": "Misclassifying an ordering problem as a missing event shows omission of proper contextual understanding of anomaly types.",
          "severity": "medium"
        }
      ]
    },
    "1c_prompt_contradiction": { "count": 0, "instances": [] },
    "2a_concept_fabrication": { "count": 0, "instances": [] },
    "2b_spurious_numeric": { "count": 0, "instances": [] },
    "2c_false_citation": { "count": 0, "instances": [] },
    "3a_unsupported_leap": {
      "count": 3,
      "instances": [
        {
          "snippet": "Query 1 merely confirms specific, manually identified out-of-order instances by hardcoding case_id...",
          "why": "The query lacks justification as a general method, making an unsupported leap from data to detection method.",
          "severity": "high"
        },
        {
          "snippet": "Query 2 only checks a limited subset of activities, missing checks for others like 'Perform Credit Check'",
          "why": "The query logically omits required checks stated in prompt, leading to unsupported conclusions about missing activities.",
          "severity": "high"
        },
        {
          "snippet": "Query 7 joins on resource equality yet filters for differing roles, making query logically unsound",
          "why": "The reasoning about role mismatches is unsupported because the self-join condition contradicts the intended logic for role comparison.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": { "count": 0, "instances": [] },
    "3c_circular_reasoning": { "count": 0, "instances": [] },
    "4a_syntax_error": { "count": 0, "instances": [] },
    "4b_model_semantics_breach": { "count": 0, "instances": [] },
    "4c_visual_descr_mismatch": { "count": 0, "instances": [] }
  },
  "totals": { "hallucinations_overall": 6 }
}