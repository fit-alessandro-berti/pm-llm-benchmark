{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 0,
      "instances": []
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 5,
      "instances": [
        {
          "snippet": "The answer claims `precedence(R, C)` means \"C is directly preceded by R\". This is incorrect.",
          "why": "The conclusion that precedence means direct precedence contradicts the true meaning that R must have occurred at some point before C; the answer leaps to an incorrect interpretation.",
          "severity": "critical"
        },
        {
          "snippet": "\"responded_existence(A, E)\" is described as a \"reversed dependency\" when it means \"if A occurs, then E must occur\".",
          "why": "Misinterpreting the dependency direction shows an unsupported leap in reasoning about the event order constraints.",
          "severity": "high"
        },
        {
          "snippet": "\"responded_existence(A, E)\" combined with \"noncoexistence(E, C)\" making it impossible to satisfy \"existence(C)\" is missed.",
          "why": "Failing to recognize the critical contradiction is an unsupported leap in reasoning about model feasibility.",
          "severity": "critical"
        },
        {
          "snippet": "Claim that `init(R)` and `precedence(R, C)` create a cycle is logically false.",
          "why": "The conclusion about a cyclic conflict is unsupported by the actual semantics of the model constraints given.",
          "severity": "high"
        },
        {
          "snippet": "Query 2 tests if C occurs *before* E to verify noncoexistence but fails to test coexistence regardless of order.",
          "why": "Drawing the conclusion that this query correctly tests the rule is an unsupported leap; the logic does not align with the constraint.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 0,
      "instances": []
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 1,
      "instances": [
        {
          "snippet": "Alias `latest_c_timestamp` is assigned to a MIN function in query 4, which is misleading.",
          "why": "Using an alias implying 'latest' for a minimum timestamp violates semantic conventions and compromises clarity of model semantics.",
          "severity": "medium"
        }
      ]
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 6
  }
}