{
  "categories": {
    "1a_instruction_override": { "count": 0, "instances": [] },
    "1b_context_omission":    { "count": 0, "instances": [] },
    "1c_prompt_contradiction":{ "count": 0, "instances": [] },
    "2a_concept_fabrication": { "count": 0, "instances": [] },
    "2b_spurious_numeric":    { "count": 0, "instances": [] },
    "2c_false_citation":      { "count": 0, "instances": [] },
    "3a_unsupported_leap":    { 
      "count": 9, 
      "instances": [
        {
          "snippet": "('QC', 'PO'): Flawed. If Quality Check (QC) occurs and fails, Pack Order (PO) might not occur at all...",
          "why": "The conclusion that QC and PO must have the same occurrences is unjustified given conditional logic such as QC failures preventing PO.",
          "severity": "high"
        },
        {
          "snippet": "('IC', 'RP'): Major flaw. If Invoice Customer (IC) occurs, it does not guarantee Record Payment (RP) occurs...",
          "why": "It assumes record payment always occurs with invoice, ignoring possibility of non-payment, invalidating strict equivalence.",
          "severity": "high"
        },
        {
          "snippet": "Pairs like ('RO', 'CA') indicate strong sequential dependency rather than strict equivalence...",
          "why": "Interpreting these pairs as equivalence rather than sequential constraints misrepresents process logic.",
          "severity": "medium"
        },
        {
          "snippet": "All 'always_before' tuples reversed based on definition and comments: tuples state wrong event order.",
          "why": "This systematic inversion contradicts the constraint definition and the intended meaning, severely misleading interpretation.",
          "severity": "high"
        },
        {
          "snippet": "('CA', 'RI'): Flawed. If CA occurs but items unavailable, RI might not occur. Constraint implies RI must occur if CA does.",
          "why": "It incorrectly concludes that Reserve Items always follows Check Availability despite possible failures.",
          "severity": "high"
        },
        {
          "snippet": "('QC', 'PO'): Flawed under 'always_after'. If QC occurs but fails, PO might not occur as stated.",
          "why": "Assumes mandatory following activity ignoring conditional failure paths, resulting in unjustified conclusions.",
          "severity": "high"
        },
        {
          "snippet": "('IC', 'RP'): Major flaw in 'always_after'. Record Payment not guaranteed after Invoice Customer due to possible non-payment.",
          "why": "Draws invalid conclusion that payment recording always follows invoicing, ignoring realistic exceptions.",
          "severity": "high"
        },
        {
          "snippet": "In 'never_together', pairs like ('RO', 'GSL') claimed mutually exclusive despite their coexistence in normal cases.",
          "why": "Misinterprets the 'never_together' constraint by providing pairs that actually co-occur, leading to false exclusivity claims.",
          "severity": "critical"
        },
        {
          "snippet": "('IC', 'RI') also wrongly identified as mutually exclusive activities in 'never_together'.",
          "why": "Shows fundamental misunderstanding of exclusivity constraint by listing activities that occur together.",
          "severity": "critical"
        }
      ]
    },
    "3b_self_contradiction":  { "count": 0, "instances": [] },
    "3c_circular_reasoning":  { "count": 0, "instances": [] },
    "4a_syntax_error":        { "count": 0, "instances": [] },
    "4b_model_semantics_breach": { 
      "count": 3, 
      "instances": [
        {
          "snippet": "Activity Occurrences 'RO': {0,1} implying possible absence of Receive Order in a case.",
          "why": "Claims that order receipt might be zero times per case which contradicts expected scenario semantics.",
          "severity": "high"
        },
        {
          "snippet": "'QC': {1} ignoring possible multiple quality checks in a complex process scenario.",
          "why": "Oversimplifies activity frequency, breaking realistic process semantics in complex scenarios.",
          "severity": "medium"
        },
        {
          "snippet": "'RP': {1} assuming mandatory payment recording, ignoring cases where payment may not occur.",
          "why": "Misrepresents domain semantics by forcing exact one occurrence despite possible non-payment cases.",
          "severity": "high"
        }
      ]
    },
    "4c_visual_descr_mismatch": { "count": 0, "instances": [] }
  },
  "totals": { "hallucinations_overall": 12 }
}