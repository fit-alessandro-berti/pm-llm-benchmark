{
  "categories": {
    "1a_instruction_override": { "count": 0, "instances": [] },
    "1b_context_omission":    { "count": 0, "instances": [] },
    "1c_prompt_contradiction":{ "count": 0, "instances": [] },
    "2a_concept_fabrication": { "count": 0, "instances": [] },
    "2b_spurious_numeric":    { "count": 0, "instances": [] },
    "2c_false_citation":      { "count": 0, "instances": [] },
    "3a_unsupported_leap":    { "count": 0, "instances": [] },
    "3b_self_contradiction":  { "count": 0, "instances": [] },
    "3c_circular_reasoning":  { "count": 0, "instances": [] },
    "4a_syntax_error":        { "count": 0, "instances": [] },
    "4b_model_semantics_breach": { "count": 3, "instances": [
      {
        "snippet": "including the children of an OperatorPOWL node ... as sibling nodes alongside the operator",
        "why": "This violates the modelling rule that operators encapsulate their children, so children should not be siblings in the same node list, making the model structure invalid.",
        "severity": "critical"
      },
      {
        "snippet": "root.order.add_edge(DataCompletenessCheck, loop) ... connecting a child node to its own parent operator",
        "why": "Edges should flow from preceding nodes into operator nodes, not from children back to the operator, violating control flow logic.",
        "severity": "high"
      },
      {
        "snippet": "root.order.add_edge(CulturalFitCheck, ManagerialReview) and root.order.add_edge(CommunityAffiliationCheck, ManagerialReview)",
        "why": "Edges incorrectly bypass the 'xor' operator, breaking the encapsulating operator's control-flow semantics in the partial order.",
        "severity": "high"
      }
    ] },
    "4c_visual_descr_mismatch": { "count": 0, "instances": [] }
  },
  "totals": { "hallucinations_overall": 3 }
}