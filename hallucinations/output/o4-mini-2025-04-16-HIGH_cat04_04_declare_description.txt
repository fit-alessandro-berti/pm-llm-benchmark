{
  "categories": {
    "1a_instruction_override": {
      "count": 1,
      "instances": [
        {
          "snippet": "the answer claims the process is enforced by chainprecedence(Authorize_Contract_Terms immediately after Quality_Assurance_Review)",
          "why": "The answer invents the 'chainprecedence' constraint incorrectly, overriding the actual given model constraints, ignoring the provided chainprecedence involving 'Authorize_Contract_Terms' and 'Preliminary_Credit_Check'.",
          "severity": "critical"
        }
      ]
    },
    "1b_context_omission": {
      "count": 0,
      "instances": []
    },
    "1c_prompt_contradiction": {
      "count": 1,
      "instances": [
        {
          "snippet": "using chainsuccession(Quality_Assurance_Review -> Assemble_Loan_Offer_Package) ... contradicts ... Assembly (Step 4) happens before QA (Step 5)",
          "why": "The answer contradicts its own sequence by placing Assembly before QA while the constraint requires immediate succession the other way around.",
          "severity": "high"
        }
      ]
    },
    "2a_concept_fabrication": {
      "count": 2,
      "instances": [
        {
          "snippet": "fabrication of chainprecedence constraint ... not in the provided model",
          "why": "The answer invents a 'chainprecedence' constraint unsupported by the source DECLARE model.",
          "severity": "critical"
        },
        {
          "snippet": "fabrication of altsuccession constraint ... claiming guaranteed pair in that order",
          "why": "The response falsely invents an 'altsuccession' constraint linking 'Transfer_Funds' and 'Notify_Customer' that does not exist in the model.",
          "severity": "critical"
        }
      ]
    },
    "2b_spurious_numeric": {
      "count": 1,
      "instances": [
        {
          "snippet": "response(Receive_Application -> Preliminary_Credit_Check) means ... must run exactly one credit check",
          "why": "The answer adds 'exactly one' which does not come from the 'response' constraint but from a different one, incorrectly attributing numeric specificity.",
          "severity": "medium"
        }
      ]
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 1,
      "instances": [
        {
          "snippet": "response claims responded_existence means 'as soon as you build the package... you must queue it for QA'",
          "why": "The conclusion interprets temporal ordering from a constraint that only ensures coexistence, an unsupported leap beyond its actual semantics.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 0,
      "instances": []
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 0,
      "instances": []
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": { "hallucinations_overall": 6 }
}