{
  "categories": {
    "1a_instruction_override": { "count": 0, "instances": [] },
    "1b_context_omission": { "count": 0, "instances": [] },
    "1c_prompt_contradiction": { "count": 0, "instances": [] },
    "2a_concept_fabrication": { "count": 0, "instances": [] },
    "2b_spurious_numeric": { "count": 0, "instances": [] },
    "2c_false_citation": { "count": 0, "instances": [] },
    "3a_unsupported_leap": {
      "count": 5,
      "instances": [
        {
          "snippet": "Uses loop = OperatorPOWL(operator=Operator.LOOP, children=[RequestMoreInfo, DataCompletenessCheck]) where RequestMoreInfo runs before the check",
          "why": "This ordering contradicts the textual description requiring DataCompletenessCheck first, then RequestMoreInfo only on incompleteness, making the reasoning unsupported.",
          "severity": "high"
        },
        {
          "snippet": "Defines XOR using new Transition nodes wrapping StandardCulturalFitCheck and CommunityAffiliationCheck",
          "why": "Creating redundant branches instead of directly using activities inside XOR incorrectly models the process choice, an unjustified leap in logic.",
          "severity": "high"
        },
        {
          "snippet": "Includes StandardCulturalFitCheck and CommunityAffiliationCheck as top-level nodes besides within XOR",
          "why": "This conflicts with correct hierarchy semantics, confusing node membership and edge definitions, invalidating the structure.",
          "severity": "high"
        },
        {
          "snippet": "Model 2 wraps a single child in an XOR operator where a simple sequence is intended",
          "why": "Using XOR on a single child is nonsensical and incorrect, an unsupported leap in modeling the described process.",
          "severity": "high"
        },
        {
          "snippet": "Edges connect misplaced nodes (e.g., from XOR node to branch activities) inconsistent with intended control flow",
          "why": "This edge structure contradicts the correct order implied by the operators, invalidating the logic of process sequencing.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": { "count": 0, "instances": [] },
    "3c_circular_reasoning": { "count": 0, "instances": [] },
    "4a_syntax_error": { "count": 0, "instances": [] },
    "4b_model_semantics_breach": {
      "count": 3,
      "instances": [
        {
          "snippet": "Loop defined with children=[RequestMoreInfo, DataCompletenessCheck], reversing the intended logical control flow",
          "why": "Violates the expected POWL loop semantics where the condition check should precede the loop body, a clear semantic breach.",
          "severity": "high"
        },
        {
          "snippet": "Including branch activities as nodes in StrictPartialOrder alongside XOR operator node",
          "why": "Nodes should be either atomic activities or operators; mixing them here breaks the partial order model semantics.",
          "severity": "high"
        },
        {
          "snippet": "Defining XOR operator with a single child node in Model 2",
          "why": "XOR operator must have multiple branches for choice; a single branch violates semantic rules of POWL modeling.",
          "severity": "medium"
        }
      ]
    },
    "4c_visual_descr_mismatch": { "count": 0, "instances": [] }
  },
  "totals": { "hallucinations_overall": 8 }
}