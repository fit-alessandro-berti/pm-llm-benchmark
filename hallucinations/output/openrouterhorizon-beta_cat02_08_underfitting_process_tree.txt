{
  "categories": {
    "1a_instruction_override": { "count": 0, "instances": [] },
    "1b_context_omission":    { "count": 0, "instances": [] },
    "1c_prompt_contradiction":{ "count": 0, "instances": [] },
    "2a_concept_fabrication": { "count": 0, "instances": [] },
    "2b_spurious_numeric":    { "count": 0, "instances": [] },
    "2c_false_citation":      { "count": 0, "instances": [] },
    "3a_unsupported_leap":    { "count": 0, "instances": [] },
    "3b_self_contradiction":  { 
      "count": 1, 
      "instances": [
        {
          "snippet": "It correctly states that the success branch does not contain a Close_Order, but then incorrectly concludes that this leads to a double-close on the success path.",
          "why": "The answer states the success branch lacks a Close_Order, then later claims a double-close occurs thereâ€”these are mutually exclusive, contradicting claims about the model's behavior.",
          "severity": "high"
        }
      ]
    },
    "3c_circular_reasoning":  { "count": 0, "instances": [] },
    "4a_syntax_error":        { "count": 0, "instances": [] },
    "4b_model_semantics_breach": { 
      "count": 1, 
      "instances": [
        {
          "snippet": "The final example in the \"Other\" section (`Receive_Order, Check_Inventory, Authorize_Payment, Close_Order`) is also impossible. The PARALLEL operator...requires that all of its children...are executed before the flow can continue.",
          "why": "A trace with skipped parallel branches violates the process tree formalism, indicating a breach of process modelling notation.",
          "severity": "high"
        }
      ]
    },
    "4c_visual_descr_mismatch": { "count": 0, "instances": [] }
  },
  "totals": { "hallucinations_overall": 2 }
}