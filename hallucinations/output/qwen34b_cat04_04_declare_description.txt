{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 2,
      "instances": [
        {
          "snippet": "answer completely overlooks this critical implication. It describes `Transfer_Funds` as a normal step in the process.",
          "why": "The model's `noncoexistence(Transfer_Funds, Receive_Application)` constraint makes `Transfer_Funds` impossible since `Receive_Application` must occur; ignoring this is dropping needed prompt context.",
          "severity": "critical"
        },
        {
          "snippet": "answer fails to address the actual `chainprecedence(ACT, PCC)` constraint and its severe implications for the process order.",
          "why": "Ignoring the specific semantics of the `chainprecedence` constraint from the prompt results in missing critical context required for accurate interpretation.",
          "severity": "high"
        }
      ]
    },
    "1c_prompt_contradiction": {
      "count": 1,
      "instances": [
        {
          "snippet": "\"Constraint: `chainprecedence` ensures this step is preceded by the quality review.\"",
          "why": "The answer states the opposite of what the prompt specifies for the `chainprecedence(Authorize_Contract_Terms, Preliminary_Credit_Check)` constraint, misattributing the relation to a different pair.",
          "severity": "high"
        }
      ]
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 4,
      "instances": [
        {
          "snippet": "Answer states altprecedence for TF ensures TF occurs after Notify_Customer.",
          "why": "The reasoning about `altprecedence` and `altresponse` constraints is confused and contradicts the complex logical implications, constituting an unsupported logical leap.",
          "severity": "high"
        },
        {
          "snippet": "Answer states noncoexistence prevents Notify_Customer from occurring independently, misattributing the TF-RA constraint.",
          "why": "This misinterpretation makes an unsupported leap about implications of constraints, incorrectly linking unrelated activities.",
          "severity": "high"
        },
        {
          "snippet": "Answer says `responded_existence` means readiness before disbursement.",
          "why": "The prompt states this constraint only requires QAR to occur if ALOP does, but the answer implies temporal readiness, unsupported by the model semantics.",
          "severity": "medium"
        },
        {
          "snippet": "Answer claims coexistence allows GAD to coexist with ACT, lacking that they must co-occur.",
          "why": "Describing a strict constraint as a mere allowance is an unsupported simplification.",
          "severity": "medium"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 0,
      "instances": []
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 0,
      "instances": []
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 7
  }
}