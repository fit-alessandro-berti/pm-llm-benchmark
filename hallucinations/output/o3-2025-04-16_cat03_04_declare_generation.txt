{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 0,
      "instances": []
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 6,
      "instances": [
        {
          "snippet": "The code implements Precedence(LT, PC), which means \"PC can occur only if LT happened before\"...",
          "why": "This reverses the logical sequence expected (prototype must be created before testing), a key unsupported leap from the comment to the implementation.",
          "severity": "critical"
        },
        {
          "snippet": "The code implements Chain Precedence(FL, MP), meaning \"MP can occur only if FL was immediately before\"...",
          "why": "This is logically nonsensical as Final Launch is the last event; reversing the directionality is a fundamental unsupported leap.",
          "severity": "critical"
        },
        {
          "snippet": "The set ('TFC', 'CE') appears in responded_existence, response, and succession constraints simultaneously.",
          "why": "Defining all three constraints without understanding their hierarchical implication is an unsupported leap in reasoning about model correctness.",
          "severity": "high"
        },
        {
          "snippet": "responded_existence(('MP', 'FL')) implies every marketing plan leads to a final launch.",
          "why": "This assumes unlikely real-world behavior without justification, constituting an unsupported leap from domain knowledge to model design.",
          "severity": "medium"
        },
        {
          "snippet": "coexistence(('LT', 'UT')) asserts symmetric mandatory presence of both testing activities.",
          "why": "This overrestrictive assumption may not always hold, lacking justification and representing an unsupported leap in constraint application.",
          "severity": "medium"
        },
        {
          "snippet": "Comment states 'and vice-versa' for Chain Succession(AG, FL), implying FL->AG relationship.",
          "why": "This claim misinterprets the semantics of chain succession constraints, a logical leap contradicting known definitions.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 0,
      "instances": []
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 0,
      "instances": []
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 6
  }
}