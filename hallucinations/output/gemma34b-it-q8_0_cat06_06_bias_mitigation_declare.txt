{
  "categories": {
    "1a_instruction_override": { "count": 0, "instances": [] },
    "1b_context_omission": { "count": 0, "instances": [] },
    "1c_prompt_contradiction": { "count": 0, "instances": [] },
    "2a_concept_fabrication": { "count": 0, "instances": [] },
    "2b_spurious_numeric": { "count": 0, "instances": [] },
    "2c_false_citation": { "count": 0, "instances": [] },
    "3a_unsupported_leap": {
      "count": 5,
      "instances": [
        {
          "snippet": "`precedence: {\"CheckApplicantRace\": {\"BiasMitigationCheck\": ...}}` enforces BiasMitigationCheck precedes CheckApplicantRace",
          "why": "The conclusion drawn about the intended order contradicts DECLARE semantics; the actual constraint enforces the opposite event order from what is logically needed for bias mitigation.",
          "severity": "high"
        },
        {
          "snippet": "`precedence: {\"BiasMitigationCheck\": {\"Approve\": ...}}` means Approve must precede BiasMitigationCheck",
          "why": "This reverses the logical order where the bias mitigation check should precede the approval decision, contradicting the stated goal.",
          "severity": "high"
        },
        {
          "snippet": "`precedence: {\"BiasMitigationCheck\": {\"Reject\": ...}}` means Reject must precede BiasMitigationCheck",
          "why": "Similar reasoning: the constraint mandates a sequence opposite to the one required, leading to an unsupported conclusion.",
          "severity": "high"
        },
        {
          "snippet": "`succession: {\"ManualReview\": {\"Approve\": ...}}` means Approve must follow ManualReview and vice versa",
          "why": "Assuming the constraint represents a weaker relationship than actual DECLARE semantics; mutual existence is enforced, which is stronger than intended, leading to flawed reasoning.",
          "severity": "medium"
        },
        {
          "snippet": "Explanations assert that constraints model review and decision order correctly, but constraints enforce contradictory sequencing",
          "why": "The explanation falsely claims intended behavior which contradicts the actual constraints implemented, demonstrating an unsupported logical leap.",
          "severity": "high"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 1,
      "instances": [
        {
          "snippet": "Having both `succession(ManualReview, Approve)` and `succession(ManualReview, Reject)` simultaneously is contradictory",
          "why": "Simultaneously requiring both approve and reject to follow manual review is logically inconsistent for exclusive decision outcomes.",
          "severity": "high"
        }
      ]
    },
    "3c_circular_reasoning": { "count": 0, "instances": [] },
    "4a_syntax_error": {
      "count": 1,
      "instances": [
        {
          "snippet": "\"manual_review\" and \"bias_mitigation_check\" added directly in root of declare_model dictionary",
          "why": "Violates the required DECLARE dictionary structure by placing these entries at root instead of under constraint type keys, leading to structural errors.",
          "severity": "high"
        }
      ]
    },
    "4b_model_semantics_breach": {
      "count": 2,
      "instances": [
        {
          "snippet": "\"manual_review\" and \"bias_mitigation_check\" keys overwritten over existing precedence and succession keys",
          "why": "Overwriting existing constraint keys instead of merging breaks the expected dictionary semantics, potentially losing existing constraints.",
          "severity": "medium"
        },
        {
          "snippet": "Use of `succession` constraint to enforce sequence between review and decision forces mutual existence",
          "why": "This misapplication breaches expected DECLARE semantics, as `succession` enforces both forward and backward requirements, likely unintended here.",
          "severity": "medium"
        }
      ]
    },
    "4c_visual_descr_mismatch": { "count": 0, "instances": [] }
  },
  "totals": { "hallucinations_overall": 10 }
}