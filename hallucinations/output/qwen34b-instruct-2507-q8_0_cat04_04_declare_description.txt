{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 1,
      "instances": [
        {
          "snippet": "The answer misses the gravity of noncoexistence, allowing Transfer_Funds and Receive_Application together",
          "why": "The answer silently omits the critical fact that the noncoexistence constraint forbids these two activities ever co-occurring, which is context needed to interpret the model.",
          "severity": "high"
        }
      ]
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 2,
      "instances": [
        {
          "snippet": "Invents a 'fallback' functionality for altsuccession constraint",
          "why": "The answer fabricates a concept that altsuccession allows process fallback, which is not defined by the formal DECLARE semantics.",
          "severity": "high"
        },
        {
          "snippet": "Incorrect explanation of responded_existence constraint as 'only occurs if credit check has been made'",
          "why": "This fabricated interpretation has no basis in formal weight or definition of responded_existence and misleads the meaning of this constraint.",
          "severity": "high"
        }
      ]
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 4,
      "instances": [
        {
          "snippet": "Claims chainsuccession means 'offer only assembled after review' reversing the real logic",
          "why": "The conclusion reverses the exact semantics of chainsuccession, unsupported by the model text or logic.",
          "severity": "critical"
        },
        {
          "snippet": "Claims altresponse ensures transfer after notification, the opposite of its semantics",
          "why": "The answer draws a conclusion directly opposite to the formal meaning of altresponse without justification.",
          "severity": "critical"
        },
        {
          "snippet": "Misses that noncoexistence forbids both activities together, wrongly treats as precedence",
          "why": "The leap to treat noncoexistence as a precedence-like rule is unsupported by the original model semantics.",
          "severity": "high"
        },
        {
          "snippet": "Presents mutually exclusive constraints (altprecedence and altresponse between Notify and Transfer) as consistent",
          "why": "The conclusion that conflicting constraints can coexist lacks any supporting reasoning or acknowledgement of the contradiction.",
          "severity": "critical"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 1,
      "instances": [
        {
          "snippet": "Produces contradictory meanings for Notify_Customer and Transfer_Funds ordering",
          "why": "Within the same answer, the given constraints imply both Notify before Transfer and Notify after Transfer, inconsistent with itself.",
          "severity": "critical"
        }
      ]
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 0,
      "instances": []
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 9
  }
}