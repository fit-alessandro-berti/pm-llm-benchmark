{
  "categories": {
    "1a_instruction_override": {
      "count": 0,
      "instances": []
    },
    "1b_context_omission": {
      "count": 1,
      "instances": [
        {
          "snippet": "'activ_freq' set to {1} for every activity implying linear happy path",
          "why": "The simplification omits the complexity of alternative paths, optional steps, and loops described in the prompt, losing context critical to modeling the process.",
          "severity": "high"
        }
      ]
    },
    "1c_prompt_contradiction": {
      "count": 0,
      "instances": []
    },
    "2a_concept_fabrication": {
      "count": 0,
      "instances": []
    },
    "2b_spurious_numeric": {
      "count": 0,
      "instances": []
    },
    "2c_false_citation": {
      "count": 0,
      "instances": []
    },
    "3a_unsupported_leap": {
      "count": 3,
      "instances": [
        {
          "snippet": "every pair in 'always_before' inverted; ('Check Availability', 'Reserve Items') instead of ('Reserve Items', 'Check Availability')",
          "why": "The inversion contradicts the provided definition and incorrectly models the control flow, an unsupported logical leap from the defined constraints.",
          "severity": "critical"
        },
        {
          "snippet": "'directly_follows' includes ('Dispatch', 'Invoice Customer') but states they could be parallel",
          "why": "Claiming both immediate succession and possible parallelism for the same pair is a direct contradiction and unsupported by logical constraints.",
          "severity": "high"
        },
        {
          "snippet": "'always_after' incomplete and confused with 'always_before' section",
          "why": "Failing to correctly and completely model 'always_after' relationships indicates unsupported logical conclusions about the constraints' roles.",
          "severity": "medium"
        }
      ]
    },
    "3b_self_contradiction": {
      "count": 1,
      "instances": [
        {
          "snippet": "'directly_follows' has ('Dispatch', 'Invoice Customer') but explanation says it \"could be parallel\"",
          "why": "The explanation contradicts the inclusion of this strictly sequential pair, causing a clear internal conflict.",
          "severity": "high"
        }
      ]
    },
    "3c_circular_reasoning": {
      "count": 0,
      "instances": []
    },
    "4a_syntax_error": {
      "count": 0,
      "instances": []
    },
    "4b_model_semantics_breach": {
      "count": 1,
      "instances": [
        {
          "snippet": "'never_together' computed as some_set.difference(some_set) instead of set()",
          "why": "Using a convoluted and incorrect method to produce an empty set violates clear model semantics and coding best practices.",
          "severity": "low"
        }
      ]
    },
    "4c_visual_descr_mismatch": {
      "count": 0,
      "instances": []
    }
  },
  "totals": {
    "hallucinations_overall": 7
  }
}