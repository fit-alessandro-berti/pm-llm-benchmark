Certainly! Below is Python code using `pm4py` to construct an **accepting Petri net** for the described insurance claim management process, complete with initial and final markings.  
The design covers all steps—including two loops: one for incomplete documents (repeating **RDS** after **DV**) and one for repeated **in-depth investigations** after **FC**.

---

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Initialise the Petri net object
net = PetriNet("Insurance Claim Management")

# --- Places ---
s = PetriNet.Place("start")
p_cr = PetriNet.Place("after_claim_registration")
p_dv = PetriNet.Place("after_document_verification")
p_rds = PetriNet.Place("awaiting_document_resubmission")
p_fc = PetriNet.Place("after_fraud_check")
p_ii = PetriNet.Place("in_investigation")
p_ca = PetriNet.Place("after_claim_assessment")
p_ap = PetriNet.Place("after_approval")
p_p = PetriNet.Place("after_payment")
p_n = PetriNet.Place("after_notification")
p_cl = PetriNet.Place("closed")      # final marking here

net.places.update([s, p_cr, p_dv, p_rds, p_fc, p_ii, p_ca, p_ap, p_p, p_n, p_cl])

# --- Transitions (label if visible, None if invisible) ---
t_c = PetriNet.Transition("file_claim", label="C")     # Customer files claim
t_cr = PetriNet.Transition("register_claim", label="CR")
t_dv = PetriNet.Transition("document_verification", label="DV")
t_rds = PetriNet.Transition("re_submit_documents", label="RDS")
t_fc = PetriNet.Transition("fraud_check", label="FC")
t_ii = PetriNet.Transition("in_depth_investigation", label="II")
t_ca = PetriNet.Transition("claim_assessment", label="CA")
t_ap = PetriNet.Transition("approval", label="AP")
t_p = PetriNet.Transition("payment", label="P")
t_n = PetriNet.Transition("notification", label="N")
t_cl = PetriNet.Transition("closure", label="CL")

net.transitions.update([t_c, t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_p, t_n, t_cl])

# --- Arcs: sequence plus loops ---

# Initial step
petri_utils.add_arc_from_to(s, t_c, net)
petri_utils.add_arc_from_to(t_c, p_cr, net)
# Claim Registration
petri_utils.add_arc_from_to(p_cr, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_dv, net)
# Document Verification
petri_utils.add_arc_from_to(p_dv, t_dv, net)

# Outcome of DV:
# 1. If docs OK, continue to Fraud Check
petri_utils.add_arc_from_to(t_dv, p_fc, net)
# 2. If docs NOT OK, loop via Re-Document Submission
petri_utils.add_arc_from_to(t_dv, p_rds, net)
petri_utils.add_arc_from_to(p_rds, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_dv, net)  # loop back to DV

# Fraud Check
petri_utils.add_arc_from_to(p_fc, t_fc, net)

# Outcome of FC:
# 1. If OK, continue to Claim Assessment
petri_utils.add_arc_from_to(t_fc, p_ca, net)
# 2. If doubts, loop to In-depth Investigation
petri_utils.add_arc_from_to(t_fc, p_ii, net)
petri_utils.add_arc_from_to(p_ii, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_fc, net)  # loop back to FC

# Claim Assessment
petri_utils.add_arc_from_to(p_ca, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_ap, net)
# Approval
petri_utils.add_arc_from_to(p_ap, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_p, net)
# Payment
petri_utils.add_arc_from_to(p_p, t_p, net)
petri_utils.add_arc_from_to(t_p, p_n, net)
# Notification
petri_utils.add_arc_from_to(p_n, t_n, net)
petri_utils.add_arc_from_to(t_n, p_cl, net)
# Closure (final step)
petri_utils.add_arc_from_to(p_cl, t_cl, net)  # Optionally, if you want a "really final" step

# --- Initial and Final Marking ---
im = Marking()
im[s] = 1   # Token at 'start'

fm = Marking()
fm[p_cl] = 1   # Token at 'closed'

# (Optional: remove end place if you want to show only final transition firing, as in your sample.)
# For most process mining, leaving the closed place is good practice.

# --- Done. net, im, fm define the accepting Petri net for your process.
```

---

### **Summary of Workflow in this Model:**

- **Claim arrives:** (start)  `C`  after_claim_registration  
- **Register claim:** `CR`  after_document_verification  
- **Document verification:** `DV`  branching:  
  - If incomplete:  awaiting_document_resubmission  `RDS`  (loop)  
  - If OK:  after_fraud_check  
- **Fraud check:** `FC`  branching:  
  - If OK:  after_claim_assessment  
  - If in-depth needed:  in_investigation  `II`  (loop back to FC)  
- **Assessment:** `CA`  after_approval  
- **Approval needed:** `AP`  after_payment  
- **Payment:** `P`  after_notification  
- **Notify customer:** `N`  closed  
- **Final closure:** `CL` (optional)

---

**The `net`, `im`, and `fm` objects are your accepting Petri net.**  
They can be directly used for process mining or conformance checking in pm4py.