To solve this problem, we can use DuckDB's SQL capabilities, including window functions and CTEs (Common Table Expressions). Here's the complete SQL query that addresses all the requirements:

```sql
WITH filtered_cases AS (
  SELECT
    case_id,
    activity,
    timestamp,
    LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
    LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
    LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS confirm_order_timestamp
  FROM
    event_log
),
excluded_cases AS (
  SELECT DISTINCT
    case_id
  FROM
    filtered_cases
  WHERE
    activity = 'Approve Purchase Requisition'
    AND next_activity = 'Create Order'
    AND next_next_activity = 'Confirm Order'
    AND DATE_DIFF('day', timestamp, confirm_order_timestamp) > 5
)
SELECT
  event_log.case_id,
  event_log.activity,
  event_log.timestamp
FROM
  event_log
WHERE
  event_log.case_id NOT IN (SELECT case_id FROM excluded_cases)
ORDER BY
  event_log.case_id,
  event_log.timestamp;
```

Let's break down the query:

1. The first CTE, `filtered_cases`, uses window functions to identify the sequence of activities within each case. It adds three new columns:
   - `next_activity`: The activity that follows the current activity within the same case.
   - `next_next_activity`: The activity that follows the `next_activity` within the same case.
   - `confirm_order_timestamp`: The timestamp of the 'Confirm Order' activity in the sequence.

2. The second CTE, `excluded_cases`, uses the `filtered_cases` CTE to identify the cases that match the specified criteria:
   - The activity is 'Approve Purchase Requisition', followed by 'Create Order', and then 'Confirm Order'.
   - The time difference between the 'Create Order' and 'Confirm Order' activities is greater than 5 days.
   - It selects the distinct `case_id` values of the matching cases.

3. The main query selects all columns from the `event_log` table, excluding the cases that are present in the `excluded_cases` CTE using the `NOT IN` condition.

4. Finally, the result set is ordered by `case_id` and `timestamp` to maintain the original event order within each case.

This query identifies the cases that match the specified sequence and timing condition, excludes them from the final result, and returns all events from the remaining cases in the original order.