Below are two POWL models, encoded using pm4py’s POWL classes. The first model includes the potentially unfair XOR branch at the cultural fit stage; the second model removes that branch so all applicants follow the same path.

Model 1: With potential unfairness (XOR branch between CulturalFitCheck and CommunityAffiliationCheck)
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Activities
ReceiveApplication = Transition(label="ReceiveApplication")
ResumeParsingAndInitialDataCheck = Transition(label="ResumeParsingAndInitialDataCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")  # standard path
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")  # potential bias uplift
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Data completeness loop: execute ResumeParsingAndInitialDataCheck,
# then optionally RequestMoreInfo and loop back until complete.
data_loop = OperatorPOWL(operator=Operator.LOOP,
                         children=[ResumeParsingAndInitialDataCheck, RequestMoreInfo])

# Potentially unfair XOR: either standard cultural fit or affiliation-based uplift
cultural_xor_unfair = OperatorPOWL(operator=Operator.XOR,
                                   children=[CulturalFitCheck, CommunityAffiliationCheck])

# Assemble the partial order
unfair_root = StrictPartialOrder(
    nodes=[ReceiveApplication, data_loop, SkillAssessment, cultural_xor_unfair, ManagerialReview, FinalDecision]
)
unfair_root.order.add_edge(ReceiveApplication, data_loop)
unfair_root.order.add_edge(data_loop, SkillAssessment)
unfair_root.order.add_edge(SkillAssessment, cultural_xor_unfair)   # bias can appear here via the XOR branch
unfair_root.order.add_edge(cultural_xor_unfair, ManagerialReview)
unfair_root.order.add_edge(ManagerialReview, FinalDecision)


Model 2: Without unfairness (all applicants go through the same cultural fit check)
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Activities
ReceiveApplication2 = Transition(label="ReceiveApplication")
ResumeParsingAndInitialDataCheck2 = Transition(label="ResumeParsingAndInitialDataCheck")
RequestMoreInfo2 = Transition(label="RequestMoreInfo")
SkillAssessment2 = Transition(label="SkillAssessment")
CulturalFitCheck2 = Transition(label="CulturalFitCheck")  # single, uniform path
ManagerialReview2 = Transition(label="ManagerialReview")
FinalDecision2 = Transition(label="FinalDecision")

# Data completeness loop (same structure as above)
data_loop2 = OperatorPOWL(operator=Operator.LOOP,
                          children=[ResumeParsingAndInitialDataCheck2, RequestMoreInfo2])

# No special community-based branch; everyone follows the same cultural fit check
# Assemble the partial order
fair_root = StrictPartialOrder(
    nodes=[ReceiveApplication2, data_loop2, SkillAssessment2, CulturalFitCheck2, ManagerialReview2, FinalDecision2]
)
fair_root.order.add_edge(ReceiveApplication2, data_loop2)
fair_root.order.add_edge(data_loop2, SkillAssessment2)
fair_root.order.add_edge(SkillAssessment2, CulturalFitCheck2)      # no XOR here, removing the unfair tilt
fair_root.order.add_edge(CulturalFitCheck2, ManagerialReview2)
fair_root.order.add_edge(ManagerialReview2, FinalDecision2)