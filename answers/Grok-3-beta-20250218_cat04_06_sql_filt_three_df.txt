Let’s break this down step-by-step and craft a DuckDB SQL query that meets all the requirements.
Problem Breakdown
Identify the Sequence: We need to find cases where the activities 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' occur in this exact order with no intervening events.
Time Condition: Among those cases, identify ones where the time between 'Create Order' and 'Confirm Order' exceeds 5 days.
Exclusion: Return all events from the event_log table except those belonging to cases that satisfy both conditions above.
Approach
Use window functions to assign row numbers or check consecutive events within each case_id.
Filter for the specific sequence by checking activity transitions.
Calculate the time difference between 'Create Order' and 'Confirm Order'.
Identify cases to exclude based on both sequence and time conditions.
Return all events from cases not excluded.
Here’s the DuckDB SQL query:
sql
WITH EventRanking AS (
    -- Assign a row number to each event within a case, ordered by timestamp
    SELECT 
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_rank
    FROM event_log
),
SequenceCheck AS (
    -- Identify cases with the specific sequence using lead to check consecutive events
    SELECT 
        case_id,
        activity AS activity_1,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_2,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_3,
        timestamp AS timestamp_1,
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS timestamp_2,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS timestamp_3,
        event_rank
    FROM EventRanking
),
CasesWithSequence AS (
    -- Filter for cases with the exact sequence and check consecutiveness
    SELECT 
        case_id,
        timestamp_2 AS create_order_time,
        timestamp_3 AS confirm_order_time
    FROM SequenceCheck
    WHERE activity_1 = 'Approve Purchase Requisition'
      AND activity_2 = 'Create Order'
      AND activity_3 = 'Confirm Order'
      AND LEAD(event_rank, 1) OVER (PARTITION BY case_id ORDER BY timestamp) = event_rank + 1
      AND LEAD(event_rank, 2) OVER (PARTITION BY case_id ORDER BY timestamp) = event_rank + 2
),
CasesToExclude AS (
    -- Filter cases where time between Create Order and Confirm Order > 5 days
    SELECT DISTINCT case_id
    FROM CasesWithSequence
    WHERE DATE_DIFF('day', create_order_time, confirm_order_time) > 5
)
-- Return all events from cases not in the exclusion list
SELECT 
    el.case_id,
    el.activity,
    el.timestamp
FROM event_log el
WHERE el.case_id NOT IN (SELECT case_id FROM CasesToExclude)
ORDER BY el.case_id, el.timestamp;
Explanation of the Query
EventRanking CTE:
Adds a ROW_NUMBER() (event_rank) to each event within a case_id, ordered by timestamp. This helps ensure we can verify consecutiveness later.
SequenceCheck CTE:
Uses LEAD() to look at the next two activities and their timestamps for each event in a case.
Captures activity_1, activity_2, activity_3, and their respective timestamps and ranks.
CasesWithSequence CTE:
Filters for rows where the three activities match the required sequence: 'Approve Purchase Requisition', 'Create Order', 'Confirm Order'.
Ensures consecutiveness by checking that the event_rank increases by exactly 1 for each step (no intervening events).
Stores the timestamps of 'Create Order' and 'Confirm Order' for time difference calculation.
CasesToExclude CTE:
Uses DATE_DIFF('day', ...) to calculate the time difference in days between 'Create Order' and 'Confirm Order'.
Keeps only cases where this difference exceeds 5 days.
DISTINCT ensures each case_id appears once.
Final SELECT:
Selects all events from event_log where the case_id is not in the CasesToExclude list.
Orders the result by case_id and timestamp for clarity.
Notes
DuckDB’s DATE_DIFF function with 'day' computes the difference in days between two timestamps.
The consecutiveness check (event_rank + 1, event_rank + 2) ensures no other events interrupt the sequence.
If a case has multiple occurrences of the sequence, any occurrence with >5 days between 'Create Order' and 'Confirm Order' will exclude the entire case.
This query efficiently handles the requirements while leveraging DuckDB’s SQL capabilities. Let me know if you’d like further clarification or adjustments!