To address this task, we'll construct a DuckDB SQL query that follows these steps:

1. **Sequence Extraction:** Use window functions to get the ordered sequence of activities for each `case_id`.
2. **Variants Identification:** Group by this sequence to identify unique variants.
3. **Count Variants:** Count occurrences of each variant.
4. **Top K Variants:** Rank these variants by count and select the top K.
5. **Filter and Return Events:** Only return events from cases that belong to the top K variants.

Here is the SQL query to achieve this:

```sql
-- First, we'll create a CTE (Common Table Expression) to get the sequence of activities for each case
WITH activity_sequence AS (
    SELECT
        case_id,
        group_concat(activity, ' -> ') AS sequence,
        rank() OVER (ORDER BY COUNT(*) DESC) AS rank
    FROM (
        SELECT
            case_id,
            activity,
            ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS row_num
        FROM
            event_log
    ) ordered_events
    GROUP BY case_id
),
-- Then we count the occurrences of each sequence to find top K variants
variant_counts AS (
    SELECT
        sequence,
        COUNT(*) AS case_count,
        ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
    FROM activity_sequence
    GROUP BY sequence
),
-- Identify the top K variants
top_k_variants AS (
    SELECT sequence
    FROM variant_counts
    WHERE variant_rank <= K  -- Replace K with the desired number of top variants
),
-- Finally, filter the original event log to include only events from top K variants
filtered_events AS (
    SELECT e.*
    FROM event_log e
    JOIN activity_sequence a ON e.case_id = a.case_id
    WHERE a.sequence IN (SELECT sequence FROM top_k_variants)
)

-- Return all events from the filtered cases
SELECT * FROM filtered_events;
```

### Explanation:

- **activity_sequence:** This CTE constructs the sequence of activities for each case by using `group_concat` with ' -> ' as the delimiter. It also ranks each sequence by frequency.

- **variant_counts:** Here, we count how many times each sequence (variant) appears across all cases, and we rank these counts.

- **top_k_variants:** This CTE identifies the top K variants based on their rank.

- **filtered_events:** This joins the original event log with the top variants to filter out only the events from cases that match these top variants.

- **Final SELECT:** We return all the events from the cases that follow the top K variants.

Please note:

- Replace `K` in `top_k_variants` with the actual number of top variants you want to retrieve.
- This query assumes that `group_concat` is available in DuckDB, which it is, for string concatenation. If not, you might need to use an alternative string aggregation function or simulate one with custom SQL.
- The performance of this query can be affected by the size of the data. For very large datasets, consider optimizing further or using indexes on `case_id` and `timestamp`.