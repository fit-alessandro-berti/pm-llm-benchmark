```python
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Activities
SR = Transition(label="Service Request Verification (SR)")
CS = Transition(label="Contract Setup (CS)")
DA = Transition(label="Datacenter Allocation (DA)")
ACI = Transition(label="Access Control Initialization (ACI)")
BNC = Transition(label="Base Network Configuration (BNC)")
DR = Transition(label="Debug & Reconfigure (D&R)")
CD = Transition(label="Containerized Deployment (CD)")
MD = Transition(label="Monolithic Deployment (MD)")
QA = Transition(label="Quality Assurance (QA)")
SA = Transition(label="Security Audit (SA)")
GLA = Transition(label="Go-Live Approval (GLA)")

# Loop: execute BNC; then optionally DR and repeat; exit when stable
loop_config = OperatorPOWL(operator=Operator.LOOP, children=[BNC, DR])

# Exclusive choice for deployment: either CD or MD
deployment_choice = OperatorPOWL(operator=Operator.XOR, children=[CD, MD])

# Partial order block for QA and SA that can run in parallel and both precede GLA
qa_sa_po = StrictPartialOrder(nodes=[QA, SA, GLA])
qa_sa_po.order.add_edge(QA, GLA)
qa_sa_po.order.add_edge(SA, GLA)

# Build the overall process as a partial order
root = StrictPartialOrder(nodes=[
    SR,                # 1. Verify Service Request
    CS,                # 1. Contract Setup after SR
    DA, ACI,           # 2. Can run in parallel after CS
    loop_config,       # 3. Loop configuration after DA and ACI
    deployment_choice, # 4. XOR deployment after loop
    qa_sa_po           # 5-6. QA/SA parallel, both before GLA
])

# Define ordering constraints
# CS after SR
root.order.add_edge(SR, CS)

# DA and ACI after CS (can run in parallel, so no edge between DA and ACI)
root.order.add_edge(CS, DA)
root.order.add_edge(CS, ACI)

# Loop after both DA and ACI complete
root.order.add_edge(DA, loop_config)
root.order.add_edge(ACI, loop_config)

# Deployment choice after loop completes
root.order.add_edge(loop_config, deployment_choice)

# QA/SA/GLA block after deployment completes
root.order.add_edge(deployment_choice, qa_sa_po)
```