<think>
Let's tackle this problem step by step. First, I need to understand the current DECLARE model and identify where bias might creep into the loan application process. Then, I'll think about how to add constraints that can mitigate this bias while maintaining the structure of the model.

Step 1: Analyze the Current Model

The given DECLARE model includes several constraints:

Existence: "StartApplication" and "FinalDecision" must occur in every trace.
Init: "StartApplication" is the first activity in every trace.
Coexistence: If "StartApplication" occurs, "FinalDecision" must also occur, and vice versa.
Response: If "StartApplication" occurs, "RequestAdditionalInfo" must eventually follow.
Succession: "RequestAdditionalInfo" must be followed by "FinalDecision".
From this, it seems like a basic loan application process: start the application, possibly request additional information, and finally make a decision.

Step 2: Identify Potential Bias

Bias could enter the process if the decision ("FinalDecision") is influenced by sensitive attributes like ApplicantAge, ApplicantGender, or ApplicantRace without proper checks. For example:

If there's a direct path from checking a sensitive attribute to making a decision, that might lead to biased outcomes.
If certain decisions are made more frequently for applicants with specific sensitive attributes without additional scrutiny.
Step 3: Think About Mitigating Bias

To reduce bias, I can introduce constraints that ensure:

Additional Checks: For applicants from sensitive groups, there should be a mandatory "ManualReview" or "BiasMitigationCheck" before making a decision.
No Direct Influence: Prevent direct succession from activities that reveal sensitive attributes to decision activities.
Fair Treatment: Ensure that certain activities coexist or follow in a way that promotes fairness.
Step 4: Choose Specific Constraints

Let's consider adding the following constraints:

Coexistence: If a decision is made for a minority applicant (e.g., "Reject_Minority"), a "ManualReview" must also occur in the trace.
Response: If a sensitive attribute is checked (e.g., "CheckApplicantRace"), a "BiasMitigationCheck" must follow before any decision.
Non-succession: Prevent "CheckApplicantRace" from being directly followed by "Reject" without an intervening activity.
Wait, but I need to be careful with the activities. The current model doesn't specify activities like "CheckApplicantRace" or "Reject_Minority". I might need to assume or introduce such activities.

Step 5: Introduce New Activities

To make this work, I'll assume the process includes activities like:

"CheckSensitiveAttribute" (e.g., checking race, gender, etc.)
"ManualReview"
"BiasMitigationCheck"
"Approve"
"Reject"
Wait, actually, in the initial model, "FinalDecision" is likely a general decision activity. Perhaps it's better to think of "FinalDecision" as encompassing different outcomes, but for constraints, I might need to consider specific decision paths.

Alternatively, since DECLARE constraints typically operate on activity labels, I might need to model different decision activities, like "Approve" and "Reject", or even more specifically, "Approve_Minority", "Reject_Minority", etc. But that might not be practical.

Another approach: Since DECLARE constraints are about the presence and order of activities, not their parameters, I need to find a way to encode the bias mitigation in terms of activity sequences.

Step 6: Refine the Approach

Perhaps I can introduce activities that represent bias-sensitive steps. For example:

"SensitiveAttributeCheck" (whenever a sensitive attribute is checked)
"Decision" (the final decision activity)
Then, I can add constraints like:

If "SensitiveAttributeCheck" occurs, a "BiasMitigationCheck" must follow before "Decision".
Alternatively, use succession constraints to ensure that "Decision" cannot directly follow "SensitiveAttributeCheck".
Wait, but in DECLARE, succession constraints typically enforce that one activity is followed by another, but I need to prevent direct succession in some cases.

Actually, for preventing direct succession, I can use constraints like "nonchainsuccession" or "nonsuccession", but looking back at the available constraints, the model includes "nonsuccession" and "nonchainsuccession".

Nonsuccession: If A occurs, B cannot occur later in the trace.
Nonchainsuccession: A cannot be directly followed by B.
Wait, actually, in standard DECLARE, "nonsuccession" might not be directly available, but looking at the initial dictionary, there is "nonsuccession" and "nonchainsuccession".

Assuming "nonsuccession" means that if A occurs, B cannot occur after it, and "nonchainsuccession" means A cannot be immediately followed by B.

For bias mitigation, "nonchainsuccession" could be useful to prevent "SensitiveAttributeCheck" from being immediately followed by "Reject".

But perhaps a better way is to ensure that after "SensitiveAttributeCheck", there is always a "BiasMitigationCheck" before "Decision".

This can be modeled using precedence or succession constraints.

Step 7: Formalize the Constraints

Let's define the new activities:

"SensitiveAttributeCheck": an activity that involves checking sensitive attributes.
"BiasMitigationCheck": an activity that ensures fairness, e.g., a review or additional verification.
"Decision": the final decision activity (could be "Approve" or "Reject", but for simplicity, I'll keep it as "Decision").
Now, to ensure that after "SensitiveAttributeCheck", there is a "BiasMitigationCheck" before "Decision", I can use:

Precedence: "Decision" must be preceded by "BiasMitigationCheck" if "SensitiveAttributeCheck" has occurred.
But actually, in DECLARE, precedence typically states that B must be preceded by A,映射 but here it's conditional.

Wait, standard DECLARE constraints are not conditional in that way. They are more straightforward.

Alternatively, perhaps I can use:

Response: If "SensitiveAttributeCheck" occurs, then "BiasMitigationCheck" must occur after it.
Precedence: "Decision" must be preceded by "BiasMitigationCheck".
But this might not fully capture the requirement. For example, арм "Response" ensures that after "SensitiveAttributeCheck", "BiasMitigationCheck" occurs somewhere later, but it doesn't guarantee that it's before "Decision".

To enforce that "BiasMitigationCheck" occurs between "SensitiveAttributeCheck" and "Decision", I might need a combination of constraints.

One way is:

Use succession: "SensitiveAttributeCheck" must be followed by "BiasMitigationCheck", and "BiasMitigationCheck" must be followed by "Decision".
But that might be too restrictive, as there could be other activities in between.

Another idea: Use altresponse or chainresponse, but those are for alternation or immediate succession, which might not fit.

Perhaps a better approach is to ensure that "Decision" cannot occur unless "BiasMitigationCheck" has occurred after "SensitiveAttributeCheck".

But again, DECLARE constraints are not designed for such conditional logic directly.

Step 8: Simplify the Constraints

Maybe I can simplify and add constraints that are feasible within DECLARE.

For instance:

Add existence for "BiasMitigationCheck", ensuring it always occurs in the trace.
Add precedence: "Decision" must be preceded by "BiasMitigationCheck".
This way, every decision is preceded by a bias mitigation check, regardless of whether sensitive attributes were checked or not. This might be a strong but straightforward way to mitigate bias.

Additionally, to specifically address the sensitive attribute check, I can add:

response: If "SensitiveAttributeCheck" occurs, then "BiasMitigationCheck" must occur after it.
This ensures that whenever sensitive attributes are checked, a bias mitigation check follows at some point.

Combining these, with the precedence constraint, it indirectly ensures that the bias mitigation check happens before the decision.

Step 9: Consider Coexistence for Specific Cases

Another idea is to use coexistence for specific decision outcomes. For example, if there is a "Reject" decision, ensure that "ManualReview" also occurs in the trace.

But since "FinalDecision" is likely a single activity, perhaps I need to model different decision activities like "Approve" and "Reject".

Let's assume that "FinalDecision" can be specialized into "Approve" and "Reject".

Then, I can add:

coexistence: If "Reject" occurs, then "ManualReview" must also occur in the trace.
This ensures that rejections are always accompanied by a manual review, which could help mitigate bias.

Step 10: Finalize the Added Constraints

Based on the above reasoning, I'll add the following constraints:

Existence for "BiasMitigationCheck": It must occur in every trace.
Precedence: "Decision" must be preceded by "BiasMitigationCheck".
Response: If "SensitiveAttributeCheck" occurs, then "BiasMitigationCheck" must occur after it.
Coexistence: If "Reject" occurs, then "ManualReview" must also occur in the trace.
Wait, but in the initial model, "FinalDecision" is used, not "Decision", "Approve", or "Reject". To make it consistent, perhaps I can assume that "FinalDecision" is the decision activity, and introduce "BiasMitigationCheck" and "ManualReview" accordingly.

Alternatively, since the problem mentions "decisions (e.g., Approve, Reject, RequestAdditionalInfo)", perhaps "FinalDecision" is already specific, but in the model, it's just "FinalDecision".

To keep it simple, I'll assume that "FinalDecision" is the activity where the decision is made, and I'll add constraints related to it.

So, let's proceed with:

Add "BiasMitigationCheck" to the model.
Add existence for "BiasMitigationCheck".
Add precedence: "FinalDecision" must be preceded by "BiasMitigationCheck".
Add response: If "SensitiveAttributeCheck" occurs, then "BiasMitigationCheck" must occur after it.
Additionally, to make it more robust, I can add:

nonchainsuccession: "SensitiveAttributeCheck" cannot be directly followed by "FinalDecision".
This prevents immediate decisions after checking sensitive attributes, ensuring there's at least one activity (like "BiasMitigationCheck") in between.

Step 11: Implement the Constraints in the Dictionary

Now, I need to update the declare_model dictionary with these new constraints.

First, let's list the new activities:

"SensitiveAttributeCheck"
"BiasMitigationCheck"
"ManualReview" (if needed)
But actually, for the constraints I've chosen, I only need "SensitiveAttributeCheck" and "BiasMitigationCheck".

Wait, for the coexistence with "Reject", I need to have "Reject" as an activity, but since the initial model has "FinalDecision", perhaps I can assume that "FinalDecision" can be followed by specific activities or have parameters, but in DECLARE, constraints are on activity labels, so I might need to model "Approve" and "Reject" separately.

Alternatively, since the problem is to add constraints to the existing model, and the existing model has "FinalDecision", I'll stick with that and add constraints accordingly.

So, let's add:

existence for "BiasMitigationCheck"
precedence: "FinalDecision" must be preceded by "BiasMitigationCheck"
response: "SensitiveAttributeCheck" -> "BiasMitigationCheck"
nonchainsuccession: "SensitiveAttributeCheck" cannot be directly followed by "FinalDecision"
Additionally, to ensure that "SensitiveAttributeCheck" is part of the process, I might need to add it to the model, perhaps with existence or other constraints, but since it's optional (it might not always be checked), I'll leave it as is.

Step 12: Update the Dictionary

Let's update the declare_model dictionary.

First, add "BiasMitigationCheck" to existence:

python
Wrap
Copy
declare_model["existence"]["BiasMitigationCheck"] = {"support": 1.0, "confidence": 1.0}
Next, add precedence for "FinalDecision" to be preceded by "BiasMitigationCheck":

In DECLARE, precedence is typically defined as "B must be preceded by A", so for "FinalDecision" to be preceded by "BiasMitigationCheck", it's "precedence": {"FinalDecision": {"BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}}}

Wait, actually, in standard DECLARE, precedence is defined with A preceding B, meaning if B occurs, then A must have occurred before it.

So, to ensure that "FinalDecision" is preceded by "BiasMitigationCheck", I need:

"precedence": {"BiasMitigationCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}}

Wait, let's clarify: in DECLARE, "precedence(A, B)" means that B can only occur if A has occurred before it.

So, for "FinalDecision" to occur only if "BiasMitigationCheck" has occurred before it, it's "precedence(BiasMitigationCheck, FinalDecision)".

In the dictionary structure, for binary constraints like precedence, it's typically structured as "precedence": {A: {B: {"support": 1.0, "confidence": 1.0}}}, meaning A precedes B.

Wait, actually, looking back at the initial model, for "succession", it's {"RequestAdditionalInfo": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}}, which likely means RequestAdditionalInfo succeeds to FinalDecision, i.e., RequestAdditionalInfo is followed by FinalDecision.

Similarly, for "precedence", it should be that A precedes B, meaning if B occurs, A must have occurred before.

So, to ensure that "FinalDecision" is preceded by "BiasMitigationCheck", I should have "precedence": {"BiasMitigationCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}}

Wait, but in standard DECLARE notation, "precedence(A, B)" means that whenever B occurs, it must be preceded by A.

So, yes, "precedence": {"BiasMitigationCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}} would mean that if FinalDecision occurs, BiasMitigationCheck must have occurred before it.

Wait, actually, in DECLARE, the constraint "precedence(A, B)" is typically interpreted as: for every occurrence of B, there must be an A before it.

So, in the dictionary, it's likely that "precedence": {A: {B: ...}} means A precedes B.

Wait, but in the initial model, there is no "precedence" constraint, so I need to add it.

Similarly, for "response", in the initial model, "response": {"StartApplication": {"RequestAdditionalInfo": {"support": 1.0, "confidence": 1.0}}}, which means if StartApplication occurs, then RequestAdditionalInfo must occur after it.

So, for "precedence", it should be similar: "precedence": {A: {B: ...}} meaning if B occurs, A must have occurred before.

Wait, actually, in standard DECLARE, "precedence(A, B)" means that B can only occur if A has occurred before, i.e., for every B, there is an A before it.

So, in the dictionary, it's likely "precedence": {A: {B: ...}}, where A is the activity that must precede B.

Therefore, to ensure that "FinalDecision" is preceded by "BiasMitigationCheck", I should add:

python
Wrap
Copy
declare_model["precedence"]["BiasMitigationCheck"] = {"FinalDecision": {"support": 1.0, "confidence": 1.0}}
Wait, more precisely, since it's a dictionary, I need to check if "precedence" already exists, and if not, initialize it.

In the initial model, "precedence" is an empty dictionary, so I can add to it.

Similarly, for the response constraint: if "SensitiveAttributeCheck" occurs, then "BiasMitigationCheck" must occur after it.

So, "response": {"SensitiveAttributeCheck": {"BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}}}

Again, since "response" already exists, I can add to it.

Finally, for nonchainsuccession: to prevent "SensitiveAttributeCheck" from being directly followed by "FinalDecision".

In DECLARE, "nonchainsuccession(A, B)" means that A is not directly followed by B.

So, I can add "nonchainsuccession": {"SensitiveAttributeCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}}

Assuming that "nonchainsuccession" is structured similarly.

Step 13: Add the Constraints to the Model

Now, let's put it all together.

First, add "BiasMitigationCheck" to existence:

python
Wrap
Copy
declare_model["existence"]["BiasMitigationCheck"] = {"support": 1.0, "confidence": 1.0}
Wait, but actually, in the initial model, "existence" is a dictionary mapping activities to their support and confidence, so yes.

Similarly, for precedence:

python
Wrap
Copy
declare_model["precedence"]["BiasMitigationCheck"] = {"FinalDecision": {"support": 1.0, "confidence": 1.0}}
Wait, but since "precedence" is initially empty, I need to set it as a dictionary.

Actually, in Python, if "precedence" is {}, then I can do declare_model["precedence"]["BiasMitigationCheck"] = {"FinalDecision": {"support": 1.0, "confidence": 1.0}}, but this will raise a KeyError because {} doesn't have "BiasMitigationCheck".

Wait, no, in Python, if I do d = {}, then d["a"] = {"b": 1}, it will set d to {"a": {"b": 1}}, so it's fine.

Similarly, for response:

python
Wrap
Copy
declare_model["response"]["SensitiveAttributeCheck"] = {"BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}}
And for nonchainsuccession:

python
Wrap
Copy
declare_model["nonchainsuccession"]["SensitiveAttributeCheck"] = {"FinalDecision": {"support": 1.0, "confidence": 1.0}}
Additionally, since "SensitiveAttributeCheck" is a new activity, I might want to add it to the model, but since it's not mandatory in every trace, I don't need to add it to existence or other unary constraints.

Step 14: Consider Additional Constraints

To further enhance fairness, I could add more constraints. For example:

coexistence: If "FinalDecision" occurs, "BiasMitigationCheck" must also occur, but since I already have precedence, which is stronger, it might not be necessary.
Alternatively, if I want to ensure that "ManualReview" occurs for certain cases, but since I don't have specific decision outcomes, it might be tricky.

Another idea: Add exactly_one for certain activities, but that might not directly relate to bias mitigation.

I think the constraints I've chosen are sufficient for now.

Step 15: Provide the Updated Model

Finally, I'll present the updated declare_model dictionary with the added constraints.

But since the initial model is given as an example, and to save space, I'll show only the additions.

However, for completeness, I'll write the full updated dictionary.

Also, I need to make sure that all keys are properly initialized.

Wait, actually, in the initial model, all constraint types are already present as empty dictionaries where applicable, so I can directly add to them.

So, the updated model would look like:

python
Wrap
Copy
declare_model = {
    "existence": {
        "StartApplication": {"support": 1.0, "confidence": 1.0},
        "FinalDecision": {"support": 1.0, "confidence": 1.0},
        "BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}  # Added
    },
    "absence": {},
    "exactly_one": {},
    "init": {
        "StartApplication": {"support": 1.0, "confidence": 1.0}
    },
    "responded_existence": {},
    "coexistence": {
        "StartApplication": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}
    },
    "response": {
        "StartApplication": {"RequestAdditionalInfo": {"support": 1.0, "confidence": 1.0}},
        "SensitiveAttributeCheck": {"BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}}  # Added
    },
    "precedence": {
        "BiasMitigationCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}  # Added
    },
    "succession": {
        "RequestAdditionalInfo": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}
    },
    "altresponse": {},
    "altprecedence": {},
    "altsuccession": {},
    "chainresponse": {},
    "chainprecedence": {},
    "chainsuccession": {},
    "noncoexistence": {},
    "nonsuccession": {},
    "nonchainsuccession": {
        "SensitiveAttributeCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}  # Added
    }
}
Step 16: Explain the Added Constraints

Now, I'll briefly explain how these added constraints help reduce bias:

Existence of "BiasMitigationCheck": Ensures that every process instance includes a bias mitigation check, promoting fairness across all applications.
Precedence: "BiasMitigationCheck" precedes "FinalDecision": Guarantees that the final decision is always made after a bias mitigation check, reducing the risk of biased decisions.
Response: "SensitiveAttributeCheck" → "BiasMitigationCheck": If sensitive attributes are checked during the process, a bias mitigation check must follow, ensuring that any potential bias introduced by checking sensitive attributes is addressed.
Non-chain succession: "SensitiveAttributeCheck" cannot be directly followed by "FinalDecision": Prevents immediate decisions right after checking sensitive attributes, enforcing that there is at least one intervening activity (like the bias mitigation check), thus avoiding snap judgments based on sensitive information.
These constraints collectively ensure that the process includes mechanisms to check and mitigate bias, especially when sensitive attributes are involved, thereby promoting a fairer loan application review process.
</think>

### Updated DECLARE Model with Bias-Mitigating Constraints

Below is the updated `declare_model` dictionary with new constraints added to mitigate bias in the loan application review process. The additions ensure that sensitive attributes (e.g., ApplicantAge, ApplicantGender, ApplicantRace) are not directly used to make biased decisions without proper checks.

```python
declare_model = {
    "existence": {
        "StartApplication": {"support": 1.0, "confidence": 1.0},
        "FinalDecision": {"support": 1.0, "confidence": 1.0},
        "BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}  # Added
    },
    "absence": {},
    "exactly_one": {},
    "init": {
        "StartApplication": {"support": 1.0, "confidence": 1.0}
    },
    "responded_existence": {},
    "coexistence": {
        "StartApplication": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}
    },
    "response": {
        "StartApplication": {"RequestAdditionalInfo": {"support": 1.0, "confidence": 1.0}},
        "SensitiveAttributeCheck": {"BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}}  # Added
    },
    "precedence": {
        "BiasMitigationCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}  # Added
    },
    "succession": {
        "RequestAdditionalInfo": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}
    },
    "altresponse": {},
    "altprecedence": {},
    "altsuccession": {},
    "chainresponse": {},
    "chainprecedence": {},
    "chainsuccession": {},
    "noncoexistence": {},
    "nonsuccession": {},
    "nonchainsuccession": {
        "SensitiveAttributeCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}  # Added
    }
}
```

### Explanation of Added Constraints and Bias Mitigation

To address potential bias in the loan application process—particularly the risk of decisions being influenced unfairly by sensitive attributes like ApplicantAge, ApplicantGender, or ApplicantRace—I introduced new activities and constraints. Below, I explain each added constraint and how it helps reduce bias:

1. **Existence Constraint for "BiasMitigationCheck"**:
   - **Constraint**: `"existence": {"BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}}`
   - **Purpose**: Ensures that every process instance includes a bias mitigation check, promoting fairness across all applications. This activity represents a step where the process is reviewed for potential bias, such as a manual fairness assessment or automated bias detection.
   - **Bias Mitigation**: By mandating this check in every trace, we ensure that all applications, regardless of sensitive attributes, undergo scrutiny for fairness.

2. **Precedence Constraint: "BiasMitigationCheck" Precedes "FinalDecision"**:
   - **Constraint**: `"precedence": {"BiasMitigationCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}}`
   - **Purpose**: Guarantees that the final decision (e.g., Approve, Reject) is always made after a bias mitigation check. In DECLARE, this means that if "FinalDecision" occurs, "BiasMitigationCheck" must have occurred before it.
   - **Bias Mitigation**: This prevents decisions from being made without first assessing potential bias, reducing the risk that sensitive attributes directly influence outcomes without proper oversight.

3. **Response Constraint: "SensitiveAttributeCheck" → "BiasMitigationCheck"**:
   - **Constraint**: `"response": {"SensitiveAttributeCheck": {"BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}}}`
   - **Purpose**: Ensures that if sensitive attributes are checked (e.g., "SensitiveAttributeCheck" occurs, representing activities like checking ApplicantRace), a bias mitigation check must follow at some point in the trace.
   - **Bias Mitigation**: This addresses cases where sensitive attributes are explicitly examined, ensuring that any potential bias introduced by such checks is subsequently reviewed and mitigated before a decision is made.

4. **Non-Chain Succession Constraint: "SensitiveAttributeCheck" Cannot Be Directly Followed by "FinalDecision"**:
   - **Constraint**: `"nonchainsuccession": {"SensitiveAttributeCheck": {"FinalDecision": {"support": 1.0, "confidence": 1.0}}}`
   - **Purpose**: Prevents "FinalDecision" from occurring immediately after "SensitiveAttributeCheck", enforcing that there is at least one intervening activity (such as "BiasMitigationCheck") between them.
   - **Bias Mitigation**: This avoids snap judgments based on sensitive information, ensuring that decisions are not directly influenced by the immediate revelation of sensitive attributes without additional checks.

### How These Constraints Collectively Reduce Bias

- **Comprehensive Bias Oversight**: By requiring "BiasMitigationCheck" in every trace (via the existence constraint) and ensuring it precedes "FinalDecision" (via the precedence constraint), we establish a consistent process for reviewing potential bias in all loan applications.
- **Handling Sensitive Attribute Checks**: The response constraint ensures that whenever sensitive attributes are checked, a bias mitigation step follows, addressing potential bias introduced by such checks. The non-chain succession constraint further prevents immediate decisions following sensitive attribute checks, adding an additional layer of protection against biased outcomes.
- **Fairness in Decision-Making**: These constraints collectively ensure that decisions are made only after bias mitigation steps, reducing the likelihood that sensitive attributes unfairly influence outcomes. This promotes a fairer and more equitable loan application review process.

By integrating these constraints into the DECLARE model, we create a process that actively mitigates bias, ensuring that decisions are made with fairness and consistency, regardless of the applicant's sensitive attributes.