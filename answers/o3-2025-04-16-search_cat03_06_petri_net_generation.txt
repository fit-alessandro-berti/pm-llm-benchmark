```python
"""
Petri-net model of the (simplified) Insurance-Claim Management process

Legend of transitions (labels):
 C      – Insurance Claim arrives
 CR     – Claim Registration
 DV     – Document Verification
 RDS    – Re-Document Submission     (loop back to DV if docs are incomplete)
 FC     – Fraud Check
 II     – In-depth Investigation     (loop back to FC if more checks are needed)
 CA     – Claim Assessment
 AP     – Approval
 P      – Payment
 N      – Notification
 CL     – Closure  (final transition that reaches the final marking)
"""

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# ------------------------------------------------------------------
# 1)  Create an empty net object
# ------------------------------------------------------------------
net = PetriNet("Insurance-Claim-Process")

# ------------------------------------------------------------------
# 2)  Define PLACES (states between the activities)
# ------------------------------------------------------------------
p_start        = PetriNet.Place("p_start")        # new claim arrives
p_after_C      = PetriNet.Place("p_after_C")
p_after_CR     = PetriNet.Place("p_after_CR")
p_after_DV     = PetriNet.Place("p_after_DV")     # DV done (may trigger RDS loop)
p_before_FC    = PetriNet.Place("p_before_FC")    # waiting for Fraud-Check
p_after_FC     = PetriNet.Place("p_after_FC")     # FC done (may trigger II loop)
p_after_CA     = PetriNet.Place("p_after_CA")
p_after_AP     = PetriNet.Place("p_after_AP")
p_after_P      = PetriNet.Place("p_after_P")
p_after_N      = PetriNet.Place("p_after_N")
p_closed       = PetriNet.Place("p_closed")       # final place (claim closed)

net.places.update({
    p_start, p_after_C, p_after_CR, p_after_DV,
    p_before_FC, p_after_FC, p_after_CA, p_after_AP,
    p_after_P, p_after_N, p_closed
})

# ------------------------------------------------------------------
# 3)  Define TRANSITIONS (activities)
# ------------------------------------------------------------------
t_C   = PetriNet.Transition("C",   "Insurance Claim")
t_CR  = PetriNet.Transition("CR",  "Claim Registration")
t_DV  = PetriNet.Transition("DV",  "Document Verification")
t_RDS = PetriNet.Transition("RDS", "Re-Document Submission")
t_FC  = PetriNet.Transition("FC",  "Fraud Check")
t_II  = PetriNet.Transition("II",  "In-depth Investigation")
t_CA  = PetriNet.Transition("CA",  "Claim Assessment")
t_AP  = PetriNet.Transition("AP",  "Approval")
t_P   = PetriNet.Transition("P",   "Payment")
t_N   = PetriNet.Transition("N",   "Notification")
t_CL  = PetriNet.Transition("CL",  "Closure")

net.transitions.update({
    t_C, t_CR, t_DV, t_RDS, t_FC, t_II,
    t_CA, t_AP, t_P, t_N, t_CL
})

# ------------------------------------------------------------------
# 4)  Connect PLACES and TRANSITIONS with ARCS
# ------------------------------------------------------------------
# Claim creation and registration path
petri_utils.add_arc_from_to(p_start,    t_C,  net); petri_utils.add_arc_from_to(t_C,  p_after_C,  net)
petri_utils.add_arc_from_to(p_after_C,  t_CR, net); petri_utils.add_arc_from_to(t_CR, p_after_CR, net)

# Document-verification path (with RDS loop)
petri_utils.add_arc_from_to(p_after_CR, t_DV,  net); petri_utils.add_arc_from_to(t_DV,  p_after_DV, net)
petri_utils.add_arc_from_to(p_after_DV, t_RDS, net); petri_utils.add_arc_from_to(t_RDS, p_after_CR, net)   # loop back to DV

# Fraud-check path (with II loop)
petri_utils.add_arc_from_to(p_after_DV,  t_FC, net)            # enter FC
petri_utils.add_arc_from_to(t_FC,        p_after_FC,  net)     # FC completed
petri_utils.add_arc_from_to(p_after_FC,  t_II, net)            # if suspicion, start II
petri_utils.add_arc_from_to(t_II,        p_after_DV,  net)     # investigation finished  redo FC

# Downstream linear path
petri_utils.add_arc_from_to(p_after_FC, t_CA, net); petri_utils.add_arc_from_to(t_CA, p_after_CA, net)
petri_utils.add_arc_from_to(p_after_CA, t_AP, net); petri_utils.add_arc_from_to(t_AP, p_after_AP, net)
petri_utils.add_arc_from_to(p_after_AP, t_P,  net); petri_utils.add_arc_from_to(t_P,  p_after_P,  net)
petri_utils.add_arc_from_to(p_after_P,  t_N,  net); petri_utils.add_arc_from_to(t_N,  p_after_N,  net)
petri_utils.add_arc_from_to(p_after_N,  t_CL, net); petri_utils.add_arc_from_to(t_CL, p_closed,   net)

# ------------------------------------------------------------------
# 5)  INITIAL and FINAL MARKINGS
# ------------------------------------------------------------------
im = Marking()
im[p_start] = 1        # one token when a new claim arrives

fm = Marking()
fm[p_closed] = 1       # one token when the claim is successfully closed

# The tuple (net, im, fm) is an "accepting Petri net"
# ------------------------------------------------------------------
# You can now use PM4Py’s analysis/visualisation functions, e.g.:
# from pm4py.visualization.petri_net import visualizer as pn_vis
# gviz = pn_vis.apply(net, im, fm)
# pn_vis.view(gviz)
```

The code creates:

• a single start place (`p_start`) with the initial token;  
• a single final place (`p_closed`) that must contain the token in the final marking;  
• a main forward path C  CR  DV  FC  CA  AP  P  N  CL;  
• a document-re-submission loop DV  RDS  DV (via `p_after_CR`);  
• a fraud-investigation loop FC  II  FC (via `p_after_DV`).  

This accepting Petri net captures both the normal flow and the possible repetitions required for missing documents or repeated fraud investigations, until the claim is finally closed.