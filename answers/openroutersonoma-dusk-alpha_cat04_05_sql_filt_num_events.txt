Here's a DuckDB SQL query that accomplishes this task:

```sql
WITH case_counts AS (
  SELECT 
    case_id,
    COUNT(*) as event_count
  FROM event_log
  GROUP BY case_id
  HAVING COUNT(*) <= 6
)
SELECT 
  el.*
FROM event_log el
INNER JOIN case_counts cc ON el.case_id = cc.case_id;
```

**Explanation:**

1. **CTE (Common Table Expression) `case_counts`**: 
   - Groups events by `case_id` and counts the total number of events per case using `COUNT(*)`
   - The `HAVING COUNT(*) <= 6` clause filters out any case with more than 6 events (only keeps cases with 6 or fewer events)

2. **Main Query**:
   - Joins the original `event_log` table with the `case_counts` CTE on `case_id`
   - Uses `INNER JOIN` to only return events from cases that passed the filter (i.e., have  6 events)
   - `el.*` selects all columns from the original event log

**Key Points:**
- The `HAVING` clause is used instead of `WHERE` because it filters on aggregate functions (the count)
- The `INNER JOIN` ensures we only get events from valid cases (those with  6 events)
- This approach preserves all original columns (`case_id`, `activity`, `timestamp`, and any others) for the filtered cases
- The query is efficient as it first identifies valid cases, then retrieves only those events

This query will return all events from cases that have exactly 6 or fewer events, while completely excluding any case that has more than 6 events.