To solve this problem, we need to filter out events from cases that contain a specific sequence of activities with a timing condition between two of them. The sequence is 'Approve Purchase Requisition' followed by 'Create Order' followed by 'Confirm Order', with more than 5 days between 'Create Order' and 'Confirm Order'. We need to exclude events from cases that meet both criteria.

### Approach

1. **Identify Sequences:** Identify sequences of three activities in the specified order within each case.
2. **Calculate Time Differences:** For sequences where the activities are in order, calculate the time difference between 'Create Order' and 'Confirm Order'.
3. **Filter Based on Time Difference:** Exclude cases where the time difference is more than 5 days.
4. **Return Remaining Events:** Select all events from cases that do not meet the above criteria.

### Solution Query

```sql
WITH Sequences AS (
    SELECT
        t1.case_id,
        t1.activity AS first_activity,
        t2.activity AS second_activity,
        t3.activity AS third_activity,
        t2.timestamp AS create_order_time,
        t3.timestamp AS confirm_order_time
    FROM
        event_log t1
        JOIN event_log t2 ON t1.case_id = t2.case_id AND t1.timestamp < t2.timestamp
        JOIN event_log t3 ON t2.case_id = t3.case_id AND t2.timestamp < t3.timestamp
    WHERE
        t1.activity = 'Approve Purchase Requisition'
        AND t2.activity = 'Create Order'
        AND t3.activity = 'Confirm Order'
),
FilteredCases AS (
    SELECT
        DISTINCT case_id
    FROM
        Sequences
    WHERE
        confirm_order_time - create_order_time > INTERVAL '5 days'
)
SELECT
    *
FROM
    event_log
WHERE
    case_id NOT IN (SELECT case_id FROM FilteredCases)
ORDER BY
    case_id,
    timestamp;
```

### Explanation

1. **Sequences CTE:**
   - This common table expression (CTE) identifies sequences of three activities in the specified order within each case.
   - It joins the `event_log` table three times to find consecutive activities: 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order'.
   - It captures the timestamps of 'Create Order' and 'Confirm Order' to calculate the time difference later.

2. **FilteredCases CTE:**
   - This CTE selects distinct `case_id`s from the `Sequences` CTE where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.
   - These are the cases that need to be excluded from the final result.

3. **Final SELECT:**
   - The main query selects all events from the `event_log` where the `case_id` is not in the list of filtered cases.
   - The result is ordered by `case_id` and `timestamp` to provide a structured output.

This approach ensures that only events from cases not meeting both the sequence and timing criteria are included in the final result.