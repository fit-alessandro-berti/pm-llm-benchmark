```sql
WITH OrderedActivities AS (
    -- Step 1: Determine the sequence of activities for each case_id
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) as activity_order
    FROM
        event_log
),
VariantSequences AS (
    -- Step 2: Aggregate activities into a sequence string for each case
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY activity_order) as variant_sequence
    FROM
        OrderedActivities
    GROUP BY
        case_id
),
VariantCounts AS (
    -- Step 3: Count the number of cases for each variant
    SELECT
        variant_sequence,
        COUNT(case_id) as case_count
    FROM
        VariantSequences
    GROUP BY
        variant_sequence
),
TopKVariants AS (
    -- Step 4: Select the top K variants by frequency
    SELECT
        variant_sequence
    FROM
        VariantCounts
    ORDER BY
        case_count DESC
    LIMIT :K  -- Assuming K is a parameter you will provide
),
FilteredCases AS (
  -- Step 5: Filter cases belonging to the top K variants
  SELECT
      vs.case_id
  FROM
      VariantSequences vs
  JOIN
      TopKVariants tkv ON vs.variant_sequence = tkv.variant_sequence
)
-- Step 6: Return all events from the original event log that belong to the top K variants
SELECT
    el.*
FROM
    event_log el
JOIN
    FilteredCases fc ON el.case_id = fc.case_id
ORDER BY
    el.case_id, el.timestamp;
```

**Explanation:**

1. **OrderedActivities CTE:** Orders the activities within each case based on their timestamps using the `ROW_NUMBER()` window function.
2. **VariantSequences CTE:** Aggregates the ordered activities into a single string representing the variant sequence for each case using `STRING_AGG()`.
3. **VariantCounts CTE:** Counts the occurrences of each unique variant sequence using `COUNT()`.
4. **TopKVariants CTE:** Selects the top K variants based on their counts (frequencies) using `ORDER BY` and `LIMIT :K`. The `:K` is a placeholder for the number of top variants you want to select. You can replace it with an integer when you run the query.
5. **FilteredCases CTE:** Filters out the cases that are part of the top K variants, based on the comparison between the result of `VariantSequences` and `TopKVariants`.
6. **Final SELECT Statement:** Joins the `event_log` table with `FilteredCases` to retrieve all events associated with the cases that belong to the top K variants and orders the result by `case_id` and `timestamp` for better readability.

**How to use:**

1. Make sure you have a DuckDB database with a table named `event_log` containing the specified columns.
2. Replace `:K` with the desired number of top variants (e.g., `LIMIT 5` for the top 5 variants).
3. Execute the SQL query in your DuckDB environment.

The result will be a table containing all events from the original `event_log` that belong to cases following the top K most frequent process variants.
