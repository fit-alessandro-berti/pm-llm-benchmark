```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri Net
net = PetriNet(name="InsuranceClaimProcess")

# Create Places
p0 = PetriNet.Place("p0_start")    # Start place: a new claim arrives
p1 = PetriNet.Place("p1_after_C")
p2 = PetriNet.Place("p2_after_CR")
p3 = PetriNet.Place("p3_after_DV")
p4 = PetriNet.Place("p4_after_FC")
p5 = PetriNet.Place("p5_after_CA")
p6 = PetriNet.Place("p6_after_AP")
p7 = PetriNet.Place("p7_after_P")
p8 = PetriNet.Place("p8_after_N")
p9 = PetriNet.Place("p9_after_CL")  # Final place: claim closed

net.places.update([p0, p1, p2, p3, p4, p5, p6, p7, p8, p9])

# Create Transitions (with labels)
t_C = PetriNet.Transition("t_C", label="C")       # Insurance Claim (arriving)
t_CR = PetriNet.Transition("t_CR", label="CR")    # Claim Registration
t_DV = PetriNet.Transition("t_DV", label="DV")    # Document Verification
t_RDS = PetriNet.Transition("t_RDS", label="RDS") # Re-Document Submission
t_FC = PetriNet.Transition("t_FC", label="FC")    # Fraud Check
t_II = PetriNet.Transition("t_II", label="II")    # In-depth Investigation
t_CA = PetriNet.Transition("t_CA", label="CA")    # Claim Assessment
t_AP = PetriNet.Transition("t_AP", label="AP")    # Approval
t_P = PetriNet.Transition("t_P", label="P")       # Payment
t_N = PetriNet.Transition("t_N", label="N")       # Notification
t_CL = PetriNet.Transition("t_CL", label="CL")    # Closure

net.transitions.update([t_C, t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL])

# Add Arcs
# Initial claim arrival
petri_utils.add_arc_from_to(p0, t_C, net)
petri_utils.add_arc_from_to(t_C, p1, net)

# Claim Registration
petri_utils.add_arc_from_to(p1, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p2, net)

# Document Verification
petri_utils.add_arc_from_to(p2, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p3, net)

# From the DV outcome:
# Either proceed to Fraud Check
petri_utils.add_arc_from_to(p3, t_FC, net)
petri_utils.add_arc_from_to(t_FC, p4, net)

# Or if documents are incomplete, re-submit them and repeat DV
petri_utils.add_arc_from_to(p3, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p2, net)

# Fraud Check outcome:
# If suspicious, perform In-depth Investigation and then re-check fraud
petri_utils.add_arc_from_to(p4, t_II, net)
petri_utils.add_arc_from_to(t_II, p3, net)

# If not suspicious, proceed to Claim Assessment
petri_utils.add_arc_from_to(p4, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p5, net)

# Approval (assume always needed)
petri_utils.add_arc_from_to(p5, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p6, net)

# Payment
petri_utils.add_arc_from_to(p6, t_P, net)
petri_utils.add_arc_from_to(t_P, p7, net)

# Notification
petri_utils.add_arc_from_to(p7, t_N, net)
petri_utils.add_arc_from_to(t_N, p8, net)

# Closure
petri_utils.add_arc_from_to(p8, t_CL, net)
petri_utils.add_arc_from_to(t_CL, p9, net)

# Initial marking: token in the start place p0
im = Marking()
im[p0] = 1

# Final marking: token in p9 after closure
fm = Marking()
fm[p9] = 1

# The net, im, and fm now represent the constructed accepting Petri net.
```