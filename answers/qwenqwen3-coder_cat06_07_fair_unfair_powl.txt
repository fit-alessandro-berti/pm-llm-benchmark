Here are two **POWL models** representing the hiring process at *GlobalTeq Solutions*, one **with potential unfairness** (due to a biased XOR branch) and one **without unfairness** (where all applicants are treated equally):

---

###  **1. POWL Model with Potential Unfairness**

This model includes an **XOR branching** after the skill assessment:
- One path leads to a **standard cultural fit check**.
- The other path leads to a **community affiliation check**, which gives implicit advantages to certain applicants.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define Activities
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")  # Biased activity
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Silent transition for skipping
skip = SilentTransition()

# Loop for data completeness
data_loop = OperatorPOWL(operator=Operator.LOOP, children=[DataCompletenessCheck, RequestMoreInfo])

# XOR choice: standard cultural fit vs community-based check
cultural_xor = OperatorPOWL(operator=Operator.XOR, children=[CulturalFitCheck, CommunityAffiliationCheck])

# Partial order: sequence of steps
process_order = StrictPartialOrder(nodes=[
    ReceiveApplication,
    data_loop,
    SkillAssessment,
    cultural_xor,
    ManagerialReview,
    FinalDecision
])

# Add order constraints
process_order.order.add_edge(ReceiveApplication, data_loop)
process_order.order.add_edge(data_loop, SkillAssessment)
process_order.order.add_edge(SkillAssessment, cultural_xor)
process_order.order.add_edge(cultural_xor, ManagerialReview)
process_order.order.add_edge(ManagerialReview, FinalDecision)

# Print or visualize model if needed
pm4py.save_powl_vis(process_order, "unfair_hiring_process.png")
```

>  **Bias Source**:  
> The XOR choice introduces unfairness — some candidates go through `CommunityAffiliationCheck`, which may give them an advantage based on non-meritocratic factors like local connections or club memberships.

---

###  **2. POWL Model Without Unfairness**

This version removes the XOR split and ensures that **all applicants undergo the same cultural fit evaluation**, eliminating the possibility of bias due to community affiliation.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define Activities
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")  # Only standard check
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Silent transition for skipping
skip = SilentTransition()

# Loop for data completeness
data_loop = OperatorPOWL(operator=Operator.LOOP, children=[DataCompletenessCheck, RequestMoreInfo])

# No XOR: all applicants follow the same path
process_order = StrictPartialOrder(nodes=[
    ReceiveApplication,
    data_loop,
    SkillAssessment,
    CulturalFitCheck,
    ManagerialReview,
    FinalDecision
])

# Add order constraints
process_order.order.add_edge(ReceiveApplication, data_loop)
process_order.order.add_edge(data_loop, SkillAssessment)
process_order.order.add_edge(SkillAssessment, CulturalFitCheck)
process_order.order.add_edge(CulturalFitCheck, ManagerialReview)
process_order.order.add_edge(ManagerialReview, FinalDecision)

# Print or visualize model if needed
pm4py.save_powl_vis(process_order, "fair_hiring_process.png")
```

>  **Fairness Ensured**:  
> By removing the XOR and ensuring that every applicant goes through the same `CulturalFitCheck`, this model avoids any implicit bias tied to community affiliations or local ties.

---

###  Summary

| Feature | Unfair Model | Fair Model |
|--------|--------------|------------|
| Initial Steps | Same | Same |
| Skill Assessment | Yes | Yes |
| Cultural Fit Check | Split via XOR (biased) | Unified (unbiased) |
| Bias Introduced? | Yes | No |
| Visualization | `"unfair_hiring_process.png"` | `"fair_hiring_process.png"` |

These models can be visualized using `pm4py`'s visualization tools to inspect the structure and verify fairness properties.

Let me know if you want to export these as `.powl` files or analyze their behavior programmatically.