To solve this problem, you can follow these steps in your SQL query:

1. Identify cases that have the sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order' in direct succession.
2. Among those cases, filter out the ones where the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.
3. Exclude these filtered cases from the final result set.

Here's how you can construct the query:

```sql
WITH SequenceCases AS (
    SELECT
        case_id,
        activity,
        timestamp
    FROM
        event_log
    WHERE
        activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
),

SequencedEvents AS (
    SELECT
        case_id,
        LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
        LEAD(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
        timestamp,
        LEAD(timestamp) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp
    FROM
        SequenceCases
),

FilteredCases AS (
    SELECT
        case_id,
        timestamp
    FROM
        SequencedEvents
    WHERE
        activity = 'Create Order'
        AND prev_activity = 'Approve Purchase Requisition'
        AND next_activity = 'Confirm Order'
        AND (next_timestamp - timestamp) > INTERVAL '5 day'
)

SELECT
    *
FROM
    event_log
WHERE
    case_id NOT IN (SELECT case_id FROM FilteredCases);
```

### Explanation:

1. **SequenceCases CTE**:
   - Selects cases that have any of the activities 'Approve Purchase Requisition', 'Create Order', 'Confirm Order'.

2. **SequencedEvents CTE**:
   - Uses window functions `LAG` and `LEAD` to get the previous and next activities for each case.
   - Also uses `LEAD` to get the next timestamp for calculating the time elapsed.

3. **FilteredCases CTE**:
   - Identifies cases where the sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order' is in direct succession.
   - Ensures that the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.

4. **Final Selection**:
   - Selects all events from the `event_log` table.
   - Filters out any cases that are present in the `FilteredCases` CTE.

This query will return all events from the `event_log` table except those that belong to cases that match both the specified sequence and the timing condition.