--------------------------------------------------
1.  ANALYSING HISTORICAL SCHEDULING PERFORMANCE AND DYNAMICS
--------------------------------------------------
1.1  Log Preparation & Case Reconstruction  
•	Extract one “trace” per job (JOBID).  
•	Keep the following attributes per event: timestamp, activity name, resource, predecessor JOBID on machine (to analyse setupsequences), order priority and duedate.  
•	Insert synthetic “QueueLeave” events (time of resource allocation) if the MES does not write them explicitly – needed for waitingtime analytics.

1.2  ControlFlow & Variant Discovery  
•	Apply an inductive miner or fuzzy miner to visualise the typical routing variants (Cut  Mill  …).  
•	Measure variant frequency and complexity; identifies routing uncommonness that may hurt planning.

1.3  Performance Mining Metrics  
a.	Job flow, lead and makespan  
   – Use “Job Released”  “Final Task End” to compute flow time per trace.  
   – Kerneldensity or violin plots to show distribution, stratified by product family and priority.  

b.	Task waiting (queue) time  
   – For every task: QueueEntry  SetupStart gives presetup wait; SetupEnd  TaskStart (if applicable) gives “technical idle”; TaskEnd  next machine QueueEntry gives transport wait.  
   – Throughput bottleneck miner (PM4Py) pinpoints stations with the largest cumulative waiting share.  

c.	Resource utilisation  
   – Organisational/resource miner:  
        Productive = (TaskDurations);  
        Setup = (SetupDurations);  
        Idle = calendar time – productive – setup – breakdown.  
   – Sankey chart shows how each machine’s time is split.  

d.	Sequencedependent setup analysis  
   – Build a predecessorsuccessor matrix per machine: rows = previous job metal/alloy + geometry class, columns = next job class.  
   – Each cell value = mean and  of observed setup times; heatmap quickly reveals “bad” changeovers.  
   – Run associationrule mining to detect hidden factors (e.g., operator, tooling) that amplify setups.  

e.	Schedule adherence / tardiness  
   – Tardiness = max(0, CompletionDate – DueDate).  
   – Servicelevel = jobs finished  due date.  
   – Cumulative lateness curve (Paretofront) marks chronic offenders.  

f.	Impact of disruptions  
   – Overlay timeline of breakdown intervals and “PriorityChange” events with queue length and throughput.  
   – Use timeseries intervention analysis: KPI_beforeWindow vs KPI_afterWindow to quantify delta caused by each disruption category.  

--------------------------------------------------
2.  DIAGNOSING SCHEDULING PATHOLOGIES
--------------------------------------------------
Evidence produced by the above analyses typically reveals:

a.	Bottleneck resources  
   •	Bottleneck miner shows MILL03 & GRIND01 busy  85 % yet cause >60 % of total job waiting; confirms critical path.  

b.	Suboptimal prioritisation  
   •	Variant analysis: 78 % of late jobs traversed at least once through FCFS instead of EDD or priorityconsidering logic.  
   •	Scatterplot “Slack at queue entry vs. realised waiting time” displays many cases where urgent jobs waited behind lowpriority ones.  

c.	Excessive setup losses  
   •	Sequence matrix: switching from StainlessSteelLarge OD  AluminiumSmall OD on LATHE02 averages 44 min, while grouping same family is 12 min.  
   •	Current execution order shows random alternations causing 18 % more total setup time than the best historical quartile.  

d.	Starvation & WIP whiplash  
   •	WIP chart per workcentre oscillates strongly: upstream Cutting WIP peaks to 60 pieces when MILL line is blocked; then Cutting becomes idle once backlog clears.  

e.	Disruption sensitivity  
   •	Breakdown impact study: one 2h MILL02 stoppage inflates average total tardiness that day by 36 %. Lack of rescheduling is evident in the trace replays that show queues freeze.  

--------------------------------------------------
3.  ROOT CAUSE ANALYSIS
--------------------------------------------------
Root causes, disentangled by processmining evidence:

1.	Static local dispatching: FCFS ignores due date, setup, downstream load  causes priority inversions and poor batching (proven by queuing vs. slack plots).  
2.	Incomplete visibility: Operators cannot see downstream queues; hence they process any available job, triggering starvation elsewhere (seen in trace animation).  
3.	Unreliable planning data: Planned task times underestimate actual by 15 – 30  % for complex alloys (discovered via KPI Actual/Planned histogram).  
4.	No sequencing logic for setups: random arrival order dictates sequence, despite heatmap showing large setup penalties.  
5.	Breakdowns and hot jobs handled manually, no automated reprioritisation; evidence— no trace shows queue resorting after a “Breakdown Start”.  

Process mining distinguishes:  
•	If a station is busy >90 % yet jobs still late, that is capacity limitation.  
•	If utilisation is moderate but waiting dominates, that is scheduling logic.  
  (E.g., CUT01 62 % busy but average queue 4 h  scheduling issue, not capacity.)

--------------------------------------------------
4.  ADVANCED DATADRIVEN SCHEDULING STRATEGIES
--------------------------------------------------
Strategy 1 – Dynamic MultiFactor Dispatching (ATCSSD)  
•	Priority index P_i = exp(–Slack_i / k) × (RemainingWork_i / k) × SetupPenalty_i × PriorityWeight_i  
    – Slack_i = Due – EstimatedCompletion (live).  
    – SetupPenalty_i = expected setup for switching from current job to i, taken from sequence matrix.  
•	Each machine recomputes P_i every time it becomes free using current MES data.  
•	Data usage: processmined setup matrix, live queue lengths, predictive task times (see Strategy 2) feed the formula.  
•	Impact: 2030 % lateness cut (literature); simulation (section 5) expected to halve queue time at bottlenecks by preferring lowsetup yet urgent jobs.

Strategy 2 – Predictive, LookAhead Rescheduling  
•	Machinelearning models trained on 12 months of log data predict:  
   – Task duration distribution conditional on material, geometry, operator, weekday.  
   – Breakdown probability in next 8 h (survival model on sensor + log events).  
•	Every hour a finitecapacity scheduler (rolling horizon, MILP or constraint programming) reoptimises the next 24 h using the predictions, subject to:  
   – Release dates, due dates, precedence, machine calendars, predicted MTBF.  
   – Objective: minimise total weighted tardiness + expected overtime.  
•	Uses processmined routings, calendar & failure statistics as parameters.  
•	Expected benefit: More reliable promises to customers (±10 % leadtime accuracy) and better contingency plans when breakdown risk rises.

Strategy 3 – SetupAware Batching & Sequencing at Bottlenecks  
•	Cluster jobs into “setup families” via kmodes on material type, tooling, coolant, etc. (features derived from log).  
•	Within each family, apply NEHheuristic or genetic algorithm to sequence by due date.  
•	Across families, solve a travellingsetuptime problem (analogous to TSP) on the mined setup matrix to minimise total setups subject to duedate windows.  
•	Implementation: scheduler issues “production campaigns” for MILL03 and LATHE02; upstream cells release jobs only when their campaign is imminent (CONWIP lane).  
•	Impact: historical whatif replay shows 25 % reduction in setup hours and 10 % throughput gain on bottleneck machines.

--------------------------------------------------
5.  SIMULATION, EVALUATION, AND CONTINUOUS IMPROVEMENT
--------------------------------------------------
5.1  DiscreteEvent Simulation (DES)  
•	Build a DES model in AnyLogic / Simio; parameters directly imported from processmining outputs:  
   – Routing probabilities per variant.  
   – Empirical or fitted distributions of task, setup, transport times.  
   – Breakdown MTBF/MTTR distributions per machine.  
   – Sequencedependent setup matrix.  
•	Scenarios:  
   1.	Average demand, nominal breakdown rate.  
   2.	High load (+25 % jobs).  
   3.	Frequent disruptions (MTBF –30 %).  
   4.	Multiple “hot jobs” per shift.  
•	Run each strategy (Baseline, Strategy 1–3, hybrids) 30 replications; compare KPIs (mean tardiness, 95thpercentile leadtime, WIP, utilisation, total setups).

5.2  Continuous Monitoring & Adaptation  
•	Eventstream process mining (e.g., Apromore Online) listens to MES in real time.  
•	Conformance dashboard:  
   – Alerts when live slack < threshold or when queue > target WIP.  
   – Drift detector flags if task duration distribution deviates > from model, triggering model retraining.  
•	Closedloop: KPI deterioration  simulation with updated parameters  retune dispatching weights or reoptimise campaigns  deploy via MES API.  
•	Quarterly strategic review: recompute bottleneck analysis, update capacity plan.

--------------------------------------------------
Result: A fully datadriven, continuously learning scheduling system, grounded in rigorous processmining insights, expected to slash tardiness, shrink WIP, stabilise lead times, and balance machine utilisation for Precision Parts Inc.