Here's the code to construct the accepting Petri net for the insurance claim management process:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking, Place, Transition
from pm4py.objects.petri_net.utils import petri_utils

# Create main Petri net instance
net = PetriNet(name="Insurance Claim Process")

# List to hold all places and transitions
places = []
transitions = []

# Create places
start = Place(name="Start")
claim_registration = Place(name="Claim Registration Complated")
document_verification = Place(name="Document Verification Complated")
re_document_submission = Place(name="Re-Document Submission Complated")
fraud_check = Place(name="Fraud Check Complated")
in_depth_investigation = Place(name="In-Depth Investigation Complated")
claim_assessment = Place(name="Claim Assessment Complated")
approval = Place(name="Approval Complated")
payment = Place(name="Payment Complated")
notification = Place(name="Notification Complated")
closure = Place(name="Closure")

place_list = [start, claim_registration, document_verification, 
               re_document_submission, fraud_check, in_depth_investigation, 
               claim_assessment, approval, payment, notification, closure]

# Create transitions
cr = Transition(name="Claim Registration", label="Claim Registration")
dv = Transition(name="Document Verification", label="Document Verification")
rds = Transition(name="Re-Document Submission", label="Re-Document Submission")
rds_back = Transition(name="Return to Document Verification", label="Return to Document Verification")
fc = Transition(name="Fraud Check", label="Fraud Check")
ii = Transition(name="In-Depth Investigation", label="In-Depth Investigation")
ii_back = Transition(name="Return to Fraud Check", label="Return to Fraud Check")
ca = Transition(name="Claim Assessment", label="Claim Assessment")
ap = Transition(name="Approval", label="Approval")
p_direct = Transition(name="Payment Direct", label="Payment Direct")
p_ap = Transition(name="Payment via Approval", label="Payment via Approval")
n = Transition(name="Notification", label="Notification")
cl = Transition(name="Closure", label="Closure")

transition_list = [cr, dv, rds, rds_back, fc, ii, ii_back, ca, ap, 
                   p_direct, p_ap, n, cl]

# Add all places and transitions to net
net.places.add_all(place_list)
net.transitions.add_all(transition_list)

# Add arcs for process flow
petri_utils.add_arc_from_to(start, cr, net)
petri_utils.add_arc_from_to(cr, claim_registration, net)

petri_utils.add_arc_from_to(claim_registration, dv, net)
petri_utils.add_arc_from_to(dv, document_verification, net)

# Handle Document Verification re submission
petri_utils.add_arc_from_to(document_verification, rds, net)
petri_utils.add_arc_from_to(rds, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, rds_back, net)
petri_utils.add_arc_from_to(rds_back, document_verification, net)

petri_utils.add_arc_from_to(document_verification, fc, net)

petri_utils.add_arc_from_to(fc, ii, net)
petri_utils.add_arc_from_to(ii, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, ii_back, net)
petri_utils.add_arc_from_to(ii_back, fc, net)

petri_utils.add_arc_from_to(fc, ca, net)

petri_utils.add_arc_from_to(ca, ap, net)
petri_utils.add_arc_from_to(ap, approval, net)
petri_utils.add_arc_from_to(approval, p_ap, net)

petri_utils.add_arc_from_to(ca, p_direct, net)
petri_utils.add_arc_from_to(p_ap, payment, net)
petri_utils.add_arc_from_to(p_direct, payment, net)

petri_utils.add_arc_from_to(payment, n, net)
petri_utils.add_arc_from_to(n, closure, net)

# Define markings
im = Marking()
im[start] = 1  # Initial state

fm = Marking()
fm[closure] = 1  # Final state
```

**Key Features:**
1. **Start Place:** Initiates the process with a token in the `Start` place
2. **Activity Sequence:** Follows the detailed process sequence from claim registration through closure
3. **Loop Handling:** Implements re-submission (RDS) and investigation (II) loops
4. **Branching Path:** Handles both approval paths (with/without approval based on threshold)
5. **Final Marking:** End state with token in the `Closure` place
6. **Transitions:** Properly labeled transitions matching Activities
7. **Places:** Represents all states between activities including loops

**Usage:**
- To simulate the process, you would use `petri_utilsu` (which wasn't provided but would traverse the net following transitions)
- The `im` shows the initial claim arrival
- The `fm` represents a successfully closed claim

**Note:** This creates the complete Petri net structure for the scenario. You would need to use PM4Py's simulation functionality to verify different process paths and ensure all edge cases are covered.