Let's construct an accepting Petri net for the insurance claim management process. We'll create places to represent the states between activities, transitions for each activity, and include loops for document re-submission and in-depth investigation. Here's the detailed solution with Python code:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="insurance_claim_process")

# Define places (states between activities)
p_start = PetriNet.Place(name="start")  # Initial state: new claim arrives
p_cr = PetriNet.Place(name="after_cr")  # After claim registration
p_dv = PetriNet.Place(name="after_dv")  # After document verification
p_fc = PetriNet.Place(name="after_fc")  # After fraud check
p_ca = PetriNet.Place(name="after_ca")  # After claim assessment
p_ap = PetriNet.Place(name="after_ap")  # After approval
p_p = PetriNet.Place(name="after_payment")  # After payment
p_n = PetriNet.Place(name="after_notification")  # After notification
p_end = PetriNet.Place(name="closed")  # Final state: claim closed

# Places for loops
p_rds = PetriNet.Place(name="needs_resubmission")  # For document re-submission loop
p_ii = PetriNet.Place(name="needs_investigation")  # For in-depth investigation loop

# Add places to the net
for place in [p_start, p_cr, p_dv, p_fc, p_ca, p_ap, p_p, p_n, p_end, p_rds, p_ii]:
    net.places.add(place)

# Define transitions (activities)
t_c = PetriNet.Transition(name="t_c", label="Insurance Claim (C)")
t_cr = PetriNet.Transition(name="t_cr", label="Claim Registration (CR)")
t_dv = PetriNet.Transition(name="t_dv", label="Document Verification (DV)")
t_fc = PetriNet.Transition(name="t_fc", label="Fraud Check (FC)")
t_ca = PetriNet.Transition(name="t_ca", label="Claim Assessment (CA)")
t_ap = PetriNet.Transition(name="t_ap", label="Approval (AP)")
t_p = PetriNet.Transition(name="t_p", label="Payment (P)")
t_n = PetriNet.Transition(name="t_n", label="Notification (N)")
t_cl = PetriNet.Transition(name="t_cl", label="Closure (CL)")

# Transitions for loops
t_rds = PetriNet.Transition(name="t_rds", label="Re-Document Submission (RDS)")
t_ii = PetriNet.Transition(name="t_ii", label="In-depth Investigation (II)")

# Add transitions to the net
for trans in [t_c, t_cr, t_dv, t_fc, t_ca, t_ap, t_p, t_n, t_cl, t_rds, t_ii]:
    net.transitions.add(trans)

# Define arcs (main flow)
petri_utils.add_arc_from_to(p_start, t_c, net)      # Start -> Claim
petri_utils.add_arc_from_to(t_c, p_cr, net)         # Claim -> After CR
petri_utils.add_arc_from_to(p_cr, t_cr, net)        # After CR -> Claim Registration
petri_utils.add_arc_from_to(t_cr, p_dv, net)        # CR -> After DV
petri_utils.add_arc_from_to(p_dv, t_dv, net)        # After DV -> Document Verification
petri_utils.add_arc_from_to(t_dv, p_fc, net)        # DV -> After FC (normal path)
petri_utils.add_arc_from_to(p_fc, t_fc, net)        # After FC -> Fraud Check
petri_utils.add_arc_from_to(t_fc, p_ca, net)        # FC -> After CA (normal path)
petri_utils.add_arc_from_to(p_ca, t_ca, net)        # After CA -> Claim Assessment
petri_utils.add_arc_from_to(t_ca, p_ap, net)        # CA -> After AP
petri_utils.add_arc_from_to(p_ap, t_ap, net)        # After AP -> Approval
petri_utils.add_arc_from_to(t_ap, p_p, net)         # AP -> After Payment
petri_utils.add_arc_from_to(p_p, t_p, net)          # After Payment -> Payment
petri_utils.add_arc_from_to(t_p, p_n, net)          # P -> After Notification
petri_utils.add_arc_from_to(p_n, t_n, net)          # After N -> Notification
petri_utils.add_arc_from_to(t_n, p_end, net)        # N -> After CL
petri_utils.add_arc_from_to(p_end, t_cl, net)       # After CL -> Closure
petri_utils.add_arc_from_to(t_cl, p_end, net)       # Closure loops back to end (final state)

# Define arcs for loops
# Document Re-submission loop
petri_utils.add_arc_from_to(t_dv, p_rds, net)       # DV -> Needs Resubmission (if incomplete)
petri_utils.add_arc_from_to(p_rds, t_rds, net)      # Needs Resubmission -> RDS
petri_utils.add_arc_from_to(t_rds, p_dv, net)       # RDS -> Back to After DV

# In-depth Investigation loop
petri_utils.add_arc_from_to(t_fc, p_ii, net)        # FC -> Needs Investigation (if fraud suspected)
petri_utils.add_arc_from_to(p_ii, t_ii, net)        # Needs Investigation -> II
petri_utils.add_arc_from_to(t_ii, p_fc, net)        # II -> Back to After FC

# Define initial and final markings
im = Marking()
im[p_start] = 1  # Token in start place (new claim arrives)

fm = Marking()
fm[p_end] = 1    # Token in closed place (claim is closed)

# Optional: Print the net structure for verification
print("Places:", {p.name for p in net.places})
print("Transitions:", {t.label for t in net.transitions})
print("Initial Marking:", dict(im))
print("Final Marking:", dict(fm))
```

### Explanation of the Petri Net:

1. **Places:**
   - Represent states between activities (e.g., `p_cr` is the state after claim registration).
   - Additional places `p_rds` and `p_ii` handle the loops for re-submission and investigation.
   - `p_start` is the initial state, and `p_end` is the final state.

2. **Transitions:**
   - Each activity (C, CR, DV, FC, CA, AP, P, N, CL) has a corresponding transition.
   - Loop-specific transitions (`RDS` and `II`) handle re-submission and investigation.

3. **Arcs:**
   - Main flow: Follows the sequence C → CR → DV → FC → CA → AP → P → N → CL.
   - Loops:
     - After DV, if documents are incomplete, a token moves to `p_rds`, triggering `RDS`, then back to `p_dv`.
     - After FC, if fraud is suspected, a token moves to `p_ii`, triggering `II`, then back to `p_fc`.

4. **Initial and Final Markings:**
   - `im`: One token in `p_start`, representing a new claim.
   - `fm`: One token in `p_end`, representing a closed claim.

### Notes:
- The loops allow multiple iterations of `RDS` or `II` as needed, modeling real-world variability.
- The final transition `CL` loops back to `p_end` to maintain the final marking state.
- This model assumes a single claim process; for concurrency (multiple claims), additional tokens or a different structure would be needed.

You can run this code with `pm4py` installed (`pip install pm4py`) to create and inspect the Petri net. Let me know if you'd like to visualize it or refine the model further!