===================================================================
Speedy Parcels – Process-Mining Analysis & Optimization Blueprint
===================================================================

----------------------------------------------------
1. Process Discovery & Conformance Checking
----------------------------------------------------
1.1  Data Pre-processing & Integration  
A. Identity & Time Alignment  
   • Build a global timeline with 3 s resolution (median GPS interval) and align all sources to it via NTP.  
   • Generate **one event log per vehicle-day** (Case-ID = Vehicle-Day).  
   • Create **two types of events**:  
      – *Logistics events* = Delivery milestones from handheld scanner.  
      – *Movement / status events* = GPS-derived changes (engine on, moving, idle, sudden stop, speed > 80 km/h, maintenance fag, geo-fence in/out).  

B. Schema Mapping & Unfolding  
    GPS: speed>=5 km/h is labelled “moving”; <5 km/h for >120 s is “idle”; sudden speed drop >50% for >30 s is “traffic jam candidate”.  
    Scanner: Map 5 scanner types to 5 activity labels.  
    Maintenance logs: convert to “Unscheduled Maintenance Start”, “Maintenance End”.  
    Planned routes: add one synthetic activity “Planned Route Activated” plus one attribute “Planned Sequence No” to each actual delivery event (for CFR).  

C. Challenges  
   • Multi-row GPS  need to sample without loss (Petri-net miners expect atomic events).  
   • Clock drift of handheld scanners  detect and correct via depot-arrival timestamp reconciliation.  
   • Package-level vs. case-level granularity  create a dual log if route contains loops (package returns to depot).  

1.2  Process Discovery  
   • Use **inductive miner-infrequent** (handles noise) to obtain a *reference* process model of a whole day:  
          Start  Depart Depot  *(Driving | Traffic Jam | Idle | Maintenance)*  (Arrive Customer Delivery Success/Failed  Depart Customer)*n Arrive Depot  End  
   • Visualise variants with *process graphs* in PM4Py/Disco: annotate arcs with median durations to expose typical day patterns.  

1.3  Conformance & Planned vs. Actual  
   • Create the **planned model** from the dispatch file as a Petri-net with <Vehicle, PlannedSequenceNo> transition labels.  
   • Apply **token-based replay** to detect:  
        – Sequence deviations (delivering stops in wrong order).  
        – **Skipped** activities (missed planned stop).  
        – **Inserted** activities (unplanned extra stop, failed delivery that becomes re-delivery).  
        – Time deviations: Each planned activity has an expected arrival window; replay assigns a “lateness” attribute to every token violation.  
   • Output per-case fitness (**fitness** <0.95 triggers optimisation candidates).  

----------------------------------------------------
2. Performance Analysis & Bottleneck Identification
----------------------------------------------------
Key KPIs (all derivable from the event log):

| KPI | Calculation |
|-----|-------------|
| On-Time Delivery Rate | (# Delivery Success events within time window) / (# total successful deliveries) |
| Stop Service Time | `Depart Customer – Arrive Customer` per delivery event |
| Effective Travel Time | `Depart>CustomerArrive>Customer` (excl. idle) median per case |
| Fuel Consumption Proxy | (km between Geo-points per case) * weighted factor  (km/h < 30 gives 15% fuel penalty) |
| Vehicle Utilisation Rate | Cargo Pallet-Load at `Start Shift` / max capacity |
| Re-delivery Rate | Failed deliveries per day / all deliveries |
| Traffic Delay Density | GPS events tagged with “jam” and speed < 15 km/h within 1 km radius |

Process-mining techniques:

• Disco “Performance Diagram” – highlight long-lasting idle arcs (waiting, traffic).  
• **Performance Spectrum** for the sequence *Arrive Customer  Depart Customer* to visualise cumulative dwell time over a day. Peak bands indicate daily traffic waves.  
• Dotted-chart heat-map: x-axis = time-of-day, y=vehicle-id, colour intensity = proportion of “idle” events  finds shift-wise hotspots.  
• Sub-logs: restrict to specific driver or route; use **Wilcoxon test** to see if a subgroup’s median travel time is > 5 % above fleet median.  

----------------------------------------------------
3. Root-Cause Analysis for Inefficiencies
----------------------------------------------------
| Issue detected in log | Potential root cause | Mining technique to validate |
|-----------------------|----------------------|------------------------------|
| Cluster of “traffic jam” events same lat/lon region daily | Recurrent congestion; dispatch not time-shifting routes | Overlay jam events on variant frequency; A/B variant comparison (high vs low jam frequency days) |
| High variance in `Stop Service Time` across drivers