Here's a simplified temporal profile for a Purchase-to-Pay (P2P) process:

Assume the process looks something like this:

1. Receive Order (RO)
2. Check Availability (CA)
    * If goods are available, proceed to RO -> Create Purchase Order (PO <-> RO = 1-3 days)
    * If goods are not available, proceed to RO -> Negotiate with Supplier (RS -< RO = 5-14 days)
3. Create Purchase Order (PO)
    * If goods are available, proceed to PO -> Receive Goods (RG -< PO = 3-7 days)
4. Negotiate with Supplier (RS)
    * If negotiation is successful, proceed to RS -> Create Purchase Order (PO =< RS = 3-5 days)
5. Receive Goods (RG)
    * If goods are received, proceed to RG -> Invoice (IN -< RG = 1-3 days)
6. Invoice (IN)
    * The invoice is sent automatically after receipt of goods, so IN -< RG

Here's a Python representation of this simplified temporal profile, assuming that the relationships between activities are as shown above:

```python
temporal_profile = {
    ('RO', 'PO'): (2, 1),  # average: 2 days, standard deviation: 1 day
    ('RO', 'RS'): (9, 2),  # average: 9 days, standard deviation: 2 days
    ('PO', 'RG'): (5, 1),  # average: 5 days, standard deviation: 1 day
    ('RS', 'PO'): (4, 1),  # average: 4 days, standard deviation: 1 day
    ('RG', 'IN'): (2, 0.5)  # average: 2 days, standard deviation: 0.5 day
}
```

Note: ZETA is set to 1 for simplicity, meaning that when calculating deviations, whatever is beyond 1 standard deviation away from the average is considered a deviation.

Please keep in mind that these values are simplified and may vary depending on the specific context and characteristics of your Purchase-to-Pay process. In real-world scenarios, you would need to gather real data on process times to create an accurate temporal profile.