To generate a temporal profile for an hypothetical Purchase-to-Pay process, we'll need to make some assumptions about the process flow and the time intervals between activities. Here's a possible implementation in Python:
```python
import random

# Define the process flow as a list of activities
process_flow = ['Order', 'Receive', 'Invoice', 'Payment']

# Define the temporal profile as a dictionary
temporal_profile = {}

# Define the average and standard deviation for each couple of activities
# These values are in seconds
avg_times = {
    ('Order', 'Receive'): (86400, 3600),  # 1 day, 1 hour
    ('Receive', 'Invoice'): (3600, 3600),  # 1 hour, 1 hour
    ('Invoice', 'Payment'): (86400, 7200),  # 1 day, 2 hours
    ('Order', 'Invoice'): (86400, 3600),  # 1 day, 1 hour
    ('Receive', 'Payment'): (3600, 3600),  # 1 hour, 1 hour
}

# Generate random time intervals between activities based on the temporal profile
for i in range(len(process_flow) - 1):
    act1 = process_flow[i]
    act2 = process_flow[i + 1]
    avg, stdev = avg_times.get((act1, act2), (0, 0))  # default to 0, 0 if not found
    times = []
    for _ in range(100):  # generate 100 random time intervals
        time = random.gauss(avg, stdev)
        time = max(0, time)  # ensure time is not negative
        times.append(time)
    avg = sum(times) / len(times)
    stdev = (sum((t - avg) ** 2 for t in times) / len(times)) ** 0.5
    temporal_profile[(act1, act2)] = (avg, stdev)

print(temporal_profile)
```
This code generates a temporal profile for an hypothetical Purchase-to-Pay process with the following activities: Order, Receive, Invoice, Payment. The average and standard deviation for each couple of activities are defined in the `avg_times` dictionary. The code then generates 100 random time intervals between each couple of activities using a Gaussian distribution with the specified average and standard deviation. The average and standard deviation of these random time intervals are then calculated and stored in the `temporal_profile` dictionary.

Note that this is just one possible implementation, and you can modify the code to fit your specific needs. Also, keep in mind that this is a simplified example, and in a real-world scenario, you would likely want to consider more factors when generating the temporal profile, such as the time of day, day of the week, and other business-related variables.