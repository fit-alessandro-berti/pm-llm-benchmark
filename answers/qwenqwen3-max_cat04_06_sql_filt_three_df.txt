Here's the DuckDB SQL query that meets all the specified requirements:

```sql
WITH ordered_events AS (
    -- Add row numbers to identify sequence within each case
    SELECT 
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) as rn
    FROM event_log
),
sequence_candidates AS (
    -- Find cases with the exact sequence of three activities in direct succession
    SELECT DISTINCT e1.case_id
    FROM ordered_events e1
    JOIN ordered_events e2 ON e1.case_id = e2.case_id AND e1.rn + 1 = e2.rn
    JOIN ordered_events e3 ON e1.case_id = e3.case_id AND e1.rn + 2 = e3.rn
    WHERE e1.activity = 'Approve Purchase Requisition'
      AND e2.activity = 'Create Order'
      AND e3.activity = 'Confirm Order'
      AND e3.timestamp - e2.timestamp > INTERVAL 5 DAYS
)
-- Return all events except those from cases that match both criteria
SELECT 
    case_id,
    activity,
    timestamp
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM sequence_candidates)
ORDER BY case_id, timestamp;
```

**Explanation of the approach:**

1. **`ordered_events` CTE**: 
   - Uses `ROW_NUMBER()` to assign sequential numbers to events within each case based on timestamp
   - This allows us to identify consecutive events within the same case

2. **`sequence_candidates` CTE**:
   - Joins the ordered events three times to find cases where the three specific activities appear in direct succession (consecutive row numbers)
   - The join conditions `e1.rn + 1 = e2.rn` and `e1.rn + 2 = e3.rn` ensure no other events exist between them
   - Filters for the exact activity sequence: 'Approve Purchase Requisition'  'Create Order'  'Confirm Order'
   - Applies the timing condition: `e3.timestamp - e2.timestamp > INTERVAL 5 DAYS` (time between 'Create Order' and 'Confirm Order' exceeds 5 days)

3. **Final SELECT**:
   - Returns all events from the original `event_log` table
   - Excludes any events where the `case_id` appears in the `sequence_candidates` CTE
   - Orders the results by `case_id` and `timestamp` for consistent output

This query efficiently identifies cases that meet both the sequential activity pattern and timing condition, then excludes all events from those cases from the final result set.