Sure! Below is the Python code to construct an **Accepting Petri Net** for the insurance claim management process using `pm4py`. The Petri Net models all the activities and their dependencies, including loops for document re-submission and in-depth fraud investigation.

---

### **Petri Net Construction for Insurance Claim Management**
```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create Petri Net
net = PetriNet(name="Insurance Claim Management")

# Places (representing states between activities)
start = PetriNet.Place("start")
p_cr = PetriNet.Place("p_cr")   # After Claim Registration
p_dv = PetriNet.Place("p_dv")   # After Document Verification
p_rds = PetriNet.Place("p_rds") # After Re-Document Submission
p_fc = PetriNet.Place("p_fc")   # After Fraud Check
p_ii = PetriNet.Place("p_ii")   # After In-depth Investigation
p_ca = PetriNet.Place("p_ca")   # After Claim Assessment
p_ap = PetriNet.Place("p_ap")   # After Approval
p_p = PetriNet.Place("p_p")     # After Payment
p_n = PetriNet.Place("p_n")     # After Notification
end = PetriNet.Place("end")     # Claim Closure (Final State)

# Transitions (representing activities)
t_c = PetriNet.Transition("C", "Insurance Claim")
t_cr = PetriNet.Transition("CR", "Claim Registration")
t_dv = PetriNet.Transition("DV", "Document Verification")
t_rds = PetriNet.Transition("RDS", "Re-Document Submission")
t_fc = PetriNet.Transition("FC", "Fraud Check")
t_ii = PetriNet.Transition("II", "In-depth Investigation")
t_ca = PetriNet.Transition("CA", "Claim Assessment")
t_ap = PetriNet.Transition("AP", "Approval")
t_p = PetriNet.Transition("P", "Payment")
t_n = PetriNet.Transition("N", "Notification")
t_cl = PetriNet.Transition("CL", "Closure")

# Adding Places and Transitions to the Net
net.places.update({start, p_cr, p_dv, p_rds, p_fc, p_ii, p_ca, p_ap, p_p, p_n, end})
net.transitions.update({t_c, t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_p, t_n, t_cl})

# Arcs (connecting places and transitions)
petri_utils.add_arc_from_to(start, t_c, net)
petri_utils.add_arc_from_to(t_c, p_cr, net)

petri_utils.add_arc_from_to(p_cr, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_dv, net)

petri_utils.add_arc_from_to(p_dv, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_fc, net)

# Document re-submission loop
petri_utils.add_arc_from_to(p_dv, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_dv, net)

petri_utils.add_arc_from_to(p_fc, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_ca, net)

# Fraud Investigation loop
petri_utils.add_arc_from_to(p_fc, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_fc, net)

petri_utils.add_arc_from_to(p_ca, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_ap, net)

petri_utils.add_arc_from_to(p_ap, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_p, net)

petri_utils.add_arc_from_to(p_p, t_p, net)
petri_utils.add_arc_from_to(t_p, p_n, net)

petri_utils.add_arc_from_to(p_n, t_n, net)
petri_utils.add_arc_from_to(t_n, end, net)

# Define Initial Marking (New claim starts in "start" place)
im = Marking()
im[start] = 1

# Define Final Marking (Claim is considered complete at "end" place)
fm = Marking()
fm[end] = 1
```

---

### **Explanation:**
1. **Places:** Represent different states between activities.
2. **Transitions:** Represent activities like claim registration, verification, fraud check, etc.
3. **Arcs:** Define the process flow.
4. **Loops:**
   - Between **Document Verification (DV) â†’ Re-Document Submission (RDS) â†’ DV** for incomplete documents.
   - Between **Fraud Check (FC) â†’ In-depth Investigation (II) â†’ FC** for multiple fraud investigations.
5. **Initial Marking:** Starts with a token in the `start` place.
6. **Final Marking:** Ends with a token in the `end` place when the claim is closed.

This **Accepting Petri Net** accurately models the **insurance claim management process** with real-world conditions like document re-submission and fraud investigation loops. ðŸš€