Below is one valid solution. In this example we build a Petri net that “starts” with a new claim (a token in place p_claim) and then flows through the following steps (each represented by a transition with its label):

• Claim Registration (CR)  
• Document Verification (DV)  
– If the documents are incomplete then the Re-Document Submission (RDS) transition fires and sends the token back (looping to let DV occur again)  
• Fraud Check (FC)  
– If doubts arise, the In-depth Investigation (II) transition “loops” on the Fraud Check state (p_fc) and can be repeated  
• Claim Assessment (CA)  
• Approval (AP)  
• Payment (P)  
• Notification (N)  
• Closure (CL)  

In the code below, we create nine places:
p_claim – the initial place (a filed Insurance Claim)  
p_cr – the state after claim registration  
p_dv – the state after document verification  
p_fc – the state after fraud check  
p_ca – the state after claim assessment  
p_ap – the state after approval  
p_p – the state after payment  
p_n – the state after notification  
p_closed – the final state (the claim is closed)

We then add transitions with the appropriate labels and connect them by using arcs. Finally, the initial marking places one token on p_claim and the final marking has one token on p_closed.

The complete Python code is as follows:

-------------------------------------------------------
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet("InsuranceClaimProcess")

# Create places
p_claim = PetriNet.Place("p_claim")      # Newly filed Insurance Claim
p_cr    = PetriNet.Place("p_cr")         # After Claim Registration
p_dv    = PetriNet.Place("p_dv")         # After Document Verification
p_fc    = PetriNet.Place("p_fc")         # After Fraud Check
p_ca    = PetriNet.Place("p_ca")         # After Claim Assessment
p_ap    = PetriNet.Place("p_ap")         # After Approval
p_p     = PetriNet.Place("p_p")          # After Payment
p_n     = PetriNet.Place("p_n")          # After Notification
p_closed= PetriNet.Place("p_closed")     # Claim Closure (final state)

# Add places to the net
net.places.add(p_claim)
net.places.add(p_cr)
net.places.add(p_dv)
net.places.add(p_fc)
net.places.add(p_ca)
net.places.add(p_ap)
net.places.add(p_p)
net.places.add(p_n)
net.places.add(p_closed)

# Create transitions with the given labels
tCR  = PetriNet.Transition("tCR", "Claim Registration")
tDV  = PetriNet.Transition("tDV", "Document Verification")
tRDS = PetriNet.Transition("tRDS", "Re-Document Submission")
tFC  = PetriNet.Transition("tFC", "Fraud Check")
tII  = PetriNet.Transition("tII", "In-depth Investigation")
tCA  = PetriNet.Transition("tCA", "Claim Assessment")
tAP  = PetriNet.Transition("tAP", "Approval")
tP   = PetriNet.Transition("tP", "Payment")
tN   = PetriNet.Transition("tN", "Notification")
tCL  = PetriNet.Transition("tCL", "Closure")

# Add transitions to the net
net.transitions.add(tCR)
net.transitions.add(tDV)
net.transitions.add(tRDS)
net.transitions.add(tFC)
net.transitions.add(tII)
net.transitions.add(tCA)
net.transitions.add(tAP)
net.transitions.add(tP)
net.transitions.add(tN)
net.transitions.add(tCL)

# Add arcs to connect places and transitions

# Start with the newly filed claim (p_claim)
petri_utils.add_arc_from_to(p_claim, tCR, net)
petri_utils.add_arc_from_to(tCR, p_cr, net)

# Document Verification (DV) is executed after Claim Registration
petri_utils.add_arc_from_to(p_cr, tDV, net)
petri_utils.add_arc_from_to(tDV, p_dv, net)

# From Document Verification state there are two alternatives:
# 1. If documents are incomplete: re-submit documents (RDS) and loop back to claim registration
petri_utils.add_arc_from_to(p_dv, tRDS, net)
petri_utils.add_arc_from_to(tRDS, p_cr, net)

# 2. If documents are complete: proceed to Fraud Check (FC)
petri_utils.add_arc_from_to(p_dv, tFC, net)
petri_utils.add_arc_from_to(tFC, p_fc, net)

# In the Fraud Check state (p_fc):
#  - An in-depth investigation (II) can be triggered (possibly several times), modeled
#    as a self-loop on p_fc.
petri_utils.add_arc_from_to(p_fc, tII, net)
petri_utils.add_arc_from_to(tII, p_fc, net)

# Then, once the fraud check clears, Claim Assessment (CA) is performed.
petri_utils.add_arc_from_to(p_fc, tCA, net)
petri_utils.add_arc_from_to(tCA, p_ca, net)

# Next, Approval (AP) is required.
petri_utils.add_arc_from_to(p_ca, tAP, net)
petri_utils.add_arc_from_to(tAP, p_ap, net)

# Payment (P) is performed next.
petri_utils.add_arc_from_to(p_ap, tP, net)
petri_utils.add_arc_from_to(tP, p_p, net)

# Then Notification (N) is sent.
petri_utils.add_arc_from_to(p_p, tN, net)
petri_utils.add_arc_from_to(tN, p_n, net)

# Finally, the claim is Closed (CL)
petri_utils.add_arc_from_to(p_n, tCL, net)
petri_utils.add_arc_from_to(tCL, p_closed, net)

# Define the initial and final markings
im = Marking()
im[p_claim] = 1   # The process starts with a new insurance claim

fm = Marking()
fm[p_closed] = 1  # The process completes when the claim is closed

# (Optional) Print out the net details – for debugging purposes
print("Petri net created with places:")
for p in net.places:
    print("  ", p.name)
    
print("\nTransitions:")
for t in net.transitions:
    print("  ", t.name, "->", t.label)

print("\nInitial Marking:", {p.name: im[p] for p in im})
print("Final Marking:", {p.name: fm[p] for p in fm})

-------------------------------------------------------

Explanation of the code structure:

1. A new Petri net called "InsuranceClaimProcess" is defined.  
2. Nine places are added: the initial p_claim and the final p_closed, with intermediate places capturing the end state of each activity.  
3. Ten transitions are defined corresponding to the activities CR, DV, RDS, FC, II, CA, AP, P, N, and CL.  
4. Arcs tie the places and transitions together. Notice that:
– After Document Verification (p_dv), two arcs leave: one to RDS (which returns the token to p_cr so DV can be repeated) and one to FC (to continue the process).  
– Similarly, in the fraud check state (p_fc), the II transition loops back to allow multiple in-depth investigations before proceeding via CA.  
5. The initial marking puts one token in p_claim and the final marking indicates that one token must reach p_closed.

This Petri net properly models the described insurance claim process with the intended loops for re-document submission and in-depth investigation, and it uses the pm4py framework constructs as required.