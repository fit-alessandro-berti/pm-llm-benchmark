To achieve the desired result, we need to follow these steps:

1. Identify cases that contain the specific sequence of activities.
2. Filter those cases to ensure the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.
3. Exclude events from these identified cases from the final result.

Here is the DuckDB SQL query to accomplish this:

```sql
WITH sequence_cases AS (
    SELECT
        case_id
    FROM
        event_log
    WHERE
        activity = 'Approve Purchase Requisition'
    INTERSECT
    SELECT
        case_id
    FROM
        event_log
    WHERE
        activity = 'Create Order'
    INTERSECT
    SELECT
        case_id
    FROM
        event_log
    WHERE
        activity = 'Confirm Order'
),
filtered_cases AS (
    SELECT
        e1.case_id
    FROM
        event_log e1
    JOIN
        event_log e2 ON e1.case_id = e2.case_id
    JOIN
        event_log e3 ON e1.case_id = e3.case_id
    WHERE
        e1.activity = 'Approve Purchase Requisition'
        AND e2.activity = 'Create Order'
        AND e3.activity = 'Confirm Order'
        AND e1.timestamp < e2.timestamp
        AND e2.timestamp < e3.timestamp
        AND e3.timestamp - e2.timestamp > INTERVAL '5 days'
    INTERSECT
    SELECT
        case_id
    FROM
        sequence_cases
)
SELECT
    *
FROM
    event_log
WHERE
    case_id NOT IN (SELECT case_id FROM filtered_cases);
```

### Explanation:

1. **sequence_cases CTE**:
   - This Common Table Expression (CTE) identifies cases that contain all three activities: 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order'.

2. **filtered_cases CTE**:
   - This CTE filters the cases identified in `sequence_cases` to ensure that the activities appear in the correct order and the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.
   - The `INTERSECT` operation ensures that only cases with the exact sequence and the timing condition are selected.

3. **Final SELECT**:
   - This query selects all events from `event_log` where the `case_id` is not in the list of `case_id`s identified in `filtered_cases`.

This query ensures that only events from cases that do not meet the specified sequence and timing condition are included in the final result.