Below is a ready-to-use prompt you can pass to the target LLM.  
It already contains the full schema, example data and clear instructions, so you can copy–paste it verbatim.  
(Everything after the line “—-8<--- PROMPT START…” is the prompt itself.)

—-8<--- PROMPT START —-

You are an experienced process-mining and data-forensics analyst.  
Your task is to examine the event log of an order-to-cash process, detect anomalies or undesirable behaviours, hypothesise plausible root causes and design SQL investigations.

============================================================
DATABASE & SCHEMA
============================================================

Database: PostgreSQL

Tables and columns:

1. order_event_log  
   • case_id        INTEGER   – order identifier  
   • event_id       INTEGER   – unique event identifier (PK)  
   • activity       VARCHAR   – activity name  
   • timestamp      TIMESTAMP – event time  
   • resource       VARCHAR   – who/what executed the activity  
   • additional_info VARCHAR  – free-text key=value pairs  

2. orders  
   • case_id     INTEGER (PK) – FK to order_event_log.case_id  
   • customer_id INTEGER  
   • order_type  VARCHAR      – e.g. standard, priority  
   • order_value DECIMAL      

3. resources  
   • resource_id VARCHAR (PK) – FK to order_event_log.resource  
   • role        VARCHAR      – e.g. SalesRep, CreditOfficer  
   • department  VARCHAR      

============================================================
NOMINAL PROCESS SEQUENCE
============================================================
1. Register Order   (Sales)  
2. Perform Credit Check  (Finance)  
3. Validate Stock   (Warehouse)  
4. Confirm Shipment (Logistics)  
5. Ship Goods       (Logistics)  
6. Issue Invoice    (Finance)  
7. Receive Payment  (Finance)

============================================================
SAMPLE EVENT LOG ROWS (order_event_log)
============================================================
| case_id | event_id | activity              | timestamp            | resource         | additional_info |
|---------|----------|-----------------------|----------------------|------------------|-----------------|
| 1001    | 1        | Register Order        | 2024-02-01 08:15:00 | SalesRep_01      | channel=online  |
| 1001    | 2        | Perform Credit Check  | 2024-02-01 08:30:00 | CreditOfficer_1  | credit_score=810|
| 1001    | 3        | Validate Stock        | 2024-02-01 09:00:00 | WarehouseClerk_2 | stock_checked=OK|
| 1001    | 4        | Confirm Shipment      | 2024-02-01 09:15:00 | LogisticsMgr_1   | shipment_scheduled=Y|
| 1001    | 5        | Ship Goods            | 2024-02-01 09:45:00 | WarehouseClerk_3 | tracking_id=TRK123|
| 1001    | 6        | Issue Invoice         | 2024-02-01 10:00:00 | FinanceTeam_01   | invoice_id=INV1001|
| 1001    | 7        | Receive Payment       | 2024-02-05 15:00:00 | FinanceTeam_02   | amount=1250.00  |
-----
| 1002    | 8        | Register Order        | 2024-02-01 08:20:00 | SalesRep_02      | channel=call_center|
| 1002    | 9        | Confirm Shipment      | 2024-02-01 08:25:00 | LogisticsMgr_2   | attempted_early=Y|
| 1002    | 10       | Ship Goods            | 2024-02-01 08:40:00 | WarehouseClerk_1 | tracking_id=TRK987|
| 1002    | 11       | Perform Credit Check  | 2024-02-01 09:10:00 | CreditOfficer_2  | credit_score=650|
| 1002    | 12       | Validate Stock        | 2024-02-01 09:15:00 | WarehouseClerk_2 | stock_checked=OK|
| 1002    | 13       | Issue Invoice         | 2024-02-01 09:30:00 | FinanceTeam_03   | invoice_id=INV1002|
| 1002    | 14       | Receive Payment       | 2024-02-02 10:00:00 | FinanceTeam_02   | amount=2000.00  |
-----
| 1003    | 15       | Register Order        | 2024-02-01 08:45:00 | SalesRep_03      | channel=online  |
| 1003    | 16       | Perform Credit Check  | 2024-02-01 09:00:00 | CreditOfficer_1  | credit_score=720|
| 1003    | 17       | Ship Goods            | 2024-02-01 09:10:00 | WarehouseClerk_3 | tracking_id=TRK555|
| 1003    | 18       | Issue Invoice         | 2024-02-01 09:30:00 | FinanceTeam_01   | invoice_id=INV1003|
| 1003    | 19       | Confirm Shipment      | 2024-02-01 09:45:00 | LogisticsMgr_2   | late_confirmation=Y|
| 1003    | 20       | Receive Payment       | 2024-02-02 11:00:00 | FinanceTeam_02   | amount=1500.00  |
-----
| 1004    | 21       | Register Order        | 2024-02-01 09:00:00 | SalesRep_01      | channel=online  |
| 1004    | 22       | Receive Payment       | 2024-02-01 09:05:00 | FinanceTeam_02   | amount=3000.00  |
| 1004    | 23       | Issue Invoice         | 2024-02-01 09:20:00 | FinanceTeam_01   | invoice_id=INV1004|
| 1004    | 24       | Confirm Shipment      | 2024-02-01 09:25:00 | LogisticsMgr_1   | shipment_scheduled=N|
| 1004    | 25       | Ship Goods            | 2024-02-01 09:50:00 | WarehouseClerk_4 | tracking_id=TRK333|

============================================================
YOUR TASKS
============================================================

1. Detect Anomalies  
   • Compare observed event sequences, timestamps and resources against the nominal process flow.  
   • Identify anything that looks out of order, missing, duplicated, late, early, role-violating, etc.  

2. Hypothesise Root Causes  
   • For every anomaly, suggest plausible explanations (system bug, policy breach, training gap, rush orders, fraud, etc.).  
   • Make sure each hypothesis is grounded in the data and business context.

3. Design Investigations  
   • Provide concrete SQL queries (PostgreSQL dialect) that an analyst could run on order_event_log and, if relevant, on orders and resources, to validate or refute each hypothesis.  
   • For every query include a brief comment (# or --) explaining what it will reveal.  
   • Do NOT actually execute the queries or show results—just craft them.

OUTPUT FORMAT (strict):
------------------------------------------------------------
A. List of Anomalies  
   A1. …  
   A2. …

B. Hypotheses & Reasoning  
   B1. (reference to anomaly) …  
   B2. …

C. SQL Investigations  
   C1. -- description  
       SELECT …;  
   C2. -- description  
       SELECT …;
------------------------------------------------------------

Additional guidance:
• Rely solely on the information provided above; do not invent extra schema or data.  
• Be thorough yet concise.  
• Use plain language—avoid revealing internal “chain-of-thought”; present only final reasoning.  
• If you need to reference time gaps, remember PostgreSQL interval arithmetic.  
• You may add temporary CTEs for readability.

Begin.

—- PROMPT END —-8<-