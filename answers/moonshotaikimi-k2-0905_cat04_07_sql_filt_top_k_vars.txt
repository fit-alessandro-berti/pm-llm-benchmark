Below is a self-contained DuckDB statement that does everything requested for an arbitrary K.  
(Replace the first `3` with any other integer to change K.)

```sql
-- Parameter: how many of the most frequent variants we want to keep
SET k=3;

----------------------------------------------------------
-- 1.  Build one row per case that contains the ordered
--     list of activities (the "variant")
----------------------------------------------------------
WITH ordered_events AS (
    SELECT  case_id,
            activity,
            row_number() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
    FROM    event_log
),
variant_per_case AS (
    SELECT  case_id,
            string_agg(activity, '  ' ORDER BY rn) AS variant
    FROM    ordered_events
    GROUP BY case_id
),
----------------------------------------------------------
-- 2.  Rank variants by frequency
----------------------------------------------------------
variant_stats AS (
    SELECT  variant,
            count(*) AS freq,
            dense_rank() OVER (ORDER BY count(*) DESC) AS rnk
    FROM    variant_per_case
    GROUP BY variant
),
----------------------------------------------------------
-- 3.  Keep only the cases that belong to the top-k variants
----------------------------------------------------------
top_k_cases AS (
    SELECT v.*
    FROM   variant_per_case AS v
    JOIN   variant_stats   AS s
           ON v.variant = s.variant
    WHERE  s.rnk <= current_setting('k')::int
)
----------------------------------------------------------
-- 4.  Return the original events for those cases
----------------------------------------------------------
SELECT e.*
FROM   event_log AS e
JOIN   top_k_cases AS t
       ON e.case_id = t.case_id
ORDER BY e.case_id, e.timestamp;
```

What the query does, step by step:

1. `ordered_events` numbers every case’s events in chronological order.
2. `variant_per_case` concatenates those ordered activities into a human-readable string (the “variant”).  
   (`LIST(activity ORDER BY rn)` can be used instead of `string_agg` if you prefer an array type.)
3. `variant_stats` counts how many cases share each variant and ranks them by frequency.
4. `top_k_cases` keeps only the cases whose variant rank  K.
5. The final `SELECT` retrieves the original event rows for those surviving cases.