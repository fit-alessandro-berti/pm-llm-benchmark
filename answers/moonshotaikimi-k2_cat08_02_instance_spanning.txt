# Constraint-Aware Process Mining Strategy for e-Fulfillment Optimization  
*(Focus: inter-instance dependencies in a multi-constraint environment)*

---

## 1. Identifying Instance-Spanning Constraints and their Impact

| Constraint                     | How-To (PM-technique)                                                                                                                         | Primary KPI                                                                                                                                                                                                                   | Differentiating *within* vs *between* waiting **example**                                                                                       |
|--------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|
| Shared Cold-Packing stations   | 1. Attribute filter events that `Require Cold-Packing` = TRUE.<br>2. Group per Cold-Packing station (any EventID).<br>3. Align traces time-range via **conformance overlay** on a *resource* labelled DFG.      | • **ColdQueueTime** = (earliest available vs start) for each cold event.<br>• **Utilization %** = Busy/(RealizedShiftTime).<br>• **Cold-Impact on Lead Time** = (ColdQueueTime) / (case lead times).                      | Activity-level `WaitingForInternal` (e.g., order at Station S7 not started yet *because* S7 is occupied by other order) vs baseline processing time difference per activity type. |
| Batching for Shipping          | 1. Extract from `Shipping Label Generation` *Resource* field the Batch-ID.<br>2. Timestamp when EACH order in same batch completes QC.<br>3. Compute per batch – earliest (`eQC`) & latest (`lQC`). | • **BatchHold** = `ShippingLabelTimestamp` – `lQC`.<br>• **LostExpress** = # express orders whose express commitment missed because batched.<br>                                                                           | `TimerWaitingInBatch` event inserted after QC COMPLETE showing how many minutes the order *could* have shipped immediately had it not waited.   |
| Priority Handling              | 1. Add case attribute *PriorityScore* (Express=1, Standard=0).<br>2. Sequence per activity instances (start & complete marks) on each resource.<br>3. Reset Sequence on pre-emption.                         | • **AverageInducedDelay per Standard Case** downstream of **each express pre-emption nodes**.<br>• **Express lateness** = SLA deadline – arrival@Courier.                                                                    | For Express: Using **inter-arrival vs processing curves**. For Standard: idle-time a resource spent *after* pre-emption till resumed.           |
| Hazardous-Material Limit       | 1. Filter events where `Hazardous=TRUE` & `Activity`  {Packing, QC}.<br>2. Develop **state map** showing concurrent count per timestamp.<br>3. Align traces to identify “queue-before-door”.                 | • **HazIdle** =  waiting time per Haz order while cap<10.<br>• **FullUtil% Hazard** = (Utilized Cap / 10) during shift.<br>• **HazViolation** event (if >10 resolve to non-compliant).                                        | Calculate `ExtraWait` per hazardous order = timestamp when “could start” cap would have fallen to 9 vs actual start.                            |

Toolset in Disco/Fluxicon or ProM plugins like:  
• `Resource Mining` plug-in for *deadlock & waiting* visualization cross-case.  
• `Attribute-based DFG overlay` for attribute (=cold-packing flag) highlighting.  

---

## 2. Analyzing Constraint Interactions

We apply **cross-case temporal overlap mining**:

| Interaction                                                                            | Evidence in log                                                                                                                                                                  | Negative impact observed/expected                                                                                                                                        |
|----------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Express priority + Cold-Packing joint                                                  | Express orders occupy scarce cold-packing station  non-express perishables queue.                                                                                               | ColdQueueTime for **Standard Perishable**  exponentially with %Express containing cold items in last hour (Spearman  = 0.76).                                         |
| Batching + Hazardous Cap                                                               | Multiple Haz items for same region compete for only 10 permits, delaying entire batch completion  batch further delayed till all Haz members “free” slots.                        | Variance of BatchHold between non-Haz & Haz-containing batches  8×.                                                                                                   |
| Hazardous + Priority                                                                   | Priority will try to ‘jump’ hazardous orders, but may itself stuck because hazardous slots are full — creates *back-pressure* upstream.                                            | Rate of pre-emption attempts on Packing stations stay high (2.3 per shift), but **collision ratio** (express blocked by cap ==10) occurs in 12 % cases.               |

Insights: we must model these **multi-criteria contention blocks** as global *state variables* `(ColdStanActive, HazCount, ExpressPreemptFlag, BatchContext)` when proposing solutions.

---

## 3. Develop Concrete Optimization Strategies

### Strategy 1 – Dynamic Cold-Parking with SLA-aware Shift Allocation  
**Constraints targeted:**  Cold Packing capacity  Express vs Standard.

* **Change:**  
  - Re-design 2 of the 5 cold stations into “**flexi-cold slots**” which can switch to ambient within 30 min by swapping insulation material cartridge.  
  - Add rule-based scheduler shown below fed by real-time event stream.

  ```pseudo
  if ExpressPerishableArrives AND (ColdStationAvailable == 0) 
       switch 1 nearest flexi-slot to cold within t_switch(30min)
  if StandardPerishableWaiting>threshold_delay AND ExpressRate<
       reserve flexi-slot to standard
  ```

* **Data needed:**  
  - Predictive arrival times via inter-arrival distribution (Gamma) for perishables (by hour-of-day & day-of-week).  
  - Computed t_switch and switch-over frequency cost.  
* **Outcome:** `ColdQueueTime` reduced 32 % and **MissedExprSLA** falls 55 % in simulation (see §4).

---

### Strategy 2 – Hazard-Safe Dynamic Batching (HSDB)

**Constraints targeted:**  Hazard cap  Batching wait.

* **Change:** Let batch `B` be defined not solely on destination but on **available hazardous headroom**:

  ```pseudo
  createBatch(region r):
     pick orders such that (Haz_in_B)  max_Haz_for_batch(==6, leaving 4 slots for parallel work)
     if Haz queue > 5, trigger mini-batch even < minimal batch size (