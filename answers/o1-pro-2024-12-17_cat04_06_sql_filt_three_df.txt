Below is an example of a DuckDB SQL query that meets the stated requirements. It uses window functions to identify the specified sequence of three activities and calculates the time difference between the 'Create Order' and 'Confirm Order' events. Finally, it excludes any cases meeting the sequence and timing condition.

```sql
WITH sequences AS (
    SELECT
        case_id,
        timestamp AS ts_approve,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity1,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity2,
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS ts_create,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS ts_confirm
    FROM event_log
    WHERE activity = 'Approve Purchase Requisition'
),
excluded_cases AS (
    SELECT
        case_id
    FROM sequences
    WHERE next_activity1 = 'Create Order'
      AND next_activity2 = 'Confirm Order'
      AND (ts_confirm - ts_create) > INTERVAL '5' DAY
)

SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM excluded_cases)
ORDER BY case_id, timestamp;
```

**Explanation:**

1. **CTE `sequences`:**
   - We start by filtering down to rows where the current activity is `'Approve Purchase Requisition'`. 
   - Using `LEAD` functions, we peek at the next two activities and their timestamps for the same case, in chronological order.
   - This allows us to identify if the next two activities after `'Approve Purchase Requisition'` are `'Create Order'` and `'Confirm Order'`.

2. **CTE `excluded_cases`:**
   - From `sequences`, we select only those `case_id`s where the identified three-step sequence is found (`Approve Purchase Requisition` -> `Create Order` -> `Confirm Order`).
   - We also check if the time difference between the `Create Order` and `Confirm Order` events in that sequence is greater than 5 days. Only cases meeting this timing condition are chosen for exclusion.

3. **Final Selection:**
   - We select all events from `event_log` whose `case_id` is not in the `excluded_cases` set. 
   - This yields a final result of all events from cases that do not have the specified three-activity sequence with a more than 5-day delay between `Create Order` and `Confirm Order`.

This query ensures that the result set consists solely of events from cases that are not filtered out by the given criteria.