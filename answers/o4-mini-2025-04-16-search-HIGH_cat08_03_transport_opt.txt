## 1. Process Discovery and Conformance Checking

### a. Preprocessing & Data Integration  
- **Timestamp alignment**: Normalize timestamps from all sources into a common timezone and format, then round or bucket as needed (e.g., to the nearest second) to enable reliable event ordering.  
- **Case identification**: Define each “case” as a vehicle-day (e.g., V12-20241205). Assign every GPS, scanner, dispatch and maintenance event to its case by matching on Vehicle ID + date.  
- **Event enrichment**:  
  - Join dispatcher records (planned route & stops) to GPS traces via spatial join (nearest depot/stop coordinates) and time overlap.  
  - Append maintenance logs by matching Vehicle ID and timestamp.  
  - Add derived attributes like “planned stop sequence number,” “time window start/end,” or “route ID.”  
- **Data cleaning**:  
  - Remove duplicate or spurious GPS pings (e.g., outliers >200 km/h).  
  - Fill small gaps (e.g., where GPS briefly drops) via interpolation if <1 min.  
  - Flag missing scanner events or mis-ordered delivery scans for later conformance checks.  

Challenges include inconsistent naming conventions (e.g., scanner event “Depart Customer” vs. GPS status “moving”), mis-aligned clocks across devices, handling overlapping cases (multi-day shifts), and merging high-frequency GPS with sparser scanner events without information loss.

### b. Process Discovery  
- **Event log construction**: For each case, build an ordered event sequence from “Start Shift”  “Depart Depot”  {drive segments, arrival/departure at each stop, unscheduled stops, maintenance stops}  “Arrive Depot”  “End Shift.”  
- **Discovery algorithms**:  
  - **Inductive Miner**: to derive a block-structured, sound process model capturing common sequences (ideal for clear delivery loops).  
  - **Heuristic/Fuzzy Miner**: to visualize frequent versus infrequent paths, filter noise (e.g., rare maintenance stops), and reveal complex interleavings (maintenance during route).  
- **Process map visualization**: Show the main backbone (depot  stop1  stop2  …  depot) with branching for:  
  - Failed deliveries (leading to return visits)  
  - Unplanned stops (maintenance, low-speed waits)  
  - Overtime extensions  

### c. Conformance Checking  
- **Model enrichment**: Import the dispatch’s planned route model (sequence of planned stops, time windows, and travel time estimates).  
- **Alignment-based checking**: Compute minimal edit-distance alignments between actual vs. planned sequences to identify:  
  1. **Missing stops**: planned stops not visited.  
  2. **Unplanned stops**: actual visits or stops (e.g., maintenance) not in plan.  
  3. **Reordered stops**: cases where the sequence deviates (e.g., stop 5 executed before stop 4).  
  4. **Time deviations**:  
     - Early/late arrivals relative to planned window.  
     - Extended duration between scan-events vs. dispatch’s travel time estimate.  
- **Deviation analysis**: Classify deviations by severity (e.g., >15 min late), by type (sequence vs. timing), and frequency per route/driver/vehicle.

---

## 2. Performance Analysis and Bottleneck Identification

### a. Key Performance Indicators (KPIs)  
1. **On-Time Delivery Rate**  
   = (# deliveries completed within customer window) ÷ (total scheduled deliveries)  
2. **Average Time per Delivery Stop**  
   = (sum of service times at stops) ÷ (# stops)  
3. **Travel Time vs. Service Time Ratio**  
   = (total driving time) ÷ (total service time)  
4. **Fuel Consumption per km (or per package)**  
   = (fuel used from vehicle telematics or inferred from mileage & average consumption) ÷ (km driven)  
5. **Vehicle Utilization Rate**  
   = (active time: from depart depot to return) ÷ (scheduled shift length)  
6. **Traffic Delay Frequency & Duration**  
   = (# low-speed or idle events tagged as traffic) and (sum of delay minutes)  
7. **Failed Delivery Rate**  
   = (# failed attempts) ÷ (total attempts)

All metrics derive from timestamp differences and status flags in the integrated event log.

### b. Bottleneck Detection Techniques  
- **Performance-annotated process maps**: Color edges/nodes by median throughput time (e.g., long drive segments in red).  
- **Dotted/Dot-plot charts**: Plot each case’s timeline, quickly spotting clusters of long dwell times (e.g., at specific stops or on specific roads).  
- **Variant analysis**: Identify the top 80 % most frequent route variants; isolate those with the worst KPI performance.  
- **Group-by pivot**: Aggregate KPIs by route, driver, time-of-day window, vehicle type, or geographic zone to pinpoint “hot” bottlenecks.  
- **Heatmaps on maps**: Map low-speed GPS segments to city roads to reveal recurring congestion hotspots.

By quantifying the average extra time per case or per km in each segment/stop, we can prioritize which bottleneck contributes the greatest absolute delay or cost.

---

## 3. Root Cause Analysis for Inefficiencies

1. **Suboptimal Route Planning**  
   - Compare actual driven distance/time vs. planned. Large systematic over-runs point to static route optimization that fails to account for real-world road networks.  
2. **Inaccurate Travel Time Estimations**  
   - Drill into segments where actual transit time consistently exceeds dispatch estimates by >20 %. Correlate with GPS-derived speed profiles to validate.  
3. **Traffic Congestion Patterns**  
   - Overlay external traffic data (e.g., city congestion indices) on low-speed GPS events to confirm that delays align with peak hours or known bottlenecks.  
4. **Service Time Variability**  
   - Plot distribution of scan-to-scan times per stop. High variance or long tails suggest inconsistent customer interactions or parking challenges.  
5. **Vehicle Breakdowns & Maintenance**  
   - Correlate unscheduled maintenance events (engine-warning stops) with subsequent slowdowns or failed schedules.  
6. **Driver Behavior Differences**  
   - Segment cases by driver: compare average speeds, adherence to sequence, service times. Outliers may indicate need for retraining.  
7. **Failed Delivery Attempts**  
   - Analyze patterns in failures: specific time-windows, repeated customers, or routes. Identify whether time-window misalignment or customer-communication breakdowns are to blame.

Technique: use **cross-case correlation** (e.g., traffic level vs. transit time) and **variant clustering** (high- vs. low-performing) to validate hypothesized root causes.

---

## 4. Data-Driven Optimization Strategies

### Strategy A: Real-Time Dynamic Routing  
- **Target inefficiency**: Delays from unexpected traffic and sequence deviations.  
- **Root cause addressed**: Static routes that ignore live congestion and evolving case status (e.g., cancellations, new urgent parcels).  
- **Process mining insight**: Correlation of traffic hotspots with high delay segments and reordering of stops mid-shift in the discovered model.  
- **Implementation**: Integrate a traffic-aware routing engine that ingests live GPS + dispatch changes; automatically re-sequence remaining stops to minimize predicted delay.  
- **Expected KPI impact**:  
  - On-Time Delivery Rate  by 5–10 %  
  - Travel Time vs. Service Time Ratio  by 8–12 %  
  - Fuel Consumption per km  by 3–5 %

### Strategy B: Route & Territory Redesign via Historical Clustering  
- **Target inefficiency**: Excessive cross-town travel and imbalanced load among routes.  
- **Root cause addressed**: Inefficient stop grouping leading to long inter-stop distances and under-utilized vehicle capacity.  
- **Process mining insight**: Variant analysis revealed multiple low-volume, high-distance variants on certain days; spatial clustering showed natural geographic clusters.  
- **Implementation**:  
  - Apply clustering algorithms to six months of stops by geo-proximity and time-window overlap.  
  - Redefine territories so that each route’s stops form compact, heavily loaded clusters.  
  - Reassign packages/drivers to balance daily volumes.  
- **Expected KPI impact**:  
  - Average Time per Delivery Stop  by 10–15 %  
  - Vehicle Utilization Rate  to 90–95 %  
  - Fuel Consumption per package  by 7–10 %

### Strategy C: Predictive Maintenance Scheduling  
- **Target inefficiency**: Unscheduled stops causing long downtime and overtime.  
- **Root cause addressed**: Reactive maintenance triggered by on-road breakdowns rather than condition-based scheduling.  
- **Process mining insight**: Maintenance events cluster after ~5,000 km or following repeated idling with engine warnings.  
- **Implementation**:  
  - Build a predictive model on vehicle usage metrics (mileage, idle-time patterns, engine-warning occurrences) to forecast likely maintenance need.  
  - Schedule preventive maintenance during low-demand windows (e.g., mid-week nights) before failure thresholds.  
- **Expected KPI impact**:  
  - Unscheduled Stop Frequency  by 60–70 %  
  - Overtime Hours  by 15–20 %  
  - On-Time Delivery Rate  by 2–4 %

---

## 5. Operational Constraints & Continuous Monitoring

### a. Respecting Constraints  
- **Driver hours**: Integrate hours-of-service rules into routing engine; enforce maximum shift lengths and mandatory breaks.  
- **Vehicle capacity**: During load planning, ensure total parcel volume/weight per route  vehicle capacity. Highlight in dashboard when planned loads exceed safe limits.  
- **Customer time windows**: Embed time-window constraints into both static plan and dynamic re-sequencing; flag any unavoidable violations for proactive customer communication.

### b. Continuous Monitoring Plan  
- **Process mining dashboard components**:  
  1. **Live Process Map**: with real-time case flows, colored by current status (on-track, warning, delayed).  
  2. **KPI Trend Tiles**: daily/weekly On-Time Rate, average delay minutes, fuel/km, unscheduled stops.  
  3. **Exception List**: active cases outside planned sequence or exceeding delay thresholds, grouped by route/driver.  
  4. **Heatmap Overlay**: up-to-date congestion hotspots in the service area, updated hourly.  
- **Alerts & KPIs to watch**:  
  - Sharp increases in average delay per segment (>10 % week-over-week).  
  - A spike in failed deliveries, especially in new territories.  
  - Clusters of unplanned maintenance or overtime hours.  
- **Feedback loop**: Weekly review meetings with dispatch, operations, and maintenance teams to dive into dashboard anomalies, validate predictive models, and adjust thresholds or optimization parameters accordingly.

By systematically integrating process mining insights into both strategic redesign and day-to-day operations, Speedy Parcels can build a data-driven culture of continuous improvement—boosting punctuality, cutting costs, and adapting rapidly to evolving urban logistics challenges.