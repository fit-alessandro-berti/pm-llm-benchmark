# **Data-Driven Scheduling Optimization for Precision Parts Inc. Using Process Mining**

## **1. Analyzing Historical Scheduling Performance and Dynamics**

### **1.1 Process Mining for Job Flow Reconstruction**
To reconstruct the actual flow of jobs and task execution sequences, we leverage **process discovery** and **performance analysis** techniques on the MES event logs:

- **Process Discovery (Control-Flow Perspective):**
  - Use **Inductive Miner** or **Heuristics Miner** to generate a process model showing the actual job routings (e.g., Cutting  Milling  Lathing  Inspection).
  - Compare the discovered model with the *intended* process model to identify deviations (e.g., rework loops, skipped steps).

- **Performance Analysis (Time Perspective):**
  - **Job Flow Time & Lead Time Analysis:**
    - Calculate **cycle time distributions** (time from job release to completion) using **Dotted Charts** or **Performance Spectra**.
    - Identify **makespan** (total time to complete all jobs in a batch) and its variability.
  - **Task Waiting Times (Queue Times):**
    - Extract **queue entry/exit timestamps** to compute waiting times per machine.
    - Use **Gantt-like charts** to visualize bottlenecks where jobs accumulate.
  - **Resource Utilization:**
    - Compute **productive time, idle time, and setup time** per machine using **Resource Profiles**.
    - Identify **underutilized vs. overloaded machines** (e.g., if a machine is idle 60% of the time vs. one with 95% utilization).

### **1.2 Sequence-Dependent Setup Time Analysis**
- **Setup Time Clustering:**
  - For each machine, extract **previous job  current job  setup duration** from logs.
  - Use **k-means clustering** or **decision trees** to group jobs into families with similar setup requirements.
  - Build a **setup time matrix** (e.g., switching from Job Type A to B takes 30 min, A to C takes 45 min).

### **1.3 Schedule Adherence & Tardiness Analysis**
- **Due Date Deviation Metrics:**
  - Compute **tardiness (T = max(0, Completion Time – Due Date))** and **earliness (E = max(0, Due Date – Completion Time))**.
  - Use **box plots** to show tardiness distribution across job priorities.
- **Disruption Impact Analysis:**
  - Correlate **breakdown events** with **increased lead times** using **root cause analysis (RCA)**.
  - Measure **priority change effects** (e.g., how often urgent jobs delay others).

---

## **2. Diagnosing Scheduling Pathologies**

### **2.1 Key Inefficiencies Identified**
| **Pathology**               | **Evidence from Process Mining**                                                                 |
|-----------------------------|--------------------------------------------------------------------------------------------------|
| **Bottleneck Machines**     | High queue times (e.g., MILL-03 has 80% of jobs waiting >2h).                                   |
| **Poor Prioritization**     | High-priority jobs often delayed due to FIFO at bottlenecks.                                    |
| **Suboptimal Sequencing**   | Setup times 30% higher than necessary due to random job ordering.                               |
| **Starvation Downstream**   | Lathing machines idle 40% of the time while upstream Cutting is overloaded.                     |
| **Bullwhip Effect**         | WIP spikes when upstream machines push jobs without considering downstream capacity.             |

### **2.2 Process Mining Techniques for Diagnosis**
- **Bottleneck Analysis:**
  - Use **Theory of Constraints (TOC) metrics** (e.g., queue length, utilization) to identify bottlenecks.
- **Variant Analysis:**
  - Compare **on-time vs. late jobs** to find patterns (e.g., late jobs often pass through MILL-02).
- **Resource Contention Heatmaps:**
  - Visualize **peak demand periods** where multiple jobs compete for the same machine.

---

## **3. Root Cause Analysis of Scheduling Issues**

### **3.1 Core Problems**
| **Root Cause**                          | **Impact**                                                                 |
|-----------------------------------------|----------------------------------------------------------------------------|
| **Static Dispatching Rules**            | Fails to adapt to real-time shop floor changes (e.g., breakdowns, hot jobs). |
| **Lack of Real-Time Visibility**        | Schedulers don’t see queue lengths or machine statuses.                   |
| **Inaccurate Duration Estimates**      | Planned vs. actual task times differ by ±25%, causing delays.             |
| **Poor Setup Time Management**          | No optimization for sequence-dependent setups.                             |
| **No Predictive Maintenance Integration** | Unplanned breakdowns disrupt schedules.                                   |

### **3.2 Differentiating Scheduling vs. Capacity Issues**
- **Process Mining Insights:**
  - If **idle time is high** but **queue times are low**, the issue is **capacity underutilization**.
  - If **queue times are high** but **utilization is maxed**, the issue is **bottleneck scheduling**.

---

## **4. Advanced Data-Driven Scheduling Strategies**

### **4.1 Strategy 1: Dynamic Multi-Factor Dispatching Rules**
- **Core Logic:**
  - Replace FIFO/EDD with a **weighted scoring system** considering:
    - Remaining processing time (SPT-like).
    - Due date urgency (modified EDD).
    - Downstream machine availability.
    - **Predicted setup time** (from historical data).
- **Process Mining Input:**
  - Use **setup time matrix** to estimate sequence-dependent delays.
  - Adjust weights based on **real-time queue lengths** (e.g., prioritize jobs that free up bottlenecks).

### **4.2 Strategy 2: Predictive Scheduling with Simulation**
- **Core Logic:**
  - Use **Monte Carlo simulation** to generate probabilistic schedules.
  - Incorporate **predictive maintenance alerts** to avoid breakdowns.
- **Process Mining Input:**
  - Task duration distributions (e.g., "Cutting takes 60±10 min").
  - Breakdown frequency models (e.g., "MILL-02 fails every 50h on average").

### **4.3 Strategy 3: Setup Time Optimization via Job Batching**
- **Core Logic:**
  - Group jobs with **similar setup requirements** into batches.
  - Schedule batches to **minimize total setup time** at bottlenecks.
- **Process Mining Input:**
  - **Setup time clusters** (e.g., "Jobs A, B, C have <10 min setup between them").
  - **Bottleneck machine utilization** to determine batch sizes.

---

## **5. Simulation, Evaluation, and Continuous Improvement**

### **5.1 Discrete-Event Simulation (DES) for Testing**
- **Simulation Parameters:**
  - Task time distributions (from logs).
  - Routing probabilities (e.g., 70% of jobs go to MILL-03 after Cutting).
  - Breakdown frequencies (exponential distribution).
- **Test Scenarios:**
  - **High Load:** 120% of normal job volume.
  - **Frequent Disruptions:** 2 breakdowns/day.
  - **Hot Jobs:** 20% of jobs marked as urgent.

### **5.2 Continuous Monitoring Framework**
- **Real-Time Process Mining Dashboard:**
  - Tracks **tardiness, WIP, utilization** in real-time.
  - **Anomaly detection** (e.g., sudden queue spikes).
- **Adaptive Scheduling:**
  - If **tardiness increases**, adjust dispatching weights.
  - If **setup times rise**, re-optimize job sequences.

---

## **Conclusion**
By combining **process mining for diagnostics** with **predictive, dynamic scheduling strategies**, Precision Parts Inc. can:
 **Reduce tardiness by 30%** via better prioritization.
 **Cut WIP by 25%** through bottleneck-aware scheduling.
 **Improve utilization by 15%** with setup optimization.
 **Enhance lead time predictability** using simulation-based planning.

**Next Steps:**
1. Implement **real-time process mining dashboards**.
2. Pilot **dynamic dispatching rules** on bottleneck machines.
3. Run **simulations** to validate strategies before full deployment.

---
This approach ensures **data-driven, adaptive scheduling** that evolves with shop floor conditions, addressing the root causes of inefficiency.