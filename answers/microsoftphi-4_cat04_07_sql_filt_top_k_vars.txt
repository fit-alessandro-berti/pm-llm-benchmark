To solve this problem, we need to construct a series of SQL queries that address each part of the task step-by-step in DuckDB.

1. **Extract Ordered Sequence of Activities Per Case:**
   We start by creating a sequence of activities for each `case_id` ordered by `timestamp`. This will help us build the process variant per case.

2. **Group Cases by Activity Sequence (Variant):**
   Once we have the ordered sequences, we can group the cases by these sequences to identify unique variants and then count how many cases each variant has.

3. **Determine the Top K Variants:**
   We need to rank the variants by their frequency and select the top K most frequent ones.

4. **Filter Events for Top K Variants:**
   Finally, we filter the original events to include only those that belong to cases matching the top K variants.

Here's how the DuckDB SQL could look:

```sql
WITH OrderedEvents AS (
    SELECT
        case_id,
        STRING_AGG(activity, '->' ORDER BY timestamp) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
),
VariantCounts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM
        OrderedEvents
    GROUP BY
        activity_sequence
    ORDER BY
        case_count DESC
    LIMIT K  -- Use the desired number for K here
),
TopCaseIDs AS (
    SELECT DISTINCT
        oe.case_id
    FROM
        OrderedEvents oe
    JOIN
        VariantCounts vc ON oe.activity_sequence = vc.activity_sequence
)
SELECT
    el.*
FROM
    event_log el
JOIN
    TopCaseIDs tci ON el.case_id = tci.case_id;
```

### Explanation:
- **OrderedEvents CTE:** Aggregates activities per `case_id` in the order dictated by `timestamp` using `STRING_AGG`. The separator `->` is used to maintain readability of the sequence.
  
- **VariantCounts CTE:** Computes how many cases each unique sequence (variant) corresponds to, ordering them by frequency descending.

- **TopCaseIDs CTE:** Extracts all `case_id`s which belong to the top K variants.

- **Final Select Statement:** Joins the original `event_log` with `TopCaseIDs` to filter out only the events that belong to the top K variant cases.

Remember to replace `K` in the query with your specific integer value for the top K variants you want to find. Adjust this query as needed if additional filtering or sorting criteria are necessary.