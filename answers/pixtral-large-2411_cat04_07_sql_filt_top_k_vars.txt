To achieve the tasks outlined in the prompt, we can break the problem down into a series of SQL steps:

1. **Extract the ordered sequence of activities per case:** This involves ordering the activities within each case by their timestamp and then concatenating them to form a sequence.
2. **Group the cases by their activity sequence to identify unique process variants:** We need to group the cases by their ordered activity sequences and count the number of cases in each group.
3. **Determine the top K variants by their frequency:** This requires sorting the grouped variants by the count of cases and selecting the top K.
4. **Return all events belonging to cases that match the top K variants:** We filter the original event log to include only the events from the cases of the top K variants.

Here is a SQL query to achieve this in DuckDB:

```sql
WITH ordered_activities AS (
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ') WITHIN GROUP (ORDER BY timestamp) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
),
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM
        ordered_activities
    GROUP BY
        activity_sequence
),
top_k_variants AS (
    SELECT
        activity_sequence
    FROM
        variant_counts
    ORDER BY
        case_count DESC
    LIMIT K  -- Replace K with the desired number of top variants
)
SELECT
    e.*
FROM
    event_log e
JOIN
    ordered_activities oa ON e.case_id = oa.case_id
JOIN
    top_k_variants tkv ON oa.activity_sequence = tkv.activity_sequence;
```

### Explanation:

1. **ordered_activities CTE**:
   - This Common Table Expression (CTE) creates a sequence of activities for each `case_id` by ordering the activities by `timestamp` and concatenating them with `STRING_AGG`.

2. **variant_counts CTE**:
   - This CTE groups the cases by their `activity_sequence` and counts the number of cases for each unique sequence (process variant).

3. **top_k_variants CTE**:
   - This CTE selects the top K process variants by sorting them in descending order of their frequency (`case_count`) and limiting the result to the top K variants.

4. **Final SELECT statement**:
   - This final query joins the original `event_log` with the `ordered_activities` and `top_k_variants` to filter and return only the events that belong to cases matching the top K variants.

**Note**: Replace `K` in the `LIMIT K` clause with the actual number of top variants you want to select.

This query will return all events from the `event_log` that belong to cases which are part of the top K process variants.