<think>
Okay, I need to create an accepting Petri net for the insurance claim process described. Let me start by understanding the scenario and the requirements.

First, the process steps are: C (Claim), CR, DV, FC, CA, AP, P, N, CL. But there are some loops. If DV has incomplete docs, there's RDS. If FC has doubts, then II can happen multiple times. The final marking should be when the claim is closed.

So the initial marking should have a token in a start place, maybe "start" or "C". The final marking would be in a "closed" place or "CL".

I need to model all these steps with places and transitions. Let's think about each activity as a transition. The places would represent the states between these transitions. For example, after C, there's a place that indicates the claim is registered, then CR transitions to that place, etc.

But wait, the initial step is the customer files a claim. So maybe the initial marking has a token in a place called "start" or "C". Then the first transition is "Claim Registration (CR)" which would take the token from the start place and put it into a place like "CR_done" or something. But I need to model the flow correctly.

Let me sketch the steps:

Start (initial token here) -> CR -> DV -> (DV can go to RDS if documents are incomplete, or proceed to FC) -> FC -> (FC can go to II multiple times, then to CA) -> CA -> AP -> P -> N -> CL (final marking).

But how to model the loops? For example, after DV, if there's a need for RDS, then after RDS, it should loop back to DV. Similarly, after FC, if there's an in-depth investigation (II), then after II, it loops back to FC. But how to represent that in the Petri net.

So for the DV step: there's a transition for DV. Then, after DV, there's a place that splits into two paths: one leading to FC, and another leading to RDS. But how to model that. Maybe a place after DV, and then transitions for "DV to FC" and "DV to RDS". Wait, but the RDS is a step. So maybe after DV, there's a place that has a token, and then a transition for RDS, which would lead back to DV?

Wait, the RDS is a re-submission. So after DV, if documents are incomplete, the process goes to RDS. Then after RDS, it goes back to DV. So the flow would be: DV -> RDS -> DV. So in the Petri net, after the DV transition, there's a place that connects to RDS transition, and then after RDS, a place that connects back to DV. But how to model the condition for going to RDS. Maybe using a place that represents the need for RDS, but since Petri nets are deterministic unless there are multiple arcs, perhaps we need to model it with a choice. But maybe the Petri net is designed to allow for that.

Alternatively, maybe after DV, there's a place that can have tokens for both FC and RDS. But that's more of a choice. However, in a Petri net, transitions can be enabled based on the presence of tokens in their input places. So perhaps after DV, there's a place that is connected to both the FC transition and the RDS transition. But that would require that after DV, both transitions are enabled, which might not be correct. But perhaps the process is designed such that when DV is done, the system can either proceed to FC or to RDS, depending on some condition. However, in a Petri net, unless there's a way to model that condition, it's not possible. So maybe the model allows for both possibilities, but in practice, the process would choose one based on the data. However, for the purpose of the Petri net, we need to model the possible paths.

But the problem says that the Petri net should have the logical sequence with possible loops. So perhaps the Petri net allows for both paths, but the actual process would have some conditions. However, since we're building an accepting Petri net, maybe we need to model all possible paths.

So, for DV, after the DV transition, there's a place that can be connected to both FC and RDS. But how to model that. Maybe after DV, there's a place that has a token, and then from that place, there are two transitions: one leading to FC, and another leading to RDS. But that would require that after DV, the token is in a place that allows both transitions to fire. However, in a Petri net, transitions are enabled when all their input places have tokens. So, if after DV, there's a place (say, "DV_done") that has a token, then transitions for FC and RDS would have that place as their input. So, when "DV_done" has a token, both FC and RDS transitions can fire. But that's not correct, because in reality, the process would choose one path or the other. However, in the Petri net, both transitions would be enabled, leading to a non-deterministic choice. But since the problem allows for possible loops, perhaps this is acceptable.

Similarly, for FC: after FC, there's a place that can lead to II or to CA. But again, the Petri net would have transitions for both, and the system can choose either path. But in reality, if FC raises doubts, then II is needed. So perhaps the model should have a way to represent that. But without additional conditions, perhaps we can model it as a choice.

But maybe the problem expects that the Petri net allows for the possibility of looping. So for example, after FC, there's a transition to II, and then after II, a transition back to FC. So the loop is FC -> II -> FC. But how to model that. So, after FC, the token goes to a place that connects to II transition, and after II, a place that connects back to FC.

But I need to structure all these steps.

Let me try to outline the steps with places and transitions:

Start place: "start" (initial token here).

Transitions:

- C (Claim filing): but maybe the initial marking is in the start place, and the first transition is CR (Claim Registration). Wait, the initial marking is for the start place. So the process starts with the claim being filed, which is represented by the start place. Then, the first transition is CR (Claim Registration), which takes the token from start and puts it into a place like "CR_done".

Then, from "CR_done", there's a transition to DV (Document Verification). Then, after DV, the token is in a place "DV_done". From there, there are two possibilities: either go to FC (Fraud Check) or to RDS (Re-Document Submission). So, transitions for "DV to FC" and "DV to RDS". But how to model that. So, the "DV_done" place would be connected to both transitions. Then, if the process takes the RDS path, after RDS, it goes back to DV. So, the RDS transition would take the token from "DV_done" (or maybe from another place?), and then put it into a place that connects back to DV.

Wait, maybe the RDS is a transition that, after being executed, leads back to DV. So, after RDS, the token is in a place that connects to the DV transition again. So, the flow would be: DV_done -> RDS transition -> RDS_done place -> then to DV transition again.

Similarly, for FC: after FC, there's a place "FC_done". From there, transitions to II (In-depth Investigation) and to CA (Claim Assessment). So, the FC_done place connects to both II and CA transitions. Then, after II, the token goes to a place that connects back to FC. So, II transition leads to II_done place, which connects back to FC.

Once the process reaches CA, then AP (Approval) is next. Then P (Payment), then N (Notification), then CL (Closure).

So, let's try to model this.

First, the initial marking is in the "start" place. Then:

start -> CR -> CR_done
CR_done -> DV -> DV_done
DV_done -> FC (transition) and DV_done -> RDS (transition)
RDS transition leads to RDS_done, which connects back to DV (so RDS_done -> DV)
Similarly, FC_done -> II (transition) and FC_done -> CA (transition)
II transition leads to II_done, which connects back to FC
Then CA -> AP -> P -> N -> CL (final marking)

But how to model the transitions and places.

Let me think of each step as a transition, and each state as a place.

So:

Places:

- start (initial token)
- CR_done
- DV_done
- FC_done
- CA_done
- AP_done
- P_done
- N_done
- CL (final marking)

But also need places for RDS and II steps.

Wait, maybe:

After DV_done, there's a transition for RDS (Re-Document Submission), which would take the token from DV_done, and then after RDS, the token is in a place that connects back to DV. So:

DV_done -> RDS transition -> RDS_done -> DV transition (again?)

Wait, but the RDS is a step. So after RDS is done, the process should go back to DV. So, the RDS transition would take the token from DV_done, and then put it into a place that is connected to the DV transition again. But how?

Alternatively, maybe after RDS, the token is in a place that allows the DV transition to be re-enabled. So:

DV_done is connected to both FC transition and RDS transition. The RDS transition leads to a place called RDS_done, which is connected to the DV transition. So, when RDS is executed, the token moves to RDS_done, and then the DV transition can fire again, taking the token from RDS_done and putting it into DV_done again. Wait, but that would create a loop. But perhaps that's the case.

But this might be getting complicated. Let me try to outline all the places and transitions.

Let me list all the transitions:

Transitions:

- CR (Claim Registration)
- DV (Document Verification)
- RDS (Re-Document Submission)
- FC (Fraud Check)
- II (In-depth Investigation)
- CA (Claim Assessment)
- AP (Approval)
- P (Payment)
- N (Notification)
- CL (Closure)

Places:

- start (initial)
- CR_done
- DV_done
- RDS_done
- FC_done
- II_done
- CA_done
- AP_done
- P_done
- N_done
- CL (final)

Now, the arcs:

start -> CR (arc from start to CR transition)
CR transition -> CR_done (arc from CR to CR_done)
CR_done -> DV (arc from CR_done to DV transition)
DV transition -> DV_done (arc from DV to DV_done)
DV_done -> FC (arc from DV_done to FC transition)
DV_done -> RDS (arc from DV_done to RDS transition)
RDS transition -> RDS_done (arc from RDS to RDS_done)
RDS_done -> DV (arc from RDS_done to DV transition)
FC transition -> FC_done (arc from FC to FC_done)
FC_done -> II (arc from FC_done to II transition)
FC_done -> CA (arc from FC_done to CA transition)
II transition -> II_done (arc from II to II_done)
II_done -> FC (arc from II_done to FC transition)
CA transition -> CA_done (arc from CA to CA_done)
CA_done -> AP (arc from CA_done to AP transition)
AP transition -> AP_done (arc from AP to AP_done)
AP_done -> P (arc from AP_done to P transition)
P transition -> P_done (arc from P to P_done)
P_done -> N (arc from P_done to N transition)
N transition -> N_done (arc from N to N_done)
N_done -> CL (arc from N_done to CL transition)

So, the initial marking is {start: 1}, and the final marking is {CL: 1}.

But wait, the initial marking is the start place. The final marking is CL place.

But in the example code, the initial marking is a dictionary with the start place as a key. Similarly, the final marking is a dictionary with CL as a key.

But I need to make sure that all the transitions and places are correctly connected.

But wait, the RDS transition leads to RDS_done, which connects back to DV. So, when RDS is executed, the token goes to RDS_done, and from there, the DV transition can fire again. So the arc from RDS_done to DV transition. But in the Petri net, transitions are connected to places via arcs. So, the DV transition would have an input arc from RDS_done.

But in the code, how to add these arcs.

In the code, using petri_utils.add_arc_from_to(source, target, net). So, for each arc, we need to have a source (place or transition) and a target (place or transition).

Wait, in Petri nets, arcs are from places to transitions (input arcs) or from transitions to places (output arcs). So, for example, the transition CR has an input arc from the start place, and an output arc to CR_done place.

So, for each transition, we need to add input places and output places.

So, for the CR transition:

- Input place: start
- Output place: CR_done

Similarly for DV transition:

- Input place: CR_done
- Output place: DV_done

Then, for the RDS transition:

- Input place: DV_done
- Output place: RDS_done

And the arc from RDS_done to DV transition's input. So, the DV transition's input is connected to both CR_done and RDS_done.

Wait, no. The DV transition's input is the place that provides the token to fire the transition. So, the DV transition has an input arc from CR_done and an input arc from RDS_done? Or is there a place that connects to the DV transition?

Wait, no. The RDS transition is a separate transition. The DV transition would have an input arc from DV_done, which is the place that is the output of the DV transition. Wait, no. Let me think again.

The DV transition is triggered when there is a token in its input place. So, the input place for the DV transition is CR_done. But when the process goes through RDS, after RDS is done, the token is in RDS_done, which is connected to the input of the DV transition. So, the DV transition has two input places: CR_done and RDS_done. So, the DV transition is enabled if either of those places has a token.

But that would allow the DV transition to fire even if the token is in RDS_done. But how to model that. So, the DV transition has two input places: CR_done and RDS_done. So, when the token is in either of those places, the DV transition can fire.

But that's not correct. Because the RDS is a step that occurs after DV. So, after RDS is done, the token is in RDS_done, which then allows the DV transition to be re-fired. But the DV transition would need to have an input from RDS_done. So, the DV transition's input is CR_done (from the initial path) and RDS_done (from the re-submission path).

So, the DV transition has two input arcs: one from CR_done and one from RDS_done. But in that case, the DV transition can be fired when either of those places has a token. Which would allow the process to go back to DV after RDS.

But in the Petri net, this would mean that the DV transition is enabled whenever either CR_done or RDS_done has a token. But that's not exactly how the process works. Because the RDS is a re-submission that happens after DV, so the process would have to go through RDS, then back to DV. So, the RDS_done place would have a token, which allows the DV transition to be fired again.

But how to model this. So, the DV transition has input arcs from CR_done and RDS_done. Then, after RDS is executed, the token is in RDS_done, which allows the DV transition to fire again. So, the process can loop between DV and RDS.

Similarly for the FC and II steps.

So, the code would need to create all these places and transitions, and add the necessary arcs.

Now, let's think about the code.

First, create the Petri net.

Then, create all the places: start, CR_done, DV_done, RDS_done, FC_done, II_done, CA_done, AP_done, P_done, N_done, CL.

Then, create transitions: CR, DV, RDS, FC, II, CA, AP, P, N, CL.

Wait, but the CL transition is the final step. Or is the final marking in the CL place?

The problem says that the final marking is the final state. So, after the payment and notification, the process reaches CL. So, the final marking is when the CL place has a token.

So, the final marking is {CL: 1}.

Now, the initial marking is {start: 1}.

Now, the code steps:

Import necessary modules.

Create the PetriNet instance.

Create all the places and transitions.

Add arcs between them.

Then, set the initial and final markings.

But I need to make sure that all the arcs are added correctly.

Let me try to code this step by step.

First, the code:

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="insurance_claim_process")

# Create places
start = PetriNet.Place(name="start")
cr_done = PetriNet.Place(name="CR_done")
dv_done = PetriNet.Place(name="DV_done")
rds_done = PetriNet.Place(name="RDS_done")
fc_done = PetriNet.Place(name="FC_done")
ii_done = PetriNet.Place(name="II_done")
ca_done = PetriNet.Place(name="CA_done")
ap_done = PetriNet.Place(name="AP_done")
p_done = PetriNet.Place(name="P_done")
n_done = PetriNet.Place(name="N_done")
cl = PetriNet.Place(name="CL")

# Add places to the net
net.places.add(start)
net.places.add(cr_done)
net.places.add(dv_done)
net.places.add(rds_done)
net.places.add(fc_done)
net.places.add(ii_done)
net.places.add(ca_done)
net.places.add(ap_done)
net.places.add(p_done)
net.places.add(n_done)
net.places.add(cl)

# Create transitions
cr = PetriNet.Transition(name="CR", label="Claim Registration")
dv = PetriNet.Transition(name="DV", label="Document Verification")
rds = PetriNet.Transition(name="RDS", label="Re-Document Submission")
fc = PetriNet.Transition(name="FC", label="Fraud Check")
ii = PetriNet.Transition(name="II", label="In-depth Investigation")
ca = PetriNet.Transition(name="CA", label="Claim Assessment")
ap = PetriNet.Transition(name="AP", label="Approval")
p = PetriNet.Transition(name="P", label="Payment")
n = PetriNet.Transition(name="N", label="Notification")
cl_transition = PetriNet.Transition(name="CL", label="Closure")

# Add transitions to the net
net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(rds)
net.transitions.add(fc)
net.transitions.add(ii)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl_transition)

# Add arcs
# start -> CR (input arc to CR transition)
petri_utils.add_arc_from_to(start, cr, net)
# CR transition -> cr_done (output arc from CR to cr_done)
petri_utils.add_arc_from_to(cr, cr_done, net)

# cr_done -> dv (input arc to dv transition)
petri_utils.add_arc_from_to(cr_done, dv, net)
# dv transition -> dv_done
petri_utils.add_arc_from_to(dv, dv_done, net)

# dv_done -> fc and dv_done -> rds
petri_utils.add_arc_from_to(dv_done, fc, net)
petri_utils.add_arc_from_to(dv_done, rds, net)

# rds transition -> rds_done
petri_utils.add_arc_from_to(rds, rds_done, net)
# rds_done -> dv (input arc to dv transition)
petri_utils.add_arc_from_to(rds_done, dv, net)

# fc transition -> fc_done
petri_utils.add_arc_from_to(fc, fc_done, net)
# fc_done -> ii and fc_done -> ca
petri_utils.add_arc_from_to(fc_done, ii, net)
petri_utils.add_arc_from_to(fc_done, ca, net)

# ii transition -> ii_done
petri_utils.add_arc_from_to(ii, ii_done, net)
# ii_done -> fc (input arc to fc transition)
petri_utils.add_arc_from_to(ii_done, fc, net)

# ca transition -> ca_done
petri_utils.add_arc_from_to(ca, ca_done, net)
# ca_done -> ap
petri_utils.add_arc_from_to(ca_done, ap, net)

# ap transition -> ap_done
petri_utils.add_arc_from_to(ap, ap_done, net)
# ap_done -> p
petri_utils.add_arc_from_to(ap_done, p, net)

# p transition -> p_done
petri_utils.add_arc_from_to(p, p_done, net)
# p_done -> n
petri_utils.add_arc_from_to(p_done, n, net)

# n transition -> n_done
petri_utils.add_arc_from_to(n, n_done, net)
# n_done -> cl_transition
petri_utils.add_arc_from_to(n_done, cl_transition, net)

# cl_transition -> cl (output arc from cl_transition to cl)
petri_utils.add_arc_from_to(cl_transition, cl, net)

Wait, but the final marking is in the cl place, not the cl_transition. Because the cl_transition is the transition that leads to the cl place. So, after the n transition is executed, the token is in n_done, which triggers the cl_transition, which then places a token in the cl place.

But in the code above, the arc from n_done to cl_transition is an input arc to the cl_transition. Then, the cl_transition has an output arc to the cl place.

So, when the cl_transition fires, the token moves from n_done to cl.

So, the final marking is {cl: 1}.

Now, the initial marking is {start: 1}.

But I need to create the initial and final markings.

im = Marking()
im[start] = 1

fm = Marking()
fm[cl] = 1

But wait, in the code example provided, after creating the net, they have:

im = Marking()
im[source] = 1
fm = Marking()
fm[sink] = 1

Then, they remove the sink place and delete the entry in fm.

So, in our case, the final marking is cl. So, the code would be:

fm = Marking()
fm[cl] = 1

But need to make sure that the cl place is present.

But in the code above, the cl place is added to the net.

Now, testing this code, but I need to make sure that all the arcs are correctly added.

But wait, the transition cl_transition is the one that leads to the cl place. So, when the n transition is executed, it leads to n_done, which is connected to cl_transition. When cl_transition is executed, it leads to cl.

So, the final marking is when cl has a token.

But in the code, the final marking is {cl: 1}.

But in the example code, the final marking is a marking with the sink place. So, in our case, the final marking is cl.

Now, the code as written should create the Petri net with all these places and transitions, and the correct arcs.

But I need to check if all the arcs are added correctly.

For example, the RDS transition's output is rds_done. Then, the arc from rds_done to dv transition (input arc to dv). So, the dv transition has two input arcs: from cr_done and from rds_done. That allows the dv transition to be fired when either of those places has a token.

Similarly, the II_done place has an arc to fc transition, allowing the fc transition to be fired again after II.

This should model the loops for RDS and II.

Now, what about the other transitions?

For example, after DV, the process can go to FC or RDS. So, the dv transition has output to dv_done, which is connected to both fc and rds transitions.

Yes.

Now, the code should be correct.

But I need to make sure that all the places and transitions are properly added to the net.

Another thing to check: the transition names. For example, the cl transition is named "CL" with label "Closure".

But in the code, the transition is called cl_transition. That's okay.

Now, the final marking is {cl: 1}.

But what if the cl place is not connected? No, because the cl_transition has an output arc to cl.

So, when cl_transition fires, the token moves from n_done to cl.

But the initial marking is {start: 1}, and the final marking is {cl: 1}.

So, the code should be correct.

But I need to make sure that all the transitions and places are correctly added.

Another thing: the code may have some errors. For example, in the PetriNet, the places and transitions are added to the net.

Another thing to check: the transitions are added to the net's transitions set.

Now, in the code, after creating all the places and transitions, they are added to the net.

Yes.

Now, the code seems correct.

But perhaps I missed some arcs. For example, the transition for CL is a transition, but the final marking is the cl place. So, the cl_transition is the transition that leads to the cl place. So, the code adds an arc from cl_transition to cl.

Yes.

But in the example given in the problem, the final marking is a place (sink), and the code removes the sink place. But in our case, we don't need to remove the cl place, because it's the final marking.

So, the code should be correct.

Now, the code:

But I need to write the Python code as per the problem's instructions.

So, the code would be:

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="insurance_claim_process")

# Places
start = PetriNet.Place(name="start")
cr_done = PetriNet.Place(name="CR_done")
dv_done = PetriNet.Place(name="DV_done")
rds_done = PetriNet.Place(name="RDS_done")
fc_done = PetriNet.Place(name="FC_done")
ii_done = PetriNet.Place(name="II_done")
ca_done = PetriNet.Place(name="CA_done")
ap_done = PetriNet.Place(name="AP_done")
p_done = PetriNet.Place(name="P_done")
n_done = PetriNet.Place(name="N_done")
cl = PetriNet.Place(name="CL")

net.places.add(start)
net.places.add(cr_done)
net.places.add(dv_done)
net.places.add(rds_done)
net.places.add(fc_done)
net.places.add(ii_done)
net.places.add(ca_done)
net.places.add(ap_done)
net.places.add(p_done)
net.places.add(n_done)
net.places.add(cl)

# Transitions
cr = PetriNet.Transition(name="CR", label="Claim Registration")
dv = PetriNet.Transition(name="DV", label="Document Verification")
rds = PetriNet.Transition(name="RDS", label="Re-Document Submission")
fc = PetriNet.Transition(name="FC", label="Fraud Check")
ii = PetriNet.Transition(name="II", label="In-depth Investigation")
ca = PetriNet.Transition(name="CA", label="Claim Assessment")
ap = PetriNet.Transition(name="AP", label="Approval")
p = PetriNet.Transition(name="P", label="Payment")
n = PetriNet.Transition(name="N", label="Notification")
cl_transition = PetriNet.Transition(name="CL", label="Closure")

net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(rds)
net.transitions.add(fc)
net.transitions.add(ii)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl_transition)

# Arcs
petri_utils.add_arc_from_to(start, cr, net)
petri_utils.add_arc_from_to(cr, cr_done, net)

petri_utils.add_arc_from_to(cr_done, dv, net)
petri_utils.add_arc_from_to(dv, dv_done, net)

petri_utils.add_arc_from_to(dv_done, fc, net)
petri_utils.add_arc_from_to(dv_done, rds, net)

petri_utils.add_arc_from_to(rds, rds_done, net)
petri_utils.add_arc_from_to(rds_done, dv, net)

petri_utils.add_arc_from_to(fc, fc_done, net)
petri_utils.add_arc_from_to(fc_done, ii, net)
petri_utils.add_arc_from_to(fc_done, ca, net)

petri_utils.add_arc_from_to(ii, ii_done, net)
petri_utils.add_arc_from_to(ii_done, fc, net)

petri_utils.add_arc_from_to(ca, ca_done, net)
petri_utils.add_arc_from_to(ca_done, ap, net)

petri_utils.add_arc_from_to(ap, ap_done, net)
petri_utils.add_arc_from_to(ap_done, p, net)

petri_utils.add_arc_from_to(p, p_done, net)
petri_utils.add_arc_from_to(p_done, n, net)

petri_utils.add_arc_from_to(n, n_done, net)
petri_utils.add_arc_from_to(n_done, cl_transition, net)

petri_utils.add_arc_from_to(cl_transition, cl, net)

# Initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[cl] = 1

But wait, in the example code, after creating the net, they remove the sink place and delete the entry in fm. In our case, we don't need to remove the cl place, since it's the final place. So, the code is okay.

But I need to make sure that all the transitions and places are correctly connected.

Another thing to check: the transition for CL is named "CL" with label "Closure", and it's connected to the cl place.

Yes.

This should model the process correctly.

Now, possible issues:

- The final marking is in the cl place, which is connected via the cl_transition. So, when the n transition is executed, the token moves to n_done, which triggers the cl_transition, which moves the token to cl. So, the final marking is {cl: 1}.

Yes.

Another possible issue: the code may not handle the loops correctly. For example, after RDS, the process loops back to DV. The code adds an arc from rds_done to dv transition. So, when the RDS transition is executed, the token is in rds_done, which allows the dv transition to fire again.

Yes.

Similarly for the II loop.

Thus, this should be the correct code.
</think>

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="insurance_claim_process")

# Define all places
start = PetriNet.Place(name="start")
cr_done = PetriNet.Place(name="CR_done")
dv_done = PetriNet.Place(name="DV_done")
rds_done = PetriNet.Place(name="RDS_done")
fc_done = PetriNet.Place(name="FC_done")
ii_done = PetriNet.Place(name="II_done")
ca_done = PetriNet.Place(name="CA_done")
ap_done = PetriNet.Place(name="AP_done")
p_done = PetriNet.Place(name="P_done")
n_done = PetriNet.Place(name="N_done")
cl = PetriNet.Place(name="CL")

# Add places to the net
net.places.add(start)
net.places.add(cr_done)
net.places.add(dv_done)
net.places.add(rds_done)
net.places.add(fc_done)
net.places.add(ii_done)
net.places.add(ca_done)
net.places.add(ap_done)
net.places.add(p_done)
net.places.add(n_done)
net.places.add(cl)

# Define all transitions
cr = PetriNet.Transition(name="CR", label="Claim Registration")
dv = PetriNet.Transition(name="DV", label="Document Verification")
rds = PetriNet.Transition(name="RDS", label="Re-Document Submission")
fc = PetriNet.Transition(name="FC", label="Fraud Check")
ii = PetriNet.Transition(name="II", label="In-depth Investigation")
ca = PetriNet.Transition(name="CA", label="Claim Assessment")
ap = PetriNet.Transition(name="AP", label="Approval")
p = PetriNet.Transition(name="P", label="Payment")
n = PetriNet.Transition(name="N", label="Notification")
cl_transition = PetriNet.Transition(name="CL", label="Closure")

# Add transitions to the net
net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(rds)
net.transitions.add(fc)
net.transitions.add(ii)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl_transition)

# Add arcs between places and transitions
petri_utils.add_arc_from_to(start, cr, net)
petri_utils.add_arc_from_to(cr, cr_done, net)

petri_utils.add_arc_from_to(cr_done, dv, net)
petri_utils.add_arc_from_to(dv, dv_done, net)

petri_utils.add_arc_from_to(dv_done, fc, net)
petri_utils.add_arc_from_to(dv_done, rds, net)

petri_utils.add_arc_from_to(rds, rds_done, net)
petri_utils.add_arc_from_to(rds_done, dv, net)

petri_utils.add_arc_from_to(fc, fc_done, net)
petri_utils.add_arc_from_to(fc_done, ii, net)
petri_utils.add_arc_from_to(fc_done, ca, net)

petri_utils.add_arc_from_to(ii, ii_done, net)
petri_utils.add_arc_from_to(ii_done, fc, net)

petri_utils.add_arc_from_to(ca, ca_done, net)
petri_utils.add_arc_from_to(ca_done, ap, net)

petri_utils.add_arc_from_to(ap, ap_done, net)
petri_utils.add_arc_from_to(ap_done, p, net)

petri_utils.add_arc_from_to(p, p_done, net)
petri_utils.add_arc_from_to(p_done, n, net)

petri_utils.add_arc_from_to(n, n_done, net)
petri_utils.add_arc_from_to(n_done, cl_transition, net)

petri_utils.add_arc_from_to(cl_transition, cl, net)

# Define initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[cl] = 1
```