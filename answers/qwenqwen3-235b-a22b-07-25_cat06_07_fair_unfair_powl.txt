Below are two **POWL (Partially Ordered Workflow Language)** models based on the hiring process at **GlobalTeq Solutions**, implemented using the `pm4py`-style POWL structure. The first model includes a **biased XOR branch** for community affiliation (introducing potential unfairness), while the second model removes this bias by ensuring **uniform treatment** of all applicants.

---

###  **1. POWL Model with Potential Unfairness**

This model includes an **XOR choice** after the skill assessment: one path is a standard cultural fit check, and the other is a **CommunityAffiliationCheck** that subtly advantages certain applicants. This creates a structural bias in the workflow.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define individual activities
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Loop for data completeness: check data, if incomplete -> request more info, then re-check
data_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[
        DataCompletenessCheck,
        RequestMoreInfo
    ]
)

# XOR choice: either standard cultural fit OR community-affiliated path (biased)
cultural_xor = OperatorPOWL(
    operator=Operator.XOR,
    children=[
        CulturalFitCheck,
        CommunityAffiliationCheck
    ]
)

# Sequential order: application  loop  skill assessment  XOR  managerial review  decision
root_with_bias = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        data_loop,
        SkillAssessment,
        cultural_xor,
        ManagerialReview,
        FinalDecision
    ]
)

# Define partial order (execution dependencies)
root_with_bias.order.add_edge(ReceiveApplication, data_loop)
root_with_bias.order.add_edge(data_loop, SkillAssessment)
root_with_bias.order.add_edge(SkillAssessment, cultural_xor)
root_with_bias.order.add_edge(cultural_xor, ManagerialReview)
root_with_bias.order.add_edge(ManagerialReview, FinalDecision)

# This model introduces bias via the XOR between CulturalFitCheck and CommunityAffiliationCheck
```

>  **Unfairness Point:** The XOR allows applicants with specific affiliations to bypass or benefit from a different, less rigorous or favorably weighted evaluation path, introducing **structural bias**.

---

###  **2. POWL Model Without Unfairness**

This version **removes the XOR branch** and ensures that **all applicants** go through the **same standardized cultural fit evaluation**, eliminating preferential treatment based on community ties. The loop for data completeness remains, but no biased branching exists.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define individual activities (CommunityAffiliationCheck is excluded)
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")  # Only one standardized check
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Loop for data completeness (same as before)
data_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[
        DataCompletenessCheck,
        RequestMoreInfo
    ]
)

# No XOR: all applicants proceed to the same CulturalFitCheck
root_without_bias = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        data_loop,
        SkillAssessment,
        CulturalFitCheck,
        ManagerialReview,
        FinalDecision
    ]
)

# Define partial order: strictly sequential after loop
root_without_bias.order.add_edge(ReceiveApplication, data_loop)
root_without_bias.order.add_edge(data_loop, SkillAssessment)
root_without_bias.order.add_edge(SkillAssessment, CulturalFitCheck)
root_without_bias.order.add_edge(CulturalFitCheck, ManagerialReview)
root_without_bias.order.add_edge(ManagerialReview, FinalDecision)

# This model ensures fairness: no special paths based on affiliation
```

>  **Fairness Assurance:** By removing the XOR branch and ensuring a **uniform cultural fit evaluation**, this model eliminates the structural opportunity for bias based on community or educational affiliations.

---

###  Summary of Differences

| Feature                        | Biased Model (1)                          | Fair Model (2)                              |
|-------------------------------|-------------------------------------------|---------------------------------------------|
| **XOR Branch**                |  Yes: `CulturalFitCheck` vs `CommunityAffiliationCheck` |  No XOR; single `CulturalFitCheck`         |
| **Loop for Data Completeness**|  Yes                                     |  Yes                                        |
| **Potential for Bias**        |  High: preferential treatment possible   |  Low: standardized process for all         |
| **Transparency & Fairness**   | Compromised                                | Preserved                                     |

---

These POWL models demonstrate how **workflow design** can either **introduce** or **prevent** systemic bias in hiring processes. The second model aligns with principles of **algorithmic fairness** and **equitable evaluation**.