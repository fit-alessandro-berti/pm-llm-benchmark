Here's the DuckDB SQL query that meets all the specified criteria:

```sql
WITH sequence_detection AS (
    SELECT
        case_id,
        timestamp AS confirm_time,
        LAG(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS create_time
    FROM event_log
    WHERE activity = 'Confirm Order'
    AND LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Create Order'
    AND LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Approve Purchase Requisition'
),
time_diff_days AS (
    SELECT
        case_id,
        CASE 
            WHEN confirm_time >= create_time THEN TIMESTAMPDIFF(DAY, create_time, confirm_time)
            ELSE NULL
        END AS day_diff
    FROM sequence_detection
),
problematic_cases AS (
    SELECT DISTINCT case_id
    FROM time_diff_days
    WHERE day_diff > 5
)
SELECT
    event_id,
    case_id,
    activity,
    timestamp
FROM event_log AS event
WHERE event.case_id NOT IN (SELECT case_id FROM problematic_cases)
ORDER BY case_id, timestamp; -- Optional ordering for consistent results
```

Key components:
1. **Sequence Detection**: Uses LAG() window function to identify the exact 3-activity sequence in order
2. **Time Window Check**: Calculates the day difference between Create Order and Confirm Order using DATE functions
3. **Case Exclusion**: Maintains a distinct list of problematic case IDs using a CTE
4. **Final Selection**: Excludes all events from the problematic cases while preserving the original event structure
5. **Safety Check**: NULL-safe calculation for unexpected time orderings

The query efficiently handles all edge cases including:
- Multiple occurrences of the sequence in the same case
- Correct ordering via timestamp
- Prevents double-counting of cases
- Maintains all required event attributes in output