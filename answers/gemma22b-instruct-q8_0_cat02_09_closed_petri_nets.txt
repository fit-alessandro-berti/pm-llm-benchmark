Here are some opposing concepts and generalizations for your provided Petri net terminology:

**Opposing Concepts:**

* **Instead of:**  **Source Place:**  **Sink Place**: Represents a place where tokens are consumed or emitted. Think of it as the destination rather than the origin. 
* **Instead of:** **Immediate Transition:**  **Delayed Transition**: A transition that executes after certain conditions are met, potentially with a time delay. This focuses on timed behaviors within the net. 
* **Instead of:**  **Live Transition:** **Inactive Transition**: Represents a transition that is currently active and ready to execute, or that has recently been activated. This highlights the dynamic state of transitions.
* **Instead of:** **Bounded Net:** **Infinite Net**: A net where tokens can potentially be stored indefinitely at certain places, creating an unbounded system. 

**General Concepts:**

* **Alternative Modeling Paradigm:** Instead of focusing on just the flow of tokens, a wider conceptualization could encompass other aspects like event scheduling, resource allocation (for example, computing resources), or dataflow mechanisms.
* **Process Modeling**: A broader model that captures not only the token movement but also the various stages and dependencies within the process. This might involve activities, tasks, actors, communication channels, and more.

**Explanation:**

* Petri nets focus on concurrent, discrete events with tokens flowing through them. 
* **Opposing Concepts:** These concepts represent a reversal of the flow or the dynamic nature of the system in general. They shift our focus from token movement to other related processes or aspects.
* **General Concepts:** These are broader conceptualizations that consider different aspects beyond the core functionality of Petri nets, such as a process perspective and more complex interactions within systems.


**Additional Considerations:**

* There's no single "opposite" concept for every term in Petri net terminology because each element has its own nuances.
* Generalization can lead to powerful conceptual frameworks that go beyond simple token flow models (e.g., concurrent processes, scheduling, resource allocation). 


Let me know if you would like further exploration of any specific aspect or concept!