<think>
We need to output Python code constructing the accepting Petri net for the described insurance claim process, using pm4py library. Include places, transitions, arcs, loops for re-document submission and in-depth investigation. Define initial and final markings. Use proper imports. Ensure code formatted with Prettier (print width 80). Provide code block with language python. Also maybe explain briefly. Use LaTeX? Not needed. Just code. Ensure we follow formatting rules: code in markdown with language extension. No extra formatting. Provide final answer.
</think>

**Python code that builds the accepting Petri net for the described insurance‑claim process**

```python
# --------------------------------------------------------------
# Accepting Petri net for the insurance claim management process
# --------------------------------------------------------------
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# -----------------------------------------------------------------
# 1. Create the net and its places (states between activities)
# -----------------------------------------------------------------
net = PetriNet(name="Insurance_Claim_Process")

# Start / end places
p_start = PetriNet.Place("p_start")          # new claim arrives
p_closed = PetriNet.Place("p_closed")        # claim closed (final)

# Core process places
p_cr = PetriNet.Place("p_cr")                # after Claim Registration
p_dv = PetriNet.Place("p_dv")                # after Document Verification
p_rds = PetriNet.Place("p_rds")              # re‑document submission loop
p_fc = PetriNet.Place("p_fc")                # after Fraud Check
p_ii = PetriNet.Place("p_ii")                # in‑depth investigation loop
p_ca = PetriNet.Place("p_ca")                # after Claim Assessment
p_ap = PetriNet.Place("p_ap")                # after Approval
p_p = PetriNet.Place("p_p")                  # after Payment
p_n = PetriNet.Place("p_n")                  # after Notification
p_cl = PetriNet.Place("p_cl")                # after Closure (final)

# Add all places to the net
for p in [
    p_start,
    p_cr,
    p_dv,
    p_rds,
    p_fc,
    p_ii,
    p_ca,
    p_ap,
    p_p,
    p_n,
    p_cl,
    p_closed,
]:
    net.places.add(p)

# -----------------------------------------------------------------
# 2. Create transitions (activities)
# -----------------------------------------------------------------
t_cr = PetriNet.Transition("t_cr", label="Claim Registration")
t_dv = PetriNet.Transition("t_dv", label="Document Verification")
t_rds = PetriNet.Transition("t_rds", label="Re‑Document Submission")
t_fc = PetriNet.Transition("t_fc", label="Fraud Check")
t_ii = PetriNet.Transition("t_ii", label="In‑depth Investigation")
t_ca = PetriNet.Transition("t_ca", label="Claim Assessment")
t_ap = PetriNet.Transition("t_ap", label="Approval")
t_p = PetriNet.Transition("t_p", label="Payment")
t_n = PetriNet.Transition("t_n", label="Notification")
t_cl = PetriNet.Transition("t_cl", label="Closure")
t_end = PetriNet.Transition("t_end", label="End")  # moves token to final place

# Add all transitions to the net
for t in [
    t_cr,
    t_dv,
    t_rds,
    t_fc,
    t_ii,
    t_ca,
    t_ap,
    t_p,
    t_n,
    t_cl,
    t_end,
]:
    net.transitions.add(t)

# -----------------------------------------------------------------
# 3. Connect places and transitions with arcs
# -----------------------------------------------------------------
# Start → Claim Registration
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_cr, net)

# Claim Registration → Document Verification
petri_utils.add_arc_from_to(p_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv, net)

# Document Verification → (possible) Re‑Document Submission loop
petri_utils.add_arc_from_to(p_dv, t_rds, net)   # go to re‑submission
petri_utils.add_arc_from_to(t_rds, p_rds, net) # token arrives at re‑submission place
petri_utils.add_arc_from_to(p_rds, t_dv, net)  # after re‑submission, back to DV

# Document Verification → Fraud Check (normal flow)
petri_utils.add_arc_from_to(p_dv, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc, net)

# Fraud Check → (possible) In‑depth Investigation loop
petri_utils.add_arc_from_to(p_fc, t_ii, net)   # go to investigation
petri_utils.add_arc_from_to(t_ii, p_ii, net)   # token arrives at investigation place
petri_utils.add_arc_from_to(p_ii, t_fc, net)   # after investigation, back to FC

# Fraud Check → Claim Assessment
petri_utils.add_arc_from_to(p_fc, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_ca, net)

# Claim Assessment → Approval (if needed)
petri_utils.add_arc_from_to(p_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ap, net)

# Approval → Payment
petri_utils.add_arc_from_to(p_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, p_p, net)

# Payment → Notification
petri_utils.add_arc_from_to(p_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_n, net)

# Notification → Closure
petri_utils.add_arc_from_to(p_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_cl, net)

# Closure → Final place (closed claim)
petri_utils.add_arc_from_to(p_cl, t_end, net)
petri_utils.add_arc_from_to(t_end, p_closed, net)

# -----------------------------------------------------------------
# 4. Define initial and final markings
# -----------------------------------------------------------------
im = Marking()
im[p_start] = 1          # one claim arrives

fm = Marking()
fm[p_closed] = 1         # token in the closed‑claim place denotes completion

# -----------------------------------------------------------------
# The net is now an accepting Petri net:
#   - initial marking `im` has a token in `p_start`
#   - final marking `fm` expects a token in `p_closed`
# -----------------------------------------------------------------
```