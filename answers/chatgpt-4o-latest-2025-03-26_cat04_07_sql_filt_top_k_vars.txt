Here's a DuckDB SQL query that fulfills your request:

```sql
-- Define the value of K (number of top variants to include)
-- You can replace this with your desired number.
WITH parameters AS (
    SELECT 5 AS K
),

-- Step 1: Extract ordered activity sequence per case
case_variants AS (
    SELECT
        case_id,
        string_agg(activity, ' -> ' ORDER BY timestamp) AS variant_sequence
    FROM event_log
    GROUP BY case_id
),

-- Step 2: Count frequency of each process variant
variant_counts AS (
    SELECT
        variant_sequence,
        COUNT(*) AS case_count
    FROM case_variants
    GROUP BY variant_sequence
),

-- Step 3: Rank variants by frequency and select top K
top_variants AS (
    SELECT
        variant_sequence
    FROM variant_counts, parameters
    ORDER BY case_count DESC
    LIMIT parameters.K
),

-- Step 4: Identify case_ids belonging to top K variants
top_cases AS (
    SELECT
        cv.case_id
    FROM case_variants cv
    JOIN top_variants tv
      ON cv.variant_sequence = tv.variant_sequence
)

-- Final Step: Return events only for cases in the top K variants
SELECT
    e.*
FROM event_log e
JOIN top_cases tc
  ON e.case_id = tc.case_id
ORDER BY e.case_id, e.timestamp;
```

 **Explanation of Steps:**

1. **`case_variants`**: For each `case_id`, this extracts the ordered list of activities using `string_agg`, producing the process variant.

2. **`variant_counts`**: Groups cases by their variant and counts how many cases follow each unique path.

3. **`top_variants`**: Selects the top `K` variants based on their frequency (most common first).

4. **`top_cases`**: Filters out the IDs of cases that match one of the top K variants.

5. Finally, the query returns all rows from `event_log` for these filtered case IDs, sorted by `case_id` and `timestamp`.

**To customize**: Change the value of `K` in the `parameters` CTE to retrieve a different number of top variants.