To construct the Log Skeleton for the order fulfillment process, we need to define the constraints based on the activities and their logical sequence. Here's how we can structure the Python dictionary:

```python
log_skeleton = {
    'equivalence': set(),  # No activities are equivalent in this process
    'always_before': {
        ('RO', 'CA'),  # Receive Order must occur before Check Availability
        ('CA', 'RI'),  # Check Availability must occur before Reserve Items
        ('RI', 'PI'),  # Reserve Items must occur before Pick Items
        ('PI', 'QC'),  # Pick Items must occur before Quality Check
        ('QC', 'PO'),  # Quality Check must occur before Pack Order
        ('PO', 'GSL'),  # Pack Order must occur before Generate Shipping Label
        ('GSL', 'D'),  # Generate Shipping Label must occur before Dispatch
        ('D', 'IC'),   # Dispatch must occur before Invoice Customer
        ('IC', 'RP'),  # Invoice Customer must occur before Record Payment
    },
    'always_after': set(),  # No specific 'always after' constraints as they imply 'always before' in reverse order
    'never_together': set(),  # No activities that cannot co-exist within the same case
    'activ_freq': {
        'RO': {1},  # Receive Order must occur exactly once
        'CA': {1},  # Check Availability must occur exactly once
        'RI': {1},  # Reserve Items must occur exactly once
        'PI': {1},  # Pick Items must occur exactly once
        'QC': {1},  # Quality Check must occur exactly once
        'PO': {1},  # Pack Order must occur exactly once
        'GSL': {1},  # Generate Shipping Label must occur exactly once
        'D': {1},    # Dispatch must occur exactly once
        'IC': {1},   # Invoice Customer must occur exactly once
        'RP': {1},   # Record Payment must occur exactly once
    },
    'directly_follows': set(),  # No direct-follows constraints as all dependencies are sequential and implied by 'always_before'
}
```

**Explanation:**

- **Equivalence:** There are no activities that need to be equivalent in this process.
- **Always Before:** Specifies the sequence of activities, ensuring each must occur before the next in the order defined.
- **Always After:** Not explicitly needed since it would imply the reverse of 'always_before', and we are focusing on a linear workflow.
- **Never Together:** No activities need to be mutually exclusive within the same case.
- **Activity Occurrences:** Each activity is bound to occur exactly once, as is typical in a process flow where each step is completed before moving to the next.
- **Directly Follows:** Not explicitly needed as it would merely repeat the sequential nature implied by 'always_before'.

This structure ensures a clear, linear progression through the order fulfillment process, reflecting the logical sequence of activities required to complete an order from start to finish.