Here's a DuckDB SQL query that accomplishes the described task. The query:

- Extracts the ordered sequence of activities per `case_id` as a single string `activity_sequence`.
- Aggregates cases by these sequences to find process variants.
- Counts the number of cases per variant.
- Filters to only the top K variants by frequency.
- Returns all events belonging to cases that have one of the top K variants.

Replace `:K` with your desired number of top variants.

```sql
WITH
-- Step 1: Construct the ordered activity sequence per case
case_variants AS (
    SELECT 
        case_id,
        string_agg(activity ORDER BY timestamp, '->') AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

-- Step 2: Count how many cases have each variant (activity sequence)
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS variant_case_count
    FROM case_variants
    GROUP BY activity_sequence
),

-- Step 3: Identify the top K variants by frequency
top_k_variants AS (
    SELECT
        activity_sequence
    FROM variant_counts
    ORDER BY variant_case_count DESC
    LIMIT :K
),

-- Step 4: Find all cases that belong to the top K variants
top_k_cases AS (
    SELECT cv.case_id
    FROM case_variants cv
    JOIN top_k_variants tkv ON cv.activity_sequence = tkv.activity_sequence
)

-- Step 5: Return events that belong only to top K variant cases
SELECT el.*
FROM event_log el
JOIN top_k_cases tkc ON el.case_id = tkc.case_id
ORDER BY el.case_id, el.timestamp;
```

---

### Explanation:

- `string_agg(activity ORDER BY timestamp, '->')` concatenates activities in timestamp order, delimiting them with `"->"`. This represents the variant as a string.
- We then count how many cases share each sequence to get variant frequencies.
- We select the top K variants by frequency.
- Finally, we join back with the original event log to retrieve only events tied to those top K variants.

You should set `:K` to the number of top variants you want to analyze (for example, `5` for top 5 variants).