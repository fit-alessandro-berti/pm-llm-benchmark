```sql
WITH activity_sequences AS (
    SELECT 
        case_id,
        LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
        LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_prev_activity
    FROM 
        event_log
),
filtered_cases AS (
    SELECT DISTINCT case_id
    FROM activity_sequences
    WHERE activity = 'Approve Purchase Requisition'
    AND prev_activity = 'Create Order'
    AND prev_prev_activity = 'Confirm Order'
    AND EXTRACT(EPOCH FROM (timestamp - LAG(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp))) / (60 * 60 * 24) > 5
)
SELECT * 
FROM event_log 
WHERE case_id NOT IN (SELECT case_id FROM filtered_cases);
```

This solution first constructs a derived table `activity_sequences` that uses window functions to look at the previous two activities for each `case_id`. The `filtered_cases` CTE then selects `case_id`s that contain the exact sequence of activities in the required order and with a time gap greater than 5 days. Finally, the main query selects all events from `event_log` except those that belong to the `case_id`s identified in `filtered_cases`.