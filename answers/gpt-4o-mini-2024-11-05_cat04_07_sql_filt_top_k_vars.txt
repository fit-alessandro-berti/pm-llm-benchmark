To fulfill this task, we will break it down into several key steps. Hereâ€™s how the SQL query can be structured for DuckDB:

### Steps:
1. **Get the ordered sequence of activities for each case**: We'll sort the events within each `case_id` by their `timestamp` to ensure the correct order.
2. **Group by the activity sequence**: We'll use a combination of `GROUP BY` and a window function (to concatenate the activities into a single string for each case) to identify unique process variants.
3. **Count occurrences of each variant**: After identifying the variants, we will aggregate by the sequence to count the number of cases corresponding to each variant.
4. **Identify the top K variants**: We'll sort by the count of cases and select the top K variants.
5. **Filter the original event log**: We'll filter the original event log to only include events from cases that match the top K variants.

### SQL Query:
```sql
WITH ordered_activities AS (
    -- Step 1: Sort the activities within each case by timestamp to get the correct sequence
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_order
    FROM event_log
),
activity_sequence AS (
    -- Step 2: Group by case_id and create a sequence of activities
    SELECT
        case_id,
        LIST_AGG(activity, '->') AS activity_sequence  -- Aggregate activities into a sequence (with separator '->')
    FROM ordered_activities
    GROUP BY case_id
),
variant_counts AS (
    -- Step 3: Count how many cases correspond to each activity sequence (variant)
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM activity_sequence
    GROUP BY activity_sequence
    ORDER BY case_count DESC
    LIMIT K  -- Step 4: Only keep the top K variants based on case count
),
filtered_cases AS (
    -- Step 5: Get the case_ids that belong to the top K variants
    SELECT e.*
    FROM event_log e
    JOIN activity_sequence a ON e.case_id = a.case_id
    JOIN variant_counts v ON a.activity_sequence = v.activity_sequence
)
-- Return the original events from the filtered cases
SELECT *
FROM filtered_cases
ORDER BY case_id, timestamp;
```

### Explanation:
1. **`ordered_activities` CTE**: This Common Table Expression (CTE) ensures that for each `case_id`, the activities are ordered by their `timestamp` using the `ROW_NUMBER()` window function. This helps in maintaining the correct order for each case.
2. **`activity_sequence` CTE**: Here, we use `LIST_AGG` to concatenate the activities for each `case_id` into a single string representing the ordered sequence of activities.
3. **`variant_counts` CTE**: In this CTE, we group by the `activity_sequence` and count how many cases follow that sequence. We then order these by the frequency (`case_count`) and use `LIMIT K` to select the top K variants based on case count.
4. **`filtered_cases` CTE**: This filters the original event log by joining the original log with the `activity_sequence` and `variant_counts` to only return the events belonging to cases that match the top K variants.
5. **Final SELECT**: We select all columns from the filtered cases and order them by `case_id` and `timestamp` to ensure the correct event order.

### Notes:
- Replace `K` with the desired number of top variants you want to return.
- The `LIST_AGG` function in DuckDB allows us to concatenate the activities in the desired order for each case.
