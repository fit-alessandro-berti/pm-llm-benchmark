```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Common Activities
ReceiveApplication = Transition(label="ReceiveApplication")
ResumeParsingInitialDataCheck = Transition(label="ResumeParsingInitialDataCheck")
DataCompletenessCheck = Transition(label="DataCompletenessCheck") # Implied within the loop
RequestMoreInfo = Transition(label="RequestMoreInfo")
PreliminarySkillAssessment = Transition(label="PreliminarySkillAssessment")
CulturalFitEvaluation = Transition(label="CulturalFitEvaluation")
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# --- POWL Model with Potential Unfairness ---

# 1. Data Completeness Loop
# A: ResumeParsingInitialDataCheck (initial check before loop starts effectively)
# B: RequestMoreInfo (if incomplete, loop back to provide more info)
# The loop described is "Any missing information triggers a loop process where the applicant is asked to provide additional details before proceeding."
# This implies: Initial Check -> (if incomplete) RequestMoreInfo -> Initial Check again.
# A simpler representation for POWL: We can model it as an initial check, followed by a loop for asking for info if needed.

# Let's model the "missing information triggers a loop" more explicitly:
# We need to execute ResumeParsingInitialDataCheck first, then if incomplete, RequestMoreInfo, and then implicitly retry the check.
# For POWL, we can have a loop around `RequestMoreInfo` that repeats until the data is complete.
# However, the description implies the 'Resume Parsing & Initial Data Check' is the gateway.
# Let's represent this as: `ResumeParsingInitialDataCheck` then a loop that consists of `RequestMoreInfo` followed by `ResumeParsingInitialDataCheck` again if necessary,
# until it passes. A simpler POWL loop usually has two children: one for the loop body, and one for what to do *inside* the loop before exiting.
# A common way to model "A until B" is LOOP(B, A). Here, it's (RequestMoreInfo, ResumeParsingInitialDataCheck) effectively.

# Let's refine the loop: The loop is implicitly around getting the data right.
# "Resume Parsing & Initial Data Check" is the first step. If it fails, "Request More Info" happens, and then you're back to checking.
# This is hard to represent as a simple `* (A, B)`.
# A more accurate POWL for "A until B" is to have a specific check, then a loop that only executes the "fix-up" action.
# For simplicity and to match the POWL structure, let's treat "DataCompletenessCheck" as the activity inside the loop, and "RequestMoreInfo" as the action to fix it.
# The description: "Any missing information triggers a loop process where the applicant is asked to provide additional details before proceeding."
# This can be seen as: `DataCompletenessCheck` (the check itself), if not complete, then `RequestMoreInfo` then retry `DataCompletenessCheck`.
# The simpler way: `InitialDataCheck` -> Loop for `RequestMoreInfo` that implies re-check.
# Let's use a `DataCompletenessCheck` activity followed by a loop that only runs `RequestMoreInfo` if data is not complete.
# A more standard POWL representation for "do A, if A fails, do B and retry A" is often simplified to:
# `DataCompletenessCheck` followed by `Loop(Skip, RequestMoreInfo)`. The skip is when data is complete, RequestMoreInfo runs if incomplete.
# This models "DataCompletenessCheck" (initial pass) -> Loop(RequestMoreInfo, DataCompletenessCheck_recheck).
# However, the structure `*(A, B)` means `A` runs, then you either exit or `B` runs and `A` runs again.
# Let `A = DataCompletenessCheck` and `B = RequestMoreInfo`. So, `*(DataCompletenessCheck, RequestMoreInfo)` means:
# `DataCompletenessCheck` -> (exit OR `RequestMoreInfo` -> `DataCompletenessCheck` -> ...)
# This seems to fit the description best.

DataCompletenessLoop_Unfair = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

# 2. Cultural Fit & Community Affiliation Check (XOR Branching)
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")
StandardCulturalFitEvaluation = Transition(label="StandardCulturalFitEvaluation") # Renamed for clarity vs. CulturalFitEvaluation
XOR_CulturalFitUnfair = OperatorPOWL(
    operator=Operator.XOR,
    children=[CommunityAffiliationCheck, StandardCulturalFitEvaluation]
)

# Root for Unfair Model
Unfair_Root = StrictPartialOrder(nodes=[
    ReceiveApplication,
    ResumeParsingInitialDataCheck,
    DataCompletenessLoop_Unfair,
    PreliminarySkillAssessment,
    XOR_CulturalFitUnfair,
    ManagerialReview,
    FinalDecision
])

# Define the order for the unfair model
Unfair_Root.order.add_edge(ReceiveApplication, ResumeParsingInitialDataCheck)
Unfair_Root.order.add_edge(ResumeParsingInitialDataCheck, DataCompletenessLoop_Unfair)
Unfair_Root.order.add_edge(DataCompletenessLoop_Unfair, PreliminarySkillAssessment)
Unfair_Root.order.add_edge(PreliminarySkillAssessment, XOR_CulturalFitUnfair)
Unfair_Root.order.add_edge(XOR_CulturalFitUnfair, ManagerialReview)
Unfair_Root.order.add_edge(ManagerialReview, FinalDecision)

print("--- POWL Model with Potential Unfairness ---")
print(Unfair_Root)
# You can visualize this if pm4py is configured with graphviz
# from pm4py.visualization.powl import visualizer as powl_visualizer
# powl_visualizer.apply(Unfair_Root)


# --- POWL Model Without Unfairness ---

# 1. Data Completeness Loop (same structure as above, it's not inherently unfair)
DataCompletenessLoop_Fair = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

# 2. Cultural Fit Evaluation (No XOR, all follow the same path)
# Use the general CulturalFitEvaluation activity
AllApplicantsCulturalFitEvaluation = Transition(label="CulturalFitEvaluation")

# Root for Fair Model
Fair_Root = StrictPartialOrder(nodes=[
    ReceiveApplication,
    ResumeParsingInitialDataCheck,
    DataCompletenessLoop_Fair,
    PreliminarySkillAssessment,
    AllApplicantsCulturalFitEvaluation,
    ManagerialReview,
    FinalDecision
])

# Define the order for the fair model
Fair_Root.order.add_edge(ReceiveApplication, ResumeParsingInitialDataCheck)
Fair_Root.order.add_edge(ResumeParsingInitialDataCheck, DataCompletenessLoop_Fair)
Fair_Root.order.add_edge(DataCompletenessLoop_Fair, PreliminarySkillAssessment)
Fair_Root.order.add_edge(PreliminarySkillAssessment, AllApplicantsCulturalFitEvaluation)
Fair_Root.order.add_edge(AllApplicantsCulturalFitEvaluation, ManagerialReview)
Fair_Root.order.add_edge(ManagerialReview, FinalDecision)

print("\n--- POWL Model Without Unfairness ---")
print(Fair_Root)
# from pm4py.visualization.powl import visualizer as powl_visualizer
# powl_visualizer.apply(Fair_Root)
```