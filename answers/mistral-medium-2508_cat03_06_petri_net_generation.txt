Below is the Python code to construct the accepting Petri net for the insurance claim management process, including the initial and final markings. The Petri net models the main flow, loops for document re-submission, and in-depth fraud investigations.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance_Claim_Process")

# --- Places ---
# Start place
start = PetriNet.Place(name="start")

# Intermediate places
cr_done = PetriNet.Place(name="claim_registered")
dv_done = PetriNet.Place(name="documents_verified")
dv_incomplete = PetriNet.Place(name="documents_incomplete")
rds_done = PetriNet.Place(name="documents_resubmitted")
fc_done = PetriNet.Place(name="fraud_checked")
fc_suspicious = PetriNet.Place(name="fraud_suspicious")
ii_done = PetriNet.Place(name="investigation_done")
ca_done = PetriNet.Place(name="claim_assessed")
ap_done = PetriNet.Place(name="claim_approved")
p_done = PetriNet.Place(name="payment_done")
n_done = PetriNet.Place(name="notification_sent")

# End place
end = PetriNet.Place(name="claim_closed")

# Add places to the net
net.places.update([start, cr_done, dv_done, dv_incomplete, rds_done, fc_done, fc_suspicious,
                   ii_done, ca_done, ap_done, p_done, n_done, end])

# --- Transitions ---
# Transitions for each activity
cr = PetriNet.Transition(name="Claim_Registration", label="Claim Registration (CR)")
dv = PetriNet.Transition(name="Document_Verification", label="Document Verification (DV)")
rds = PetriNet.Transition(name="Re_Document_Submission", label="Re-Document Submission (RDS)")
fc = PetriNet.Transition(name="Fraud_Check", label="Fraud Check (FC)")
ii = PetriNet.Transition(name="In_depth_Investigation", label="In-depth Investigation (II)")
ca = PetriNet.Transition(name="Claim_Assessment", label="Claim Assessment (CA)")
ap = PetriNet.Transition(name="Approval", label="Approval (AP)")
p = PetriNet.Transition(name="Payment", label="Payment (P)")
n = PetriNet.Transition(name="Notification", label="Notification (N)")
cl = PetriNet.Transition(name="Closure", label="Closure (CL)")

# Add transitions to the net
net.transitions.update([cr, dv, rds, fc, ii, ca, ap, p, n, cl])

# --- Arcs ---
# Main flow arcs
petri_utils.add_arc_from_to(start, cr, net)
petri_utils.add_arc_from_to(cr, cr_done, net)

petri_utils.add_arc_from_to(cr_done, dv, net)
petri_utils.add_arc_from_to(dv, dv_done, net)  # Documents are complete
petri_utils.add_arc_from_to(dv, dv_incomplete, net)  # Documents are incomplete

petri_utils.add_arc_from_to(dv_incomplete, rds, net)
petri_utils.add_arc_from_to(rds, rds_done, net)
petri_utils.add_arc_from_to(rds_done, dv, net)  # Loop back to DV

petri_utils.add_arc_from_to(dv_done, fc, net)
petri_utils.add_arc_from_to(fc, fc_done, net)  # No fraud
petri_utils.add_arc_from_to(fc, fc_suspicious, net)  # Suspicious

petri_utils.add_arc_from_to(fc_suspicious, ii, net)
petri_utils.add_arc_from_to(ii, ii_done, net)
petri_utils.add_arc_from_to(ii_done, fc, net)  # Loop back to FC

petri_utils.add_arc_from_to(fc_done, ca, net)
petri_utils.add_arc_from_to(ca, ca_done, net)

petri_utils.add_arc_from_to(ca_done, ap, net)
petri_utils.add_arc_from_to(ap, ap_done, net)

petri_utils.add_arc_from_to(ap_done, p, net)
petri_utils.add_arc_from_to(p, p_done, net)

petri_utils.add_arc_from_to(p_done, n, net)
petri_utils.add_arc_from_to(n, n_done, net)

petri_utils.add_arc_from_to(n_done, cl, net)
petri_utils.add_arc_from_to(cl, end, net)

# --- Initial and Final Markings ---
im = Marking()  # Initial marking: token in 'start'
im[start] = 1

fm = Marking()  # Final marking: token in 'end'
fm[end] = 1

# --- Verification (Optional) ---
# Print places and transitions for verification
print("Places in the net:", [p.name for p in net.places])
print("Transitions in the net:", [t.label for t in net.transitions])
print("Initial marking:", im)
print("Final marking:", fm)
```

### Explanation:
1. **Places**:
   - `start`: Initial place where a new claim arrives.
   - Intermediate places like `cr_done`, `dv_done`, etc., represent the state after each activity.
   - `dv_incomplete` and `fc_suspicious` are places for loops (re-submission and in-depth investigation).
   - `end`: Final place where the claim is closed.

2. **Transitions**:
   - Each transition corresponds to an activity (e.g., `Claim_Registration`, `Document_Verification`).
   - Silent transitions (not explicitly modeled here) could be added for more complex logic.

3. **Arcs**:
   - Arcs connect places to transitions and vice versa, modeling the flow.
   - Loops are created for re-submission (`DV  RDS  DV`) and in-depth investigation (`FC  II  FC`).

4. **Markings**:
   - `im`: Initial marking with a token in `start`.
   - `fm`: Final marking with a token in `end`.

This Petri net captures the entire process, including loops for document re-submission and fraud investigation. You can visualize it using tools like `pm4py.visualization.petri_net` for better understanding.