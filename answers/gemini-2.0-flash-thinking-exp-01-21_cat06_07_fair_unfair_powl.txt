```python
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# --- POWL Model with Potential Unfairness ---

# Activities
receive_application = Transition(label="ReceiveApplication")
data_completeness_check = Transition(label="DataCompletenessCheck")
request_more_info = Transition(label="RequestMoreInfo")
skill_assessment = Transition(label="SkillAssessment")
cultural_fit_evaluation = Transition(label="CulturalFitEvaluation")
community_affiliation_check = Transition(label="CommunityAffiliationCheck")
managerial_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# Loop for Data Completeness Check
data_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_completeness_check, request_more_info])

# XOR for Cultural Fit Evaluation with Bias
cultural_fit_choice = OperatorPOWL(operator=Operator.XOR, children=[cultural_fit_evaluation, community_affiliation_check])

# POWL Model with Unfairness
powl_unfair = StrictPartialOrder(nodes=[
    receive_application,
    data_check_loop,
    skill_assessment,
    cultural_fit_choice,
    managerial_review,
    final_decision
])

powl_unfair.order.add_edge(receive_application, data_check_loop)
powl_unfair.order.add_edge(data_check_loop, skill_assessment)
powl_unfair.order.add_edge(skill_assessment, cultural_fit_choice)
powl_unfair.order.add_edge(cultural_fit_choice, managerial_review)
powl_unfair.order.add_edge(managerial_review, final_decision)

print("POWL Model with Potential Unfairness:")
print(powl_unfair)


# --- POWL Model Without Unfairness ---

# Activities (reusing activities defined above where possible, or redefine if needed for clarity - though in this case, they are the same activities but arranged differently)
receive_application_fair = Transition(label="ReceiveApplication") # Can reuse 'receive_application'
data_completeness_check_fair = Transition(label="DataCompletenessCheck") # Can reuse 'data_completeness_check'
request_more_info_fair = Transition(label="RequestMoreInfo") # Can reuse 'request_more_info'
skill_assessment_fair = Transition(label="SkillAssessment") # Can reuse 'skill_assessment'
cultural_fit_evaluation_fair = Transition(label="CulturalFitEvaluation") # Can reuse 'cultural_fit_evaluation'
managerial_review_fair = Transition(label="ManagerialReview") # Can reuse 'managerial_review'
final_decision_fair = Transition(label="FinalDecision") # Can reuse 'final_decision'

# Loop for Data Completeness Check (reusing the loop definition is also fine if the structure is identical)
data_check_loop_fair = OperatorPOWL(operator=Operator.LOOP, children=[data_completeness_check_fair, request_more_info_fair]) # Can reuse 'data_check_loop'

# POWL Model without Unfairness
powl_fair = StrictPartialOrder(nodes=[
    receive_application_fair,
    data_check_loop_fair,
    skill_assessment_fair,
    cultural_fit_evaluation_fair,
    managerial_review_fair,
    final_decision_fair
])

powl_fair.order.add_edge(receive_application_fair, data_check_loop_fair)
powl_fair.order.add_edge(data_check_loop_fair, skill_assessment_fair)
powl_fair.order.add_edge(skill_assessment_fair, cultural_fit_evaluation_fair)
powl_fair.order.add_edge(cultural_fit_evaluation_fair, managerial_review_fair)
powl_fair.order.add_edge(managerial_review_fair, final_decision_fair)


print("\nPOWL Model Without Unfairness:")
print(powl_fair)
```