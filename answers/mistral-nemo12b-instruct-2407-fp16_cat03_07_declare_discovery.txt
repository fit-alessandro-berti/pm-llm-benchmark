Based on the provided processes, I've created a declarative process model using BPMN notation. Here's a simplified representation of the main flow and decision points:

```mermaid
graph TD;
    A[Create Fine] --> B[Send Fine];
    B --> C{Insert Notification};
    C --> D{Handle Appeal/Collection};
    D -- Payment --> E[Payment Confirmed];
    D -- Appeal to Prefecture --> F[Appeal to Prefecture];
    F --> G{Receive Result};
    G -- Confirmation --> H[Notify Offender & Payment];
    G -- Rejection --> I[Send for Credit Collection];
    D -- Appeal to Judge --> J[Appeal to Judge];
    J --> K{Payment/Penalties};
    K -- Payment --> E;
    C --> L{Add Penalty};
    L --> M{Payment/Penalties};
    M -- Payment --> E;
    A --> N[Payment Before Notice];
    N --> O{Handle Appeal/Collection};
    O -- Payment --> P[Payment Confirmed];
    O -- Appeal to Prefecture --> F;
```

In this model:

1. The process starts with creating a fine (`Create Fine`) and sending it (`Send Fine`).
2. A notification is inserted (`Insert Notification`), which leads to the decision point `Handle Appeal/Collection`.
3. From there, the process can follow various paths:
	* **Payment**: If payment is made, the process ends (`Payment Confirmed`).
	* **Appeal to Prefecture**: An appeal can be sent to the prefecture for review.
	* **Appeal to Judge**: In some cases, an appeal can be made directly to a judge.
4. Depending on the outcome of the appeal or collection attempt:
	* Payment can be confirmed (`Payment Confirmed`).
	* A penalty may be added and payment is required (`Add Penalty`, `Payment/Penalties`).
	* The process may move forward with credit collection attempts.
5. Some paths include an additional payment step before reaching the final decision points.

This model captures the main flows of your processes, but it's still quite complex due to the variety of paths and frequencies. Consider breaking down or simplifying some of these processes for better clarity and management.