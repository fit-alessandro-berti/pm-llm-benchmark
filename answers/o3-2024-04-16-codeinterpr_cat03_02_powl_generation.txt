```python
# ------------------------------------------------------------
# POWL model for the “Corporate Network Provisioning” scenario
# ------------------------------------------------------------
#
# Legend of activities
#   SR   = Service-request verification
#   CS   = Contract setup
#   DA   = Datacenter allocation
#   ACI  = Access-control initialization
#   BNC  = Base-network configuration
#   D&R  = Debug & Reconfigure
#   CD   = Containerized deployment
#   MD   = Monolithic deployment
#   QA   = Quality-assurance testing
#   SA   = Security audit
#   GLA  = Go-live approval
#
# Control-flow constructs
#   LOOP(BNC, D&R)         – keep re-configuring until stable
#   XOR(CD, MD)            – choose one deployment method
#
# Overall ordering
#   SR  CS  {DA || ACI}  LOOP  XOR  {QA || SA}  GLA
# ------------------------------------------------------------

import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# 1. Atomic activities (POWL transitions)
SR  = Transition(label="SR")     # Service-request verification
CS  = Transition(label="CS")     # Contract setup
DA  = Transition(label="DA")     # Datacenter allocation
ACI = Transition(label="ACI")    # Access-control initialization
BNC = Transition(label="BNC")    # Base-network configuration
DR  = Transition(label="D&R")    # Debug & Reconfigure
CD  = Transition(label="CD")     # Containerized deployment
MD  = Transition(label="MD")     # Monolithic deployment
QA  = Transition(label="QA")     # Quality-assurance testing
SA  = Transition(label="SA")     # Security audit
GLA = Transition(label="GLA")    # Go-live approval

# 2. Loop:   BNC followed by optional/repeating D&R
loop_cfg = OperatorPOWL(operator=Operator.LOOP, children=[BNC, DR])

# 3. Exclusive-choice deployment:  CD XOR MD
xor_deploy = OperatorPOWL(operator=Operator.XOR, children=[CD, MD])

# 4. Root partial order that glues every piece together
root = StrictPartialOrder(
    nodes=[
        SR, CS,                # sequential prefix
        DA, ACI,               # parallel preparation
        loop_cfg,              # looping configuration
        xor_deploy,            # exclusive deployment
        QA, SA,                # parallel finishing checks
        GLA                    # final approval
    ]
)

# 5. Ordering constraints --------------------------------------------------
# SR  CS
root.order.add_edge(SR, CS)

# CS  DA,  CS  ACI     (DA and ACI run in parallel afterwards)
root.order.add_edge(CS, DA)
root.order.add_edge(CS, ACI)

# DA  loop_cfg,  ACI  loop_cfg   (loop waits for both DA & ACI)
root.order.add_edge(DA,  loop_cfg)
root.order.add_edge(ACI, loop_cfg)

# loop_cfg  xor_deploy
root.order.add_edge(loop_cfg, xor_deploy)

# xor_deploy  QA,  xor_deploy  SA   (QA and SA can run concurrently)
root.order.add_edge(xor_deploy, QA)
root.order.add_edge(xor_deploy, SA)

# QA  GLA,  SA  GLA   (GLA waits for both QA & SA)
root.order.add_edge(QA, GLA)
root.order.add_edge(SA, GLA)

# -------------------------------------------------------------------------
# The variable “root” now contains the complete POWL model
# -------------------------------------------------------------------------
```