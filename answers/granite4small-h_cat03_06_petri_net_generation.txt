Here's an example of constructing an accepting Petri net for the insurance claim management process using pm4py:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define places for each step of the process
source = PetriNet.Place(name="Source")
claim_registration = PetriNet.Place(name="Claim Registration")
document_verification = PetriNet.Place(name="Document Verification")
fraud_check = PetriNet.Place(name="Fraud Check")
claim_assessment = PetriNet.Place(name="Claim Assessment")
approval = PetriNet.Place(name="Approval")
payment = PetriNet.Place(name="Payment")
notification = PetriNet.Place(name="Notification")
closure = PetriNet.Place(name="Closure")
sink = PetriNet.Place(name="Sink")

# Define transitions for each activity
register_claim = PetriNet.Transition(name="Register Claim", label="Register Claim")
verify_documents = PetriNet.Transition(name="Verify Documents", label="Verify Documents")
check_fraud = PetriNet.Transition(name="Check Fraud", label="Check Fraud")
assess_claim = PetriNet.Transition(name="Assess Claim", label="Assess Claim")
approve_claim = PetriNet.Transition(name="Approve Claim", label="Approve Claim")
make_payment = PetriNet.Transition(name="Make Payment", label="Make Payment")
send_notification = PetriNet.Transition(name="Send Notification", label="Send Notification")
close_claim = PetriNet.Transition(name="Close Claim", label="Close Claim")

# Add places and transitions to the net
net.places.update([source, claim_registration, document_verification, fraud_check,
                   claim_assessment, approval, payment, notification, closure, sink])
net.transitions.update([register_claim, verify_documents, check_fraud, assess_claim,
                        approve_claim, make_payment, send_notification, close_claim])

# Add arcs to connect places and transitions
petri_utils.add_arc_from_to(source, register_claim, net)
petri_utils.add_arc_from_to(register_claim, claim_registration, net)

# Document Verification with re-submission loop
petri_utils.add_arc_from_to(claim_registration, verify_documents, net)
petri_utils.add_arc_from_to(verify_documents, document_verification, net)
re_document_submission = PetriNet.Transition(name="Re-Document Submission", label="Re-Document Submission")
petri_utils.add_arc_from_to(document_verification, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, verify_documents, net)

# Fraud Check with in-depth investigation loop
petri_utils.add_arc_from_to(document_verification, check_fraud, net)
petri_utils.add_arc_from_to(check_fraud, fraud_check, net)
in_depth_investigation = PetriNet.Transition(name="In-Depth Investigation", label="In-Depth Investigation")
petri_utils.add_arc_from_to(fraud_check, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, fraud_check, net)

# Claim Assessment
petri_utils.add_arc_from_to(fraud_check, assess_claim, net)
petri_utils.add_arc_from_to(assess_claim, claim_assessment, net)

# Approval (conditional based on threshold amount)
threshold_approval = PetriNet.Place(name="Threshold Approval")
petri_utils.add_arc_from_to(claim_assessment, approve_claim, net)
petri_utils.add_arc_from_to(approve_claim, approval, net)
petri_utils.add_arc_from_to(approval, threshold_approval, net)

# Payment
petri_utils.add_arc_from_to(threshold_approval, make_payment, net)
petri_utils.add_arc_from_to(make_payment, payment, net)

# Notification
petri_utils.add_arc_from_to(payment, send_notification, net)
petri_utils.add_arc_from_to(send_notification, notification, net)

# Closure
petri_utils.add_arc_from_to(notification, close_claim, net)
petri_utils.add_arc_from_to(close_claim, closure, net)

# Connect closure to sink place
petri_utils.add_arc_from_to(closure, sink, net)

# Define initial and final markings
im = Marking()
im[source] = 1

fm = Marking()
fm[closure] = 1

# Remove the sink place from the net (optional)
petri_utils.remove_place(net, sink)
del fm[sink]
```

In this example:

1. We create a new Petri net called "InsuranceClaimProcess".
2. We define places for each step of the process, including source and sink places.
3. We define transitions for each activity in the process.
4. We add arcs to connect the places and transitions according to the process flow.
   - The document verification step includes a re-submission loop if documents are incomplete.
   - The fraud check step includes an in-depth investigation loop if doubts are raised.
5. We define the initial marking (im) by placing a token in the source place, representing a new claim arriving.
6. We define the final marking (fm) by placing a token in the closure place, indicating that the claim is closed and archived.
7. Optionally, we remove the sink place from the net and delete it from the final marking.

This Petri net represents the insurance claim management process with loops for re-submission of documents and in-depth investigation when necessary. The initial and final markings are defined to capture the start and end states of the process.