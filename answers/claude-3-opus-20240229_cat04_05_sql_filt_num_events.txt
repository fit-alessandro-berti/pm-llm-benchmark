Here's a DuckDB SQL query that accomplishes the task you described:

```sql
WITH case_event_counts AS (
  SELECT case_id, COUNT(*) AS event_count
  FROM event_log
  GROUP BY case_id
)
SELECT e.case_id, e.activity, e.timestamp
FROM event_log e
JOIN case_event_counts c ON e.case_id = c.case_id
WHERE c.event_count <= 6
ORDER BY e.case_id, e.timestamp;
```

Let's break down the query step by step:

1. The `WITH` clause defines a common table expression (CTE) named `case_event_counts`. This CTE calculates the count of events for each `case_id` using `COUNT(*)` and `GROUP BY case_id`. The result is a derived table with columns `case_id` and `event_count`.

2. The main `SELECT` statement retrieves the `case_id`, `activity`, and `timestamp` columns from the `event_log` table.

3. The `JOIN` clause combines the `event_log` table with the `case_event_counts` CTE based on the `case_id` column. This allows us to access the `event_count` for each case in the main query.

4. The `WHERE` clause filters the results to include only cases where the `event_count` is less than or equal to 6. This effectively excludes any cases that have more than six events.

5. Finally, the `ORDER BY` clause sorts the results by `case_id` and `timestamp`, ensuring that the events within each case are in chronological order.

The query first identifies the cases that have six or fewer events by counting the events per `case_id` in the CTE. It then joins this information with the main `event_log` table to filter out the cases with more than six events. The remaining events from the eligible cases are returned in the result set, ordered by `case_id` and `timestamp`.

This approach ensures that only the events from cases with six or fewer events are included in the output, while preserving the original event details and order within each case.