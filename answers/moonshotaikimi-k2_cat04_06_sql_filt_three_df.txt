```sql
-- CTE 1: number each event once per case
WITH ordered_events AS (
    SELECT  case_id,
            activity,
            timestamp,
            row_number() OVER ( PARTITION BY case_id ORDER BY  timestamp ) AS rn
    FROM    event_log
),

-- CTE 2: for every (row) find the next 2 rows (still within the same case)
next_steps AS (
    SELECT  case_id,
            activity,
            timestamp,
            lag(activity, 2) OVER (PARTITION BY case_id ORDER BY rn)  AS prev_2,
            lag(activity, 1) OVER (PARTITION BY case_id ORDER BY rn)  AS prev_1,
            lag(timestamp ,1) OVER (PARTITION BY case_id ORDER BY rn) AS prev_1_ts
    FROM    ordered_events
),

-- CTE 3: mark cases that have the target sequence *and*
-- satisfy the > 5-day gap between “Create Order” and “Confirm Order”.
-- We attach the flag at *every* row of such a case so it is easy to
-- detect that entire case later.
bad_cases AS (
    SELECT  CASE
              WHEN activity        = 'Confirm Order' AND
                   prev_1          = 'Create Order'            AND
                   prev_2          = 'Approve Purchase Requisition' AND
                   timestamp - prev_1_ts  > INTERVAL '5 DAY'
              THEN 1
            ELSE 0 END        AS is_bad
    FROM    next_steps
)

-- Return every event whose case is *not* among those matching the
-- criteria formulated above.
SELECT  el.case_id,
        el.activity,
        el.timestamp
FROM    event_log AS el
WHERE   el.case_id NOT IN (
            SELECT case_id
            FROM   (SELECT case_id,
                           max(is_bad) AS has_bad_sequence
                    FROM   bad_cases  GROUP BY case_id) AS x
            WHERE  has_bad_sequence = 1
        )
ORDER BY el.case_id, el.timestamp;
```