Below is a compact, set-based DuckDB solution.  
Replace ${K} (or bind it as a parameter) with the number of variants you want to keep.

```sql
-- 1  Build the ordered activity sequence (the “variant”) for every case
WITH variants AS (
    SELECT
        case_id,
        -- string_agg / list_agg keeps the ORDER BY inside the aggregate
        string_agg(activity, '  ' ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
),

-- 2  Count how many cases follow each variant
variant_freq AS (
    SELECT
        variant,
        COUNT(*) AS case_cnt,
        DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS rnk     -- frequency rank
    FROM variants
    GROUP BY variant
),

-- 3  Keep only the top K variants (ties are kept automatically by DENSE_RANK)
top_variants AS (
    SELECT variant
    FROM variant_freq
    WHERE rnk <= ${K}
),

-- 4  All case_ids that belong to one of those top variants
selected_cases AS (
    SELECT case_id
    FROM variants
    WHERE variant IN (SELECT variant FROM top_variants)
)

-- 5  Return the original event rows for the selected cases
SELECT e.*
FROM event_log AS e
JOIN selected_cases USING (case_id)
ORDER BY e.case_id, e.timestamp;   -- optional, but usually convenient
```

What each step does  
• `variants` creates a single ordered string per `case_id`, yielding the exact process variant.  
• `variant_freq` counts how many cases exhibit each variant and assigns a dense rank by descending frequency.  
• `top_variants` keeps the variants whose rank is  K (so all ties at the cutoff are preserved).  
• `selected_cases` collects the `case_id`s that follow those variants.  
• The final `SELECT` returns every event belonging to those cases—events from cases outside the top K variants never make it through the join.