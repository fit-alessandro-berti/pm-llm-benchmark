1. What is wrong with the current model?

• After Approve Purchase Requisition the model puts all the remaining activities in one big AND-block.  
  – An AND-block in a process tree means “execute every child once, in any order, possibly interleaved”.  
  – Consequently the model allows the following unwanted behaviour:  
    – Pay Invoice before the invoice is even received.  
    – Pay Invoice before the goods are received.  
    – Match Invoice to PO before either the goods or the invoice exist.  
    – Receive Goods or Receive Invoice before the purchase order exists, etc.

• In a normal Procure-to-Pay scenario the activities must follow a strict order:

  1. Create Purchase Requisition  
  2. Approve Purchase Requisition  
  3. Create Purchase Order  
  4. Receive Goods (GR) and Receive Invoice (IR) – both must take place, but they may come in any order.  
  5. Match Invoice to PO (3-way match uses PO, GR and IR, therefore it must be after both GR and IR)  
  6. Pay Invoice  
  7. Close Case  

  There is no step that is optional, and no step may jump ahead of its predecessors.

2. Corrected process tree (Python pseudocode)

```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# leaf nodes (activities stay unchanged)
create_req       = ProcessTree(label="Create_Purchase_Requisition")
approve_req      = ProcessTree(label="Approve_Purchase_Requisition")
create_po        = ProcessTree(label="Create_Purchase_Order")
receive_goods    = ProcessTree(label="Receive_Goods")
receive_invoice  = ProcessTree(label="Receive_Invoice")
match_invoice    = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice      = ProcessTree(label="Pay_Invoice")
close_case       = ProcessTree(label="Close_Case")

# 4. Goods receipt and invoice receipt must both happen,
#    but order is irrelevant  AND-block
goods_and_invoice = ProcessTree(
    operator=Operator.PARALLEL,
    children=[receive_goods, receive_invoice]
)

# final fixed structure: everything is now a strict sequence,
# except the small AND-block that only covers GR and IR.
root = ProcessTree(
    operator=Operator.SEQUENCE,
    children=[
        create_req,
        approve_req,
        create_po,
        goods_and_invoice,  # both GR and IR must occur before we continue
        match_invoice,
        pay_invoice,
        close_case
    ]
)
```

3. Why this version is conformant

• The outer SEQUENCE guarantees that no step can be started before all its predecessors are finished.  
  – Purchase Order cannot be created before the requisition is created and approved.  
  – Matching, payment, and closing cannot happen before GR+IR are done, etc.

• The only parallel construct is between Receive Goods and Receive Invoice, reflecting real-life flexibility: either document may arrive first, but both must be present before the three-way match.

• Because Match Invoice to PO, Pay Invoice and Close Case are placed after the AND-block in the sequence, it is impossible to pay or close anything without first having:  
  – a PO (already created),  
  – a goods receipt, and  
  – an invoice receipt.

• There are no optional branches (no XOR / OR) so every activity will appear exactly once per case, fitting the standard P2P happy path and preventing the underfitting behaviour of the original model.