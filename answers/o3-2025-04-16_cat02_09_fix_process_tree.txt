1. Problems in the present (underfitting) model  

• After Create / Approve requisition the rest of the activities are placed in one PARALLEL (AND) block.  
  – In an AND–block every child is compulsory but the execution order is totally free.  
  – Consequently the model also accepts the following (businessimpossible) traces:  
     ­• Pay Invoice  Receive Invoice  Match Invoice  Receive Goods …  
     ­• Match Invoice  Create PO  Receive Invoice  Pay Invoice …  
  – “Pay Invoice” can therefore be executed before the invoice is even received or matched;  
    “Match Invoice” can be executed before goods and/or the invoice are present, etc.  

• Activities that the domain demands to be strictly sequential are therefore allowed to occur in arbitrary order.  
  Required order (business rule view):  
  1. Create_Purchase_Requisition  
  2. Approve_Purchase_Requisition  
  3. Create_Purchase_Order  
  4. Receive_Goods and Receive_Invoice (both must happen, but their internal order is not important)  
  5. Match_Invoice_to_PO (needs both goods & invoice)  
  6. Pay_Invoice (only after a successful match)  
  7. Close_Case (always the very last activity)  

2. Corrected (fitted) process tree  
Only the minimal amount of freedom that is really required is kept: Goods and Invoice may arrive in any order, everything else is purely sequential.

```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# leaf activities
create_req       = ProcessTree(label="Create_Purchase_Requisition")
approve_req      = ProcessTree(label="Approve_Purchase_Requisition")
create_po        = ProcessTree(label="Create_Purchase_Order")
receive_goods    = ProcessTree(label="Receive_Goods")
receive_invoice  = ProcessTree(label="Receive_Invoice")
match_invoice    = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice      = ProcessTree(label="Pay_Invoice")
close_case       = ProcessTree(label="Close_Case")

# 4. Goods and invoice may be swapped, therefore an ANDblock
goods_and_invoice = ProcessTree(
        operator=Operator.PARALLEL,          # AND
        children=[receive_goods, receive_invoice]
)

# Complete, behaviourfitted tree
root = ProcessTree(
        operator=Operator.SEQUENCE,
        children=[
            create_req,
            approve_req,
            create_po,
            goods_and_invoice,   # both goods & invoice must occur (any order)
            match_invoice,
            pay_invoice,
            close_case
        ]
)
```

3. Why this tree is now conformant  

• Strict sequence is enforced for every pair of activities whose business logic requires temporal dependence:  
  – PO cannot be created before requisition approval;  
  – Matching cannot start before BOTH goods and invoice are present;  
  – Payment cannot happen before a successful match;  
  – The case cannot be closed before payment.  

• The only concurrency that remains (PARALLEL node) concerns “Receive Goods” and “Receive Invoice”.  
  ­– In practice either may arrive first; the ANDoperator keeps them both mandatory but orderfree, which is exactly the domain rule.  

• Because “Match Invoice_to_PO” follows the parallel block, it is guaranteed that it is executed after both deliveries.  
  – Consequently “Pay Invoice” (which comes next) can never be executed earlier than allowed.  

• No other activity is allowed to occur in parallel or to be skipped, so every trace accepted by the model is a valid, domaincorrect “ProcuretoPay” instance, eliminating the unwanted behaviour that the original (underfitting) model allowed.