To integrate the data from the given tables into a comprehensive event log, we'll follow the steps outlined in the task. 

1. **Identify Cases**: We will use the `order_id` as the case identifier.
2. **Derive Activities**: We will create events for key steps in the order lifecycle.
3. **Map Timestamps**: Each event will be associated with a relevant timestamp.
4. **Combine Data**: We will link events using the provided keys.
5. **Enrich with Resources and Attributes**: Where available, we will include information about the resource or actor responsible for the event.

### Step 1: Identify Cases and Derive Activities

The case identifier is `order_id`. We will derive activities from the given tables.

### Step 2: Create Events

#### 1. "Order Created" Event
From `Orders` table.

#### 2. "Items Picked" Event
From `Order Lines` table. Since there can be multiple items per order, we will create one "Items Picked" event per item.

#### 3. "Order Dispatched" and "Order Arrived" Events
From `Delivery` table. For orders with multiple deliveries, we will create separate events for each dispatch and arrival.

#### 4. "Invoice Issued" Event
From `Invoice` table. For orders with multiple invoices, we will create separate "Invoice Issued" events.

#### 5. "Payment Received" Event
From `Payments` table, linked through `invoice_id` to `order_id`. For invoices paid in multiple installments, we will create separate "Payment Received" events.

### Step 3: Map Timestamps and Combine Data

We will use the respective date fields from each table to timestamp the events.

### Step 4: Enrich with Resources and Attributes

Where available, we will include the resource or actor responsible for the event.

### SQL Query to Generate the Event Log

To simplify the explanation, we'll directly create the event log using a structured query. We will use SQL to generate the event log.

```sql
-- Create "Order Created" events
SELECT 
    o.order_id AS "Case ID",
    'Order Created' AS "Activity Name",
    o.order_date AS "Timestamp",
    r.resource_name AS "Resource/Actor",
    o.customer_id, 
    o.customer_type, 
    o.order_priority
FROM 
    Orders o
LEFT JOIN 
    Resources r ON o.sales_person_id = r.resource_id

UNION ALL

-- Create "Items Picked" events
SELECT 
    ol.order_id,
    'Items Picked',
    ol.item_picking_date,
    r.resource_name,
    NULL, NULL, NULL
FROM 
    Order_Lines ol
LEFT JOIN 
    Resources r ON ol.picker_id = r.resource_id

UNION ALL

-- Create "Order Dispatched" events
SELECT 
    d.order_id,
    'Order Dispatched',
    d.delivery_dispatch_date,
    r.resource_name,
    NULL, NULL, NULL
FROM 
    Delivery d
LEFT JOIN 
    Resources r ON d.carrier_id = r.resource_id

UNION ALL

-- Create "Order Arrived" events
SELECT 
    d.order_id,
    'Order Arrived',
    d.delivery_arrival_date,
    r.resource_name,
    NULL, NULL, NULL
FROM 
    Delivery d
LEFT JOIN 
    Resources r ON d.carrier_id = r.resource_id

UNION ALL

-- Create "Invoice Issued" events
SELECT 
    i.order_id,
    'Invoice Issued',
    i.invoice_issue_date,
    r.resource_name,
    NULL, NULL, NULL
FROM 
    Invoice i
LEFT JOIN 
    Resources r ON i.billing_person_id = r.resource_id

UNION ALL

-- Create "Payment Received" events
SELECT 
    i.order_id,
    'Payment Received',
    p.payment_date,
    NULL,
    NULL, NULL, NULL
FROM 
    Payments p
JOIN 
    Invoice i ON p.invoice_id = i.invoice_id

ORDER BY 
    "Case ID", "Timestamp";
```

### Event Log

Let's generate a sample output based on the provided data.

| Case ID | Activity Name    | Timestamp            | Resource/Actor   | customer_id | customer_type | order_priority |
|---------|------------------|----------------------|------------------|-------------|---------------|----------------|
| 1001    | Order Created    | 2024-01-01T09:00:00Z | Alice Brown      | CUST-ABC    | Retail        | High           |
| 1001    | Items Picked     | 2024-01-02T10:15:00Z | David Lin        | NULL        | NULL          | NULL           |
| 1001    | Items Picked     | 2024-01-02T11:00:00Z | Eva Johnson      | NULL        | NULL          | NULL           |
| 1001    | Order Dispatched | 2024-01-03T08:30:00Z | GlobalTransport  | NULL        | NULL          | NULL           |
| 1001    | Order Arrived    | 2024-01-05T14:45:00Z | GlobalTransport  | NULL        | NULL          | NULL           |
| 1001    | Invoice Issued   | 2024-01-06T09:00:00Z | Gina Carter      | NULL        | NULL          | NULL           |
| 1001    | Payment Received | 2024-01-10T11:30:00Z | NULL             | NULL        | NULL          | NULL           |
| 1002    | Order Created    | 2024-01-02T12:30:00Z | Bob Smith        | CUST-XYZ    | Wholesale     | Medium         |
| 1002    | Items Picked     | 2024-01-03T09:45:00Z | Eva Johnson      | NULL        | NULL          | NULL           |
| 1002    | Items Picked     | 2024-01-03T10:00:00Z | David Lin        | NULL        | NULL          | NULL           |
| 1002    | Order Dispatched | 2024-01-04T07:20:00Z | FastShip         | NULL        | NULL          | NULL           |
| 1002    | Order Dispatched | 2024-01-05T07:00:00Z | GlobalTransport  | NULL        | NULL          | NULL           |
| 1002    | Order Arrived    | 2024-01-07T16:10:00Z | FastShip         | NULL        | NULL          | NULL           |
| 1002    | Order Arrived    | 2024-01-08T10:00:00Z | GlobalTransport  | NULL        | NULL          | NULL           |
| 1002    | Invoice Issued   | 2024-01-08T10:15:00Z | Harry Lee        | NULL        | NULL          | NULL           |
| 1002    | Invoice Issued   | 2024-01-10T11:00:00Z | Harry Lee        | NULL        | NULL          | NULL           |
| 1002    | Payment Received | 2024-01-12T14:00:00Z | NULL             | NULL        | NULL          | NULL           |
| 1002    | Payment Received | 2024-01-15T09:00:00Z | NULL             | NULL        | NULL          | NULL           |

This is a simplified representation. The actual event log will include all orders and their respective events.

### Assumptions:
1. The `order_date` in the `Orders` table is used as the timestamp for the "Order Created" event.
2. For "Items Picked," we create one event per item.
3. For orders with multiple deliveries, we create separate "Order Dispatched" and "Order Arrived" events.
4. For orders with multiple invoices, we create separate "Invoice Issued" events.
5. For invoices with multiple payments, we create separate "Payment Received" events.
6. Resource/Actor information is included where available.

### Note:
The event log is generated based on the available data and the described assumptions. The actual process may require further refinement based on specific business requirements or additional data.