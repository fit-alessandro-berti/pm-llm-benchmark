Here is a sample DECLARE model for a simple Purchase-to-Pay process in Python:
```
declare_model = {
    'existence': {  # Activity executed at least once
        'order': {'support': 1.0, 'confidence': 1.0},
    },
    'absence': {  # Activity not executed
        'shipping': {'support': 1.0, 'confidence': 1.0},
    },
    'exactly_one': {  # Activity executed exactly once
        'invoice': {'support': 1.0, 'confidence': 1.0},
    },
    'init': {  # Trace starts with order
        'init': {'support': 1.0, 'confidence': 1.0, 'activity': 'order'},
    },
    'responded_existence': {  # Order responds to payment
        'payment': {'support': 1.0, 'confidence': 1.0},
    },
    'coexistence': {  # Order and payment co-occur
        ('order', 'payment'): {'support': 1.0, 'confidence': 1.0},
    },
    'response': {  # Payment responds to order
        'payment': {'support': 1.0, 'confidence': 1.0, 'refers': 'order'},
    },
    'precedence': {  # Payment precedes invoice
        ('payment', 'invoice'): {'support': 1.0, 'confidence': 1.0},
    },
    'succession': {  # Payment and invoice are successive
        ('payment', 'invoice'): {'support': 1.0, 'confidence': 1.0},
    },
    'altresponse': {  # Alt. payment responds to order
        ('alt_payment', 'order'): {'support': 1.0, 'confidence': 1.0},
    },
    'altprecedence': {  # Alt. payment precedes invoice
        ('alt_payment', 'invoice'): {'support': 1.0, 'confidence': 1.0},
    },
    'altsuccession': {  # Alt. payment and invoice are successive
        ('alt_payment', 'invoice'): {'support': 1.0, 'confidence': 1.0},
    },
    'chainresponse': {  # Chain of payment -> invoice
        ('payment', '