<think>
Okay, I need to create an accepting Petri net for the insurance claim process described. Let me start by understanding the scenario and the requirements.

First, the process steps are: C (Claim), CR, DV, FC, CA, AP, P, N, CL. But there are some loops: after DV, if documents are incomplete, there's RDS. And after FC, if there are doubts, there's II which can happen multiple times. Also, the initial marking starts with a token in a start place, and the final marking is when the claim is closed.

So, I need to model all these steps with places and transitions. Let me think about each activity as a transition. The places will represent the states between these activities. For example, after the claim is registered, there's a place indicating that the claim is registered, then a transition for CR, etc.

But wait, the initial marking is a start place. So maybe I need a "start" place that has a token initially. Then transitions like C (Claim) would be the first step? Wait, the customer files the claim, so maybe the initial marking is in a "Claim Filed" place. But the problem says the initial marking should place a token in a start place representing a new claim arriving. So maybe the start place is something like "Start", and then transitions lead from there.

Wait, the example given in the prompt has a source place, then a transition, then a sink. So maybe for the initial marking, there's a place called "Start", and the initial marking has a token there. Then transitions like "Claim Registration" would take from that place.

But the steps are: the customer files the claim (C), then CR, DV, etc. So perhaps the first transition is "C" (Claim), but maybe the initial place is "Claim Filed" and the first transition is "C" (Claim Registration). Or maybe the initial place is "Start" and the first transition is "Claim Filing" (C). The exact labels might depend on the problem's description.

Wait, the problem says that the transitions are labeled with the activity names. The activities are: Insurance Claim (C), Claim Registration (CR), Document Verification (DV), Fraud Check (FC), Claim Assessment (CA), Approval (AP), Payment (P), Notification (N), Closure (CL). Also, Re-Document Submission (RDS) and In-depth Investigation (II).

So the transitions would be labeled as "Insurance Claim", "Claim Registration", etc. But perhaps the initial step is the customer filing the claim, which is the "C" activity. So maybe the first transition is "C", but the initial marking is in a place that represents the claim being filed. Hmm.

Alternatively, maybe the initial place is "Start", and the first transition is "C" (Insurance Claim). Then after that, the process proceeds to CR, etc.

But I need to model all the steps. Let me outline the flow:

Start  C (Claim)  CR  DV  [DV may loop to RDS if needed]  FC  [FC may loop to II multiple times]  CA  AP  P  N  CL.

But how to model the loops?

For the DV and RDS part: After DV, if documents are incomplete, there's a re-submission (RDS). So after DV, there's a choice between proceeding to FC or going back to RDS. But how to model that in Petri nets. Maybe after DV, there's a place that splits into two transitions: one leading to FC, and another leading to RDS. But since it's a Petri net, we can have a place that has tokens allowing both paths. However, the problem says that the re-submission occurs if documents are incomplete. So perhaps after DV, there's a transition that leads to RDS, but maybe there's a way to model that as a loop. Alternatively, maybe after DV, there's a place that can be marked either to proceed to FC or to RDS. But how to model that.

Alternatively, maybe after DV, there's a place that has a token, and a transition for RDS, which would take the token and put it back into a place that allows rechecking. But this might require some more complex structures.

Similarly for FC and II. If after FC, there's a doubt, then an II is performed, which can happen multiple times. So after FC, there's a transition to II, and then back to FC again, until it's resolved.

But how to model that. Maybe after FC, there's a place that can either go to CA (if no doubt) or to II (if there's doubt). But again, since it's a Petri net, we can model this with transitions and places.

Let me try to sketch the structure step by step.

First, the initial place is "Start", with a token. Then the first transition is "C" (Insurance Claim), which leads to a place "Claim Registered". Then from there, transition "CR" (Claim Registration) leads to "CR Done". Wait, maybe each activity is a transition, and the places are the states between them. So:

Start (initial place)  [C]  CR Place  [CR]  DV Place  [DV]  ... etc.

But the problem mentions that the initial marking is a start place. So maybe the initial place is "Start", and the first transition is "C" (Insurance Claim), which takes a token from Start and puts it into a place like "Claim Registered".

Then, from "Claim Registered", the transition "CR" (Claim Registration) would take the token to "CR Done", and so on.

But I need to model all the steps. Let's think of each activity as a transition. So:

Transitions:
- C (Insurance Claim)
- CR (Claim Registration)
- DV (Document Verification)
- RDS (Re-Document Submission)
- FC (Fraud Check)
- II (In-depth Investigation)
- CA (Claim Assessment)
- AP (Approval)
- P (Payment)
- N (Notification)
- CL (Closure)

Places would be the states between these transitions. For example:

Start (initial place)
After C: "C Done"
After CR: "CR Done"
After DV: "DV Done"
After RDS: "RDS Done"
After FC: "FC Done"
After II: "II Done"
After CA: "CA Done"
After AP: "AP Done"
After P: "P Done"
After N: "N Done"
End (final place)

But also, there are loops. For example, after DV, if documents are incomplete, the process goes back to RDS. So, from "DV Done", there's a transition to RDS, and then after RDS, back to DV? Or to some other place?

Wait, the RDS is a step where the customer resubmits documents. So after DV, if documents are incomplete, the process goes to RDS, and then after RDS, it goes back to DV. So, the flow would be:

DV Done  RDS  DV (again). So, after RDS, there's a transition that leads back to DV. But how to model that.

Alternatively, after RDS, the process goes back to DV. So, the transition RDS would take a token from "RDS Done" and put it into "DV". But that would require a place for RDS Done, and a transition from RDS Done to DV.

But this is getting complicated. Let me try to model it step by step.

First, the main flow:

Start  [C]  C_done  [CR]  CR_done  [DV]  DV_done  [FC]  FC_done  [CA]  CA_done  [AP]  AP_done  [P]  P_done  [N]  N_done  [CL]  End.

But with possible loops:

After DV_done, there's a possibility to go to RDS. So, from DV_done, there's a transition RDS, which leads to RDS_done, and then from RDS_done, a transition back to DV (or to some other place that allows rechecking). But maybe after RDS, the process goes back to DV, so:

DV_done  [RDS]  RDS_done  [DV]  DV_done again.

But how to model that. So, the transition RDS would take a token from DV_done and put it into RDS_done. Then, a transition from RDS_done to DV. But then, the process would loop between DV and RDS until the documents are okay.

Similarly, after FC_done, there's a transition to II, which can loop multiple times. So:

FC_done  [II]  II_done  [FC]  FC_done again.

But how to model that. So, after II, the process goes back to FC.

But in a Petri net, this would require that after the II transition, there's a place that allows returning to FC.

So, the structure would have:

For the RDS loop:

DV_done has an outgoing arc to RDS transition. The RDS transition has an outgoing arc to RDS_done place. Then, from RDS_done, there's an arc to DV (the same DV place as before?), but that might not be correct. Wait, maybe after RDS, the process goes back to DV, so the RDS transition leads to a place that connects back to DV.

Alternatively, perhaps after RDS, there's a transition that leads back to DV. So, the RDS transition would be connected to a place that is connected to DV.

Alternatively, maybe the RDS transition is connected to the same place as DV, but that's not correct. Hmm.

Alternatively, maybe after RDS, the process goes back to the same DV step. So, the RDS transition would have an arc from RDS_done to DV. But that would require that the DV place is connected to the RDS_done place. But how to model that.

Alternatively, maybe after RDS, the process goes back to the same DV step. So, the RDS transition is connected to the DV place. But how?

Wait, in Petri nets, transitions are connected to places. So, for example, if after DV, there's a transition that leads to RDS, then after RDS, there's a transition that leads back to DV.

So, the structure would be:

DV_done (a place) has an arc to RDS transition. RDS transition has an arc to RDS_done place. Then, RDS_done has an arc to DV transition. So, the RDS transition is connected to RDS_done, and RDS_done is connected to DV transition. But that would mean that after RDS, the process goes back to DV.

But in that case, the RDS transition would be a transition that takes a token from DV_done and puts it into RDS_done. Then, the RDS_done place would have a token that can trigger the DV transition again? No, because the DV transition would need to have an arc from RDS_done to DV. Wait, no. Transitions are triggered by tokens in their input places. So, if the RDS_done place is connected to the DV transition, then when there's a token in RDS_done, the DV transition can fire. But that would mean that the DV transition is connected to RDS_done and other places. But that's possible.

But this seems a bit complex. Maybe there's a simpler way. For example, after DV, there's a transition that can either go to FC or to RDS. So, the DV place is connected to both FC and RDS transitions. But that would require a choice, which in Petri nets is modeled by having multiple outgoing arcs from the same place.

But how to model the condition that after DV, if documents are incomplete, then go to RDS. But in a Petri net, unless there's a way to model conditions, it's just a possible path. So, the Petri net would allow both paths, but in reality, the process would choose based on some condition. However, since the problem doesn't specify any conditions, maybe we just model the possible paths.

So, perhaps after DV, there's a place that can be used to trigger either FC or RDS. So, the DV transition leads to a place that has two outgoing arcs: one to FC transition, and another to RDS transition.

But how to model that. Let me think: Suppose after DV, there's a place called "DV Done". From "DV Done", there are two transitions: one leading to FC (transition FC), and another leading to RDS (transition RDS). So, the "DV Done" place has arcs to both FC and RDS transitions. Then, the FC transition would lead to "FC Done", and the RDS transition would lead to "RDS Done". Then, from "RDS Done", there's an arc back to "DV Done" (so that after RDS, the process goes back to DV).

Similarly, for the FC and II part: after FC, there's a place "FC Done" with arcs to both CA and II transitions. The II transition leads to "II Done", which then has an arc back to "FC Done".

This way, the loops are modeled with places and transitions.

So, putting this together:

Main flow:

Start (initial place)  [C]  C_done  [CR]  CR_done  [DV]  DV_done.

From DV_done, two transitions: FC and RDS.

FC transition leads to FC_done, which then leads to CA_done.

RDS transition leads to RDS_done, which leads back to DV_done.

Similarly, from FC_done, two transitions: CA and II.

II transition leads to II_done, which leads back to FC_done.

Then, CA_done leads to AP_done, then to P_done, then to N_done, then to CL_done (final place).

So, the final marking would have a token in CL_done.

Now, the initial marking is Start with 1 token. The final marking is CL_done with 1 token.

Now, I need to code this in Python using pm4py's PetriNet and Marking classes.

Let me outline all the places and transitions.

Places:

- Start (initial)
- C_done
- CR_done
- DV_done
- FC_done
- CA_done
- AP_done
- P_done
- N_done
- CL_done
- RDS_done
- II_done

Transitions:

- C (Insurance Claim)
- CR (Claim Registration)
- DV (Document Verification)
- FC (Fraud Check)
- CA (Claim Assessment)
- AP (Approval)
- P (Payment)
- N (Notification)
- CL (Closure)
- RDS (Re-Document Submission)
- II (In-depth Investigation)

Now, the arcs:

Start  C (arc from Start to C transition)
C transition  C_done (arc from C transition to C_done place)
C_done  CR transition (arc from C_done to CR transition)
CR transition  CR_done
CR_done  DV transition
DV transition  DV_done
DV_done has arcs to FC transition and RDS transition
FC transition  FC_done
FC_done has arcs to CA transition and II transition
CA transition  CA_done
CA_done  AP transition
AP transition  AP_done
AP_done  P transition
P transition  P_done
P_done  N transition
N transition  N_done
N_done  CL transition
CL transition  CL_done

Additionally:

RDS transition  RDS_done
RDS_done has arc to DV transition (so that after RDS, it goes back to DV)

II transition  II_done
II_done has arc to FC transition (so after II, back to FC)

Wait, but how do the transitions connect to the places. For example, the RDS transition is connected to RDS_done. So, the RDS transition is connected to RDS_done. Then, RDS_done has an arc to the DV transition. So, the RDS_done place is an input to the DV transition. That way, when the RDS transition fires, it puts a token in RDS_done, which then allows the DV transition to fire again.

Similarly, the II transition is connected to II_done, which is an input to the FC transition.

So, the arcs are:

For RDS:

DV_done (place) has an arc to RDS transition (so that when DV_done has a token, RDS can fire). Then, RDS transition has an arc to RDS_done (place). Then, RDS_done has an arc to DV transition (so that when RDS_done has a token, the DV transition can fire again).

Similarly for II:

FC_done (place) has an arc to II transition. II transition has arc to II_done. II_done has arc to FC transition.

This way, after RDS, the process loops back to DV, and after II, loops back to FC.

Now, I need to code this in Python.

First, create the Petri net:

net = PetriNet(name="InsuranceClaimProcess")

Then, create all the places:

start_place = PetriNet.Place(name="Start")
c_done = PetriNet.Place(name="C_done")
cr_done = PetriNet.Place(name="CR_done")
dv_done = PetriNet.Place(name="DV_done")
fc_done = PetriNet.Place(name="FC_done")
ca_done = PetriNet.Place(name="CA_done")
ap_done = PetriNet.Place(name="AP_done")
p_done = PetriNet.Place(name="P_done")
n_done = PetriNet.Place(name="N_done")
cl_done = PetriNet.Place(name="CL_done")
rds_done = PetriNet.Place(name="RDS_done")
ii_done = PetriNet.Place(name="II_done")

Then, add all these places to the net.

Then, create the transitions:

c_transition = PetriNet.Transition(name="Insurance Claim", label="Insurance Claim")
cr_transition = PetriNet.Transition(name="Claim Registration", label="Claim Registration")
dv_transition = PetriNet.Transition(name="Document Verification", label="Document Verification")
fc_transition = PetriNet.Transition(name="Fraud Check", label="Fraud Check")
ca_transition = PetriNet.Transition(name="Claim Assessment", label="Claim Assessment")
ap_transition = PetriNet.Transition(name="Approval", label="Approval")
p_transition = PetriNet.Transition(name="Payment", label="Payment")
n_transition = PetriNet.Transition(name="Notification", label="Notification")
cl_transition = PetriNet.Transition(name="Closure", label="Closure")
rds_transition = PetriNet.Transition(name="Re-Document Submission", label="Re-Document Submission")
ii_transition = PetriNet.Transition(name="In-depth Investigation", label="In-depth Investigation")

Add these transitions to the net.

Then, create the arcs.

First, the initial path:

Start  C transition: add arc from start_place to c_transition.

c_transition  c_done: add arc from c_transition to c_done.

c_done  cr_transition: add arc from c_done to cr_transition.

cr_transition  cr_done: add arc from cr_transition to cr_done.

cr_done  dv_transition: add arc from cr_done to dv_transition.

dv_transition  dv_done: add arc from dv_transition to dv_done.

Then, dv_done has arcs to fc_transition and rds_transition.

So, add arc from dv_done to fc_transition.

Add arc from dv_done to rds_transition.

Then, fc_transition  fc_done: arc from fc_transition to fc_done.

fc_done has arcs to ca_transition and ii_transition.

So, add arc from fc_done to ca_transition.

Add arc from fc_done to ii_transition.

ca_transition  ca_done: arc from ca_transition to ca_done.

ca_done  ap_transition: arc from ca_done to ap_transition.

ap_transition  ap_done: arc from ap_transition to ap_done.

ap_done  p_transition: arc from ap_done to p_transition.

p_transition  p_done: arc from p_transition to p_done.

p_done  n_transition: arc from p_done to n_transition.

n_transition  n_done: arc from n_transition to n_done.

n_done  cl_transition: arc from n_done to cl_transition.

cl_transition  cl_done: arc from cl_transition to cl_done.

Now, for the RDS loop:

rds_transition  rds_done: add arc from rds_transition to rds_done.

rds_done has arc to dv_transition: add arc from rds_done to dv_transition.

For the II loop:

ii_transition  ii_done: add arc from ii_transition to ii_done.

ii_done has arc to fc_transition: add arc from ii_done to fc_transition.

Now, the initial marking is start_place with 1 token.

im = Marking()
im[start_place] = 1

The final marking is cl_done with 1 token.

fm = Marking()
fm[cl_done] = 1

But wait, in the example given in the prompt, after constructing the net, they remove the sink place and delete from the final marking. But in our case, we need to make sure that the final marking is cl_done.

So, putting all this together in code.

But I need to make sure that all the places and transitions are added to the net.

Now, code:

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="InsuranceClaimProcess")

# Places
start_place = PetriNet.Place(name="Start")
c_done = PetriNet.Place(name="C_done")
cr_done = PetriNet.Place(name="CR_done")
dv_done = PetriNet.Place(name="DV_done")
fc_done = PetriNet.Place(name="FC_done")
ca_done = PetriNet.Place(name="CA_done")
ap_done = PetriNet.Place(name="AP_done")
p_done = PetriNet.Place(name="P_done")
n_done = PetriNet.Place(name="N_done")
cl_done = PetriNet.Place(name="CL_done")
rds_done = PetriNet.Place(name="RDS_done")
ii_done = PetriNet.Place(name="II_done")

net.places.add(start_place)
net.places.add(c_done)
net.places.add(cr_done)
net.places.add(dv_done)
net.places.add(fc_done)
net.places.add(ca_done)
net.places.add(ap_done)
net.places.add(p_done)
net.places.add(n_done)
net.places.add(cl_done)
net.places.add(rds_done)
net.places.add(ii_done)

# Transitions
c_transition = PetriNet.Transition(name="Insurance Claim", label="Insurance Claim")
cr_transition = PetriNet.Transition(name="Claim Registration", label="Claim Registration")
dv_transition = PetriNet.Transition(name="Document Verification", label="Document Verification")
fc_transition = PetriNet.Transition(name="Fraud Check", label="Fraud Check")
ca_transition = PetriNet.Transition(name="Claim Assessment", label="Claim Assessment")
ap_transition = PetriNet.Transition(name="Approval", label="Approval")
p_transition = PetriNet.Transition(name="Payment", label="Payment")
n_transition = PetriNet.Transition(name="Notification", label="Notification")
cl_transition = PetriNet.Transition(name="Closure", label="Closure")
rds_transition = PetriNet.Transition(name="Re-Document Submission", label="Re-Document Submission")
ii_transition = PetriNet.Transition(name="In-depth Investigation", label="In-depth Investigation")

net.transitions.add(c_transition)
net.transitions.add(cr_transition)
net.transitions.add(dv_transition)
net.transitions.add(fc_transition)
net.transitions.add(ca_transition)
net.transitions.add(ap_transition)
net.transitions.add(p_transition)
net.transitions.add(n_transition)
net.transitions.add(cl_transition)
net.transitions.add(rds_transition)
net.transitions.add(ii_transition)

# Arcs
# Start to C
petri_utils.add_arc_from_to(start_place, c_transition, net)

# C to C_done
petri_utils.add_arc_from_to(c_transition, c_done, net)

# C_done to CR
petri_utils.add_arc_from_to(c_done, cr_transition, net)

# CR to CR_done
petri_utils.add_arc_from_to(cr_transition, cr_done, net)

# CR_done to DV
petri_utils.add_arc_from_to(cr_done, dv_transition, net)

# DV to DV_done
petri_utils.add_arc_from_to(dv_transition, dv_done, net)

# DV_done to FC and RDS
petri_utils.add_arc_from_to(dv_done, fc_transition, net)
petri_utils.add_arc_from_to(dv_done, rds_transition, net)

# FC to FC_done
petri_utils.add_arc_from_to(fc_transition, fc_done, net)

# FC_done to CA and II
petri_utils.add_arc_from_to(fc_done, ca_transition, net)
petri_utils.add_arc_from_to(fc_done, ii_transition, net)

# CA to CA_done
petri_utils.add_arc_from_to(ca_transition, ca_done, net)

# CA_done to AP
petri_utils.add_arc_from_to(ca_done, ap_transition, net)

# AP to AP_done
petri_utils.add_arc_from_to(ap_transition, ap_done, net)

# AP_done to P
petri_utils.add_arc_from_to(ap_done, p_transition, net)

# P to P_done
petri_utils.add_arc_from_to(p_transition, p_done, net)

# P_done to N
petri_utils.add_arc_from_to(p_done, n_transition, net)

# N to N_done
petri_utils.add_arc_from_to(n_transition, n_done, net)

# N_done to CL
petri_utils.add_arc_from_to(n_done, cl_transition, net)

# CL to CL_done
petri_utils.add_arc_from_to(cl_transition, cl_done, net)

# RDS transition to RDS_done
petri_utils.add_arc_from_to(rds_transition, rds_done, net)

# RDS_done to DV transition
petri_utils.add_arc_from_to(rds_done, dv_transition, net)

# II transition to II_done
petri_utils.add_arc_from_to(ii_transition, ii_done, net)

# II_done to FC transition
petri_utils.add_arc_from_to(ii_done, fc_transition, net)

# Initial marking
im = Marking()
im[start_place] = 1

# Final marking
fm = Marking()
fm[cl_done] = 1

Wait, but in the example given, after creating the net, they remove the sink place and delete from the final marking. But in our case, the final marking is cl_done, which is a place that is part of the net. So, the code above should be correct.

But let me check if all the arcs are properly added. For example, the RDS_done place has an arc to the DV transition. So when RDS is done, the RDS_done place has a token, which allows the DV transition to fire again.

Similarly for II_done to FC transition.

This should model the loops correctly.

Now, the problem says that the final marking should be when the claim is closed, which is cl_done. So the final marking is fm[cl_done] = 1.

This code should construct the Petri net as required.
</think>
```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define places
start_place = PetriNet.Place(name="Start")
c_done = PetriNet.Place(name="C_done")
cr_done = PetriNet.Place(name="CR_done")
dv_done = PetriNet.Place(name="DV_done")
fc_done = PetriNet.Place(name="FC_done")
ca_done = PetriNet.Place(name="CA_done")
ap_done = PetriNet.Place(name="AP_done")
p_done = PetriNet.Place(name="P_done")
n_done = PetriNet.Place(name="N_done")
cl_done = PetriNet.Place(name="CL_done")
rds_done = PetriNet.Place(name="RDS_done")
ii_done = PetriNet.Place(name="II_done")

net.places.update([start_place, c_done, cr_done, dv_done, fc_done, ca_done, ap_done, p_done, n_done, cl_done, rds_done, ii_done])

# Define transitions
c_transition = PetriNet.Transition(name="Insurance Claim", label="Insurance Claim")
cr_transition = PetriNet.Transition(name="Claim Registration", label="Claim Registration")
dv_transition = PetriNet.Transition(name="Document Verification", label="Document Verification")
fc_transition = PetriNet.Transition(name="Fraud Check", label="Fraud Check")
ca_transition = PetriNet.Transition(name="Claim Assessment", label="Claim Assessment")
ap_transition = PetriNet.Transition(name="Approval", label="Approval")
p_transition = PetriNet.Transition(name="Payment", label="Payment")
n_transition = PetriNet.Transition(name="Notification", label="Notification")
cl_transition = PetriNet.Transition(name="Closure", label="Closure")
rds_transition = PetriNet.Transition(name="Re-Document Submission", label="Re-Document Submission")
ii_transition = PetriNet.Transition(name="In-depth Investigation", label="In-depth Investigation")

net.transitions.update([c_transition, cr_transition, dv_transition, fc_transition, ca_transition, ap_transition, p_transition, n_transition, cl_transition, rds_transition, ii_transition])

# Add arcs
petri_utils.add_arc_from_to(start_place, c_transition, net)
petri_utils.add_arc_from_to(c_transition, c_done, net)
petri_utils.add_arc_from_to(c_done, cr_transition, net)
petri_utils.add_arc_from_to(cr_transition, cr_done, net)
petri_utils.add_arc_from_to(cr_done, dv_transition, net)
petri_utils.add_arc_from_to(dv_transition, dv_done, net)
petri_utils.add_arc_from_to(dv_done, fc_transition, net)
petri_utils.add_arc_from_to(dv_done, rds_transition, net)
petri_utils.add_arc_from_to(fc_transition, fc_done, net)
petri_utils.add_arc_from_to(fc_done, ca_transition, net)
petri_utils.add_arc_from_to(fc_done, ii_transition, net)
petri_utils.add_arc_from_to(ca_transition, ca_done, net)
petri_utils.add_arc_from_to(ca_done, ap_transition, net)
petri_utils.add_arc_from_to(ap_transition, ap_done, net)
petri_utils.add_arc_from_to(ap_done, p_transition, net)
petri_utils.add_arc_from_to(p_transition, p_done, net)
petri_utils.add_arc_from_to(p_done, n_transition, net)
petri_utils.add_arc_from_to(n_transition, n_done, net)
petri_utils.add_arc_from_to(n_done, cl_transition, net)
petri_utils.add_arc_from_to(cl_transition, cl_done, net)
petri_utils.add_arc_from_to(rds_transition, rds_done, net)
petri_utils.add_arc_from_to(rds_done, dv_transition, net)
petri_utils.add_arc_from_to(ii_transition, ii_done, net)
petri_utils.add_arc_from_to(ii_done, fc_transition, net)

# Define initial and final markings
im = Marking()
im[start_place] = 1

fm = Marking()
fm[cl_done] = 1
```