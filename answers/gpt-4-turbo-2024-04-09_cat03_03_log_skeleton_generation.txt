To create a Python dictionary representing the Log Skeleton for the described order fulfillment process, we must consider the relationships and dependencies between the activities. Here's a structured breakdown:

```python
log_skeleton = {
    'equivalence': set([
        # Assuming equivalence based on the scenario description, none were explicitly defined.
    ]),
    'always_before': set([
        # Activities that must occur before another as per process description.
        ('RO', 'CA'),  # Receive Order before Check Availability
        ('CA', 'RI'),  # Check Availability before Reserve Items
        ('RI', 'PI'),  # Reserve Items before Pick Items
        ('PI', 'QC'),  # Pick Items before Quality Check
        ('QC', 'PO'),  # Quality Check before Pack Order
        ('PO', 'GSL'), # Pack Order before Generate Shipping Label
        ('GSL', 'D'),  # Generate Shipping Label before Dispatch
        ('D', 'IC'),   # Dispatch before Invoice Customer
        ('IC', 'RP')   # Invoice Customer before Record Payment
    ]),
    'always_after': set([
        # Activities that must occur after another as per process description.
        ('CA', 'RI'),  # Check Availability followed by Reserve Items
        ('RI', 'PI'),  # Reserve Items followed by Pick Items
        ('PI', 'QC'),  # Pick Items followed by Quality Check
        ('QC', 'PO'),  # Quality Check followed by Pack Order
        ('PO', 'GSL'), # Pack Order followed by Generate Shipping Label
        ('GSL', 'D'),  # Generate Shipping Label followed by Dispatch
        ('D', 'IC'),   # Dispatch followed by Invoice Customer
        ('IC', 'RP')   # Invoice Customer followed by Record Payment
    ]),
    'never_together': set([
        # Activities that cannot co-occur based on process definition.
    ]),
    'activ_freq': {
        'RO': {1},     # Receive Order happens once per case
        'CA': {1},     # Check Availability happens once per case
        'RI': {1},     # Reserve Items happens once per case
        'PI': {1},     # Pick Items happens once per case
        'QC': {1},     # Quality Check happens once per case
        'PO': {1},     # Pack Order happens once per case
        'GSL': {1},    # Generate Shipping Label happens once per case
        'D': {1},      # Dispatch happens once per case
        'IC': {1},     # Invoice Customer happens once per case
        'RP': {1},     # Record Payment happens once per case
    },
    'directly_follows': set([
        # Based on the narrative, these activities follow directly after one another.
        ('RO', 'CA'),  
        ('CA', 'RI'),  
        ('RI', 'PI'),  
        ('PI', 'QC'),  
        ('QC', 'PO'),  
        ('PO', 'GSL'),
        ('GSL', 'D'),  
        ('D', 'IC'),   
        ('IC', 'RP')  
    ])
}

# Printing output for verification
from pprint import pprint
pprint(log_skeleton)
```

The built `log_skeleton` dictionary encapsulates the logical flow of the defined order fulfillment process, ensuring the specified constraints are met. Activities are sequenced in a precise manner to reflect dependencies like `always_before` (activities needing to precede others), `always_after` (activities that should logically follow others), `directly_follows` (activities that occur immediately adjacent), and are regulated by their occurrence frequencies defined in the `activ_freq`. No `equivalence` or `never_together` relations are defined as the process doesn’t suggest the need for these constraints based on the given scenario.