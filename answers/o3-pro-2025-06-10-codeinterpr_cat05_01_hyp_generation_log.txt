Below is a ready-to-use prompt that you can feed to a second LLM.  
Everything between the two triple asterisks (***) is the content that should be passed verbatim.

***

You are a process-mining and SQL expert.

Context  
• Database: PostgreSQL  
• Tables and columns  
  – order_event_log(case_id INT, event_id INT, activity VARCHAR, timestamp TIMESTAMP, resource VARCHAR, additional_info VARCHAR)  
  – orders(case_id INT, customer_id INT, order_type VARCHAR, order_value DECIMAL)  
  – resources(resource_id VARCHAR, role VARCHAR, department VARCHAR)

• “Happy-path” process (in order):  
  1. Register Order (Sales)  
  2. Perform Credit Check (Finance)  
  3. Validate Stock (Warehouse)  
  4. Confirm Shipment (Logistics)  
  5. Ship Goods (Logistics)  
  6. Issue Invoice (Finance)  
  7. Receive Payment (Finance)

Sample rows from order_event_log (abbreviated for illustration)

case_id | event_id | activity               | timestamp            | resource
--------+----------+------------------------+----------------------+-------------
1001    | 1        | Register Order         | 2024-02-01 08:15:00 | SalesRep_01
1001    | 2        | Perform Credit Check   | 2024-02-01 08:30:00 | CreditOfficer_1
…  
1002    | 8        | Register Order         | 2024-02-01 08:20:00 | SalesRep_02
1002    | 9        | Confirm Shipment       | 2024-02-01 08:25:00 | LogisticsMgr_2
…  
1004    | 21       | Register Order         | 2024-02-01 09:00:00 | SalesRep_01
1004    | 22       | Receive Payment        | 2024-02-01 09:05:00 | FinanceTeam_02
…

(Full schema and additional sample data available in the database.)

Your tasks  
1. Identify anomalies or undesirable behaviors in the event log.  
   - Consider ordering violations, missing steps, repetitions, unexpected resources, skipped approvals, etc.  
2. For each anomaly you detect, propose plausible hypotheses about why it may occur (e.g., policy violations, system integration errors, user training issues, fraud, compensating processes).  
3. For every hypothesis, write a concrete SQL query (or a short set of queries) that an analyst could execute on the existing tables to confirm or refute the hypothesis.  
   - Use only the three tables provided.  
   - Do not invent additional columns.  
   - Use standard PostgreSQL syntax.  
4. Present your answer in the following structure:  
   • Anomaly #n: …  
     – Why it matters: …  
     – Possible root-cause hypotheses: …  
     – SQL to investigate: ```sql … ```  
   Repeat for each anomaly you find.

Be thorough yet concise. Focus on insights that can be operationalized immediately.

***