To solve this problem, we need to identify the top K process variants from an event log and then return all events corresponding to cases that follow these variants. The solution involves several steps: ordering activities within each case by timestamp, grouping cases by their activity sequences, counting the frequency of each sequence, selecting the top K sequences, and finally filtering the original events to include only those from cases in the top K variants.

### Approach
1. **Order Activities per Case**: For each case, order the activities by their timestamp to form a sequence. If timestamps are tied, sort activities alphabetically to ensure determinism.
2. **Group by Activity Sequence**: Group cases by their ordered activity sequences to count occurrences of each unique process variant.
3. **Select Top K Variants**: Rank variants by their frequency in descending order and select the top K variants.
4. **Filter Events**: Join the original event log with the top K variants to include only events from cases that match these variants.

### Solution Code
```sql
WITH CaseVariants AS (
    SELECT 
        case_id,
        LIST_TO_STRING(ARRAY_AGG(activity ORDER BY timestamp, activity)) AS variant
    FROM event_log
    GROUP BY case_id
),
Variants AS (
    SELECT 
        variant,
        COUNT(*) AS frequency
    FROM CaseVariants
    GROUP BY variant
),
TopKVariants AS (
    SELECT variant
    FROM Variants
    ORDER BY frequency DESC
    LIMIT k
)
SELECT 
    e.case_id,
    e.activity,
    e.timestamp
FROM event_log e
JOIN CaseVariants cv ON e.case_id = cv.case_id
JOIN TopKVariants tk ON cv.variant = tk.variant
```

### Explanation
1. **CaseVariants CTE**: This CTE processes each case by aggregating its activities into a string representation of the ordered sequence. Activities are sorted by timestamp, with alphabetical sorting as a tiebreaker to ensure consistent sequencing.
2. **Variants CTE**: This CTE counts the occurrences of each unique activity sequence (variant) across all cases.
3. **TopKVariants CTE**: This CTE selects the top K variants based on their frequency, ordered from highest to lowest. The `LIMIT k` ensures only the top K variants are considered.
4. **Final Query**: The original event log is joined with `CaseVariants` to map each event to its case's variant, and then with `TopKVariants` to filter events to only those cases whose variants are in the top K. This ensures the result includes all events from cases matching the top K variants.

This approach efficiently processes the event log to identify and filter process variants, leveraging DuckDB's powerful aggregation and string handling capabilities.