Sure! Below is a Python code snippet that constructs an accepting Petri net for the insurance claim management process you described. The Petri net includes places and transitions representing the various steps in the process, as well as the required logic for document resubmission and in-depth investigation.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance Claim Management Process")

# Define Places (states)
initial_claim = PetriNet.Place(name="Initial Claim")
registered = PetriNet.Place(name="Claim Registered")
document_verified = PetriNet.Place(name="Document Verified")
fraud_check_passed = PetriNet.Place(name="Fraud Check Passed")
claim_assessed = PetriNet.Place(name="Claim Assessed")
approved = PetriNet.Place(name="Claim Approved")
paid = PetriNet.Place(name="Claim Paid")
notified = PetriNet.Place(name="Customer Notified")
closed = PetriNet.Place(name="Claim Closed")
document_re_submission = PetriNet.Place(name="Re-Document Submission")
in_depth_investigation = PetriNet.Place(name="In-depth Investigation")

# Define Transitions (activities)
claim_registration = PetriNet.Transition(name="Claim Registration (CR)")
document_verification = PetriNet.Transition(name="Document Verification (DV)")
fraud_check = PetriNet.Transition(name="Fraud Check (FC)")
claim_assessment = PetriNet.Transition(name="Claim Assessment (CA)")
approval = PetriNet.Transition(name="Approval (AP)")
payment = PetriNet.Transition(name="Payment (P)")
notification = PetriNet.Transition(name="Notification (N)")
closure = PetriNet.Transition(name="Closure (CL)")
re_document_submission = PetriNet.Transition(name="Re-Document Submission (RDS)")
in_depth_investigation_trans = PetriNet.Transition(name="In-depth Investigation (II)")

# Add Places to the Petri net
net.places.add(initial_claim)
net.places.add(registered)
net.places.add(document_verified)
net.places.add(fraud_check_passed)
net.places.add(claim_assessed)
net.places.add(approved)
net.places.add(paid)
net.places.add(notified)
net.places.add(closed)
net.places.add(document_re_submission)
net.places.add(in_depth_investigation)

# Add Transitions to the Petri net
net.transitions.add(claim_registration)
net.transitions.add(document_verification)
net.transitions.add(fraud_check)
net.transitions.add(claim_assessment)
net.transitions.add(approval)
net.transitions.add(payment)
net.transitions.add(notification)
net.transitions.add(closure)
net.transitions.add(re_document_submission)
net.transitions.add(in_depth_investigation_trans)

# Define arcs between places and transitions
# Initial claim to registration
petri_utils.add_arc_from_to(initial_claim, claim_registration, net)
# After registration, claim is in the system
petri_utils.add_arc_from_to(claim_registration, registered, net)
# After registration, it goes to document verification
petri_utils.add_arc_from_to(registered, document_verification, net)
# Document verification to fraud check
petri_utils.add_arc_from_to(document_verified, fraud_check, net)
# If the documents are verified they proceed to fraud check
petri_utils.add_arc_from_to(document_verified, fraud_check, net)
# Fraud Check leads to different states based on the result
# If Fraud Check passes
petri_utils.add_arc_from_to(fraud_check, fraud_check_passed, net)
# If Fraud Check raises doubts, leads to In-depth Investigation
petri_utils.add_arc_from_to(fraud_check, in_depth_investigation, net)
# In-depth Investigation can loop back, returning to Fraud Check or passing to Claim Assessment
petri_utils.add_arc_from_to(in_depth_investigation, fraud_check, net)
# From Fraud Check Passed to Claim Assessment
petri_utils.add_arc_from_to(fraud_check_passed, claim_assessment, net)
# Claim Assessment to Approval
petri_utils.add_arc_from_to(claim_assessment, approval, net)
# Approval to payment (if approved)
petri_utils.add_arc_from_to(approval, approved, net)
# Payment to notifying customer
petri_utils.add_arc_from_to(approved, payment, net)
# Payment to notification
petri_utils.add_arc_from_to(payment, notified, net)
# Notification to closure
petri_utils.add_arc_from_to(notified, closure, net)

# Document Verification has an option to re-submit documents
petri_utils.add_arc_from_to(document_verification, document_re_submission, net)
petri_utils.add_arc_from_to(document_re_submission, document_verification, net)

# Initialize markings
im = Marking()
im[initial_claim] = 1  # Start with one initial claim

# Final marking
fm = Marking()
fm[closed] = 1  # End with claim closed

# You can now use `net`, `im`, and `fm` for further processing or analysis
```

### Explanation:
1. **Places**: Each step in the insurance claim process is represented by a `Place`, such as "Initial Claim", "Claim Registered", "Document Verified", and so forth.
2. **Transitions**: Each activity is captured as a `Transition`. For example, "Claim Registration (CR)", "Document Verification (DV)", and "Payment (P)".
3. **Arcs**: The `add_arc_from_to` function connects `Places` and `Transitions` to represent the flow of the process including loops for document resubmission and in-depth investigation.
4. **Markings**: The initial marking places one token in the "Initial Claim" place and the final marking signifies the end state when the claim is "Closed". 

You can run this code in an environment where the `pm4py` library is installed to create and analyze the Petri net.