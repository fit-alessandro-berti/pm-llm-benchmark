```python
"""
Accepting Petri net for the Insurance Claim Management process
==============================================================

Legend of transitions (labels that will appear in an event log):

C   = Insurance Claim (filing of the claim)
CR  = Claim Registration
DV  = Document Verification
RDS = Re-Document Submission         (loop back to DV if documents are incomplete)
FC  = Fraud Check
II  = In-depth Investigation         (loop back to FC if doubts remain)
CA  = Claim Assessment
AP  = Approval                       (performed only when amount > threshold)
P   = Payment
N   = Notification
CL  = Closure                        (archiving / end of the process)

A silent transition (label = None) called  _skip_AP  lets the model
“jump over” the Approval step when it is not needed.

Initial marking : one token in the start place  p_start
Final   marking : one token in the end   place  p_end
"""

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# ------------------------------------------------------------------
# 1. Create the net object
# ------------------------------------------------------------------
net = PetriNet("Insurance Claim Process")

# ------------------------------------------------------------------
# 2. Places
# ------------------------------------------------------------------
p_start   = PetriNet.Place("p_start")                 # new claim arrives
p_after_C = PetriNet.Place("p_after_C")
p_after_CR = PetriNet.Place("p_after_CR")
p_after_DV = PetriNet.Place("p_after_DV")             # after document verification
p_after_FC = PetriNet.Place("p_after_FC")             # after fraud check
p_after_CA = PetriNet.Place("p_after_CA")
p_after_AP_or_skip = PetriNet.Place("p_after_AP_or_skip")
p_after_P = PetriNet.Place("p_after_P")
p_after_N = PetriNet.Place("p_after_N")
p_end     = PetriNet.Place("p_end")                   # closed claim

net.places.update({
    p_start, p_after_C, p_after_CR, p_after_DV, p_after_FC,
    p_after_CA, p_after_AP_or_skip, p_after_P, p_after_N, p_end
})

# ------------------------------------------------------------------
# 3. Transitions (name, label) – label = None means silent/
# ------------------------------------------------------------------
t_C           = PetriNet.Transition("t_C",  "C")
t_CR          = PetriNet.Transition("t_CR", "CR")
t_DV          = PetriNet.Transition("t_DV", "DV")
t_RDS         = PetriNet.Transition("t_RDS","RDS")
t_FC          = PetriNet.Transition("t_FC", "FC")
t_II          = PetriNet.Transition("t_II", "II")
t_CA          = PetriNet.Transition("t_CA", "CA")
t_AP          = PetriNet.Transition("t_AP", "AP")
t_skip_AP     = PetriNet.Transition("t_skip_AP", None)   # silent transition
t_P           = PetriNet.Transition("t_P",  "P")
t_N           = PetriNet.Transition("t_N",  "N")
t_CL          = PetriNet.Transition("t_CL", "CL")

net.transitions.update({
    t_C, t_CR, t_DV, t_RDS, t_FC, t_II,
    t_CA, t_AP, t_skip_AP, t_P, t_N, t_CL
})

# ------------------------------------------------------------------
# 4. Arcs
# ------------------------------------------------------------------
# regular flow
petri_utils.add_arc_from_to(p_start,            t_C,       net)
petri_utils.add_arc_from_to(t_C,               p_after_C,  net)

petri_utils.add_arc_from_to(p_after_C,          t_CR,      net)
petri_utils.add_arc_from_to(t_CR,              p_after_CR, net)

petri_utils.add_arc_from_to(p_after_CR,         t_DV,      net)
petri_utils.add_arc_from_to(t_DV,              p_after_DV, net)

petri_utils.add_arc_from_to(p_after_DV,         t_FC,      net)
petri_utils.add_arc_from_to(t_FC,              p_after_FC, net)

petri_utils.add_arc_from_to(p_after_FC,         t_CA,      net)
petri_utils.add_arc_from_to(t_CA,              p_after_CA, net)

petri_utils.add_arc_from_to(p_after_CA,         t_AP,      net)
petri_utils.add_arc_from_to(p_after_CA,         t_skip_AP, net)  # optional approval
petri_utils.add_arc_from_to(t_AP,              p_after_AP_or_skip, net)
petri_utils.add_arc_from_to(t_skip_AP,         p_after_AP_or_skip, net)

petri_utils.add_arc_from_to(p_after_AP_or_skip, t_P,       net)
petri_utils.add_arc_from_to(t_P,               p_after_P,  net)

petri_utils.add_arc_from_to(p_after_P,          t_N,       net)
petri_utils.add_arc_from_to(t_N,               p_after_N,  net)

petri_utils.add_arc_from_to(p_after_N,          t_CL,      net)
petri_utils.add_arc_from_to(t_CL,              p_end,      net)

# loop 1: incomplete documents  -> RDS -> DV again
petri_utils.add_arc_from_to(p_after_DV,         t_RDS,     net)
petri_utils.add_arc_from_to(t_RDS,             p_after_CR, net)   # back before DV

# loop 2: fraud doubts -> II -> FC again
petri_utils.add_arc_from_to(p_after_FC,         t_II,      net)
petri_utils.add_arc_from_to(t_II,              p_after_DV, net)   # back before FC

# ------------------------------------------------------------------
# 5. Initial and final markings
# ------------------------------------------------------------------
im = Marking()
im[p_start] = 1          # one new claim to handle

fm = Marking()
fm[p_end] = 1            # one closed claim at the end

# ------------------------------------------------------------------
# The variables  net, im, fm  now form the accepting Petri net
# ------------------------------------------------------------------
```

The objects `net`, `im`, and `fm` constitute the required accepting Petri net that captures:

• the main control-flow of the insurance claim process,  
• a loop between Document Verification (DV) and Re-Document Submission (RDS), and  
• a loop between Fraud Check (FC) and In-depth Investigation (II),  

while allowing the Approval (AP) step to be optionally skipped depending on the claim amount.