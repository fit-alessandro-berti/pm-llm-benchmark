Here is a complete Python snippet that builds an accepting Petri net for the described insurance-claim process, using PM4Py’s `PetriNet`, `Marking`, and `petri_utils`. The net captures the main flow (CR  DV  FC  CA  AP  P  N  CL) and the two loops:  
- between Document Verification (DV) and Re-Document Submission (RDS), and  
- between Fraud Check (FC) and In-depth Investigation (II).  

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# 1. Create the Petri net
net = PetriNet(name="Insurance Claim Process")

# 2. Define places
source      = PetriNet.Place(name="source")       # start place (new claim arrives)
p_post_cr   = PetriNet.Place(name="p_post_cr")    # after Claim Registration
p_post_dv   = PetriNet.Place(name="p_post_dv")    # after Document Verification
p_post_fc   = PetriNet.Place(name="p_post_fc")    # after Fraud Check
p_post_ca   = PetriNet.Place(name="p_post_ca")    # after Claim Assessment
p_post_ap   = PetriNet.Place(name="p_post_ap")    # after Approval
p_post_p    = PetriNet.Place(name="p_post_p")     # after Payment
p_post_n    = PetriNet.Place(name="p_post_n")     # after Notification
sink        = PetriNet.Place(name="sink")         # final place (claim closed)

for place in [source, p_post_cr, p_post_dv, p_post_fc, p_post_ca, p_post_ap, p_post_p, p_post_n, sink]:
    net.places.add(place)

# 3. Define transitions (labels correspond to activity names)
t_cr  = PetriNet.Transition(name="t_cr",  label="Claim Registration")
t_dv  = PetriNet.Transition(name="t_dv",  label="Document Verification")
t_rds = PetriNet.Transition(name="t_rds", label="Re-Document Submission")
t_fc  = PetriNet.Transition(name="t_fc",  label="Fraud Check")
t_ii  = PetriNet.Transition(name="t_ii",  label="In-depth Investigation")
t_ca  = PetriNet.Transition(name="t_ca",  label="Claim Assessment")
t_ap  = PetriNet.Transition(name="t_ap",  label="Approval")
t_p   = PetriNet.Transition(name="t_p",   label="Payment")
t_n   = PetriNet.Transition(name="t_n",   label="Notification")
t_cl  = PetriNet.Transition(name="t_cl",  label="Closure")

for t in [t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_p, t_n, t_cl]:
    net.transitions.add(t)

# 4. Connect arcs to form the main sequence and loops

# Start  Claim Registration  after CR
petri_utils.add_arc_from_to(source, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_post_cr, net)

# after CR  Document Verification  after DV
petri_utils.add_arc_from_to(p_post_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_post_dv, net)

# Loop 1: if documents incomplete, RDS sends it back to DV’s input place
petri_utils.add_arc_from_to(p_post_dv, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_post_cr, net)

# or else continue: after DV  Fraud Check  after FC
petri_utils.add_arc_from_to(p_post_dv, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_post_fc, net)

# Loop 2: if suspicion remains, II loops back to FC
petri_utils.add_arc_from_to(p_post_fc, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_post_fc, net)

# or else continue: after FC  Claim Assessment  after CA
petri_utils.add_arc_from_to(p_post_fc, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_post_ca, net)

# after CA  Approval  after AP
petri_utils.add_arc_from_to(p_post_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_post_ap, net)

# after AP  Payment  after P
petri_utils.add_arc_from_to(p_post_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, p_post_p, net)

# after P  Notification  after N
petri_utils.add_arc_from_to(p_post_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_post_n, net)

# after N  Closure  sink (final place)
petri_utils.add_arc_from_to(p_post_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, sink, net)

# 5. Define initial and final markings
im = Marking()
im[source] = 1        # one token in 'source' to start the process

fm = Marking()
fm[sink] = 1          # token in 'sink' means the claim is closed

# The tuple (net, im, fm) now constitutes an accepting Petri net for the
# insurance claim process with the specified loops and flow.
```