```python
declare_model = {
    "existence": {
        "StartApplication": {"support": 1.0, "confidence": 1.0},
        "FinalDecision": {"support": 1.0, "confidence": 1.0}
    },
    "absence": {},
    "exactly_one": {},
    "init": {
        "StartApplication": {"support": 1.0, "confidence": 1.0}
    },
    "responded_existence": {},
    "coexistence": {
        "StartApplication": {"FinalDecision": {"support": 1.0, "confidence": 1.0}},
        "ManualReview": {"Approve_Minority": {"support": 1.0, "confidence": 1.0}},
        "ManualReview": {"Reject_Minority": {"support": 1.0, "confidence": 1.0}}
    },
    "response": {
        "StartApplication": {"RequestAdditionalInfo": {"support": 1.0, "confidence": 1.0}},
        "CheckApplicantRace": {"Approve": {"support": 1.0, "confidence": 1.0}},
        "CheckApplicantRace": {"Reject": {"support": 1.0, "confidence": 1.0}}
    },
    "precedence": {
        "CheckApplicantRace": {"BiasMitigationCheck": {"support": 1.0, "confidence": 1.0}}
    },
    "succession": {
        "RequestAdditionalInfo": {"FinalDecision": {"support": 1.0, "confidence": 1.0}},
        "BiasMitigationCheck": {"Approve": {"support": 1.0, "confidence": 1.0}},
        "BiasMitigationCheck": {"Reject": {"support": 1.0, "confidence": 1.0}}
    },
    "altresponse": {},
    "altprecedence": {},
    "altsuccession": {},
    "chainresponse": {},
    "chainprecedence": {},
    "chainsuccession": {},
    "noncoexistence": {},
    "nonsuccession": {
        "CheckApplicantRace": {"Reject": {"support": 1.0, "confidence": 1.0}}
    },
    "nonchainsuccession": {}
}
```

**Rationale for added constraints:**

1.  **Coexistence constraints:** The `coexistence` constraint ensures that `ManualReview` and the decision activities `Approve_Minority` or `Reject_Minority` will appear together. This will help to ensure that decisions are not made solely based on race.
2.  **Response constraints:** The `response` constraint ensures that the `CheckApplicantRace` activity must be followed by the "Approve" and "Reject" activities. This will ensure that these decision activities are always related to an `CheckApplicantRace` event, which might include sensitive attributes.
3.  **Precedence constraints:** The `precedence` constraint ensures that a `BiasMitigationCheck` must occur before an `Approve` decision. This provides a safeguard against bias.
4.  **Succession constraints:** The `succession` constraint ensures that a `BiasMitigationCheck` must precede an `Approve` or `Reject` decision. This prevents biased outcomes.
5.  **Non-succession constraints:** The `nonsuccession` constraint ensures that `CheckApplicantRace` and the `Reject` event cannot occur in direct succession, which reduces the possibility of an immediate biased outcome.
