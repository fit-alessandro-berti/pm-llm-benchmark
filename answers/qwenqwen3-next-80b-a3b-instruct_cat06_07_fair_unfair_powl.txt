Here are the two **POWL models** as requested, based on the hiring process at GlobalTeq Solutions. Both models reflect the same core structure — `ReceiveApplication`, `DataCompletenessCheck` (with loop), `SkillAssessment`, `ManagerialReview`, and `FinalDecision` — but differ critically in how they handle the **Cultural Fit** step, introducing or removing the potential for bias via an XOR branch.

---

###  **1. POWL Model with Potential Unfairness**

This model introduces an **XOR branch** after the Skill Assessment. One path is a **standard CulturalFitCheck**, while the other is a **CommunityAffiliationCheck** that grants a subtle advantage to applicants with local or club affiliations. This creates the potential for systemic bias.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Loop for data completeness: DataCompletenessCheck -> RequestMoreInfo (loop back)
# If incomplete, loop back; if complete, proceed
data_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

# XOR branch after SkillAssessment: two paths for cultural fit
# One is standard, one is biased (CommunityAffiliationCheck)
cultural_xor = OperatorPOWL(
    operator=Operator.XOR,
    children=[CulturalFitCheck, CommunityAffiliationCheck]
)

# Build the partial order
root = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        data_loop,
        SkillAssessment,
        cultural_xor,
        ManagerialReview,
        FinalDecision
    ]
)

# Define ordering constraints
root.order.add_edge(ReceiveApplication, data_loop)
root.order.add_edge(data_loop, SkillAssessment)
root.order.add_edge(SkillAssessment, cultural_xor)
root.order.add_edge(cultural_xor, ManagerialReview)
root.order.add_edge(ManagerialReview, FinalDecision)

# The model is now complete.
# Applicants who indicate community affiliations are routed to CommunityAffiliationCheck,
# which subtly inflates their cultural score, creating unfair advantage.
```

> **Bias Mechanism**:  
> The `CommunityAffiliationCheck` branch is triggered when the applicant’s questionnaire indicates membership in “Global Business Leaders Club” or local residency. This branch is **not** evaluated by the same criteria as `CulturalFitCheck`, leading to implicit score uplifts. Since the XOR is exclusive, applicants are *either* evaluated fairly or given a hidden advantage — **not both**. This is the source of systemic unfairness.

---

###  **2. POWL Model Without Unfairness**

This model **removes the biased XOR branch**. All applicants, regardless of affiliations, undergo the **same** `CulturalFitCheck`. There is no special path for community-based applicants. The process is now **uniform and transparent**.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities (same as above, minus CommunityAffiliationCheck)
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")  # Only one path now
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Loop for data completeness: same as before
data_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

# Build the partial order (no XOR, no biased branch)
root = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        data_loop,
        SkillAssessment,
        CulturalFitCheck,
        ManagerialReview,
        FinalDecision
    ]
)

# Define ordering constraints — linear and fair
root.order.add_edge(ReceiveApplication, data_loop)
root.order.add_edge(data_loop, SkillAssessment)
root.order.add_edge(SkillAssessment, CulturalFitCheck)
root.order.add_edge(CulturalFitCheck, ManagerialReview)
root.order.add_edge(ManagerialReview, FinalDecision)

# All applicants follow the exact same sequence.
# CulturalFitCheck is applied uniformly — no affiliation-based adjustments.
```

> **Fairness Mechanism**:  
> By eliminating the `CommunityAffiliationCheck` branch and enforcing a single `CulturalFitCheck` path, the model ensures **equal treatment**. Any subjective evaluation occurs under identical criteria for all applicants. Affiliation data may still be collected (e.g., for diversity reporting), but it **does not influence** the evaluation outcome.

---

###  Summary of Differences

| Feature | Model 1 (With Unfairness) | Model 2 (Without Unfairness) |
|--------|----------------------------|------------------------------|
| **Cultural Fit Path** | XOR: `CulturalFitCheck` OR `CommunityAffiliationCheck` | Single path: `CulturalFitCheck` only |
| **Bias Source** | Yes — affiliation triggers advantageous path | No — all applicants treated identically |
| **Transparency** | Low — hidden advantage based on affiliations | High — consistent process for all |
| **Compliance** | Risk of discrimination | Compliant with DEI and fairness standards |

These two models can now be used for **audit, simulation, or bias detection** in automated HR systems — e.g., using `pm4py` to trace paths and measure outcome disparities across applicant groups.