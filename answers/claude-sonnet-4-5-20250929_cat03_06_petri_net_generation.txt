```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="insurance_claim_management")

# Define places (states in the process)
p_start = PetriNet.Place(name="p_start")
p_after_cr = PetriNet.Place(name="p_after_cr")
p_after_dv = PetriNet.Place(name="p_after_dv")
p_after_rds = PetriNet.Place(name="p_after_rds")
p_after_fc = PetriNet.Place(name="p_after_fc")
p_after_ii = PetriNet.Place(name="p_after_ii")
p_after_ca = PetriNet.Place(name="p_after_ca")
p_after_ap = PetriNet.Place(name="p_after_ap")
p_after_p = PetriNet.Place(name="p_after_p")
p_after_n = PetriNet.Place(name="p_after_n")
p_end = PetriNet.Place(name="p_end")

# Add places to the net
net.places.add(p_start)
net.places.add(p_after_cr)
net.places.add(p_after_dv)
net.places.add(p_after_rds)
net.places.add(p_after_fc)
net.places.add(p_after_ii)
net.places.add(p_after_ca)
net.places.add(p_after_ap)
net.places.add(p_after_p)
net.places.add(p_after_n)
net.places.add(p_end)

# Define transitions (activities in the process)
t_cr = PetriNet.Transition(name="t_cr", label="Claim Registration (CR)")
t_dv = PetriNet.Transition(name="t_dv", label="Document Verification (DV)")
t_dv_complete = PetriNet.Transition(name="t_dv_complete", label="DV Complete")
t_rds = PetriNet.Transition(name="t_rds", label="Re-Document Submission (RDS)")
t_fc = PetriNet.Transition(name="t_fc", label="Fraud Check (FC)")
t_fc_clear = PetriNet.Transition(name="t_fc_clear", label="FC Clear")
t_ii = PetriNet.Transition(name="t_ii", label="In-depth Investigation (II)")
t_ca = PetriNet.Transition(name="t_ca", label="Claim Assessment (CA)")
t_ap = PetriNet.Transition(name="t_ap", label="Approval (AP)")
t_p = PetriNet.Transition(name="t_p", label="Payment (P)")
t_n = PetriNet.Transition(name="t_n", label="Notification (N)")
t_cl = PetriNet.Transition(name="t_cl", label="Closure (CL)")

# Add transitions to the net
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_dv_complete)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_fc_clear)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)

# Build the process flow with arcs

# Start -> Claim Registration
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_after_cr, net)

# Claim Registration -> Document Verification
petri_utils.add_arc_from_to(p_after_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_after_dv, net)

# Document Verification - two paths:
# Path 1: Documents complete -> proceed to Fraud Check
petri_utils.add_arc_from_to(p_after_dv, t_dv_complete, net)
petri_utils.add_arc_from_to(t_dv_complete, p_after_fc, net)

# Path 2: Documents incomplete -> Re-Document Submission (loop back)
petri_utils.add_arc_from_to(p_after_dv, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_after_rds, net)
petri_utils.add_arc_from_to(p_after_rds, t_dv, net)  # Loop back to DV

# Fraud Check
petri_utils.add_arc_from_to(p_after_fc, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_after_fc, net)  # Stay in same place for decision

# Fraud Check - two paths:
# Path 1: No fraud detected -> proceed to Claim Assessment
petri_utils.add_arc_from_to(p_after_fc, t_fc_clear, net)
petri_utils.add_arc_from_to(t_fc_clear, p_after_ca, net)

# Path 2: Fraud doubts -> In-depth Investigation (loop)
petri_utils.add_arc_from_to(p_after_fc, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_after_ii, net)
petri_utils.add_arc_from_to(p_after_ii, t_fc, net)  # Loop back to FC

# Claim Assessment -> Approval
petri_utils.add_arc_from_to(p_after_ca, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_after_ap, net)

# Approval -> Payment
petri_utils.add_arc_from_to(p_after_ap, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_after_p, net)

# Payment -> Notification
petri_utils.add_arc_from_to(p_after_p, t_p, net)
petri_utils.add_arc_from_to(t_p, p_after_n, net)

# Notification -> Closure
petri_utils.add_arc_from_to(p_after_n, t_n, net)
petri_utils.add_arc_from_to(t_n, p_end, net)

# Closure (final transition)
petri_utils.add_arc_from_to(p_end, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# Define initial marking (token at start place)
im = Marking()
im[p_start] = 1

# Define final marking (token at end place after closure)
fm = Marking()
fm[p_end] = 1

# Print summary
print(f"Petri net created: {net.name}")
print(f"Number of places: {len(net.places)}")
print(f"Number of transitions: {len(net.transitions)}")
print(f"Number of arcs: {len(net.arcs)}")
print(f"Initial marking: {im}")
print(f"Final marking: {fm}")
```

**Key Features of this Petri Net:**

1. **Linear Main Flow:** Start  CR  DV  FC  CA  AP  P  N  CL  End

2. **Loop for Document Re-submission:** 
   - After DV, if documents are incomplete, the process goes through RDS and loops back to DV
   - This can happen multiple times until documents are complete

3. **Loop for In-depth Investigation:**
   - After FC, if fraud is suspected, the process goes through II and loops back to FC
   - This can also happen multiple times until the fraud check is cleared

4. **Decision Points:**
   - After DV: either proceed (DV Complete) or loop back (RDS)
   - After FC: either proceed (FC Clear) or loop back (II)

5. **Markings:**
   - Initial marking: One token at `p_start` (new claim arrives)
   - Final marking: One token at `p_end` (claim closed and archived)

This model captures the complexity of the insurance claim management process with the ability to handle re-submissions and investigations through loops while maintaining a clear main process flow.