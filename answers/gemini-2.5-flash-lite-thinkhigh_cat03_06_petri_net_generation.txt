```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# 1. Create a new PetriNet object
net = PetriNet("InsuranceClaimProcess")

# 2. Define Places (States)
# These represent the states a claim can be in.
# The names are descriptive to reflect the process flow.
p_initial = PetriNet.Place("P_Initial_ClaimArrived")  # A new claim arrives
p_claim_registered = PetriNet.Place("P_ClaimRegistered")  # Claim logged, ready for DV
p_dv_requires_resubmit = PetriNet.Place("P_DV_RequiresResubmit")  # DV failed, needs resubmission
p_dv_success = PetriNet.Place("P_DV_Success")  # DV passed, ready for FC
p_rds_complete = PetriNet.Place("P_RDS_Complete")  # Documents resubmitted, ready for DV again
p_fc_clear = PetriNet.Place("P_FC_Clear")  # FC passed, ready for CA
p_fc_needs_investigation = PetriNet.Place("P_FC_NeedsInvestigation")  # FC suspects fraud, needs II
p_ii_concluded_ok = PetriNet.Place("P_II_Concluded_OK")  # II finished and cleared, ready for CA
p_ii_still_suspicious = PetriNet.Place("P_II_StillSuspicious")  # II still suspicious, loop back to FC
p_ca_complete = PetriNet.Place("P_CA_Complete")  # Claim assessed, ready for AP
p_ap_complete = PetriNet.Place("P_AP_Complete")  # Claim approved, ready for P
p_p_complete = PetriNet.Place("P_P_Complete")  # Claim paid, ready for N
p_n_complete = PetriNet.Place("P_N_Complete")  # Customer notified, ready for CL
p_final = PetriNet.Place("P_Final_ClaimClosed")  # Claim closed

# Add all defined places to the PetriNet
places = [
    p_initial, p_claim_registered, p_dv_requires_resubmit, p_dv_success,
    p_rds_complete, p_fc_clear, p_fc_needs_investigation, p_ii_concluded_ok,
    p_ii_still_suspicious, p_ca_complete, p_ap_complete, p_p_complete,
    p_n_complete, p_final
]
for p in places:
    net.places.add(p)

# 2. Define Transitions (Activities)
# These represent the actual activities performed on the claim.
t_cr = PetriNet.Transition("T_CR", label="Claim Registration")
t_dv = PetriNet.Transition("T_DV", label="Document Verification")
t_rds = PetriNet.Transition("T_RDS", label="Re-Document Submission")
t_fc = PetriNet.Transition("T_FC", label="Fraud Check")
t_ii = PetriNet.Transition("T_II", label="In-depth Investigation")
t_ca = PetriNet.Transition("T_CA", label="Claim Assessment")
t_ap = PetriNet.Transition("T_AP", label="Approval")
t_p = PetriNet.Transition("T_P", label="Payment")
t_n = PetriNet.Transition("T_N", label="Notification")
t_cl = PetriNet.Transition("T_CL", label="Closure")

# Add all defined transitions to the PetriNet
transitions = [
    t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_p, t_n, t_cl
]
for t in transitions:
    net.transitions.add(t)

# 3. Define Arcs (Connections between Places and Transitions)
# Arcs define the flow of tokens (claims) through the Petri net.

# --- Initial Flow: Claim Arrival to Registration ---
# A new claim arrives at P_Initial, enabling the Claim Registration transition (T_CR).
petri_utils.add_arc_from_to(p_initial, t_cr, net)
# After Claim Registration is completed, the claim is in the P_ClaimRegistered state, ready for the next step.
petri_utils.add_arc_from_to(t_cr, p_claim_registered, net)

# --- Document Verification (DV) and Re-Document Submission (RDS) Loop ---
# Document Verification (T_DV) can be triggered if the claim is either:
# 1. Initially registered (token in P_ClaimRegistered)
# 2. Documents have been resubmitted after a previous failure (token in P_RDS_Complete)
petri_utils.add_arc_from_to(p_claim_registered, t_dv, net)
petri_utils.add_arc_from_to(p_rds_complete, t_dv, net)

# Document Verification (T_DV) has two possible outcomes:
# 1. Success: The token moves to P_DV_Success, indicating documents are verified and ready for Fraud Check.
# 2. Failure: The token moves to P_DV_RequiresResubmit, indicating a need for resubmission.
petri_utils.add_arc_from_to(t_dv, p_dv_success, net)
petri_utils.add_arc_from_to(t_dv, p_dv_requires_resubmit, net)

# Re-Document Submission (T_RDS) process:
# If DV requires resubmission, a token is placed in P_DV_RequiresResubmit, enabling T_RDS.
petri_utils.add_arc_from_to(p_dv_requires_resubmit, t_rds, net)
# After Re-Document Submission is completed, the claim state is P_RDS_Complete, which feeds back to enable T_DV again.
petri_utils.add_arc_from_to(t_rds, p_rds_complete, net)

# --- Fraud Check (FC) and In-depth Investigation (II) Loop ---
# Fraud Check (T_FC) can be triggered if:
# 1. Documents were verified successfully (token in P_DV_Success).
# 2. A previous in-depth investigation still finds suspicious activity (token in P_II_StillSuspicious), looping back for re-evaluation.
petri_utils.add_arc_from_to(p_dv_success, t_fc, net)
petri_utils.add_arc_from_to(p_ii_still_suspicious, t_fc, net)

# Fraud Check (T_FC) has two possible outcomes:
# 1. Clear: The token moves to P_FC_Clear, indicating no fraud suspicion and readiness for Claim Assessment.
# 2. Needs Investigation: The token moves to P_FC_NeedsInvestigation, indicating potential fraud requiring In-depth Investigation.
petri_utils.add_arc_from_to(t_fc, p_fc_clear, net)
petri_utils.add_arc_from_to(t_fc, p_fc_needs_investigation, net)

# In-depth Investigation (T_II) process:
# If FC identifies a need for investigation, a token in P_FC_NeedsInvestigation enables T_II.
petri_utils.add_arc_from_to(p_fc_needs_investigation, t_ii, net)

# In-depth Investigation (T_II) has two possible outcomes:
# 1. Investigation Concluded OK: The token moves to P_II_Concluded_OK, indicating the claim is cleared and ready for Claim Assessment.
# 2. Still Suspicious: The token moves to P_II_StillSuspicious, which feeds back to T_FC for further review or re-evaluation, allowing multiple investigations.
petri_utils.add_arc_from_to(t_ii, p_ii_concluded_ok, net)
petri_utils.add_arc_from_to(t_ii, p_ii_still_suspicious, net)

# --- Claim Assessment (CA) depends on FC/II outcome ---
# Claim Assessment (T_CA) can be triggered if either:
# 1. Fraud Check was clear (token in P_FC_Clear).
# 2. In-depth Investigation concluded successfully (token in P_II_Concluded_OK).
petri_utils.add_arc_from_to(p_fc_clear, t_ca, net)
petri_utils.add_arc_from_to(p_ii_concluded_ok, t_ca, net)
# After Claim Assessment is done, the claim is in the P_CA_Complete state, ready for Approval.
petri_utils.add_arc_from_to(t_ca, p_ca_complete, net)

# --- Subsequent Sequential Steps ---
# The remaining steps follow a linear sequence: Assessment -> Approval -> Payment -> Notification -> Closure.

# Approval (T_AP)
petri_utils.add_arc_from_to(p_ca_complete, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ap_complete, net)

# Payment (T_P)
petri_utils.add_arc_from_to(p_ap_complete, t_p, net)
petri_utils.add_arc_from_to(t_p, p_p_complete, net)

# Notification (T_N)
petri_utils.add_arc_from_to(p_p_complete, t_n, net)
petri_utils.add_arc_from_to(t_n, p_n_complete, net)

# Closure (T_CL)
petri_utils.add_arc_from_to(p_n_complete, t_cl, net)
# After Closure, the claim token reaches the final state P_Final.
petri_utils.add_arc_from_to(t_cl, p_final, net)

# 4. Define Initial Marking (im)
# The initial marking defines the starting state of the Petri net.
# A single token in P_Initial_ClaimArrived signifies that one new claim has arrived and the process is ready to begin.
im = Marking()
im[p_initial] = 1

# 5. Define Final Marking (fm)
# The final marking defines the target state of the Petri net.
# A single token in P_Final_ClaimClosed signifies that the claim has successfully gone through all necessary steps and the process is complete.
fm = Marking()
fm[p_final] = 1

# The accepting Petri net is now constructed and stored in 'net',
# with its initial marking in 'im' and final marking in 'fm'.

# You can uncomment the following lines to print the net and markings for verification:
# print("Petri Net Created:", net)
# print("Initial Marking:", im)
# print("Final Marking:", fm)
```

---

### Explanation of the Petri Net Construction:

The Petri net is constructed using `pm4py.objects.petri_net.obj.PetriNet` and `pm4py.objects.petri_net.obj.Marking`, with arcs defined using `pm4py.objects.petri_net.utils.petri_utils`.

**Places (States):**
Each step or state in the insurance claim management process is represented by a `PetriNet.Place`. For example:
*   `P_Initial_ClaimArrived`: Represents the moment a new claim enters the system.
*   `P_ClaimRegistered`: Represents a claim that has been logged but not yet verified.
*   `P_DV_Success`: Represents a claim where document verification was successful.
*   `P_FC_NeedsInvestigation`: Represents a claim that requires further investigation due to fraud concerns.
*   `P_Final_ClaimClosed`: Represents the successful completion and archiving of a claim.

**Transitions (Activities):**
Each activity performed on the claim is represented by a `PetriNet.Transition`, labeled with the activity name from the scenario:
*   `T_CR`: Claim Registration
*   `T_DV`: Document Verification
*   `T_RDS`: Re-Document Submission
*   `T_FC`: Fraud Check
*   `T_II`: In-depth Investigation
*   `T_CA`: Claim Assessment
*   `T_AP`: Approval
*   `T_P`: Payment
*   `T_N`: Notification
*   `T_CL`: Closure

**Arcs (Flow):**
Arcs connect places to transitions and transitions to places, defining the sequence of events and the conditions under which activities can occur.

*   **Core Flow:** The basic path involves `Claim Registration` -> `Document Verification` -> `Fraud Check` -> `Claim Assessment` -> `Approval` -> `Payment` -> `Notification` -> `Closure`.
*   **Document Verification Loop:** If Document Verification (`T_DV`) fails, the claim moves to `P_DV_RequiresResubmit`. The `Re-Document Submission` (`T_RDS`) transition consumes this token, and upon completion, the claim returns to a state (`P_RDS_Complete`) that enables `T_DV` again, allowing for re-verification.
*   **Fraud Check / In-depth Investigation Loop:** After `Fraud Check` (`T_FC`), if doubts arise, the claim moves to `P_FC_NeedsInvestigation`. The `In-depth Investigation` (`T_II`) transition is enabled. `T_II` can result in the claim being cleared (`P_II_Concluded_OK`, proceeding to `Claim Assessment`) or remaining suspicious (`P_II_StillSuspicious`). If it remains suspicious, it loops back to a state (`P_II_StillSuspicious`) that enables `T_FC` again, allowing for multiple rounds of investigation before proceeding.
*   **Decision Points:** The transition `T_CA` (Claim Assessment) is enabled if either `P_FC_Clear` (Fraud check passed) or `P_II_Concluded_OK` (Investigation concluded successfully) tokens are present, representing the merging of successful paths from the fraud check/investigation phases. Similarly, `T_DV` and `T_FC` have multiple input places, modeling that they can be triggered by different preceding states.

**Initial Marking (`im`):**
The initial marking is defined as `im = Marking()`, with `im[p_initial] = 1`. This means that at the start of the process, there is one token in the `P_Initial_ClaimArrived` place, signifying a single new claim ready to be processed.

**Final Marking (`fm`):**
The final marking is defined as `fm = Marking()`, with `fm[p_final] = 1`. This indicates that the process is considered successfully completed when a token reaches the `P_Final_ClaimClosed` place, representing a fully processed and closed claim.