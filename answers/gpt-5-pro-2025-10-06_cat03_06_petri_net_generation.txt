```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create net
net = PetriNet(name="InsuranceClaimProcess")

# Places
p_start = PetriNet.Place("p_start")
p_after_C = PetriNet.Place("p_after_C")
p_to_DV = PetriNet.Place("p_to_DV")
p_after_DV = PetriNet.Place("p_after_DV")
p_to_FC = PetriNet.Place("p_to_FC")
p_after_FC = PetriNet.Place("p_after_FC")
p_after_CA = PetriNet.Place("p_after_CA")
p_after_AP = PetriNet.Place("p_after_AP")
p_after_P = PetriNet.Place("p_after_P")
p_after_N = PetriNet.Place("p_after_N")
p_final = PetriNet.Place("p_final")

net.places.update({p_start, p_after_C, p_to_DV, p_after_DV, p_to_FC, p_after_FC,
                   p_after_CA, p_after_AP, p_after_P, p_after_N, p_final})

# Transitions (visible)
t_C = PetriNet.Transition("C", "Insurance Claim")
t_CR = PetriNet.Transition("CR", "Claim Registration")
t_DV = PetriNet.Transition("DV", "Document Verification")
t_RDS = PetriNet.Transition("RDS", "Re-Document Submission")
t_FC = PetriNet.Transition("FC", "Fraud Check")
t_II = PetriNet.Transition("II", "In-depth Investigation")
t_CA = PetriNet.Transition("CA", "Claim Assessment")
t_AP = PetriNet.Transition("AP", "Approval")
t_P = PetriNet.Transition("P", "Payment")
t_N = PetriNet.Transition("N", "Notification")
t_CL = PetriNet.Transition("CL", "Closure")

# Silent transitions for routing (unlabeled)
tau_dv_to_fc = PetriNet.Transition("tau_dv_to_fc", None)   # route from after-DV to FC branch
tau_skip_ap = PetriNet.Transition("tau_skip_ap", None)     # optional skip of Approval

net.transitions.update({t_C, t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL,
                        tau_dv_to_fc, tau_skip_ap})

# Arcs
# Start -> Insurance Claim -> Claim Registration
petri_utils.add_arc_from_to(p_start, t_C, net)
petri_utils.add_arc_from_to(t_C, p_after_C, net)
petri_utils.add_arc_from_to(p_after_C, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p_to_DV, net)

# Document Verification loop with Re-Document Submission
petri_utils.add_arc_from_to(p_to_DV, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p_after_DV, net)
petri_utils.add_arc_from_to(p_after_DV, t_RDS, net)      # may require re-submission
petri_utils.add_arc_from_to(t_RDS, p_to_DV, net)         # loop back to DV

# Route from after DV to Fraud Check branch
petri_utils.add_arc_from_to(p_after_DV, tau_dv_to_fc, net)
petri_utils.add_arc_from_to(tau_dv_to_fc, p_to_FC, net)

# Fraud Check with possible multiple In-depth Investigations
petri_utils.add_arc_from_to(p_to_FC, t_FC, net)
petri_utils.add_arc_from_to(t_FC, p_after_FC, net)
petri_utils.add_arc_from_to(p_after_FC, t_II, net)       # if doubts arise
petri_utils.add_arc_from_to(t_II, p_to_FC, net)          # loop back to FC
petri_utils.add_arc_from_to(p_after_FC, t_CA, net)       # proceed to assessment when clear
petri_utils.add_arc_from_to(t_CA, p_after_CA, net)

# Optional Approval (skip via silent transition if below threshold)
petri_utils.add_arc_from_to(p_after_CA, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p_after_AP, net)
petri_utils.add_arc_from_to(p_after_CA, tau_skip_ap, net)
petri_utils.add_arc_from_to(tau_skip_ap, p_after_AP, net)

# Payment -> Notification -> Closure
petri_utils.add_arc_from_to(p_after_AP, t_P, net)
petri_utils.add_arc_from_to(t_P, p_after_P, net)
petri_utils.add_arc_from_to(p_after_P, t_N, net)
petri_utils.add_arc_from_to(t_N, p_after_N, net)
petri_utils.add_arc_from_to(p_after_N, t_CL, net)
petri_utils.add_arc_from_to(t_CL, p_final, net)

# Initial and final markings
im = Marking()
im[p_start] = 1

fm = Marking()
fm[p_final] = 1

# net, im, fm form the accepting Petri net
```