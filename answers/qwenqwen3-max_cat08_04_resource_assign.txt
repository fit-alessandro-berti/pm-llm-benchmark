# Optimizing TechSolve’s Resource Assignment Using Process Mining: A Data-Driven Approach

## 1. Analyzing Resource Behavior and Assignment Patterns

### Agent and Tier Performance Metrics
Using the event log, I would extract and analyze the following key performance indicators (KPIs) to understand resource behavior:

- **Workload Distribution**:  
  Calculate the number of tickets handled per agent/tier per time unit (e.g., daily/weekly). Visualize using heatmaps or histograms to identify overloaded vs. underutilized agents.

- **Activity Processing Times**:  
  Measure durations between key events (e.g., *Assign L1  Work L1 Start*, *Work L1 Start  Work L1 End*, *Escalate  Assign L2  Work L2 Start*) to detect delays in assignment or execution. Tier-level averages can reveal systemic inefficiencies.

- **First-Call Resolution (FCR) Rate (L1)**:  
  Compute the percentage of L1-handled tickets resolved without escalation. Segment by ticket category and priority to identify where L1 agents succeed or consistently fail.

- **Skill Utilization Rate**:  
  For each agent, calculate the proportion of assigned tickets that match their documented skills. Low alignment suggests misassignment.

- **Escalation Rate by Agent/Category**:  
  Track how often each L1 agent escalates tickets, and whether escalations cluster around specific categories (e.g., all Network tickets escalated), indicating skill gaps.

### Process Mining Techniques to Reveal Actual Assignment Patterns

- **Resource Interaction Analysis & Social Network Analysis (SNA)**:  
  Construct a handover network where nodes represent agents and edges represent ticket handovers (including escalations and reassignments). Metrics like *handover frequency*, *betweenness centrality*, and *clustering* can reveal:
  - Over-reliance on specific L2/L3 agents (bottlenecks).
  - Circular reassignments (e.g., Agent B12  B15  B12).
  - Silos or poor collaboration between tiers.

- **Role Discovery**:  
  Apply clustering algorithms (e.g., based on activity profiles or skill usage) to uncover *de facto* roles that differ from formal tiers. For example, some L1 agents may behave like “quasi-L2” due to informal expertise, while some L2 agents may handle only basic tasks.

- **Conformance Checking**:  
  Compare the actual assignment flow against the intended process model (e.g., “All P2 Network tickets should go to L2 Networking specialist within 15 mins”). Deviations highlight systemic non-compliance with policy.

### Skill Utilization Analysis
By joining ticket *Required Skill* with agent *Agent Skills*, I would:
- Identify skill gaps: e.g., high volume of *Database-SQL* tickets but only 2 agents possess this skill.
- Detect skill underuse: e.g., L3 *Security-IAM* specialists spending 40% of time on password resets (Access Management), indicating overqualification.
- Map skill demand vs. supply over time to anticipate shortages.

---

## 2. Identifying Resource-Related Bottlenecks and Issues

### Pinpointing Specific Problems

- **Skill-Based Bottlenecks**:  
  Use bottleneck analysis on the process map filtered by *Required Skill*. Long waiting times between *Escalate L2* and *Work L2 Start* for *Networking-Firewall* tickets would indicate insufficient L2 network specialists.

- **Reassignment Delays**:  
  Calculate the average time lost per reassignment (e.g., from *Reassign* to next *Work Start*). If reassignments add >2 hours on average, this directly contributes to SLA breaches.

- **Incorrect Initial Assignments**:  
  Analyze cases where L1 agents immediately escalate (<10 mins of work). High rates suggest either poor dispatcher logic or inaccurate ticket categorization at intake.

- **Agent Overload/Underperformance**:  
  Cross-reference agent workload with resolution quality (e.g., re-escalation rate, customer satisfaction if available). An agent with high ticket volume but low FCR may be overwhelmed or under-skilled.

- **SLA Breach Correlation**:  
  Perform a root cause filter: among all breached P2/P3 tickets, what % experienced 2 reassignments? What % were initially assigned to agents lacking required skills? This quantifies the impact of assignment errors.

### Quantifying Impact
- **Reassignment Cost**: If 30% of P2 tickets undergo reassignment, and each adds 3 hours to resolution, and 60% of SLA breaches involve reassignment, then reassignment is a primary driver of non-compliance.
- **Skill Mismatch Penalty**: Tickets assigned to agents without required skills take 2.5× longer to resolve (based on duration analysis).

---

## 3. Root Cause Analysis for Assignment Inefficiencies

### Potential Root Causes
- **Inadequate Assignment Rules**: Round-robin ignores skill requirements and real-time workload, leading to mismatches.
- **Outdated Skill Profiles**: Agent skill metadata may not reflect current capabilities (e.g., Agent A05 learned CRM troubleshooting but profile unchanged).
- **Poor Ticket Triage**: Initial categorization (e.g., “Software-App”) is too vague; required skill (*App-CRM*) is inferred too late.
- **L1 Agent Limitations**: L1 agents lack training or authority to resolve common P3 issues, causing unnecessary escalations.
- **No Real-Time Visibility**: Dispatchers assign without knowing if a skilled agent is already overloaded.

### Using Variant and Decision Mining
- **Variant Analysis**:  
  Compare two variants:
  - *Efficient Path*: Ticket  L1  Resolve (FCR).
  - *Inefficient Path*: Ticket  L1  Escalate  Reassign  Resolve.  
  Differences in initial ticket attributes (e.g., description keywords like “login failed” vs. “data corruption”) or L1 agent identity can reveal predictors of escalation.

- **Decision Mining**:  
  Model the *Escalate* decision point using decision trees. Input variables: ticket priority, category, L1 agent ID, time of day, prior similar tickets resolved by agent. The model may show that escalations occur not due to complexity but because Agent A05 always escalates CRM tickets—even when resolvable.

These techniques isolate whether assignment failures stem from process design, data quality, or human behavior.

---

## 4. Developing Data-Driven Resource Assignment Strategies

### Strategy 1: **Skill-Weighted, Proficiency-Based Routing**
- **Addresses**: Skill mismatches, underutilization of specialists, unnecessary escalations.
- **Process Mining Insight**: Analysis shows 40% of L2 tickets are assigned to agents lacking required skills; specialists are idle 30% of the time.
- **Implementation Data**: 
  - Agent skill matrix with proficiency levels (e.g., App-CRM: B12 = Expert, B15 = Intermediate).
  - Ticket required skill (enhanced via NLP on ticket description if missing).
- **Mechanism**: Assign tickets to the *most available agent with matching skill and highest proficiency*, not just any agent in the tier.
- **Expected Benefits**: 
  - 25% reduction in reassignments.
  - 15% faster resolution for skill-intensive tickets.
  - Better SLA compliance for P2/P3.

### Strategy 2: **Dynamic Workload-Aware Assignment**
- **Addresses**: Uneven workload, assignment delays due to queue buildup.
- **Process Mining Insight**: SNA shows Agent B08 handles 50% of Network tickets and has 4-hour average queue time; Agent B09 (same skills) is underutilized.
- **Implementation Data**: 
  - Real-time ticket queue per agent.
  - Historical handling time per agent per category.
- **Mechanism**: Assignment algorithm balances *skill match* + *current workload* (e.g., tickets/hour) + *predicted handling time*. Use a scoring function:  
    `Score = ·SkillMatch + ·(1 / Workload) + ·Availability`
- **Expected Benefits**: 
  - Smoother workload distribution.
  - 20% reduction in assignment-to-work-start delay.
  - Fewer SLA breaches during peak hours.

### Strategy 3: **Predictive L1 Empowerment & Escalation Gates**
- **Addresses**: Excessive escalations, L1 underutilization, dispatcher dependency.
- **Process Mining Insight**: Variant analysis shows 60% of escalated P3 Software-App tickets are resolvable by L1 if given correct knowledge base article.
- **Implementation Data**: 
  - Historical L1 resolution success patterns by ticket features (keywords, error codes).
  - Knowledge base article usage logs.
- **Mechanism**: 
  - At ticket creation, use ML classifier to predict if L1 can resolve it (based on past similar cases).
  - If “likely resolvable,” auto-suggest solution to L1 agent or auto-resolve via chatbot.
  - Enforce escalation only if L1 spends >X minutes or confirms inability.
- **Expected Benefits**: 
  - 30% reduction in L1L2 escalations.
  - Higher L1 FCR rate (from 45%  65%).
  - Frees L2 capacity for true complex issues.

---

## 5. Simulation, Implementation, and Monitoring

### Pre-Implementation Simulation
- **Build a Simulation Model**: Using the discovered process model (from process mining), agent resource profiles (skills, capacity), and historical case variants.
- **Simulate Scenarios**: 
  - Baseline: Current round-robin assignment.
  - Scenario A: Skill-weighted routing.
  - Scenario B: Workload-aware + skill routing.
  - Scenario C: Predictive L1 + skill routing.
- **Output Metrics**: 
  - Average resolution time per priority.
  - % SLA compliance.
  - Agent utilization rates.
  - Reassignment frequency.
- **Outcome**: Quantify expected improvement (e.g., “Strategy B reduces P2 SLA breaches by 35%”) and identify risks (e.g., overloading newly assigned specialists).

### Post-Implementation Monitoring Plan
Deploy a **Process Mining Dashboard** with real-time and historical views:

- **Key Resource KPIs**:
  - Agent utilization rate (tickets/hour).
  - Skill match rate (% tickets assigned to skilled agents).
  - Reassignment rate per tier.
  - L1 FCR rate by category.
  - Time from assignment to work start (per agent/skill).

- **Process Views**:
  - **Performance Map**: Highlight bottlenecks in assignment/escalation steps.
  - **Conformance Dashboard**: Alert on deviations from new assignment rules.
  - **SNA Live View**: Monitor handover patterns for emerging bottlenecks.
  - **SLA Breach Root Cause Filter**: Auto-tag breaches linked to reassignment or skill mismatch.

- **Feedback Loop**: 
  - Monthly review of dashboard insights.
  - Update skill profiles and routing rules based on observed performance.
  - Retrain L1 agents on high-escalation, low-complexity categories.

By embedding process mining into both design and operations, TechSolve can transform resource assignment from a reactive, rule-of-thumb practice into a dynamic, data-optimized engine for service excellence.