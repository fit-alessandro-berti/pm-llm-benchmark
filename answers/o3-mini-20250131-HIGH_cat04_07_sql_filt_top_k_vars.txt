Below is one example of how you could write the SQL query in DuckDB. In this solution, we:

1. **Build the variant per case:** We aggregate activities for each `case_id` in timestamp order using an ordered aggregation (here, via `LISTAGG`).
2. **Count variants:** We group by the resulting variant to count how many cases follow that exact sequence.
3. **Select top K variants:** We order the variants by the number of cases (frequency) and limit the results to the top K variants.
4. **Filter the event log:** Finally, we return all events from `event_log` whose `case_id` belongs to one of these top variants.

Replace `{K}` with your desired number of variants (for example, `LIMIT 5`).

Here is the complete query:

```sql
WITH case_variants AS (
    -- Step 1: For each case, build the ordered activity sequence
    SELECT
        case_id,
        LISTAGG(activity, ',' ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    -- Step 2: Count the number of cases per variant
    SELECT
        variant,
        COUNT(*) AS variant_count
    FROM case_variants
    GROUP BY variant
),
top_variants AS (
    -- Step 3: Identify the top K variants by frequency
    SELECT variant
    FROM variant_counts
    ORDER BY variant_count DESC
    LIMIT {K}
)
-- Step 4: Return all events from cases that belong to the top K variants
SELECT e.*
FROM event_log e
JOIN case_variants cv
  ON e.case_id = cv.case_id
WHERE cv.variant IN (SELECT variant FROM top_variants);
```

### Explanation

- **CTE `case_variants`:**  
  For each `case_id`, the query aggregates the activities into a single string using `LISTAGG`, ordering the activities by `timestamp` so that the sequence reflects the actual order of events.

- **CTE `variant_counts`:**  
  This groups the cases by the variant string and counts how many cases share each variant.

- **CTE `top_variants`:**  
  This selects the variants with the highest counts by ordering in descending order and limiting the output to the top K variants.

- **Final SELECT:**  
  The final query joins the original `event_log` with the `case_variants` CTE, and then filters the events to only those whose caseâ€™s variant is among the top K.

This query fulfills the task by extracting the ordered activity sequences, grouping and counting them to find the top variants, and then returning all events corresponding to cases that follow one of those top variants.