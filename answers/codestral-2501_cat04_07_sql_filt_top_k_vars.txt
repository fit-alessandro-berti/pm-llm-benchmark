To achieve the task, we need to break it down into several steps and construct the corresponding DuckDB SQL queries. Here's a step-by-step approach:

1. **Extract the ordered sequence of activities per case.**
2. **Group cases by their complete activity sequence to identify unique process variants.**
3. **Count how many cases correspond to each variant and determine the top K variants by their frequency.**
4. **Return all events from the original event log that belong only to cases which are part of these top K variants.**

Let's construct the SQL queries step by step.

### Step 1: Extract the ordered sequence of activities per case

We need to concatenate the activities for each `case_id` in the order of their `timestamp`.

```sql
WITH ordered_activities AS (
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
)
```

### Step 2: Group cases by their complete activity sequence

We need to identify unique process variants by grouping by the concatenated activity sequence.

```sql
, variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM
        ordered_activities
    GROUP BY
        activity_sequence
)
```

### Step 3: Determine the top K variants by their frequency

We need to order the variants by their frequency and select the top K.

```sql
, top_k_variants AS (
    SELECT
        activity_sequence
    FROM
        variant_counts
    ORDER BY
        case_count DESC
    LIMIT K
)
```

### Step 4: Return all events from the original event log that belong to the top K variants

Finally, we need to join the original event log with the top K variants to filter the events.

```sql
SELECT
    el.*
FROM
    event_log el
JOIN
    ordered_activities oa ON el.case_id = oa.case_id
JOIN
    top_k_variants tkv ON oa.activity_sequence = tkv.activity_sequence
```

### Complete Query

Combining all the steps, the complete query looks like this:

```sql
WITH ordered_activities AS (
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
),
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM
        ordered_activities
    GROUP BY
        activity_sequence
),
top_k_variants AS (
    SELECT
        activity_sequence
    FROM
        variant_counts
    ORDER BY
        case_count DESC
    LIMIT K
)
SELECT
    el.*
FROM
    event_log el
JOIN
    ordered_activities oa ON el.case_id = oa.case_id
JOIN
    top_k_variants tkv ON oa.activity_sequence = tkv.activity_sequence;
```

### Explanation

1. **ordered_activities**: This CTE extracts the ordered sequence of activities for each `case_id`.
2. **variant_counts**: This CTE counts the number of cases for each unique activity sequence.
3. **top_k_variants**: This CTE selects the top K variants by their frequency.
4. The final `SELECT` statement joins the original event log with the top K variants to filter and return the relevant events.

Replace `K` with the actual number of top variants you want to consider. This query ensures that you correctly extract, aggregate, filter, and return the events belonging to the top K process variants.