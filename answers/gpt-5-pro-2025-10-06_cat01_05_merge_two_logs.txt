Merged event log (chronological by primary_timestamp; System A chosen as primary timeline). Each merged record keeps both systems’ timestamps when available and enriches attributes from System B.

[
  {
    "event_index": 1,
    "primary_timestamp": "2023-10-10T10:00:00Z",
    "order_id": "Order#1234",
    "canonical_event": "Order Received",
    "source": "A+B",
    "timestamp_A": "2023-10-10T10:00:00Z",
    "event_type_A": "Order Received",
    "timestamp_B": "2023-10-10T09:59:58Z",
    "event_name_B": "OrderReceived",
    "user_id": "u45",
    "resource_id": "r10",
    "notes": "Event captured at warehouse system",
    "delta_seconds_B_minus_A": -2,
    "match_reason": "Same order_id; mapped Order Received ~ OrderReceived; |t|=2s within base tolerance; A timestamp chosen as primary.",
    "match_confidence": "high"
  },
  {
    "event_index": 2,
    "primary_timestamp": "2023-10-10T10:01:30Z",
    "order_id": "Order#1234",
    "canonical_event": "Order Validated",
    "source": "A+B",
    "timestamp_A": "2023-10-10T10:01:30Z",
    "event_type_A": "Order Validated",
    "timestamp_B": "2023-10-10T10:01:29Z",
    "event_name_B": "OrderValidation",
    "user_id": "u12",
    "resource_id": "r10",
    "notes": "Cross-check inventory",
    "delta_seconds_B_minus_A": -1,
    "match_reason": "Same order_id; mapped Order Validated ~ OrderValidation; |t|=1s within base tolerance; A timestamp chosen as primary.",
    "match_confidence": "high"
  },
  {
    "event_index": 3,
    "primary_timestamp": "2023-10-10T10:02:00Z",
    "order_id": "Order#1234",
    "canonical_event": "Payment Processed",
    "source": "A+B",
    "timestamp_A": "2023-10-10T10:02:00Z",
    "event_type_A": "Payment Processed",
    "timestamp_B": "2023-10-10T10:02:05Z",
    "event_name_B": "PaymentCheck",
    "user_id": "u12",
    "resource_id": "r99",
    "notes": "Payment gateway delay",
    "delta_seconds_B_minus_A": 5,
    "match_reason": "Same order_id; mapped Payment Processed ~ PaymentCheck; order preserved between surrounding events; |t|=5s outside base tolerance but accepted via semantic name mapping and known small cross-system offset.",
    "match_confidence": "medium"
  },
  {
    "event_index": 4,
    "primary_timestamp": "2023-10-10T10:03:00Z",
    "order_id": "Order#1234",
    "canonical_event": "Quality Check",
    "source": "B",
    "timestamp_A": null,
    "event_type_A": null,
    "timestamp_B": "2023-10-10T10:03:00Z",
    "event_name_B": "Quality Check",
    "user_id": "u45",
    "resource_id": "r11",
    "notes": "Random inspection",
    "delta_seconds_B_minus_A": null,
    "match_reason": "No corresponding A event found near this time; included as a B-only step.",
    "match_confidence": "single-source"
  },
  {
    "event_index": 5,
    "primary_timestamp": "2023-10-10T10:05:00Z",
    "order_id": "Order#1234",
    "canonical_event": "Item Shipped",
    "source": "A+B",
    "timestamp_A": "2023-10-10T10:05:00Z",
    "event_type_A": "Item Shipped",
    "timestamp_B": "2023-10-10T10:05:02Z",
    "event_name_B": "Shipping",
    "user_id": "u45",
    "resource_id": "r10",
    "notes": "Package handed to courier",
    "delta_seconds_B_minus_A": 2,
    "match_reason": "Same order_id; mapped Item Shipped ~ Shipping; |t|=2s within base tolerance; A timestamp chosen as primary.",
    "match_confidence": "high"
  },
  {
    "event_index": 6,
    "primary_timestamp": "2023-10-10T10:20:00Z",
    "order_id": "Order#1234",
    "canonical_event": "Item Delivered",
    "source": "A",
    "timestamp_A": "2023-10-10T10:20:00Z",
    "event_type_A": "Item Delivered",
    "timestamp_B": null,
    "event_name_B": null,
    "user_id": null,
    "resource_id": null,
    "notes": null,
    "delta_seconds_B_minus_A": null,
    "match_reason": "No matching ‘delivered’ record in B; included A-only.",
    "match_confidence": "single-source"
  }
]

Notes on matching and conflict resolution
- Primary timeline and ordering: System A timestamps are used as primary_timestamp when available; otherwise, System B’s timestamp is used. Final list is sorted by primary_timestamp.
- Name mapping to canonical_event:
  - OrderReceived  Order Received  Order Received
  - OrderValidation  Order Validated  Order Validated
  - PaymentCheck  Payment Processed  Payment Processed
  - Shipping  Item Shipped  Item Shipped
  - Quality Check (B-only)  Quality Check
  - Item Delivered (A-only)  Item Delivered
- Matching keys: exact order_id + semantic name mapping + timestamp proximity.
- Timestamp tolerance: base tolerance ±2 seconds. For semantically identical events where ordering against neighbors is consistent, we permitted a small extension (here 5 seconds) to merge Payment Processed with PaymentCheck; flagged as medium confidence.
- Conflict handling:
  - If multiple candidates exist (not encountered here), we would choose the pair with the smallest absolute t that also respects process order. If ambiguity remained, we would leave events separate.
  - When timestamps differ, we keep both timestamp_A and timestamp_B and compute delta_seconds_B_minus_A. System A stays primary for chronology.
- Non-overlapping events:
  - Quality Check exists only in System B  kept as a B-only event with its metadata.
  - Item Delivered exists only in System A  kept as an A-only event.
- Data enrichment: For merged events, user_id, resource_id, and notes from System B are included; they are null when not available.