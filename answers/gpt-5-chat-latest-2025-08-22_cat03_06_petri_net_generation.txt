Great! Let’s carefully construct the **Accepting Petri Net (APN)** for the **Insurance Claim Management Process** as described.  

We’ll define places (to represent states), transitions (to represent activities), and arcs (to link states and activities). We’ll incorporate loops for **Re-Document Submission (RDS)** and **In-depth Investigation (II)**. Finally, we’ll define the **initial marking (im)** and **final marking (fm)**.

---

##  Full Python Code

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the net
net = PetriNet("Insurance_Claim_Management")

# -----------------------------
# Places (states in the process)
# -----------------------------
p_start = PetriNet.Place("p_start")
p_cr_done = PetriNet.Place("p_cr_done")
p_dv_done = PetriNet.Place("p_dv_done")
p_rds_needed = PetriNet.Place("p_rds_needed")
p_fc_done = PetriNet.Place("p_fc_done")
p_investigation = PetriNet.Place("p_investigation")
p_ca_done = PetriNet.Place("p_ca_done")
p_approval_needed = PetriNet.Place("p_approval_needed")
p_ap_done = PetriNet.Place("p_ap_done")
p_payment_done = PetriNet.Place("p_payment_done")
p_notification_done = PetriNet.Place("p_notification_done")
p_closed = PetriNet.Place("p_closed")

# Add places to net
net.places.update({
    p_start, p_cr_done, p_dv_done, p_rds_needed, 
    p_fc_done, p_investigation, p_ca_done, 
    p_approval_needed, p_ap_done, p_payment_done, 
    p_notification_done, p_closed
})

# -------------------------------
# Transitions (activities/events)
# -------------------------------
t_claim = PetriNet.Transition("C", "Insurance Claim")
t_cr = PetriNet.Transition("CR", "Claim Registration")
t_dv = PetriNet.Transition("DV", "Document Verification")
t_rds = PetriNet.Transition("RDS", "Re-Document Submission")
t_fc = PetriNet.Transition("FC", "Fraud Check")
t_ii = PetriNet.Transition("II", "In-depth Investigation")
t_ca = PetriNet.Transition("CA", "Claim Assessment")
t_ap = PetriNet.Transition("AP", "Approval")
t_p = PetriNet.Transition("P", "Payment")
t_n = PetriNet.Transition("N", "Notification")
t_cl = PetriNet.Transition("CL", "Closure")

# Add transitions to net
net.transitions.update({
    t_claim, t_cr, t_dv, t_rds, t_fc, t_ii, 
    t_ca, t_ap, t_p, t_n, t_cl
})

# -------------------------
# Arcs (workflow structure)
# -------------------------

# Start -> Claim -> Claim Registration
petri_utils.add_arc_from_to(p_start, t_claim, net)
petri_utils.add_arc_from_to(t_claim, p_cr_done, net)

petri_utils.add_arc_from_to(p_cr_done, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_dv_done, net)

# Document Verification -> normal flow
petri_utils.add_arc_from_to(p_dv_done, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_fc_done, net)  # Continue to Fraud Check

# Document Verification -> re-document submission loop
petri_utils.add_arc_from_to(t_dv, p_rds_needed, net)  # If DV fails
petri_utils.add_arc_from_to(p_rds_needed, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_dv_done, net)  # Loop back to DV

# Fraud Check -> normal flow to Claim Assessment
petri_utils.add_arc_from_to(p_fc_done, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_ca_done, net)  # Passes fraud check

# Fraud Check -> request additional investigation
petri_utils.add_arc_from_to(t_fc, p_investigation, net)
petri_utils.add_arc_from_to(p_investigation, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_fc_done, net)  # Loop back to fraud check

# Claim Assessment -> Approval
petri_utils.add_arc_from_to(p_ca_done, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_approval_needed, net)

# Approval by manager
petri_utils.add_arc_from_to(p_approval_needed, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ap_done, net)

# Payment
petri_utils.add_arc_from_to(p_ap_done, t_p, net)
petri_utils.add_arc_from_to(t_p, p_payment_done, net)

# Notification
petri_utils.add_arc_from_to(p_payment_done, t_n, net)
petri_utils.add_arc_from_to(t_n, p_notification_done, net)

# Closure
petri_utils.add_arc_from_to(p_notification_done, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_closed, net)

# -------------------------
# Initial and Final Markings
# -------------------------
im = Marking()
im[p_start] = 1  # New claim arrives

fm = Marking()
fm[p_closed] = 1  # Claim closed and archived
```

---

##  Explanation of the Flow

1. **Start  C  CR  DV**  
   A token is created when a new claim arrives and moves through Claim Registration and Document Verification.

2. **Document Verification Outcome:**  
   - If successful  process continues to **Fraud Check**.  
   - If failed/incomplete  goes to **Re-Document Submission (RDS)**, then loops back to Document Verification.  

3. **Fraud Check Outcome:**  
   - If cleared  move to **Claim Assessment (CA)**.  
   - If suspicious  goes to **In-depth Investigation (II)**, then loops back to Fraud Check until sufficient clarity is gained.  

4. **Claim Assessment  Approval (AP)**  **Payment (P)**.  

5. **After Payment  Notification (N)**  **Closure (CL)**.  

6. **Final marking**  Claim is officially **closed**.  

---

 This Petri Net covers **sequential flow**, **loops (DV  RDS, FC  II)**, correct **initial marking (im)** where process begins, and **final marking (fm)** where the claim is closed.  

Do you want me to also **visualize this Petri net graph** using `pm4py.visualization.petri_net.visualizer`, so you can see the process diagrammatically?