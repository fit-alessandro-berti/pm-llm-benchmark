To model the insurance claim management process as an accepting Petri net, we need to capture the sequence of activities, conditional branches for document re-submission and fraud investigation, and the approval threshold decision. Below is the Python code that constructs this net using `pm4py`:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Initialize the Petri net
net = PetriNet(name="insurance_claim")

# Define places representing states
start = PetriNet.Place("start")
after_C = PetriNet.Place("after_C")
after_CR = PetriNet.Place("after_CR")
after_DV = PetriNet.Place("after_DV")
fraud_check_place = PetriNet.Place("fraud_check_place")
investigation_place = PetriNet.Place("investigation_place")
after_CA = PetriNet.Place("after_CA")
after_AP = PetriNet.Place("after_AP")
after_P = PetriNet.Place("after_P")
after_N = PetriNet.Place("after_N")
end_place = PetriNet.Place("end_place")

# Add places to the net
for place in [start, after_C, after_CR, after_DV, fraud_check_place, investigation_place, 
              after_CA, after_AP, after_P, after_N, end_place]:
    net.places.add(place)

# Define transitions labeled with activity names
transitions = {
    "C": PetriNet.Transition("C", "C"),
    "CR": PetriNet.Transition("CR", "CR"),
    "DV": PetriNet.Transition("DV", "DV"),
    "RDS": PetriNet.Transition("RDS", "RDS"),
    "FC1": PetriNet.Transition("FC1", "FC"),  # Initial fraud check
    "FC2": PetriNet.Transition("FC2", "FC"),  # Recheck after investigation
    "CA": PetriNet.Transition("CA", "CA"),
    "II": PetriNet.Transition("II", "II"),
    "AP": PetriNet.Transition("AP", "AP"),
    "P1": PetriNet.Transition("P1", "P"),    # Payment without senior approval
    "P2": PetriNet.Transition("P2", "P"),    # Payment after senior approval
    "N": PetriNet.Transition("N", "N"),
    "CL": PetriNet.Transition("CL", "CL")
}

# Add transitions to the net
for t in transitions.values():
    net.transitions.add(t)

# Connect places and transitions with arcs
# Main flow: C -> CR -> DV
petri_utils.add_arc_from_to(start, transitions["C"], net)
petri_utils.add_arc_from_to(transitions["C"], after_C, net)
petri_utils.add_arc_from_to(after_C, transitions["CR"], net)
petri_utils.add_arc_from_to(transitions["CR"], after_CR, net)
petri_utils.add_arc_from_to(after_CR, transitions["DV"], net)
petri_utils.add_arc_from_to(transitions["DV"], after_DV, net)

# Document re-submission loop (DV -> RDS -> CR)
petri_utils.add_arc_from_to(after_DV, transitions["RDS"], net)
petri_utils.add_arc_from_to(transitions["RDS"], after_CR, net)

# Fraud check and investigation loop (DV -> FC -> (CA or II))
petri_utils.add_arc_from_to(after_DV, transitions["FC1"], net)
petri_utils.add_arc_from_to(transitions["FC1"], fraud_check_place, net)
petri_utils.add_arc_from_to(fraud_check_place, transitions["CA"], net)
petri_utils.add_arc_from_to(transitions["CA"], after_CA, net)
petri_utils.add_arc_from_to(fraud_check_place, transitions["II"], net)
petri_utils.add_arc_from_to(transitions["II"], investigation_place, net)
petri_utils.add_arc_from_to(investigation_place, transitions["FC2"], net)
petri_utils.add_arc_from_to(transitions["FC2"], fraud_check_place, net)

# Approval threshold decision (CA -> AP -> P or CA -> P)
petri_utils.add_arc_from_to(after_CA, transitions["AP"], net)
petri_utils.add_arc_from_to(transitions["AP"], after_AP, net)
petri_utils.add_arc_from_to(after_AP, transitions["P2"], net)
petri_utils.add_arc_from_to(after_CA, transitions["P1"], net)

# Final flow: P -> N -> CL -> end
petri_utils.add_arc_from_to(transitions["P1"], after_P, net)
petri_utils.add_arc_from_to(transitions["P2"], after_P, net)
petri_utils.add_arc_from_to(after_P, transitions["N"], net)
petri_utils.add_arc_from_to(transitions["N"], after_N, net)
petri_utils.add_arc_from_to(after_N, transitions["CL"], net)
petri_utils.add_arc_from_to(transitions["CL"], end_place, net)

# Define initial marking (token in start place)
im = Marking()
im[start] = 1

# Define final marking (token in end_place)
fm = Marking()
fm[end_place] = 1

# Remove end_place as in the example
petri_utils.remove_place(net, end_place)
del fm[end_place]
```

### Explanation:
1. **Places**: Represent states between activities (e.g., `after_CR` is the state after registration).
2. **Transitions**: Model activities labeled as specified (e.g., `C`, `CR`, `DV`).
3. **Arcs**: Connect places and transitions to form the process flow:
   - **Main Flow**: `start  C  CR  DV  FC  CA  AP  P  N  CL  end_place`.
   - **Document Loop**: If documents are incomplete after DV, transition to `RDS` loops back to `after_CR`.
   - **Fraud Investigation Loop**: After FC, if doubts, transition to `II` loops back to `fraud_check_place`.
   - **Approval Threshold Decision**: After CA, transition to `AP` if threshold surpassed, else directly to `P`.
4. **Initial Marking (`im`)**: Token starts at `start` to represent a new claim.
5. **Final Marking (`fm`)**: Token in `end_place` represents closure; removed afterward as per the example.

This net captures all specified activities, loops, and decisions while adhering to the given constraints.