```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="insurance_claim_process")

# -------------------- PLACES -------------------- #
start = PetriNet.Place("start")
after_CR = PetriNet.Place("after_CR")
after_DV = PetriNet.Place("after_DV")
rds_needed = PetriNet.Place("rds_needed")
after_RDS = PetriNet.Place("after_RDS")
after_FC = PetriNet.Place("after_FC")
investigate = PetriNet.Place("investigate")
after_II = PetriNet.Place("after_II")
after_CA = PetriNet.Place("after_CA")
after_AP = PetriNet.Place("after_AP")
after_P = PetriNet.Place("after_P")
after_N = PetriNet.Place("after_N")
end = PetriNet.Place("end")

for p in [
    start, after_CR, after_DV, rds_needed, after_RDS,
    after_FC, investigate, after_II, after_CA, after_AP, after_P, after_N, end
]:
    net.places.add(p)

# -------------------- TRANSITIONS -------------------- #
trans = {
    "C": PetriNet.Transition("C", "Insurance Claim"),
    "CR": PetriNet.Transition("CR", "Claim Registration"),
    "DV": PetriNet.Transition("DV", "Document Verification"),
    "RDS": PetriNet.Transition("RDS", "Re-Document Submission"),
    "FC": PetriNet.Transition("FC", "Fraud Check"),
    "II": PetriNet.Transition("II", "In-depth Investigation"),
    "CA": PetriNet.Transition("CA", "Claim Assessment"),
    "AP": PetriNet.Transition("AP", "Approval"),
    "P": PetriNet.Transition("P", "Payment"),
    "N": PetriNet.Transition("N", "Notification"),
    "CL": PetriNet.Transition("CL", "Closure"),
}
for t in trans.values():
    net.transitions.add(t)

# -------------------- ARCS -------------------- #
# start -> C -> after_CR
petri_utils.add_arc_from_to(start, trans["C"], net)
petri_utils.add_arc_from_to(trans["C"], after_CR, net)

# after_CR -> CR -> after_DV
petri_utils.add_arc_from_to(after_CR, trans["CR"], net)
petri_utils.add_arc_from_to(trans["CR"], after_DV, net)

# DV branch: ok or need re-submission
petri_utils.add_arc_from_to(after_DV, trans["DV"], net)
petri_utils.add_arc_from_to(trans["DV"], after_FC, net)     # ok path
petri_utils.add_arc_from_to(trans["DV"], rds_needed, net)  # doc-resub path

# RDS loop
petri_utils.add_arc_from_to(rds_needed, trans["RDS"], net)
petri_utils.add_arc_from_to(trans["RDS"], after_RDS, net)
petri_utils.add_arc_from_to(after_RDS, trans["DV"], net)  # re-check docs

# Fraud path (normal or investigation)
petri_utils.add_arc_from_to(after_FC, trans["FC"], net)
petri_utils.add_arc_from_to(trans["FC"], after_CA, net)     # clean path
petri_utils.add_arc_from_to(trans["FC"], investigate, net)  # suspicious path

# Investigation loop
petri_utils.add_arc_from_to(investigate, trans["II"], net)
petri_utils.add_arc_from_to(trans["II"], after_II, net)
petri_utils.add_arc_from_to(after_II, trans["FC"], net)  # may iterate

# Straight line from CA to end
petri_utils.add_arc_from_to(after_CA, trans["CA"], net)
petri_utils.add_arc_from_to(trans["CA"], after_AP, net)

petri_utils.add_arc_from_to(after_AP, trans["AP"], net)
petri_utils.add_arc_from_to(trans["AP"], after_P, net)

petri_utils.add_arc_from_to(after_P, trans["P"], net)
petri_utils.add_arc_from_to(trans["P"], after_N, net)

petri_utils.add_arc_from_to(after_N, trans["N"], net)
petri_utils.add_arc_from_to(trans["N"], end, net)

petri_utils.add_arc_from_to(end, trans["CL"], net)

# -------------------- MARKINGS -------------------- #
im = Marking()
im[start] = 1

fm = Marking()
fm[end] = 1
```