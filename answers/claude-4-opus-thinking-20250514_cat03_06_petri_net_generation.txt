Looking at this insurance claim management process, I'll construct an accepting Petri net that captures the main flow and the two possible loops (document re-submission and in-depth investigation).

Here's the Python code to construct the Petri net:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="insurance_claim_management")

# Create places
start = PetriNet.Place(name="start")
p1 = PetriNet.Place(name="p1")  # After claim filed
p2 = PetriNet.Place(name="p2")  # After claim registration
p3 = PetriNet.Place(name="p3")  # After document verification
p4 = PetriNet.Place(name="p4")  # After fraud check
p5 = PetriNet.Place(name="p5")  # After claim assessment
p6 = PetriNet.Place(name="p6")  # After approval
p7 = PetriNet.Place(name="p7")  # After payment
p8 = PetriNet.Place(name="p8")  # After notification
end = PetriNet.Place(name="end")   # Final state after closure

# Add places to the net
net.places.add(start)
net.places.add(p1)
net.places.add(p2)
net.places.add(p3)
net.places.add(p4)
net.places.add(p5)
net.places.add(p6)
net.places.add(p7)
net.places.add(p8)
net.places.add(end)

# Create transitions
claim_filing = PetriNet.Transition(name="claim_filing", label="Insurance Claim (C)")
claim_registration = PetriNet.Transition(name="claim_registration", label="Claim Registration (CR)")
document_verification = PetriNet.Transition(name="document_verification", label="Document Verification (DV)")
re_document_submission = PetriNet.Transition(name="re_document_submission", label="Re-Document Submission (RDS)")
fraud_check = PetriNet.Transition(name="fraud_check", label="Fraud Check (FC)")
in_depth_investigation = PetriNet.Transition(name="in_depth_investigation", label="In-depth Investigation (II)")
claim_assessment = PetriNet.Transition(name="claim_assessment", label="Claim Assessment (CA)")
approval = PetriNet.Transition(name="approval", label="Approval (AP)")
payment = PetriNet.Transition(name="payment", label="Payment (P)")
notification = PetriNet.Transition(name="notification", label="Notification (N)")
closure = PetriNet.Transition(name="closure", label="Closure (CL)")

# Add transitions to the net
net.transitions.add(claim_filing)
net.transitions.add(claim_registration)
net.transitions.add(document_verification)
net.transitions.add(re_document_submission)
net.transitions.add(fraud_check)
net.transitions.add(in_depth_investigation)
net.transitions.add(claim_assessment)
net.transitions.add(approval)
net.transitions.add(payment)
net.transitions.add(notification)
net.transitions.add(closure)

# Add arcs for the main flow
petri_utils.add_arc_from_to(start, claim_filing, net)
petri_utils.add_arc_from_to(claim_filing, p1, net)
petri_utils.add_arc_from_to(p1, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, p2, net)
petri_utils.add_arc_from_to(p2, document_verification, net)
petri_utils.add_arc_from_to(document_verification, p3, net)
petri_utils.add_arc_from_to(p3, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, p4, net)
petri_utils.add_arc_from_to(p4, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, p5, net)
petri_utils.add_arc_from_to(p5, approval, net)
petri_utils.add_arc_from_to(approval, p6, net)
petri_utils.add_arc_from_to(p6, payment, net)
petri_utils.add_arc_from_to(payment, p7, net)
petri_utils.add_arc_from_to(p7, notification, net)
petri_utils.add_arc_from_to(notification, p8, net)
petri_utils.add_arc_from_to(p8, closure, net)
petri_utils.add_arc_from_to(closure, end, net)

# Add arc for document re-submission loop
petri_utils.add_arc_from_to(p3, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, p2, net)

# Add arc for in-depth investigation loop
petri_utils.add_arc_from_to(p4, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, p4, net)

# Define initial marking
im = Marking()
im[start] = 1

# Define final marking
fm = Marking()
fm[end] = 1
```

This Petri net captures the insurance claim management process with:

1. **Main flow**: start  C  CR  DV  FC  CA  AP  P  N  CL  end
2. **Document re-submission loop**: After DV (at p3), if documents are incomplete, RDS can occur and loop back to p2 (before DV)
3. **Investigation loop**: After FC (at p4), if investigation is needed, II can occur multiple times (self-loop at p4)

The initial marking places one token at the start, representing a new claim arriving. The final marking has one token at the end place, representing a successfully closed claim. The structure allows for the flexibility described in the scenario while maintaining the logical sequence of activities.