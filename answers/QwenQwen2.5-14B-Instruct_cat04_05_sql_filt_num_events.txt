To achieve the desired result, you can use a combination of window functions, filtering, and aggregation in DuckDB. Here's a step-by-step explanation of how you can construct the SQL query:

1. **Count Events per Case ID**: Use a window function to count the number of events per `case_id`.
2. **Filter Out Cases with More than Six Events**: Filter based on the count to exclude those `case_id`s with more than six events.
3. **Select Events from Remaining Cases**: Finally, select all events from the `case_id`s that passed the filter.

Here's the SQL query that implements the above steps:

```sql
WITH event_count AS (
    SELECT
        case_id,
        COUNT(*) OVER (PARTITION BY case_id) AS event_count
    FROM
        event_log
)
SELECT
    el.*
FROM
    event_log el
JOIN
    event_count ec
ON
    el.case_id = ec.case_id
WHERE
    ec.event_count <= 6;
```

Explanation:
- **WITH event_count AS (...)**: This common table expression (CTE) calculates the number of events per `case_id` using a window function (`COUNT(*) OVER (PARTITION BY case_id)`).
- **SELECT el.* FROM event_log el JOIN event_count ec ON el.case_id = ec.case_id WHERE ec.event_count <= 6**: This part of the query combines the original `event_log` with the `event_count` CTE on `case_id` and filters to include only those `case_id`s where the event count is 6 or fewer.

This query will return all events (`el.*`) from cases that have six or fewer events, effectively excluding any cases with more than six events.