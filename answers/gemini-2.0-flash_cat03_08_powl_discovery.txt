```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities as transitions
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()


# Define the loop for IQC and AS
# Loop between AS and IQC. We repeat IQC and then do AS again.
iqc_as_loop = OperatorPOWL(operator=Operator.LOOP, children=[AS, IQC])

# Define the loop for TST and RT
# Loop between TST and RT. After TST is performed, we can execute RT if needed and then TST again.
tst_rt_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])


# Define the choice for Labeling. Either do LB or skip.
labeling_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])


# Define the partial order
root = StrictPartialOrder(nodes=[OR, MS, QS, iqc_as_loop, tst_rt_loop, PK, labeling_choice, DP, D])

# Define the order relationships
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, iqc_as_loop) #goes to the AS activity from the iqc_as_loop
root.order.add_edge(iqc_as_loop, tst_rt_loop) # the loop of IQC and AS needs to finish, so goes to TST
root.order.add_edge(tst_rt_loop, PK)  # Testing complete, proceeds to Packaging
root.order.add_edge(PK, labeling_choice) # After packaging, decide if Labeling is needed
root.order.add_edge(labeling_choice, DP) # After labeling (or skipping), do Distribution Planning
root.order.add_edge(DP, D)
```

**Explanation:**

1.  **Transitions:** Each activity from the event log (OR, MS, QS, AS, IQC, TST, RT, PK, LB, DP, D) is represented as a `Transition` object. A `SilentTransition` (skip) is used to model the option of skipping the labeling step.
2.  **IQC/AS Loop:** The repeating sequence of IQC and AS is modeled as a `LOOP` operator. The execution of AS leads to the *exit* of the loop, the execution of IQC leads to the *repeat* of the loop, until we exit to TST
3.  **TST/RT Loop:** The repeating sequence of TST and RT is modeled as a `LOOP` operator. If testing fails (RT), it goes back to Testing, so we need the TST/RT loop.
4.  **Labeling Choice:** The optional labeling step is modeled using an `XOR` operator, providing a choice between performing the "LB" transition or skipping it (using the `skip` silent transition).
5.  **StrictPartialOrder:** A `StrictPartialOrder` is created to define the partial ordering of the entire process.  All nodes (transitions and operator nodes) are added to this partial order.
6.  **Order Relationships:**  The execution order between the different elements is defined using `add_edge()`. For example, `root.order.add_edge(OR, MS)` specifies that Material Sourcing (MS) can only begin after Order Received (OR) is complete. This accurately captures the dependency and potential concurrency implied by the event log.

This POWL model effectively represents the manufacturing and distribution process, including the iterative quality checks (IQC/AS loop), potential re-testing (TST/RT loop), and the optional labeling step, while also capturing the overall flow using partial ordering.
