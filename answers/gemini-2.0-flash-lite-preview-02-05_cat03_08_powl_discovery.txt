```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define Activities
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()

# Define Loops
iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[AS, IQC]) # Loop between AS and IQC - can repeat assembly after the IQC to address any issues.
test_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT]) # Loop between TST and RT (retesting)

# Define Choice
labeling_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip]) # Choice: LB or nothing

# Build Partial Order
root = StrictPartialOrder(nodes=[OR, MS, QS, iqc_loop, TST, test_loop, PK, labeling_choice, DP, D])

# Define Order
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, iqc_loop)  # After QS, either AS starts again (within loop) or AS starts
root.order.add_edge(QS, TST) # After QS, the process moves to TST which may also be skipped (as the AS-->IQC loop may be skipped.)
root.order.add_edge(iqc_loop, TST)  # Ensure iqc_loop completes before TST
root.order.add_edge(TST, test_loop) # After the first test, there might be retesting, if not, the loop is skipped, and moves on
root.order.add_edge(test_loop, PK)  # If there's a test-loop, it moves to PK
root.order.add_edge(TST, PK) # If there's no test_loop, then moves directly to PK
root.order.add_edge(PK, labeling_choice)
root.order.add_edge(labeling_choice, DP)
root.order.add_edge(DP, D)
```
