Here is the DuckDB SQL query that meets your requirements:

```sql
WITH SequentialCases AS (
    SELECT 
        e1.case_id
    FROM event_log e1
    JOIN event_log e2 ON e1.case_id = e2.case_id
    JOIN event_log e3 ON e1.case_id = e3.case_id
    WHERE 
        e1.activity = 'Approve Purchase Requisition' 
        AND e2.activity = 'Create Order' 
        AND e3.activity = 'Confirm Order'
        AND e1.timestamp < e2.timestamp 
        AND e2.timestamp < e3.timestamp
        AND NOT EXISTS (
            SELECT 1 FROM event_log ex
            WHERE ex.case_id = e1.case_id
            AND ex.timestamp > e1.timestamp
            AND ex.timestamp < e3.timestamp
            AND ex.activity NOT IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
        )
),
FilteredCases AS (
    SELECT DISTINCT sc.case_id
    FROM SequentialCases sc
    JOIN event_log eo ON sc.case_id = eo.case_id AND eo.activity = 'Create Order'
    JOIN event_log ec ON sc.case_id = ec.case_id AND ec.activity = 'Confirm Order'
    WHERE ec.timestamp > eo.timestamp + INTERVAL '5 days'
)
SELECT * 
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM FilteredCases);
```

### Explanation:
1. **`SequentialCases` CTE**  
   - Identifies cases (`case_id`) where the three activities appear **in direct succession** (i.e., no other activity in between).  
   - This is achieved using self-joins and ensuring the timestamps are in sequential order.  
   - The `NOT EXISTS` condition ensures no additional activities occur between them.

2. **`FilteredCases` CTE**  
   - Further filters the cases from `SequentialCases` where the time elapsed between 'Create Order' and 'Confirm Order' is **more than 5 days**.

3. **Final Selection**  
   - The main query selects all events **except** those belonging to cases that met both conditions.

This ensures the result contains events **only from cases that did not meet the filtering criteria**. ðŸš€