To solve this problem, we need to break it down into several steps:

1. **Identify cases with the specific sequence of activities**: We need to find cases where the activities 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' occur in direct succession.
2. **Filter cases based on the time condition**: Among the cases identified in step 1, we need to further filter those where the time between 'Create Order' and 'Confirm Order' is more than 5 days.
3. **Exclude these cases from the final result**: Finally, we need to return all events from the `event_log` table except those that belong to the cases identified in step 2.

Hereâ€™s how you can achieve this in DuckDB SQL:

```sql
WITH sequence_cases AS (
    SELECT 
        case_id
    FROM (
        SELECT 
            case_id,
            activity,
            timestamp,
            LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
            LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp,
            LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
            LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_timestamp
        FROM 
            event_log
    ) AS subquery
    WHERE 
        activity = 'Approve Purchase Requisition'
        AND next_activity = 'Create Order'
        AND next_next_activity = 'Confirm Order'
        AND DATE_DIFF('day', next_timestamp, next_next_timestamp) > 5
)
SELECT 
    *
FROM 
    event_log
WHERE 
    case_id NOT IN (SELECT case_id FROM sequence_cases);
```

### Explanation:

1. **`sequence_cases` CTE**:
   - We use window functions (`LEAD`) to look ahead in the event sequence for each `case_id`.
   - We check if the current activity is 'Approve Purchase Requisition', the next activity is 'Create Order', and the one after that is 'Confirm Order'.
   - We also check if the time difference between 'Create Order' and 'Confirm Order' is more than 5 days using `DATE_DIFF`.

2. **Final Query**:
   - We select all events from `event_log` where the `case_id` is not in the list of `case_id`s identified in the `sequence_cases` CTE.

This query ensures that only events from cases that do not meet the specified sequence and timing condition are returned.