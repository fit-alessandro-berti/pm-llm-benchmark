Let’s break this down step-by-step and construct a DuckDB SQL query that satisfies all the requirements.

### Objective:
- Identify cases with the exact sequence: `'Approve Purchase Requisition' → 'Create Order' → 'Confirm Order'` in direct succession (no intervening events).
- Among those, find cases where the time between `'Create Order'` and `'Confirm Order'` exceeds 5 days.
- Exclude all events from those cases from the final result, returning only events from cases that do *not* meet both conditions.

### Approach:
1. **Detect the sequence**: Use a `LEAD` window function to check for consecutive activities within each `case_id`, ordered by `timestamp`.
2. **Calculate time difference**: Compute the time elapsed between `'Create Order'` and `'Confirm Order'` for matching sequences.
3. **Identify cases to exclude**: Filter for cases with the sequence and time difference > 5 days.
4. **Return non-excluded events**: Select all events from `event_log` where the `case_id` is not in the excluded set.

Here’s the SQL query:

```sql
WITH SequenceCheck AS (
    -- Step 1: Detect the sequence and calculate time differences
    SELECT 
        case_id,
        activity,
        timestamp,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_timestamp
    FROM event_log
),
CasesToExclude AS (
    -- Step 2: Identify cases with the sequence and time condition
    SELECT DISTINCT case_id
    FROM SequenceCheck
    WHERE activity = 'Approve Purchase Requisition'
      AND next_activity = 'Create Order'
      AND next_next_activity = 'Confirm Order'
      AND DATEDIFF('day', next_timestamp, next_next_timestamp) > 5
)
-- Step 3: Return all events from cases not in the exclusion list
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM CasesToExclude)
ORDER BY case_id, timestamp;
```

### Explanation:

1. **`SequenceCheck` CTE**:
   - Uses `LEAD` to look ahead 1 and 2 rows within each `case_id`, ordered by `timestamp`.
   - `next_activity` and `next_next_activity` capture the subsequent activities.
   - `next_timestamp` and `next_next_timestamp` capture the timestamps of those activities.
   - This allows us to check for the sequence and compute time differences.

2. **`CasesToExclude` CTE**:
   - Filters for rows where:
     - `activity = 'Approve Purchase Requisition'`
     - `next_activity = 'Create Order'`
     - `next_next_activity = 'Confirm Order'`
   - Ensures direct succession because `LEAD` respects the `ORDER BY timestamp` within each `case_id`.
   - Uses `DATEDIFF('day', ...)` to calculate the time difference in days between `'Create Order'` and `'Confirm Order'`.
   - Applies the condition `> 5` days.
   - `DISTINCT case_id` ensures each case is listed only once.

3. **Main Query**:
   - Selects all rows from `event_log`.
   - Excludes cases identified in `CasesToExclude` using `NOT IN`.
   - Orders the result by `case_id` and `timestamp` for clarity.

### Assumptions:
- DuckDB’s `DATEDIFF` function is used with `'day'` as the unit (DuckDB supports this syntax).
- The `timestamp` column is a valid datetime type.
- If a case has multiple occurrences of the sequence, it’s excluded if *any* occurrence has a time difference > 5 days.

### Verification:
- Cases with the sequence but with ≤ 5 days between `'Create Order'` and `'Confirm Order'` remain in the result.
- Cases without the sequence entirely remain in the result.
- Cases with the sequence and > 5 days are fully excluded (all their events).

This query efficiently handles the requirements while leveraging DuckDB’s SQL capabilities. Let me know if you’d like me to refine it further!