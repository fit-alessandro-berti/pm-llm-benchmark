Below is the Python code to construct the accepting Petri net for the insurance claim management process as described. The Petri net includes places representing states between activities, transitions labeled with activity names, and arcs connecting them. It also handles loops for re-submission of documents and in-depth investigations.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet("Insurance_Claim_Management")

# Create places (states between activities)
start = PetriNet.Place("start")
cr_done = PetriNet.Place("claim_registered")
dv_done = PetriNet.Place("documents_verified")
dv_incomplete = PetriNet.Place("documents_incomplete")
rds_done = PetriNet.Place("documents_resubmitted")
fc_done = PetriNet.Place("fraud_checked")
fc_suspicious = PetriNet.Place("fraud_suspicious")
ii_done = PetriNet.Place("investigation_done")
ca_done = PetriNet.Place("claim_assessed")
ap_done = PetriNet.Place("claim_approved")
p_done = PetriNet.Place("payment_done")
n_done = PetriNet.Place("notification_sent")
end = PetriNet.Place("claim_closed")

# Add places to the net
net.places.add(start)
net.places.add(cr_done)
net.places.add(dv_done)
net.places.add(dv_incomplete)
net.places.add(rds_done)
net.places.add(fc_done)
net.places.add(fc_suspicious)
net.places.add(ii_done)
net.places.add(ca_done)
net.places.add(ap_done)
net.places.add(p_done)
net.places.add(n_done)
net.places.add(end)

# Create transitions (activities)
cr = PetriNet.Transition("Claim Registration", "CR")
dv = PetriNet.Transition("Document Verification", "DV")
rds = PetriNet.Transition("Re-Document Submission", "RDS")
fc = PetriNet.Transition("Fraud Check", "FC")
ii = PetriNet.Transition("In-depth Investigation", "II")
ca = PetriNet.Transition("Claim Assessment", "CA")
ap = PetriNet.Transition("Approval", "AP")
p = PetriNet.Transition("Payment", "P")
n = PetriNet.Transition("Notification", "N")
cl = PetriNet.Transition("Closure", "CL")

# Add transitions to the net
net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(rds)
net.transitions.add(fc)
net.transitions.add(ii)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl)

# Add arcs (connections between places and transitions)
petri_utils.add_arc_from_to(start, cr, net)
petri_utils.add_arc_from_to(cr, cr_done, net)

petri_utils.add_arc_from_to(cr_done, dv, net)
petri_utils.add_arc_from_to(dv, dv_done, net)
petri_utils.add_arc_from_to(dv, dv_incomplete, net)

petri_utils.add_arc_from_to(dv_incomplete, rds, net)
petri_utils.add_arc_from_to(rds, rds_done, net)
petri_utils.add_arc_from_to(rds_done, dv, net)  # Loop back to DV

petri_utils.add_arc_from_to(dv_done, fc, net)
petri_utils.add_arc_from_to(fc, fc_done, net)
petri_utils.add_arc_from_to(fc, fc_suspicious, net)

petri_utils.add_arc_from_to(fc_suspicious, ii, net)
petri_utils.add_arc_from_to(ii, ii_done, net)
petri_utils.add_arc_from_to(ii_done, fc, net)  # Loop back to FC

petri_utils.add_arc_from_to(fc_done, ca, net)
petri_utils.add_arc_from_to(ca, ca_done, net)

petri_utils.add_arc_from_to(ca_done, ap, net)
petri_utils.add_arc_from_to(ap, ap_done, net)

petri_utils.add_arc_from_to(ap_done, p, net)
petri_utils.add_arc_from_to(p, p_done, net)

petri_utils.add_arc_from_to(p_done, n, net)
petri_utils.add_arc_from_to(n, n_done, net)

petri_utils.add_arc_from_to(n_done, cl, net)
petri_utils.add_arc_from_to(cl, end, net)

# Define initial marking (token in 'start')
im = Marking()
im[start] = 1

# Define final marking (token in 'end')
fm = Marking()
fm[end] = 1

# Verify the net (optional)
print("Petri net constructed successfully.")
print("Initial marking:", im)
print("Final marking:", fm)
```

### Explanation:
1. **Places**: Represent states between activities (e.g., `start`, `claim_registered`, `documents_verified`, etc.).
2. **Transitions**: Represent activities (e.g., `Claim Registration`, `Document Verification`, etc.).
3. **Arcs**: Connect places to transitions and vice versa to model the flow of the process.
4. **Loops**:
   - If documents are incomplete (`dv_incomplete`), the process loops back to `Re-Document Submission (RDS)` and then back to `Document Verification (DV)`.
   - If fraud is suspected (`fc_suspicious`), the process loops back to `In-depth Investigation (II)` and then back to `Fraud Check (FC)`.
5. **Initial Marking (`im`)**: A token is placed in the `start` place, representing a new claim.
6. **Final Marking (`fm`)**: A token is placed in the `end` place, representing a closed claim.

This Petri net models the entire insurance claim process, including conditional loops for re-submission and investigations.