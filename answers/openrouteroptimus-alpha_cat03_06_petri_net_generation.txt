Sure! Below is Python code to **construct the accepting Petri net** for the described insurance claim management process, using the PM4Py classes and utilities (`PetriNet`, `Marking`, `petri_utils`). The constructed net handles all described activities, including the re-submission and in-depth investigation loops.

Key points:

- **Transitions** labeled as the activity names (all the tasks in your scenario).
- **Places** represent states in between activities or conditions (e.g., after registration, after DV, waiting for resubmission, etc.).
- **Loops** for RDS after DV and for II after FC.
- **Initial marking:** one token at the `start` place.
- **Final marking:** one token at the `closed` place, **after notification and closure**.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create Petri net object
net = PetriNet("Insurance Claim Process")

# Create all required places
start = PetriNet.Place("start")                          # Start of process (new claim)
after_CR = PetriNet.Place("after_CR")                    # After Claim Registration
after_DV = PetriNet.Place("after_DV")                    # After Document Verification, can go to FC or loop to RDS
waiting_RDS = PetriNet.Place("waiting_RDS")              # Waiting for Re-Document Submission
after_RDS = PetriNet.Place("after_RDS")                  # After Re-Document Submission (returns to DV)
after_FC = PetriNet.Place("after_FC")                    # After Fraud Check, can go to CA or to II (loop possible)
waiting_II = PetriNet.Place("waiting_II")                # Waiting for In-depth Investigation
after_II = PetriNet.Place("after_II")                    # After II (back to FC)
after_CA = PetriNet.Place("after_CA")                    # After Claim Assessment, approval may be needed
waiting_AP = PetriNet.Place("waiting_AP")                # Waiting for Approval
after_AP = PetriNet.Place("after_AP")                    # After Approval
after_P = PetriNet.Place("after_P")                      # After Payment
after_N = PetriNet.Place("after_N")                      # After Notification
closed = PetriNet.Place("closed")                        # Final place (archived/closed claim)

# Add places to the net
for p in [start, after_CR, after_DV, waiting_RDS, after_RDS,
          after_FC, waiting_II, after_II,
          after_CA, waiting_AP, after_AP,
          after_P, after_N, closed]:
    net.places.add(p)

# Create transitions (labeled)
C = PetriNet.Transition("C", "Insurance Claim")                  # Not strictly needed, but for completeness
CR = PetriNet.Transition("CR", "Claim Registration")
DV = PetriNet.Transition("DV", "Document Verification")
RDS = PetriNet.Transition("RDS", "Re-Document Submission")
FC = PetriNet.Transition("FC", "Fraud Check")
II = PetriNet.Transition("II", "In-depth Investigation")
CA = PetriNet.Transition("CA", "Claim Assessment")
AP = PetriNet.Transition("AP", "Approval")
P = PetriNet.Transition("P", "Payment")
N = PetriNet.Transition("N", "Notification")
CL = PetriNet.Transition("CL", "Closure")

# Add transitions to the net
for t in [CR, DV, RDS, FC, II, CA, AP, P, N, CL]:
    net.transitions.add(t)

# Add arcs (sequence and branches, including loops)

# Start -> Claim Registration
petri_utils.add_arc_from_to(start, CR, net)
petri_utils.add_arc_from_to(CR, after_CR, net)

# Claim Registration -> Document Verification
petri_utils.add_arc_from_to(after_CR, DV, net)
petri_utils.add_arc_from_to(DV, after_DV, net)

# Document Verification -> (either continue or need resubmission)
# On success, DV -> after_DV -> FC
petri_utils.add_arc_from_to(after_DV, FC, net)
petri_utils.add_arc_from_to(FC, after_FC, net)

# On failure, DV -> waiting_RDS, then RDS -> after_RDS -> DV (loop)
petri_utils.add_arc_from_to(after_DV, waiting_RDS, net)          # If documents incomplete
petri_utils.add_arc_from_to(waiting_RDS, RDS, net)
petri_utils.add_arc_from_to(RDS, after_RDS, net)
petri_utils.add_arc_from_to(after_RDS, DV, net)                  # Loop back to Doc Verification

# Fraud Check can loop with II
# On success, after_FC -> CA
petri_utils.add_arc_from_to(after_FC, CA, net)
petri_utils.add_arc_from_to(CA, after_CA, net)

# On doubt, after_FC -> waiting_II -> II -> after_II -> FC (loop)
petri_utils.add_arc_from_to(after_FC, waiting_II, net)
petri_utils.add_arc_from_to(waiting_II, II, net)
petri_utils.add_arc_from_to(II, after_II, net)
petri_utils.add_arc_from_to(after_II, FC, net)

# Claim Assessment -> Approval (if needed), else straight to Payment
petri_utils.add_arc_from_to(after_CA, waiting_AP, net)
petri_utils.add_arc_from_to(waiting_AP, AP, net)
petri_utils.add_arc_from_to(AP, after_AP, net)
petri_utils.add_arc_from_to(after_AP, P, net)
petri_utils.add_arc_from_to(after_CA, P, net)  # If approval not needed, direct payment

# Payment -> Notification
petri_utils.add_arc_from_to(P, after_P, net)
petri_utils.add_arc_from_to(after_P, N, net)
petri_utils.add_arc_from_to(N, after_N, net)

# After notification, Closure, then done
petri_utils.add_arc_from_to(after_N, CL, net)
petri_utils.add_arc_from_to(CL, closed, net)

# Initial marking: one token at start
im = Marking()
im[start] = 1

# Final marking: one token at closed
fm = Marking()
fm[closed] = 1

# -- The net, im, and fm are ready for use in conformance checking, replay, etc. --

# (Optional: Just to show the transitions and places)
print("Transitions (activity labels):", [t.label for t in net.transitions])
print("Places:", [p.name for p in net.places])
print("Initial marking:", {p.name: v for p, v in im.items()})
print("Final marking:", {p.name: v for p, v in fm.items()})
```

---

## Petri Net Structure

**Loops:**
- After DV, if documents are incomplete  `waiting_RDS`  RDS  back to DV (can repeat).
- After FC, if more check needed  `waiting_II`  II  back to FC (can repeat).

**Approval:**
- After claim assessment, if approval needed  Approval  Payment.
- If not needed, can go directly from CA to Payment.

---

**You can adapt the net further by, for example, adding silent transitions for conditions, but above code faithfully implements the scenario as described, using explicit control places.**