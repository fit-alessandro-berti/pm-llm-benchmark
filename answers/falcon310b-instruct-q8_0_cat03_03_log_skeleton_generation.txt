To construct the Python dictionary representing the Log Skeleton for the given scenario, we need to define each of the constraints with their respective sets of activities and occurrence counts. Hereâ€™s how you can structure the dictionary:

```python
log_skeleton = {
    'equivalence': set(),
    'always_before': {
        ('Receive Order', 'Check Availability'),
        ('Check Availability', 'Reserve Items'),
        ('Reserve Items', 'Pick Items'),
        ('Pick Items', 'Quality Check'),
        ('Quality Check', 'Pack Order'),
        ('Pack Order', 'Generate Shipping Label'),
        ('Generate Shipping Label', 'Dispatch'),
        ('Dispatch', 'Invoice Customer')
    },
    'always_after': {
        ('Invoice Customer', 'Record Payment')
    },
    'never_together': set(),
    'activ_freq': {
        'Receive Order': {1},
        'Check Availability': {1},
        'Reserve Items': {1},
        'Pick Items': {1},
        'Quality Check': {1},
        'Pack Order': {1},
        'Generate Shipping Label': {1},
        'Dispatch': {1},
        'Invoice Customer': {1},
        'Record Payment': {1}
    },
    'directly_follows': {
        ('Receive Order', 'Check Availability'),
        ('Check Availability', 'Reserve Items'),
        ('Reserve Items', 'Pick Items'),
        ('Pick Items', 'Quality Check'),
        ('Quality Check', 'Pack Order'),
        ('Pack Order', 'Generate Shipping Label'),
        ('Generate Shipping Label', 'Dispatch'),
        ('Dispatch', 'Invoice Customer'),
        ('Invoice Customer', 'Record Payment')
    }
}
```

**Explanation:**

- **'equivalence':** We have not specified any equivalence constraints because no activities in the scenario are required to have the same number of occurrences.

- **'always_before':** This set defines a sequence where each activity must occur before the next one, reflecting the natural flow of the order fulfillment process.

- **'always_after':** Only specifies that the 'Record Payment' activity must occur after 'Invoice Customer', capturing the business rule that payment recording is done post-invoice issuance.

- **'never_together':** This set is empty because no activities are specified to never occur together in the same case.

- **'activ_freq':** Each activity occurs exactly once per case, as indicated by the sets containing only the number 1.

- **'directly_follows':** This is a direct translation of the 'always_before' constraints, indicating immediate sequence between activities.

This structure ensures that the constraints reflect the logical flow and business rules of the order fulfillment process.