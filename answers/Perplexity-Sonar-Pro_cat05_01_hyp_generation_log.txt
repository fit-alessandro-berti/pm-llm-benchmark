Based on the provided event log data, several anomalies and undesirable behaviors can be identified:

1. Out-of-sequence activities:
In case_id 1002, "Confirm Shipment" and "Ship Goods" occur before "Perform Credit Check" and "Validate Stock". This violates the assumed normal process flow.

2. Missing activities:
Case_id 1003 is missing the "Validate Stock" activity.
Case_id 1004 is missing both "Perform Credit Check" and "Validate Stock" activities.

3. Early payment:
In case_id 1004, "Receive Payment" occurs immediately after "Register Order", before any other activities.

4. Delayed confirmations:
Case_id 1003 has a late "Confirm Shipment" activity, occurring after "Ship Goods".

To investigate these anomalies further, we can use the following SQL queries:

1. Identify orders with out-of-sequence activities:

```sql
SELECT case_id, 
       STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence
FROM order_event_log
GROUP BY case_id
HAVING STRING_AGG(activity, ' -> ' ORDER BY timestamp) NOT LIKE '%Register Order%Perform Credit Check%Validate Stock%Confirm Shipment%Ship Goods%Issue Invoice%Receive Payment%'
ORDER BY case_id;
```

2. Find orders with missing critical activities:

```sql
SELECT case_id
FROM order_event_log
GROUP BY case_id
HAVING COUNT(DISTINCT CASE WHEN activity IN ('Perform Credit Check', 'Validate Stock') THEN activity END) < 2
ORDER BY case_id;
```

3. Detect early payments:

```sql
SELECT e1.case_id, e1.timestamp AS payment_time, e2.timestamp AS order_time,
       e1.timestamp - e2.timestamp AS time_difference
FROM order_event_log e1
JOIN order_event_log e2 ON e1.case_id = e2.case_id
WHERE e1.activity = 'Receive Payment'
  AND e2.activity = 'Register Order'
  AND e1.timestamp < (
    SELECT timestamp 
    FROM order_event_log e3 
    WHERE e3.case_id = e1.case_id 
      AND e3.activity = 'Issue Invoice'
  )
ORDER BY time_difference;
```

4. Identify delayed shipment confirmations:

```sql
SELECT e1.case_id, e1.timestamp AS ship_time, e2.timestamp AS confirm_time,
       e2.timestamp - e1.timestamp AS delay
FROM order_event_log e1
JOIN order_event_log e2 ON e1.case_id = e2.case_id
WHERE e1.activity = 'Ship Goods'
  AND e2.activity = 'Confirm Shipment'
  AND e2.timestamp > e1.timestamp
ORDER BY delay DESC;
```

5. Analyze resource involvement in anomalous cases:

```sql
SELECT e.case_id, e.activity, e.resource, r.role, r.department
FROM order_event_log e
JOIN resources r ON e.resource = r.resource_id
WHERE e.case_id IN (
    SELECT case_id
    FROM order_event_log
    GROUP BY case_id
    HAVING COUNT(DISTINCT CASE WHEN activity IN ('Perform Credit Check', 'Validate Stock') THEN activity END) < 2
)
ORDER BY e.case_id, e.timestamp;
```

These queries will help investigate the hypotheses that:
1. Some orders are bypassing critical steps in the process.
2. Certain resources or departments might be involved in more anomalous cases than others.
3. There might be timing issues in the process, leading to out-of-sequence activities.
4. Some orders are receiving preferential treatment, possibly violating standard procedures.

By analyzing the results of these queries, we can gain insights into potential system errors, policy violations, or training issues that may be causing these anomalies in the order processing workflow.