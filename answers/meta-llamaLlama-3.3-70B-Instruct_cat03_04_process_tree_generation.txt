Here's a Python code example implementing a process tree for an hypothetical Purchase-to-Pay process using pm4py. 

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Create the root node with a parallel operator
root = ProcessTree(operator=Operator.PARALLEL)

# Create a sequence for the purchasing process
purchasing_seq = ProcessTree(operator=Operator.SEQUENCE, parent=root)
root.children.append(purchasing_seq)

# Create activities for the purchasing process
create_purchase_order = ProcessTree(label="Create Purchase Order", parent=purchasing_seq)
purchasing_seq.children.append(create_purchase_order)
receive_goods = ProcessTree(label="Receive Goods", parent=purchasing_seq)
purchasing_seq.children.append(receive_goods)
inspect_goods = ProcessTree(label="Inspect Goods", parent=purchasing_seq)
purchasing_seq.children.append(inspect_goods)

# Create a sequence for the payment process
payment_seq = ProcessTree(operator=Operator.SEQUENCE, parent=root)
root.children.append(payment_seq)

# Create activities for the payment process
create_invoice = ProcessTree(label="Create Invoice", parent=payment_seq)
payment_seq.children.append(create_invoice)
verify_invoice = ProcessTree(label="Verify Invoice", parent=payment_seq)
payment_seq.children.append(verify_invoice)
make_payment = ProcessTree(label="Make Payment", parent=payment_seq)
payment_seq.children.append(make_payment)

# Create a loop for the payment processing
payment_loop = ProcessTree(operator=Operator.LOOP, parent=root)
root.children.append(payment_loop)

# Create activities for the payment processing loop
process_payment = ProcessTree(label="Process Payment", parent=payment_loop)
payment_loop.children.append(process_payment)
resolve_disputes = ProcessTree(label="Resolve Disputes", parent=payment_loop)
payment_loop.children.append(resolve_disputes)

print("Process Tree Created:")
print("Root Operator:", root.operator)
for child in root.children:
    print("Child Operator:", child.operator)
    if child.operator == Operator.SEQUENCE or child.operator == Operator.LOOP:
        for grandchild in child.children:
            print("Grandchild Label:", grandchild.label)
```

This process tree represents the following Purchase-to-Pay process:

1.  A purchase order is created.
2.  Goods are received and inspected.
3.  An invoice is created and verified.
4.  Payment is made.
5.  A payment loop is executed, where payment is processed and disputes are resolved until all payments are complete.

Note: pm4py provides methods for visualizing process trees and calculating metrics like throughput time, cycle time, and Waiting time, which are not implemented in this example. To use these features, visit the [pm4py documentation](https://pm4py.fit.fraunhofer.de/static/doc/).