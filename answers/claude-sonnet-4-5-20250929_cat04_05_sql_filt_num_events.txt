# DuckDB SQL Query Solution

```sql
SELECT e.*
FROM event_log e
WHERE e.case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
ORDER BY e.case_id, e.timestamp;
```

## Alternative Solutions

### Solution 2: Using Window Function
```sql
SELECT case_id, activity, timestamp
FROM (
    SELECT *,
           COUNT(*) OVER (PARTITION BY case_id) as events_per_case
    FROM event_log
) subquery
WHERE events_per_case <= 6
ORDER BY case_id, timestamp;
```

### Solution 3: Using CTE (Common Table Expression)
```sql
WITH case_counts AS (
    SELECT case_id,
           COUNT(*) as event_count
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
SELECT e.*
FROM event_log e
INNER JOIN case_counts cc ON e.case_id = cc.case_id
ORDER BY e.case_id, e.timestamp;
```

### Solution 4: Using QUALIFY (DuckDB-specific)
```sql
SELECT *
FROM event_log
QUALIFY COUNT(*) OVER (PARTITION BY case_id) <= 6
ORDER BY case_id, timestamp;
```

## Explanation

**Primary Solution Breakdown:**
1. **Subquery**: Groups events by `case_id` and counts events per case
2. **HAVING clause**: Filters to keep only cases with  6 events
3. **Main query**: Returns all columns for events whose `case_id` passed the filter
4. **ORDER BY**: Organizes results by case and chronological order

## Performance Considerations

- **Solution 1 (Subquery with IN)**: Good for most scenarios, clear and readable
- **Solution 2 (Window Function)**: Scans the table once but calculates count for every row
- **Solution 4 (QUALIFY)**: Most concise and DuckDB-optimized, recommended for best performance
- **Solution 3 (CTE with JOIN)**: Most explicit, useful for debugging or further extensions

## Test Example

```sql
-- Sample data
CREATE TABLE event_log AS
SELECT * FROM (VALUES
    (1, 'A', '2024-01-01 10:00:00'::TIMESTAMP),
    (1, 'B', '2024-01-01 10:05:00'::TIMESTAMP),
    (2, 'A', '2024-01-01 11:00:00'::TIMESTAMP),
    (2, 'B', '2024-01-01 11:05:00'::TIMESTAMP),
    (2, 'C', '2024-01-01 11:10:00'::TIMESTAMP),
    (2, 'D', '2024-01-01 11:15:00'::TIMESTAMP),
    (2, 'E', '2024-01-01 11:20:00'::TIMESTAMP),
    (2, 'F', '2024-01-01 11:25:00'::TIMESTAMP),
    (2, 'G', '2024-01-01 11:30:00'::TIMESTAMP)
) AS t(case_id, activity, timestamp);

-- Result: Only case_id = 1 events returned (2 events  6)
-- case_id = 2 excluded (7 events > 6)
```

**Recommended Solution: #4 (QUALIFY)** for its simplicity and DuckDB optimization.