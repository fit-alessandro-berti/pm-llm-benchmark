### POWL Model for the Manufacturing and Distribution Process

Based on the event log, the process can be modeled using POWL with the following structure:

1. **Activities (Transitions)**:
   - `OR`: Order Received
   - `MS`: Material Sourcing
   - `QS`: Quality Screening
   - `AS`: Assembly
   - `IQC`: In-line Quality Check
   - `TST`: Testing
   - `RT`: Re-Testing
   - `PK`: Packaging
   - `LB`: Labeling (optional, may be skipped)
   - `DP`: Distribution Planning
   - `D`: Dispatch

2. **Operators**:
   - **Loop (`*`)** for the testing and re-testing cycle (`TST` and `RT`).
   - **Choice (`X`)** for the optional `LB` activity (Labeling may be skipped).

3. **Partial Order**:
   - The process starts with `OR`, followed by `MS`, `QS`, and `AS`.
   - After `AS`, there is a loop between `IQC` and `AS` (repeated until quality is acceptable).
   - After the loop, `TST` is performed, followed by a loop between `RT` and `TST` (repeated until the product passes testing).
   - After testing, `PK` is mandatory, followed by a choice between `LB` (optional) and skipping it.
   - After `LB` (or skipping it), `DP` and `D` are performed in sequence.

### POWL Structure:

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions (activities)
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()  # For skipping LB

# Define the loop for IQC and AS
iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])

# Define the loop for TST and RT
test_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Define the choice for LB (either LB or skip)
label_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

# Define the root partial order
root = StrictPartialOrder(nodes=[
    OR, MS, QS, AS, iqc_loop, test_loop, PK, label_choice, DP, D
])

# Define the order between nodes
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, AS)
root.order.add_edge(AS, iqc_loop)
root.order.add_edge(iqc_loop, test_loop)
root.order.add_edge(test_loop, PK)
root.order.add_edge(PK, label_choice)
root.order.add_edge(label_choice, DP)
root.order.add_edge(DP, D)
```

### Explanation:
1. **Sequential Steps**:
   - `OR`  `MS`  `QS`  `AS` are strictly sequential.
2. **Loops**:
   - `AS`  `IQC`  `AS` (repeated until quality is acceptable).
   - `TST`  `RT`  `TST` (repeated until testing passes).
3. **Choice**:
   - After `PK`, there is a choice between `LB` (optional) or skipping it (`skip`).
4. **Final Steps**:
   - After `LB` (or skipping it), `DP` and `D` are performed in sequence.

This POWL model captures the partial ordering, concurrency (where applicable), loops, and choices in the manufacturing and distribution process.