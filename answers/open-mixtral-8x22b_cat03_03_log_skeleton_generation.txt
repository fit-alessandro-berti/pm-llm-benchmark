Here is a Python dictionary representing the Log Skeleton for the given scenario based on the constraints defined:

```python
log_skeleton = {
    'equivalence': set(),  # No equivalence constraint in this scenario
    'always_before': {('RO', 'IC')},  # Invoice Customer should always be after Receive Order
    'always_after': {('D', 'RP')},  # Record Payment should always be after Dispatch
    'never_together': {('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC')},
    # No two activities can co-exist inside the same case
    'activ_freq': {'RO': {1}, 'CA': {1}, 'RI': {1}, 'PI': {1}, 'QC': {1}, 'PO': {1}, 'GSL': {1}, 'D': {1}, 'IC': {1}, 'RP': {1}},
    # Each activity occurs exactly once
    'directly_follows': {('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')}
    # The order of activities in the process
}
```

This Log Skeleton ensures the correct order of activities, prevents certain activities from happening together, and sets the frequency of each activity. The actual implementation and constraints may vary depending on the specific requirements of the distribution center.