To accomplish this task using DuckDB SQL, we can break down the problem into several steps. Here's the complete SQL query to achieve the desired results:

1. Determine the sequence of activities for each `case_id`, maintaining the order imposed by `timestamp`.
2. Group cases by their complete activity sequence to identify unique process variants.
3. Count how many cases correspond to each variant and determine the top K variants by their frequency.
4. Return all events from the original event log that belong only to cases which are part of these top K variants.

Assuming `K` is a parameter we need to define, here's how you can construct the query:

```sql
WITH ordered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS row_num
    FROM event_log
),
sequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, ',' ORDER BY row_num) as sequence
    FROM ordered_events
    GROUP BY case_id
),
variant_counts AS (
    SELECT
        sequence,
        COUNT(*) as variant_count
    FROM sequences
    GROUP BY sequence
),
top_k_variants AS (
    SELECT
        sequence
    FROM variant_counts
    ORDER BY variant_count DESC
    LIMIT K
)
SELECT
    e.*
FROM
    event_log e
JOIN
    sequences s
ON
    e.case_id = s.case_id
WHERE
    s.sequence IN (SELECT sequence FROM top_k_variants);
```

### Explanation:

1. **ordered_events CTE**:
   - This Common Table Expression (CTE) adds a row number to each event within each `case_id` based on the `timestamp`.

2. **sequences CTE**:
   - This CTE aggregates the sequence of activities for each `case_id` into a single string, maintaining the order.

3. **variant_counts CTE**:
   - This CTE groups by the activity sequences and counts the number of cases for each sequence.

4. **top_k_variants CTE**:
   - This CTE selects the top K most frequent sequences based on their counts.

5. **Final SELECT**:
   - The final query joins the original `event_log` with the `sequences` CTE to filter and return only the events from cases that belong to the top K variants.

### Usage:
- Replace `K` with the desired number of top variants you want to consider.

This query ensures that you correctly extract the ordered sequence of activities per case, aggregate and count cases per variant, filter down to the top K variants, and return the corresponding events from those filtered cases.