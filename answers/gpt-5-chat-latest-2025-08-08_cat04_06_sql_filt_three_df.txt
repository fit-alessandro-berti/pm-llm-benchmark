Alright — let's break this down step-by-step.

We are working with a DuckDB table named `event_log` with:

- `case_id`
- `activity`
- `timestamp`

We need to:

1. Detect cases where **exactly in direct succession** we have three events:

```
'Approve Purchase Requisition'
'Create Order'
'Confirm Order'
```

2. In such cases, check that the time difference between the `Create Order` and `Confirm Order` is MORE than **5 days**.

3. Remove *all events* from such cases from the final result.

---

## **Plan**

DuckDB allows `LAG()` in window functions so we can compare preceding rows in the same `case_id`.

We can:

- Order by timestamp per case.
- Assign a row number to each event.
- Look at each row and check if:

  - Current row: 'Approve Purchase Requisition'
  - Next row: 'Create Order'
  - Next-next row: 'Confirm Order'

- Also check time difference between `Create Order` and `Confirm Order` (`> 5 days`).

---

## **SQL Query**

```sql
WITH ordered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
    FROM event_log
),
sequence_matches AS (
    SELECT
        e1.case_id
    FROM ordered_events e1
    JOIN ordered_events e2
      ON e1.case_id = e2.case_id AND e2.rn = e1.rn + 1
    JOIN ordered_events e3
      ON e1.case_id = e3.case_id AND e3.rn = e1.rn + 2
    WHERE e1.activity = 'Approve Purchase Requisition'
      AND e2.activity = 'Create Order'
      AND e3.activity = 'Confirm Order'
      AND DATE_DIFF('day', e2.timestamp, e3.timestamp) > 5
),
cases_to_exclude AS (
    SELECT DISTINCT case_id
    FROM sequence_matches
)
SELECT ev.*
FROM event_log ev
WHERE ev.case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY ev.case_id, ev.timestamp;
```

---

### **Explanation**

1. **`ordered_events`**  
   We order all events per `case_id` by `timestamp` and assign a sequential number (`rn`). This allows us to check events in direct succession.

2. **`sequence_matches`**  
   We self-join the table three times:
   - `e1`: current event  
   - `e2`: next event in the sequence  
   - `e3`: event after that  

   We check the **exact required activity names** and ensure they are consecutive by position (`rn`).

   We also ensure the timing condition:
   ```sql
   DATE_DIFF('day', e2.timestamp, e3.timestamp) > 5
   ```
   This measures full days between *Create Order* and *Confirm Order*.

3. **`cases_to_exclude`**  
   We identify all distinct `case_id`s that match the sequence **and** exceed the time threshold.

4. **Final SELECT**  
   We return all rows from `event_log` *except* those with `case_id`s in `cases_to_exclude`.

---

 **Result:**  
This query drops entire cases from the output if they contain the exact consecutive sequence **Approve  Create  Confirm** with more than 5 days gap between Create and Confirm.

---

Do you want me to **adapt this query** so that it only removes **the specific matching block of events** rather than excluding the whole case?