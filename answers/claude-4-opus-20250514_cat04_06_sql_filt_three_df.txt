I'll write a DuckDB SQL query to solve this step by step.

```sql
WITH ordered_events AS (
    -- First, order events by case and timestamp
    SELECT 
        case_id,
        activity,
        timestamp,
        LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) as prev_activity_1,
        LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) as prev_activity_2,
        LAG(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) as prev_timestamp_1,
        LAG(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) as prev_timestamp_2
    FROM event_log
),
sequence_matches AS (
    -- Identify where the specific sequence occurs
    SELECT 
        case_id,
        timestamp as confirm_order_timestamp,
        prev_timestamp_1 as create_order_timestamp
    FROM ordered_events
    WHERE 
        activity = 'Confirm Order'
        AND prev_activity_1 = 'Create Order'
        AND prev_activity_2 = 'Approve Purchase Requisition'
),
cases_to_exclude AS (
    -- Filter sequences where Create Order to Confirm Order > 5 days
    SELECT DISTINCT case_id
    FROM sequence_matches
    WHERE confirm_order_timestamp - create_order_timestamp > INTERVAL '5 days'
)
-- Return all events except those from excluded cases
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, timestamp;
```

This query works as follows:

1. **ordered_events CTE**: Uses window functions to look at the previous two activities and timestamps for each event within a case. This allows us to check for the specific sequence pattern.

2. **sequence_matches CTE**: Identifies rows where the current activity is 'Confirm Order' and the two previous activities (in order) are 'Create Order' and 'Approve Purchase Requisition'. This ensures we find the exact sequence with no intervening events.

3. **cases_to_exclude CTE**: From the matching sequences, filters only those where the time between 'Create Order' and 'Confirm Order' exceeds 5 days, and extracts the distinct case IDs.

4. **Final SELECT**: Returns all events from the original table except those belonging to the excluded cases.

The query ensures that:
- The three activities appear in exact succession (no events in between)
- The time condition is checked only for the specific sequence occurrence
- All events from qualifying cases are excluded from the final result