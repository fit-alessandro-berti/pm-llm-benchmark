```python
# DECLARE model – Product Design & Launch (Manufacturing Company)

declare_model = {
    # ---------------  Unary templates ---------------
    # “The trace must start with Idea Generation”
    'init': {
        'Idea Generation (IG)': (1.0, 1.0)
    },

    # “Exactly one Approval Gate and exactly one Final Launch must occur”
    'exactly_one': {
        'Approval Gate (AG)': (1.0, 1.0),
        'Final Launch (FL)':  (1.0, 1.0)
    },

    # “Both Approval Gate and Final Launch must occur at least once”
    'existence': {
        'Approval Gate (AG)': (1.0, 1.0),
        'Final Launch (FL)':  (1.0, 1.0)
    },

    # (no activity is globally forbidden in this scenario)
    'absence': {},


    # ---------------  Binary templates ---------------
    # Responded-existence: if the left-hand activity appears, the right-hand one
    # must appear (at any moment, before OR after)
    'responded_existence': {
        ('Design Draft (DD)',            'Technical Feasibility Check (TFC)'): (1.0, 1.0),
        ('Technical Feasibility Check (TFC)', 'Cost Evaluation (CE)'):         (1.0, 1.0),
        ('Cost Evaluation (CE)',         'Prototype Creation (PC)'):          (1.0, 1.0),
        ('Prototype Creation (PC)',      'Laboratory Testing (LT)'):          (1.0, 1.0),
        ('Laboratory Testing (LT)',      'User Testing (UT)'):                (1.0, 1.0),
        ('User Testing (UT)',            'Approval Gate (AG)'):               (1.0, 1.0),
        ('Approval Gate (AG)',           'Marketing Plan (MP)'):              (1.0, 1.0),
        ('Marketing Plan (MP)',          'Final Launch (FL)'):                (1.0, 1.0)
    },

    # Co-existence: if one appears, the other MUST appear and vice-versa
    'coexistence': {
        ('Prototype Creation (PC)', 'Laboratory Testing (LT)'): (1.0, 1.0)
    },

    # Response: every occurrence of the left-hand event is eventually followed by the right-hand one
    'response': {
        ('Prototype Creation (PC)', 'Laboratory Testing (LT)'): (1.0, 1.0),
        ('Laboratory Testing (LT)', 'User Testing (UT)'):       (1.0, 1.0),
        ('User Testing (UT)',       'Approval Gate (AG)'):      (1.0, 1.0),
        ('Approval Gate (AG)',      'Final Launch (FL)'):       (1.0, 1.0)
    },

    # Precedence: the right-hand event can only occur if the left-hand one has already happened
    'precedence': {
        ('Technical Feasibility Check (TFC)', 'Cost Evaluation (CE)'): (1.0, 1.0),
        ('Design Draft (DD)',                 'Technical Feasibility Check (TFC)'): (1.0, 1.0),
        ('Cost Evaluation (CE)',              'Prototype Creation (PC)'): (1.0, 1.0),
        ('Laboratory Testing (LT)',           'User Testing (UT)'): (1.0, 1.0),
        ('Approval Gate (AG)',                'Final Launch (FL)'): (1.0, 1.0)
    },

    # Succession = Precedence + Response (order + both must occur)
    'succession': {
        ('Design Draft (DD)',                 'Technical Feasibility Check (TFC)'): (1.0, 1.0),
        ('Technical Feasibility Check (TFC)', 'Cost Evaluation (CE)'):              (1.0, 1.0),
        ('Cost Evaluation (CE)',              'Prototype Creation (PC)'):           (1.0, 1.0),
        ('Prototype Creation (PC)',           'Laboratory Testing (LT)'):           (1.0, 1.0),
        ('Laboratory Testing (LT)',           'User Testing (UT)'):                 (1.0, 1.0),
        ('User Testing (UT)',                 'Approval Gate (AG)'):                (1.0, 1.0),
        ('Approval Gate (AG)',                'Marketing Plan (MP)'):               (1.0, 1.0),
        ('Marketing Plan (MP)',               'Final Launch (FL)'):                 (1.0, 1.0)
    },

    # No alternative, non- variants used in this example
    'altresponse':      {},
    'altprecedence':    {},
    'altsuccession':    {},

    # Chain-response: the right-hand activity must occur immediately after the left-hand one
    'chainresponse': {
        ('Approval Gate (AG)', 'Marketing Plan (MP)'): (1.0, 1.0),
        ('Marketing Plan (MP)', 'Final Launch (FL)'):  (1.0, 1.0)
    },

    # Chain-precedence: the left-hand activity must occur immediately before the right-hand one
    'chainprecedence': {
        ('Idea Generation (IG)', 'Design Draft (DD)'): (1.0, 1.0)
    },

    # Chain-succession: combination of the two above (immediately before AND after)
    'chainsuccession': {
        ('Marketing Plan (MP)', 'Final Launch (FL)'):  (1.0, 1.0)
    },

    # Negative templates not used here
    'noncoexistence':        {},
    'nonsuccession':         {},
    'nonchainsuccession':    {}
}
```


The dictionary can be passed directly to pm4py to instantiate a DECLARE net.  
All supports are fixed to 1 · 0 (observed in every trace) and confidences to 1 · 0 (the constraints always hold) according to the requirement in the prompt.