```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance Claim Process")

# Create Places
# Places represent states or conditions between activities
p_start = PetriNet.Place(name="p_start") # Represents a new claim arriving
p_registered = PetriNet.Place(name="p_registered") # Claim has been registered, ready for DV
p_after_dv_check = PetriNet.Place(name="p_after_dv_check") # Documents verified, outcome needs splitting
p_docs_incomplete = PetriNet.Place(name="p_docs_incomplete") # Docs are incomplete, needs RDS
p_after_rds = PetriNet.Place(name="p_after_rds") # Docs resubmitted, needs re-verification
p_docs_verified_ok = PetriNet.Place(name="p_docs_verified_ok") # Docs are verified and okay, ready for FC
p_after_fc_check = PetriNet.Place(name="p_after_fc_check") # Fraud checked, outcome needs splitting
p_fraud_doubtful = PetriNet.Place(name="p_fraud_doubtful") # Fraud is doubtful, needs II
p_after_ii = PetriNet.Place(name="p_after_ii") # Investigation done, needs re-check
p_fraud_ok = PetriNet.Place(name="p_fraud_ok") # Fraud check okay, ready for CA
p_before_ca = PetriNet.Place(name="p_before_ca") # Ready for Claim Assessment
p_after_ca = PetriNet.Place(name="p_after_ca") # Claim Assessed, ready for AP
p_after_ap = PetriNet.Place(name="p_after_ap") # Claim Approved, ready for Payment
p_after_p = PetriNet.Place(name="p_after_p") # Payment done, ready for Notification
p_after_n = PetriNet.Place(name="p_after_n") # Notification sent, ready for Closure
p_end = PetriNet.Place(name="p_end") # Final state: Claim is closed

# Add Places to the net
net.places.add(p_start)
net.places.add(p_registered)
net.places.add(p_after_dv_check)
net.places.add(p_docs_incomplete)
net.places.add(p_after_rds)
net.places.add(p_docs_verified_ok)
net.places.add(p_after_fc_check)
net.places.add(p_fraud_doubtful)
net.places.add(p_after_ii)
net.places.add(p_fraud_ok)
net.places.add(p_before_ca)
net.places.add(p_after_ca)
net.places.add(p_after_ap)
net.places.add(p_after_p)
net.places.add(p_after_n)
net.places.add(p_end)


# Create Transitions
# Transitions represent activities. Silent transitions (label=None) are used for routing/splits.
t_CR = PetriNet.Transition(name="t_CR", label="Claim Registration")
t_DV = PetriNet.Transition(name="t_DV", label="Document Verification")
t_RDS = PetriNet.Transition(name="t_RDS", label="Re-Document Submission")
t_FC = PetriNet.Transition(name="t_FC", label="Fraud Check")
t_II = PetriNet.Transition(name="t_II", label="In-depth Investigation")
t_CA = PetriNet.Transition(name="t_CA", label="Claim Assessment")
t_AP = PetriNet.Transition(name="t_AP", label="Approval")
t_P = PetriNet.Transition(name="t_P", label="Payment")
t_N = PetriNet.Transition(name="t_N", label="Notification")
t_CL = PetriNet.Transition(name="t_CL", label="Closure")

# Silent transitions for splitting paths based on outcomes
t_split_dv_ok = PetriNet.Transition(name="t_split_dv_ok", label=None)
t_split_dv_incomplete = PetriNet.Transition(name="t_split_dv_incomplete", label=None)
t_split_fc_ok = PetriNet.Transition(name="t_split_fc_ok", label=None)
t_split_fc_doubtful = PetriNet.Transition(name="t_split_fc_doubtful", label=None)
# Silent transition for joining paths before CA (assuming both DV-OK and FC-OK lead to CA)
t_join_for_ca = PetriNet.Transition(name="t_join_for_ca", label=None)


# Add Transitions to the net
net.transitions.add(t_CR)
net.transitions.add(t_DV)
net.transitions.add(t_RDS)
net.transitions.add(t_FC)
net.transitions.add(t_II)
net.transitions.add(t_CA)
net.transitions.add(t_AP)
net.transitions.add(t_P)
net.transitions.add(t_N)
net.transitions.add(t_CL)

net.transitions.add(t_split_dv_ok)
net.transitions.add(t_split_dv_incomplete)
net.transitions.add(t_split_fc_ok)
net.transitions.add(t_split_fc_doubtful)
net.transitions.add(t_join_for_ca)

# Add Arcs
# Initial flow
petri_utils.add_arc_from_to(p_start, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p_registered, net) # After CR, ready for DV

# DV and RDS Loop
petri_utils.add_arc_from_to(p_registered, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p_after_dv_check, net)
petri_utils.add_arc_from_to(p_after_dv_check, t_split_dv_ok, net) # Split: Docs OK path
petri_utils.add_arc_from_to(p_after_dv_check, t_split_dv_incomplete, net) # Split: Docs Incomplete path
petri_utils.add_arc_from_to(t_split_dv_incomplete, p_docs_incomplete, net)
petri_utils.add_arc_from_to(p_docs_incomplete, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_after_rds, net)
petri_utils.add_arc_from_to(p_after_rds, p_registered, net) # Loop back to before DV

# FC and II Loop
petri_utils.add_arc_from_to(t_split_dv_ok, p_docs_verified_ok, net) # After DV OK, ready for FC
petri_utils.add_arc_from_to(p_docs_verified_ok, t_FC, net)
petri_utils.add_arc_from_to(t_FC, p_after_fc_check, net)
petri_utils.add_arc_from_to(p_after_fc_check, t_split_fc_ok, net) # Split: Fraud OK path
petri_utils.add_arc_from_to(p_after_fc_check, t_split_fc_doubtful, net) # Split: Fraud Doubtful path
petri_utils.add_arc_from_to(t_split_fc_doubtful, p_fraud_doubtful, net)
petri_utils.add_arc_from_to(p_fraud_doubtful, t_II, net)
petri_utils.add_arc_from_to(t_II, p_after_ii, net)
petri_utils.add_arc_from_to(p_after_ii, p_docs_verified_ok, net) # Loop back to before FC

# Main flow continues after loops resolve (implicitly via tokens reaching subsequent places)
petri_utils.add_arc_from_to(t_split_fc_ok, p_fraud_ok, net) # After FC OK, ready for CA

# Merge before CA (both successful paths lead here)
# In this model, p_fraud_ok is the place *before* CA, reached after successful DV and FC.
# The loops bring tokens back to p_registered (before DV) or p_docs_verified_ok (before FC).
# So, p_fraud_ok is the single entry point to CA.
petri_utils.add_arc_from_to(p_fraud_ok, t_join_for_ca, net) # Use a silent transition to make join explicit
petri_utils.add_arc_from_to(t_join_for_ca, p_before_ca, net)

# Remaining sequence
petri_utils.add_arc_from_to(p_before_ca, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p_after_ca, net)
petri_utils.add_arc_from_to(p_after_ca, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p_after_ap, net)
petri_utils.add_arc_from_to(p_after_ap, t_P, net)
petri_utils.add_arc_from_to(t_P, p_after_p, net)
petri_utils.add_arc_from_to(p_after_p, t_N, net)
petri_utils.add_arc_from_to(t_N, p_after_n, net)
petri_utils.add_arc_from_to(p_after_n, t_CL, net)
petri_utils.add_arc_from_to(t_CL, p_end, net)

# Define Initial Marking
im = Marking()
im[p_start] = 1 # A new claim starts with a token in the 'start' place

# Define Final Marking
fm = Marking()
fm[p_end] = 1 # A successfully processed and closed claim ends with a token in the 'end' place

# The Petri net 'net' with initial marking 'im' and final marking 'fm' constitutes the accepting Petri net.

# You can optionally print some information about the constructed net
print(f"Petri Net: {net.name}")
print(f"Number of Places: {len(net.places)}")
print(f"Number of Transitions: {len(net.transitions)}")
print(f"Number of Arcs: {len(net.arcs)}")
print(f"Initial Marking: {dict(im)}")
print(f"Final Marking: {dict(fm)}")

# Example of accessing elements (optional)
# print("\nPlaces:")
# for p in net.places:
#     print(f"- {p.name}")
# print("\nTransitions:")
# for t in net.transitions:
#      print(f"- {t.name} (Label: {t.label})")
# print("\nArcs:")
# for a in net.arcs:
#     print(f"- {a.source.name} -> {a.target.name}")
```