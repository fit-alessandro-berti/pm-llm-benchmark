To address this task using DuckDB SQL, you can follow these steps:

1. **Count Events per Case**: First, create a subquery that counts the number of events for each `case_id`.
2. **Filter Cases by Event Count**: Filter out `case_id`s with more than six events.
3. **Join Back to Get Full Details**: Join back the filtered list of cases with the original event log table to retrieve all columns and rows associated with these qualifying cases.

Here is a SQL query that accomplishes this:

```sql
WITH case_event_count AS (
    SELECT case_id, COUNT(*) as event_count
    FROM event_log
    GROUP BY case_id
),
filtered_cases AS (
    SELECT case_id 
    FROM case_event_count 
    WHERE event_count <= 6
)
SELECT el.*
FROM event_log el
JOIN filtered_cases fc ON el.case_id = fc.case_id;
```

### Explanation:
- **case_event_count**: This Common Table Expression (CTE) calculates the number of events for each `case_id`.
- **filtered_cases**: This CTE filters out cases where the count is greater than 6, retaining only those with six or fewer events.
- The final `SELECT` statement performs a join between the original `event_log` and the list of filtered cases to return all columns from `event_log` for these specific `case_id`s.

This approach ensures that you correctly filter down to cases with six or fewer events, then retrieve the complete event details for those qualifying cases.