# **Merged Event Log: Integrated Order Fulfillment Timeline**

Below is the merged event log combining **Log A (System A)** and **Log B (System B)** for `order_id = Order#1234`. Events are aligned where possible, enriched with attributes from both logs, and presented in chronological order. Timestamps are normalized to UTC and used from **Log A** as the primary timeline, unless otherwise justified.

---

##  **Final Merged Event Log (Chronological Order)**

| Timestamp (Primary) | Event Type (Unified) | Order ID     | Source(s) | User ID | Resource ID | Notes |
|---------------------|------------------------|--------------|-----------|---------|-------------|-------|
| 2023-10-10T10:00:00Z | Order Received         | Order#1234   | A, B      | u45     | r10         | Event captured at warehouse system |
| 2023-10-10T10:01:30Z | Order Validated        | Order#1234   | A, B      | u12     | r10         | Cross-check inventory |
| 2023-10-10T10:02:00Z | Payment Processed      | Order#1234   | A, B      | u12     | r99         | Payment gateway delay |
| 2023-10-10T10:03:00Z | Quality Check          | Order#1234   | B         | u45     | r11         | Random inspection |
| 2023-10-10T10:05:00Z | Item Shipped           | Order#1234   | A, B      | u45     | r10         | Package handed to courier |
| 2023-10-10T10:20:00Z | Item Delivered         | Order#1234   | A         | —       | —           | — |

---

##  **Matching & Merging Logic**

### **1. Matching Strategy**
Events were matched based on:
- **Order ID**: All events pertain to `Order#1234`, so this is consistent.
- **Event Semantics**: Despite naming differences, similar business meanings were used to align events.
- **Timestamp Proximity**: A tolerance window of **±2 seconds** was applied. If timestamps were within this range, events were considered potentially the same.

---

### **2. Event-by-Event Alignment**

####  **Event 1: "Order Received" (Log A)  "OrderReceived" (Log B)**
- **Log A**: `2023-10-10T10:00:00Z`, "Order Received"
- **Log B**: `2023-10-10T09:59:58Z`, "OrderReceived"
- **Time Diff**: 2 seconds **before** Log A
- **Decision**:  **Matched**
  - Semantically identical.
  - Timestamp difference is within 2-second tolerance.
  - Merged using Log A's timestamp as primary (System A is primary timeline).
  - Enriched with `user_id=u45`, `resource_id=r10`, and `notes` from Log B.

---

####  **Event 2: "Order Validated" (Log A)  "OrderValidation" (Log B)**
- **Log A**: `2023-10-10T10:01:30Z`, "Order Validated"
- **Log B**: `2023-10-10T10:01:29Z`, "OrderValidation"
- **Time Diff**: 1 second **before** Log A
- **Decision**:  **Matched**
  - Same meaning, slight naming variation.
  - Within 2-second tolerance.
  - Used Log A timestamp.
  - Enriched with `user_id=u12`, `resource_id=r10`, and `notes`.

---

####  **Event 3: "Payment Processed" (Log A)  "PaymentCheck" (Log B)**
- **Log A**: `2023-10-10T10:02:00Z`, "Payment Processed"
- **Log B**: `2023-10-10T10:02:05Z`, "PaymentCheck"
- **Time Diff**: 5 seconds **after** Log A
- **Decision**:  **Matched**
  - Despite name difference ("PaymentCheck" vs "Payment Processed"), both refer to payment handling.
  - Close in time; 5 seconds is slightly outside tolerance but **contextually justified**:
    - Log B notes "Payment gateway delay", which explains a later timestamp.
    - Likely the same event with Log B capturing the actual processing completion.
  - Used **Log A timestamp** to maintain consistency with primary timeline.
  - Enriched with `user_id=u12`, `resource_id=r99`, and `notes`.

---

####  **Event 4: "Quality Check" (Log B) – No Match in Log A**
- **Log B Only**: `2023-10-10T10:03:00Z`, "Quality Check", `user_id=u45`, `resource_id=r11`
- **Log A**: No corresponding event
- **Decision**:  **No Match – Keep as Separate Event**
  - No event in Log A between `10:02:00` and `10:05:00` that could represent quality inspection.
  - This is an **additional process** captured only in System B.
  - Included as-is, with source marked as **B**.

---

####  **Event 5: "Item Shipped" (Log A)  "Shipping" (Log B)**
- **Log A**: `2023-10-10T10:05:00Z`, "Item Shipped"
- **Log B**: `2023-10-10T10:05:02Z`, "Shipping"
- **Time Diff**: 2 seconds after – **within tolerance**
- **Decision**:  **Matched**
  - Semantically equivalent.
  - Timestamps very close.
  - Used Log A timestamp.
  - Enriched with `user_id=u45`, `resource_id=r10`, and `notes`.

---

####  **Event 6: "Item Delivered" (Log A) – No Match in Log B**
- **Log A Only**: `2023-10-10T10:20:00Z`, "Item Delivered"
- **Log B**: No corresponding event after `10:05:02Z`
- **Decision**:  **No Match – Keep as Separate Event**
  - Delivery event missing in Log B.
  - Possibly not tracked in System B, or delayed reporting.
  - Included with source **A**, no additional attributes.

---

##  **Attribute Integration Rules**
- **Timestamp**: Log A used as primary; Log B timestamps used only for comparison.
- **Event Type**: Unified using Log A’s naming (as primary), unless Log B provides a more descriptive or standard name (not applicable here).
- **User ID, Resource ID, Notes**: Taken from Log B if available; otherwise left blank or marked as "—".
- **Source(s)**: Indicates origin: "A", "B", or "A, B" if merged.

---

##  **Handling Ambiguities & Conflicts**
- **Timestamp Offsets**: Small differences (2 sec) assumed due to network/system latency. Log A treated as authoritative for timing.
- **Naming Variations**: Mapped based on semantic similarity:
  - `OrderReceived`  `Order Received`
  - `OrderValidation`  `Order Validated`
  - `PaymentCheck`  `Payment Processed`
  - `Shipping`  `Item Shipped`
- **Unmatched Events**: Retained to preserve completeness. Quality Check and Delivery are critical for auditability.

---

##  **Summary of Merged Events**
| Event Type             | Source     | Merged? | Notes |
|------------------------|------------|--------|-------|
| Order Received         | A & B      |  Yes | Matched within tolerance |
| Order Validated        | A & B      |  Yes | Matched |
| Payment Processed      | A & B      |  Yes | 5-sec diff, but contextually valid |
| Quality Check          | B only     |  No  | Not in Log A |
| Item Shipped           | A & B      |  Yes | Matched |
| Item Delivered         | A only     |  No  | Not in Log B |

---

##  **Conclusion**
The merged event log provides a **complete, enriched, and chronologically ordered** view of the order fulfillment process. It leverages:
- **Log A** for primary event sequence and timing,
- **Log B** for operational context (user, resource, notes).

This integration supports better process analysis, auditability, and root-cause investigation by combining the strengths of both systems.

> **Recommendation**: For future logs, consider synchronizing clocks between systems and standardizing event naming to reduce manual matching effort.