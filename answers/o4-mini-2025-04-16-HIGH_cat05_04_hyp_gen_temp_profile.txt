Anomalies in the Temporal Profile

• Receive  Approve (RP):  
  – Avg  25 h, STDEV = 1 h (very tight spread).  
  – Suggests a fixed-time batch or scripted approval rather than ad-hoc business decisions.

• Approve  Notify (PN):  
  – Avg = 7 days, STDEV = 2 days.  
  – Large delays and high variability imply backlog or manual hand-off issues.

• Assign  Close (AC):  
  – Avg = 2 h, STDEV = 1 h.  
  – Claims often close immediately after assignment—skipping Evaluate/Approve steps.

• Evaluate  Notify (EN):  
  – Avg = 5 min, STDEV = 1 min.  
  – Unrealistically fast, possibly auto-triggered notification or missing intermediate steps.

Hypotheses for These Patterns

1. RP tight spread  
   – Nightly batch job that auto-approves all pending claims at, say, 2 AM.  
   – System default timestamps overwritten by a scheduled process.

2. PN long delays  
   – Notifications queued until a manual team picks them up (backlog).  
   – Dependence on a third-party contact center with variable SLA.

3. AC rapid closures  
   – System default “close” when assignment isn’t handled within SLA.  
   – Claims auto-closed by a timeout rule instead of real evaluation.

4. EN almost immediate  
   – Automated email API firing on “Evaluate” without human review.  
   – Missing or mis-logged “Approve” event in some paths.

Verification via SQL Queries

1. Identify RP deviations beyond ±2 × STDEV (i.e. outside 25 h ± 2 h):  
```sql
SELECT 
  ce_r.claim_id,
  ce_r.timestamp AS received_at,
  ce_p.timestamp AS approved_at,
  EXTRACT(EPOCH FROM ce_p.timestamp - ce_r.timestamp) AS delta_sec
FROM claim_events ce_r
JOIN claim_events ce_p 
  ON ce_r.claim_id = ce_p.claim_id
 AND ce_r.activity = 'R'
 AND ce_p.activity = 'P'
WHERE ABS(EXTRACT(EPOCH FROM ce_p.timestamp - ce_r.timestamp) - 90000) > 2 * 3600
ORDER BY delta_sec DESC;
```

2. Find claims where PN exceeds 7 days or is unusually fast (<1 day):  
```sql
SELECT 
  ce_p.claim_id,
  EXTRACT(EPOCH FROM ce_n.timestamp - ce_p.timestamp) AS delay_sec
FROM claim_events ce_p
JOIN claim_events ce_n 
  ON ce_p.claim_id = ce_n.claim_id
 AND ce_p.activity = 'P'
 AND ce_n.activity = 'N'
WHERE EXTRACT(EPOCH FROM ce_n.timestamp - ce_p.timestamp) > 7*24*3600
   OR EXTRACT(EPOCH FROM ce_n.timestamp - ce_p.timestamp) < 24*3600;
```

3. Claims closed almost immediately after assignment (<1 h) and missing E or P in between:  
```sql
WITH ac AS (
  SELECT 
    claim_id,
    MIN(CASE WHEN activity='A' THEN timestamp END) AS assign_ts,
    MIN(CASE WHEN activity='C' THEN timestamp END) AS close_ts
  FROM claim_events
  GROUP BY claim_id
)
SELECT 
  ac.claim_id,
  EXTRACT(EPOCH FROM ac.close_ts - ac.assign_ts) AS seconds_to_close
FROM ac
LEFT JOIN claim_events ce ON ce.claim_id = ac.claim_id
                           AND ce.activity IN ('E','P')
WHERE ac.assign_ts IS NOT NULL
  AND ac.close_ts   IS NOT NULL
  AND EXTRACT(EPOCH FROM ac.close_ts - ac.assign_ts) < 3600
  AND ce.event_id IS NULL;  -- no Evaluate or Approve logged
```

4. Correlate PN delays with adjuster region and claim type:  
```sql
WITH pn AS (
  SELECT 
    ce_p.claim_id,
    ce_p.resource::INT AS adjuster_id,
    EXTRACT(EPOCH FROM ce_n.timestamp - ce_p.timestamp) AS delay_sec
  FROM claim_events ce_p
  JOIN claim_events ce_n 
    ON ce_p.claim_id = ce_n.claim_id
   AND ce_p.activity = 'P'
   AND ce_n.activity = 'N'
  WHERE EXTRACT(EPOCH FROM ce_n.timestamp - ce_p.timestamp) > 7*24*3600
)
SELECT 
  a.region,
  c.claim_type,
  COUNT(*) AS num_long_delays,
  AVG(pn.delay_sec)/86400 AS avg_delay_days
FROM pn
JOIN adjusters a ON a.adjuster_id = pn.adjuster_id
JOIN claims    c ON c.claim_id    = pn.claim_id
GROUP BY a.region, c.claim_type
ORDER BY num_long_delays DESC;
```

5. Spot EN transitions faster than 2 min or slower than 10 min:  
```sql
SELECT 
  ce_e.claim_id,
  EXTRACT(EPOCH FROM ce_n.timestamp - ce_e.timestamp) AS delta_sec
FROM claim_events ce_e
JOIN claim_events ce_n 
  ON ce_e.claim_id = ce_n.claim_id
 AND ce_e.activity = 'E'
 AND ce_n.activity = 'N'
WHERE EXTRACT(EPOCH FROM ce_n.timestamp - ce_e.timestamp) < 120
   OR EXTRACT(EPOCH FROM ce_n.timestamp - ce_e.timestamp) > 600;
```