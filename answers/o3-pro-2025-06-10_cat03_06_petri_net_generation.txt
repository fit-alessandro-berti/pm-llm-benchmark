```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# -------------------------------------------------
# 1. Net skeleton
# -------------------------------------------------
net = PetriNet("Insurance-Claim-Process")

# -------------------------------------------------
# 2. Places  (states between the activities)
# -------------------------------------------------
p_start       = PetriNet.Place("p_start")        # new claim arrives
p_after_C     = PetriNet.Place("p_after_C")      # after Insurance Claim is filed
p_doc_ready   = PetriNet.Place("p_doc_ready")    # documents ready for verification
p_after_DV    = PetriNet.Place("p_after_DV")     # after Document Verification
p_after_FC    = PetriNet.Place("p_after_FC")     # after Fraud Check
p_after_CA    = PetriNet.Place("p_after_CA")     # after Claim Assessment
p_after_AP    = PetriNet.Place("p_after_AP")     # after Approval
p_after_P     = PetriNet.Place("p_after_P")      # after Payment
p_after_N     = PetriNet.Place("p_after_N")      # after Notification
p_end         = PetriNet.Place("p_end")          # closed claim (final)

net.places.update({p_start, p_after_C, p_doc_ready, p_after_DV,
                   p_after_FC, p_after_CA, p_after_AP,
                   p_after_P, p_after_N, p_end})

# -------------------------------------------------
# 3. Transitions  (business activities)
# -------------------------------------------------
t_C   = PetriNet.Transition("C",   "Insurance Claim")
t_CR  = PetriNet.Transition("CR",  "Claim Registration")
t_DV  = PetriNet.Transition("DV",  "Document Verification")
t_RDS = PetriNet.Transition("RDS", "Re-Document Submission")
t_FC  = PetriNet.Transition("FC",  "Fraud Check")
t_II  = PetriNet.Transition("II",  "In-depth Investigation")
t_CA  = PetriNet.Transition("CA",  "Claim Assessment")
t_AP  = PetriNet.Transition("AP",  "Approval")
t_P   = PetriNet.Transition("P",   "Payment")
t_N   = PetriNet.Transition("N",   "Notification")
t_CL  = PetriNet.Transition("CL",  "Closure")

net.transitions.update({t_C, t_CR, t_DV, t_RDS, t_FC, t_II,
                        t_CA, t_AP, t_P, t_N, t_CL})

# -------------------------------------------------
# 4. Arcs  (control-flow, incl. the two loops)
# -------------------------------------------------
# start of the process
petri_utils.add_arc_from_to(p_start,  t_C,   net)
petri_utils.add_arc_from_to(t_C,      p_after_C,  net)

# Claim registration
petri_utils.add_arc_from_to(p_after_C, t_CR,      net)
petri_utils.add_arc_from_to(t_CR,      p_doc_ready, net)

# Document verification + possible re-submission loop
petri_utils.add_arc_from_to(p_doc_ready, t_DV,     net)
petri_utils.add_arc_from_to(t_DV,        p_after_DV, net)

# Re-Document Submission -> back to verification
petri_utils.add_arc_from_to(p_after_DV,  t_RDS,    net)
petri_utils.add_arc_from_to(t_RDS,       p_doc_ready, net)

# Fraud check + optional in-depth investigation loop
petri_utils.add_arc_from_to(p_after_DV,  t_FC,     net)
petri_utils.add_arc_from_to(t_FC,        p_after_FC, net)

# In-depth investigation can be executed repeatedly
petri_utils.add_arc_from_to(p_after_FC,  t_II,     net)
petri_utils.add_arc_from_to(t_II,        p_after_FC, net)

# Remaining straight sequence
petri_utils.add_arc_from_to(p_after_FC,  t_CA,     net)
petri_utils.add_arc_from_to(t_CA,        p_after_CA, net)

petri_utils.add_arc_from_to(p_after_CA,  t_AP,     net)
petri_utils.add_arc_from_to(t_AP,        p_after_AP, net)

petri_utils.add_arc_from_to(p_after_AP,  t_P,      net)
petri_utils.add_arc_from_to(t_P,         p_after_P, net)

petri_utils.add_arc_from_to(p_after_P,   t_N,      net)
petri_utils.add_arc_from_to(t_N,         p_after_N, net)

petri_utils.add_arc_from_to(p_after_N,   t_CL,     net)
petri_utils.add_arc_from_to(t_CL,        p_end,    net)

# -------------------------------------------------
# 5. Initial and final markings
# -------------------------------------------------
im = Marking()
im[p_start] = 1           # one new claim waiting to be processed

fm = Marking()
fm[p_end] = 1             # claim successfully closed

# -------------------------------------------------
# 6. The accepting Petri net is (net, im, fm)
# -------------------------------------------------
print("Net constructed with", len(net.places), "places and",
      len(net.transitions), "transitions.")
```

Running the snippet yields an accepting Petri net whose token flow exactly captures:

• the normal linear progression from Insurance Claim (C) to Closure (CL);  
• the possibility of repeatedly asking the customer for missing documents (`DV  RDS` loop);  
• the possibility of performing any number of in-depth investigations after a suspicious fraud check (`FC  II` loop).

The initial marking `im` puts one token in `p_start`, and the final marking `fm` requires one token in `p_end`—i.e. a claim is closed only after the whole workflow has successfully completed.