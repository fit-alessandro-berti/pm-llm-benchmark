Below is a practical, process-mining-driven approach to diagnose and improve TechSolve’s resource assignment logic using the past year’s event log.

1) Analyze resource behavior and assignment patterns

Data preparation and modeling
- Normalize lifecycle: map activities with START/COMPLETE to compute service time per activity per agent (e.g., Work L1 Start  Work L1 End). Waiting time is the time from “Assign <tier>” to “Work <tier> Start.” Queue time between tiers is the time from “Escalate Lx” to “Work L(y) Start.”
- Case attributes: priority, category, predicted/declared required skill, creation channel, resolved tier, final solver skill, number of reassignments/escalations, SLA outcome.
- Resource attributes: tier, skills and proficiencies, shift/availability, historical performance by ticket type.

Agent/tier performance metrics to compute
- Workload and utilization:
  - Tickets handled per agent/tier per week and per priority/category.
  - Active handling time vs. logged shift hours to estimate utilization; flag >85% as sustained overload.
  - Fairness of distribution: variance and Gini coefficient across agents.
- Handling performance:
  - First Contact Resolution (FCR) at L1: % of cases closed at L1 without escalation (by priority/category/skill).
  - “Right-First-Assignment” (RFA): % cases where the first assigned human had the same skill as the final solver.
  - Time-to-first-touch and time-to-right-skill (from creation to first work start by a solver with the final solver skill).
  - Mean and percentile service times per agent per activity (normalize by category/skill to avoid case mix bias).
  - Reassignment density: average number of handovers and escalations per case.
- Skill utilization and alignment:
  - Skill match score per activity: whether assigned agent had the required skill; if not, mark mismatch.
  - Overqualification index: fraction of time L2/L3 spend on tasks whose required skill is below their specialty (e.g., Basic-Troubleshoot).
  - Skill coverage and saturation: arrival rates vs. effective capacity per skill and hour-of-day/day-of-week.

Process mining techniques to reveal actual vs intended assignment logic
- Social network analysis (handovers of work):
  - Build a handover network where nodes are agents or roles; edges indicate “work after” handovers. Identify:
    - Ping-pong patterns (ABA), long chains (ABCD), and bottleneck hubs with very high in-degree/out-degree.
    - Over-reliance on a few specialists (high betweenness centrality).
- Role discovery and clustering:
  - Cluster agents by activity/skill footprints to detect de-facto roles. Compare with HR-tier definitions to find L1s acting as L2s or vice versa.
- Conformance checking:
  - Compare actual flows to intended policy (e.g., L1 triage  L2 by skill  L3 when needed).
  - Non-conformances: L1 spending >X minutes on tickets that always escalate; direct assignment to L3 without necessity; reassignments within same tier without added skill.
- Decision/assignment mining:
  - At decision points (Assign L1/L2/L3; Escalate), learn rules or trees explaining who gets selected given ticket attributes, workload, skills. Contrast learned rules with the “round-robin + manual” intent to quantify drift.

2) Identify resource-related bottlenecks and issues

How to pinpoint problems and quantify impact
- Skill scarcity bottlenecks:
  - Compute queue time by required skill and time-of-day. If Networking-Firewall queues have long waits during 9–12 and only two agents cover it, that’s a coverage gap.
  - Calculate demand/capacity ratios per skill: skill (arrival rate) vs. skill (effective throughput by skilled agents). Persistent / > 0.8 correlates with long queues.
- Reassignment and escalation delays:
  - Measure added delay per reassignment: for each reassignment i, compute i = time from “Reassign/Assign” to “Work Start” of the new assignee. Report average and distribution.
  - Quantify ping-pong: % cases with back-and-forth handovers; average extra queueing per ping-pong loop.
- Incorrect initial assignment by L1/dispatch:
  - Misassignment rate: % cases where first human assignee lacked the final solver’s key skill.
  - Impact: compare cycle time and SLA breach probability for RFA=true vs. RFA=false. Typically expect 20–50% higher breach odds when RFA=false.
- Overloaded/underperforming agents:
  - Overload: sustained utilization >85%, long personal queues, higher wait times after “Assign to agent.”
  - Underperformance: adjusted service times (normalized by category/priority/skill) above control limits; high reopen rates or high escalation after their intervention.
- SLA correlation:
  - Build a logistic model for SLA breach with features such as number of reassignments, time-to-right-skill, misassignment flag, required skill, time-of-day, queue lengths, priority. Use marginal effects to attribute breach risk to assignment issues.
  - Example quantifications you should be able to produce:
    - Average delay per reassignment: e.g., +2.8 hours.
    - SLA breaches linked to skill mismatch: e.g., 41% of P2/P3 breaches have RFA=false.
    - Specialist time spent below-skill: e.g., L2/L3 spend 27% of their time on Basic-Troubleshoot tickets; those tickets show no service-time benefit at L2/L3 vs. L1.

3) Root cause analysis for assignment inefficiencies

Likely root causes to test with the data
- Assignment rules: round-robin ignores skills, proficiency, current load, and due dates; explains misassignment and uneven load.
- Skill profiles: stale or incomplete agent skill matrices cause dispatchers to guess, leading to mismatch and rework.
- Ticket intake quality: poor categorization/required-skill tagging at creation increases L1 trial-and-error and late escalations.
- Lack of real-time visibility: assigners cannot see agent availability/queues; tickets go to busy specialists while idle qualified agents wait.
- L1 empowerment gaps: L1 lacks knowledge tools or permissions to resolve common P3/P4 or straightforward P2 cases; FCR stays low and escalations spike.

Using process mining for root-cause evidence
- Variant analysis:
  - Compare “smooth” variants (0–1 handover, on-time) vs. “noisy” variants (3 handovers, late). Contrast features:
    - Intake channel, time-of-day, dispatcher identity, first assigned tier/skill, category, initial required-skill accuracy.
- Decision mining:
  - At Assign L2 and Assign L3, learn trees showing conditions under which assignments later get reworked. Indicators like “dispatcher D7” or “category=Network + L2 backlog > 8” splitting to high rework flag operational root causes.
- Text analytics:
  - If free-text exists, mine keywords associated with misclassification (e.g., “timeout,” “port,” “rule”  Networking-Firewall). Align with incorrect initial category to justify NLP-driven triage improvements.
- Temporal/drift analysis:
  - Identify periods with policy or staffing changes driving spikes in reassignments or breaches (e.g., after-hours coverage for IAM).

4) Data-driven resource assignment strategies

Strategy A: Skill- and proficiency-weighted routing with SLA awareness
- Problem addressed:
  - Misassignments, uneven load, specialists spending time below skill, and P2/P3 SLA breaches.
- Approach:
  - For each new assignment, score eligible agents:
    Score = w1(skill match) + w2(proficiency) + w3(1  utilization) + w4(EDD urgency) + w5(historical success on similar tickets)  w6(context-switch cost)
    Where EDD urgency prioritizes tickets with nearer SLA deadlines (especially P2/P3).
  - Only agents meeting required skill (or nearest acceptable substitutes) are eligible; include multi-skill capabilities.
- Data needed:
  - Accurate skill matrix with proficiency, agent calendars, real-time queue/availability, SLA due date, historical per-agent performance by category/skill, context-switch penalties.
- How it uses mining insights:
  - Weighed by factors shown to reduce rework and delays (e.g., RFA, time-to-right-skill).
- Expected benefits:
  - Reduced reassignments (typical 20–40%), lower time-to-right-skill, improved SLA adherence for P2/P3 (5–15 pp). Specialists’ below-skill time decreases, freeing capacity for complex work.

Strategy B: Workload-aware dispatching with dynamic balancing across skills and tiers
- Problem addressed:
  - Overloaded agents and idle capacity elsewhere; long queues in scarce skills/time windows.
- Approach:
  - Implement queue disciplines that account for:
    - Current and predicted queue lengths per skill and tier.
    - Cross-skill substitutability (who can cover next-best).
    - Fairness constraints (cap weekly imbalance).
  - Use policies like “Skill-first, then shortest predicted handling time (SPT), then earliest due date (EDD)” within constraints; enable intra-day redistribution across L1 pods and between L2 sub-teams.
- Data needed:
  - Real-time WIP by skill, predicted handling times (from historical), shift calendars, substitution rules, and fairness targets.
- How it uses mining insights:
  - Addresses empirically identified congestion windows and skill scarcity peaks.
- Expected benefits:
  - Lower average queue time at bottleneck skills (20–30%), fewer SLA breaches from short-term congestion, more even utilization (lower Gini).

Strategy C: Predictive triage to infer required skill and escalation likelihood at intake
- Problem addressed:
  - Poor initial categorization, low L1 FCR, late escalations, ping-pong.
- Approach:
  - Train models using past logs and ticket text to predict:
    - Required skill(s), complexity/tier, and escalation probability if sent to L1.
  - Route high-escalation-likely P2/P3 directly to the right L2/L3 queue; keep likely L1-resolvable tickets at L1.
- Data needed:
  - Historical tickets with final solver skill/tier, text fields, category, channel, outcomes (escalation, SLA). NLP features and time-based cross-validation.
- How it uses mining insights:
  - Targets categories with high misclassification and rework identified by decision mining and variant analysis.
- Expected benefits:
  - Increased RFA, higher L1 FCR for suitable tickets (5–10 pp), fewer unnecessary escalations, shorter time-to-right-skill for complex P2/P3.

Strategy D: L1 empowerment and guided troubleshooting for high-yield categories
- Problem addressed:
  - L1 escalating solvable tickets; specialists handling basic work.
- Approach:
  - Use mining to find categories where L1 success is currently moderate and service times are short at L2 (indicating opportunity). Create guided playbooks and automation (knowledge articles, checklists, secure scripts), and elevate permissions where safe.
- Data needed:
  - Lists of categories with high L1-to-L2 escalations but low L2 complexity, solution steps mined from frequent paths, knowledge gap mapping.
- Benefits:
  - Higher L1 FCR, reduced specialist load; expect 10–20% of L2 volume to shift left in targeted categories.

Strategy E: Reassignment guardrails and “accept-or-reject” handshake
- Problem addressed:
  - Unnecessary reassignments and ping-pong.
- Approach:
  - Before transferring, originator must specify missing skill or reason; receiver must accept or propose alternate. System blocks transfers without required skill match unless justified with override.
  - Add automated suggestions for nearest-skill match candidates.
- Data needed:
  - Skill matrix, right-first-assignment analytics, reasons taxonomy for reassignments.
- Benefits:
  - Reduction in ping-pong loops and average handovers per case; expected 15–25% reassignments.

5) Simulation, implementation, and monitoring

Simulation to evaluate strategies before rollout
- Build a discrete-event simulation (DES) calibrated from the event log:
  - Arrival streams by hour-of-day/day-of-week and by priority/category.
  - Service-time distributions per activity by agent-skill (fit lognormal/gamma).
  - Resource calendars, skills/proficiencies, substitution options.
  - Current vs. proposed routing rules (round-robin vs. Strategies A–E).
  - Escalation/reassignment probabilities conditional on assignment rules (derived from decision mining).
  - SLA logic per priority.
- Experiments:
  - Baseline vs. each strategy and combinations; scenario tests for staffing, skill additions, shift changes, and peak loads.
- Outputs to compare:
  - SLA attainment by priority, time-to-right-skill, reassignments per case, queue times per skill, utilization distribution, specialist below-skill time.
- Decision criteria:
  - Select the strategy mix that meets P2/P3 SLA targets with acceptable utilization and minimal reassignments; identify staffing or cross-training gaps if targets are unreachable.

Implementation plan (phased)
- Data foundation:
  - Clean agent skill profiles, establish real-time feeds for queue/availability, standardize required-skill taxonomy, ensure accurate lifecycle markers.
- Pilot:
  - Run Strategies A–C on narrow scopes (e.g., Network + App-CRM; business hours only). Use feature flags to revert if needed.
- Change management:
  - Train dispatchers and agents; publish new playbooks and guardrails; define override procedures.
- Scale-up:
  - Gradually extend to more categories and 24/7 coverage; update models quarterly.

Monitoring with process mining dashboards
- Core KPIs:
  - SLA attainment by priority and category; lead time and its decomposition (waiting vs. working).
  - Reassignment rate, ping-pong rate, escalations per case; Right-First-Assignment rate.
  - Time-to-right-skill; queue time by skill and tier; L1 FCR.
  - Utilization per agent and skill; workload fairness (Gini/variance).
  - Specialist below-skill time share; reopen rate; resolution attempt count.
- Process views:
  - Performance-enhanced process model by priority to visualize bottlenecks.
  - Handover network with edge weights and betweenness; track shifts after guardrails.
  - Conformance views for non-compliant routing/escalation patterns.
  - Variant mix over time (smooth vs. noisy variants).
- Alerts and governance:
  - Real-time alerts: sudden drops in RFA/L1 FCR, spikes in queue time for scarce skills, utilization >90% for >2 hours, rising ping-pong.
  - Weekly ops review and monthly improvement cycles; A/B or staggered rollouts to measure causal impact.
- Data quality checks:
  - Completeness of START/COMPLETE, accurate required-skill tagging, agent calendars; monitor drift in prediction models.

Putting it all together
- Use the event log to quantify where and why RFA is low, queues are long, and specialists are misused. Conformance and social network analyses will expose the real assignment patterns behind SLA breaches.
- Implement skill- and workload-aware routing with predictive triage, supported by L1 enablement and reassignment guardrails.
- Validate via simulation, then pilot, and continuously monitor with process mining dashboards tied to operational alerts.

This approach directly targets TechSolve’s issues: it reduces avoidable handovers and late escalations, improves the match between ticket needs and agent skills, balances workload, and lifts P2/P3 SLA performance in a measurable, auditable way.