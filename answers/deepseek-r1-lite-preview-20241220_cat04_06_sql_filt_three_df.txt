To solve this problem, we will follow these steps:

1. **Assign Row Numbers**: For each `case_id`, assign a row number to each event ordered by `timestamp`. This helps in identifying the sequence of activities.

2. **Identify the Sequence**: Check for the sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order' in consecutive rows.

3. **Calculate Time Difference**: For cases where the sequence exists, calculate the time difference between 'Create Order' and 'Confirm Order'.

4. **Identify Problematic Cases**: Find `case_id`s where the time difference is more than 5 days.

5. **Exclude Events from Problematic Cases**: Select all events except those from the identified `case_id`s.

Here is the SQL query implementing the above logic:

```sql
WITH numbered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
    FROM
        event_log
),
sequence_candidates AS (
    SELECT
        ne1.case_id
    FROM
        numbered_events ne1
        JOIN numbered_events ne2 ON ne1.case_id = ne2.case_id AND ne1.rn = ne2.rn - 1
        JOIN numbered_events ne3 ON ne1.case_id = ne3.case_id AND ne1.rn = ne3.rn - 2
    WHERE
        ne1.activity = 'Approve Purchase Requisition'
        AND ne2.activity = 'Create Order'
        AND ne3.activity = 'Confirm Order'
),
time_diff_cases AS (
    SELECT
        sc.case_id
    FROM
        sequence_candidates sc
        JOIN event_log create_order ON sc.case_id = create_order.case_id AND create_order.activity = 'Create Order'
        JOIN event_log confirm_order ON sc.case_id = confirm_order.case_id AND confirm_order.activity = 'Confirm Order'
    WHERE
        confirm_order.timestamp - create_order.timestamp > INTERVAL '5 days'
)
SELECT
    el.*
FROM
    event_log el
WHERE
    el.case_id NOT IN (SELECT case_id FROM time_diff_cases)
ORDER BY
    el.case_id,
    el.timestamp;
```

**Explanation:**

- **Step 1: Assign Row Numbers**
  - We create a CTE `numbered_events` where each event in each `case_id` is assigned a row number based on the order of `timestamp`.

- **Step 2: Identify the Sequence**
  - In `sequence_candidates`, we join the `numbered_events` table three times to check for the exact sequence of activities in consecutive rows.

- **Step 3: Calculate Time Difference**
  - In `time_diff_cases`, we calculate the time difference between 'Create Order' and 'Confirm Order' for the identified sequences.
  - We select `case_id`s where this difference is more than 5 days.

- **Step 4: Exclude Events from Problematic Cases**
  - Finally, we select all events from `event_log` where the `case_id` is not in the list of problematic cases identified.

This query efficiently identifies and excludes the cases that meet both the sequence and timing conditions, returning all other events.