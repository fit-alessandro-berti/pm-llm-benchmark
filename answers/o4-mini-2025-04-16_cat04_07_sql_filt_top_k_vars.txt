Here’s one way to do it in DuckDB (just replace :K with your desired number of top variants):

-- 1. For each case, build its ordered activitysequence (“variant”)  
WITH case_variants AS (  
  SELECT  
    case_id,  
    LIST_AGG(activity, '->') WITHIN GROUP (ORDER BY timestamp) AS variant  
  FROM event_log  
  GROUP BY case_id  
),

-- 2. Count how many cases there are per variant, pick the top K  
variant_counts AS (  
  SELECT  
    variant,  
    COUNT(*) AS case_count  
  FROM case_variants  
  GROUP BY variant  
  ORDER BY case_count DESC  
  LIMIT :K  
),

-- 3. Find all case_ids whose variant is one of the top K  
top_cases AS (  
  SELECT cv.case_id  
  FROM case_variants cv  
  JOIN variant_counts vc  
    ON cv.variant = vc.variant  
)

-- 4. Return all events for those cases, in original order  
SELECT el.*  
FROM event_log el  
JOIN top_cases tc  
  ON el.case_id = tc.case_id  
ORDER BY el.case_id, el.timestamp;  

Explanation of the steps:  
1. case_variants: aggregates each case’s activities into a single string (e.g. A->B->C), respecting timestamp order.  
2. variant_counts: counts how many cases share each distinct sequence, orders by frequency, and keeps only the top K.  
3. top_cases: picks out the case_ids that follow one of those top K sequences.  
4. The final SELECT filters the original log to only those case_ids and reorders by case and timestamp.