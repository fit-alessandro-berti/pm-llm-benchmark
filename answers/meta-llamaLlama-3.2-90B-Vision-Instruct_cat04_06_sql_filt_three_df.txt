You can solve this problem by using a combination of subqueries and case exclusions in your `WHERE` clause or by utilizing window functions more directly if the SQL engine you are using supports it. For simplicity and generality across various SQL engines, I'll use the subquery method to demonstrate how to solve the problem. The key steps will involve:

1. **Identify the Sequences and Time Gaps:** First, we find the sequences of interest along with their timing. This is best done in a subquery that inspects the ordered events within each case.

2. **Mark or Filter Based on Criteria:** We need to mark which cases do meet our conditions to then exclude them.

Here's an approach using subqueries to both identify sequences that match our criteria and then exclude those from the final result:

```sql
WITH marked_cases AS (
    SELECT 
        case_id,
        activity,
        timestamp,
        LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
        LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_prev_activity,
        timestamp - LAG(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS time_diff
    FROM event_log
)
SELECT 
    case_id, 
    activity, 
    timestamp
FROM event_log
WHERE case_id NOT IN (
    SELECT 
        case_id
    FROM marked_cases
    WHERE activity = 'Confirm Order'
    AND prev_activity = 'Create Order'
    AND prev_prev_activity = 'Approve Purchase Requisition'
    AND EXTRACT('DAY' FROM time_diff) > 5
);
```

### Explanation:

- **CTE (`marked_cases`):** We use a Common Table Expression (CTE) named `marked_cases` to inspect the sequences of events within each case. We use `LAG` window function to look at the previous activities (`prev_activity` and `prev_prev_activity`) and the time difference (`time_diff`) between the current event and its immediately preceding one.

- **Subquery in `WHERE NOT IN`:** We exclude cases where we find our specific sequence of interest ('Approve Purchase Requisition', followed by 'Create Order', and then 'Confirm Order') with more than 5 days between 'Create Order' and 'Confirm Order' events. The `EXTRACT('DAY' FROM time_diff)` is used to get the number of days from the `time_diff` interval.

- **Final `SELECT`:** This returns all events from `event_log` except those belonging to cases identified by the subquery.

This query addresses both the sequence and timing requirements while ensuring that only cases not meeting these specific conditions are included in the result set.