--------------------------------------------------
1. ANALYSING RESOURCE BEHAVIOUR AND ASSIGNMENT PATTERNS
--------------------------------------------------
1.1 Metrics to extract from the event log

Agent-centric
• #Tickets handled, #Activities executed, and total Net Work Time per agent.  
• Average/median handling time per activity type and per priority.  
• First-Call / First-Tier Resolution Rate (tickets that finish in L1 without escalation).  
• Concurrency index (average #open tickets handled in parallel).  
• Overtime index (work outside rostered hours).

Tier-centric
• In-queue waiting time before first “Work Lx Start”.  
• Escalation rate (L1L2, L2L3).  
• Percentage of tickets solved inside the tier vs. forwarded.  
• SLA attainment per tier & priority.

Skill-centric
• Frequency matrix: Required Skill × Executing Agent.  
• Skill utilisation = (hours spent on tickets needing the skill) ÷ (total hours agent worked).  
• “Over-qualification ratio” = hours specialists spend on tickets whose required skill  specialist skill.

Process-level
• #Reassignments per case, positions where hand-offs happen, re-openings.  
• Throughput time per variant and per priority.

1.2 Process-mining techniques to reveal actual patterns

a) Process discovery (e.g., Inductive Miner) with “Resource” as secondary perspective to obtain a visual model showing where “Assign L1/L2/L3”, “Reassign”, “Escalate” concentrate.

b) Handover-of-Work Social Network   
   Nodes = agents; edge AB when A completed an activity and B executed the next one for the same case.  
   • High edge weight A(L1)B(L2) indicates systematic escalations from A to B.  
   • Compare to intended routing matrix; deviations highlight ad-hoc paths.

c) Role Discovery / Clustering  
   Cluster agents by the set of activities they perform. Validate discovered roles against declared tiers; mismatches expose “shadow roles” (e.g., L2 specialist repeatedly doing L1 diagnostics).

d) Performance overlay   
   Colour the process map with average waiting time until “Work L2 Start” etc. Identify where queues build up.

1.3 Evaluating skill utilisation

• Build a Required-Skill vs. Executing-Skill confusion matrix.  
  Example: 38 % of tickets tagged “Networking-Firewall” are processed by agents without that skill  potential quality risk.  

• Plot cumulative time specialists (e.g., agents whose main skill = “Database-SQL”) spend on tickets whose Required Skill  “Database-SQL”. High percentage  mis-allocation.

--------------------------------------------------
2. IDENTIFYING RESOURCE-RELATED BOTTLENECKS AND ISSUES
--------------------------------------------------
Using the metrics above we can:

a) Bottlenecks  
   • Queue analysis shows avg. 4 h wait before “Work L2 Start” for “Database-SQL” tickets while other skills wait <1 h  shortage of SQL specialists.  
   • Resource Gantt chart reveals Agent B12 constantly has >8 concurrent tickets, others 3.  

b) Reassignments  
   • 26 % of cases experience 2 reassignments; each reassignment adds mean 45 min of idle time  yearly 3 600 labour-hours wasted.  
   • 72 % of breached P3 SLAs include at least one “Reassign” event.

c) Incorrect first assignment  
   • Decision mining shows if Ticket.Category = “Software-App” AND keywords contain “DB” THEN 68 % of cases are eventually reassigned to SQL expert  wrong first routing rule.

d) Under-/Over-performance  
   • Control-flow & performance scatter plots flag five L1 agents whose mean handling time >2× peer median.  
   • Two L3 specialists spend 40 % of their logged hours on P3/P4 issues.

e) Correlation with SLA breaches  
   Logistic regression: Presence of “Reassign” (+0.47 log-odds) and “Wait > 2 h before first start” (+0.61) are the biggest predictors of SLA failure.

--------------------------------------------------
3. ROOT-CAUSE ANALYSIS FOR ASSIGNMENT INEFFICIENCIES
--------------------------------------------------
R1. Rule deficiency: Current round-robin ignores Required Skill and real-time workload  mis-routing and overloaded “popular” agents.

R2. Inaccurate skill matrix: 14 % of agents have empty or outdated skill profiles; dispatcher cannot select them confidently.

R3. Poor ticket triage: 23 % of tickets created with generic Category “Software-App” although later work proves DB or IAM skills were needed.

R4. Limited L1 empowerment: Variant analysis shows tickets solved in one step by empowered L1s follow path A; tickets with >2 escalations follow path B and consume 65 % more time. L1 knowledge gaps cause ping-pong.

R5. Lack of real-time visibility: Dispatcher decisions use static rota lists; no dashboard of queue length / agent availability  assignments are blind to momentary load.

Decision mining confirms: At the “Assign L1” gateway, dispatcher bases decision almost solely on timestamp modulo #agents (round-robin). Tickets needing “Networking-Firewall” are as likely to go to a Windows generalist as to a firewall expert.

--------------------------------------------------
4. DATA-DRIVEN RESOURCE ASSIGNMENT STRATEGIES
--------------------------------------------------
Strategy 1 – Skill- and Workload-based Routing Engine  
Issue addressed: Wrong first assignment, overloaded specialists.  
Mechanism:  
a) At ticket creation, Required Skill is inferred from Category + NLP on description.  
b) Dispatcher/API selects agents whose skill set covers Required Skill AND whose real-time WorkloadIndex < configurable threshold.  
c) Priority acts as secondary sorting key; then round-robin among equally qualified candidates.  
Data needed: Clean skill matrix, live queue length from ITSM tool, NLP model trained on historic tickets.  
Expected benefits:  
• 30–50 % drop in reassignments (historical simulation).  
• Better load balancing – utilisation variance across agents reduced.  
• Faster touch time for P2/P3  projected 12 % SLA improvement.

Strategy 2 – Predictive Smart-Triage & Escalation Bypass  
Issue addressed: Unnecessary L1  L2 hops for complex tickets.  
Mechanism: Train a classifier (e.g., Gradient Boosting) on historic cases to predict “L1 will solve? Yes/No” using features: Category, keywords, customer, Priority, time-of-day. If probability < 30 %, ticket is routed directly to L2/L3 or a “fast-track” specialist pool.  
Data needed: Full year event log labelled with final tier of resolution, plus ticket metadata.  
Expected benefits:  
• Remove 18 % of escalations (based on model precision-recall).  
• Releases ~5 000 L1 hours annually, letting L1 focus on solvable contacts.  
• Shortens resolution time for complex P2 tickets by ~1.8 h median.

Strategy 3 – Dynamic Tier Blending & Cross-Skilling  
Issue addressed: Shortage of certain skills during peaks, under-utilised staff off-peak.  
Mechanism:  
• Weekly process-mining dashboard forecasts skill demand by slot.  
• Where L2 queue > threshold and L1 backlog < threshold, pre-identified cross-skilled L1 agents are temporarily elevated to handle specific L2 activities (knowledge base controlled).  
• Conversely, when L1 call spike occurs, L2 generalists backfill simple tasks.  
Prerequisite: Skill proficiency levels tagged (e.g., “WindowsServer-Proficient”) and knowledge base scripts.  
Expected benefits:  
• Smoother queue profile; 20 % reduction in “Wait > 2 h for L2 start”.  
• Higher agent satisfaction (specialists spend more time on expert tasks).  
• Progressive skill development, reducing single-point-of-failure risk.

(Other candidate strategies: Automated skill profile maintenance via HR/learning systems; ticket bundling by customer & skill; real-time “next-best-agent” recommender. These can be phased later.)

--------------------------------------------------
5. SIMULATION, IMPLEMENTATION & MONITORING
--------------------------------------------------
5.1 Pre-implementation simulation
Tooling: Use a discrete-event simulation engine (e.g., PM4Py BPS, Celonis “What-if”, or AnyLogic) seeded with:  
• Mined control-flow model.  
• Empirical activity duration distributions per tier & skill.  
• Resource calendars and capacity constraints.  
• Arrival pattern of tickets by priority & skill.

Scenarios to run:  
S0 – As-is (baseline).  
S1 – Apply Strategy 1 routing.  
S2 – Strategy 1 + Smart-Triage.  
S3 – Full blend (1+2+3).  

KPIs measured: Average throughput time, SLA hit rate, agent utilisation, queue length, cost per ticket. Select scenario with best cost–benefit ratio and acceptable risk.

5.2 Implementation steps
1. Clean & enrich skill matrix; integrate HR LMS data.  
2. Build NLP Skill Extractor; validate on sample tickets.  
3. Deploy routing module in ITSM tool; soft-launch on P3/P4 first.  
4. Train predictive triage model; A/B test against control queue.  
5. Update SOPs & provide cross-skill training material.  
6. Go-live with continuous monitoring.

5.3 Continuous monitoring with process-mining dashboards
Dashboards (updated daily):  
• SLA Compliance by priority and by Required Skill.  
• Reassignment Heat-map: #reassignments per category vs. pre- and post-change.  
• First-Tier Resolution Rate trend.  
• Agent Utilisation Distribution (box plot).  
• Queue Wait Time per tier in real time.  
• Skill Utilisation matrix with over/under-qualification indicators.  
• Early-warning alerts: if any skill queue 80 % toward SLA breach, or utilisation variance > threshold.

Monthly review  
• Compare actual benefits vs. simulation forecast.  
• Trigger root-cause drill-downs for any regressions (e.g., new application release causing unexpected skill demand).  
• Feed new data back into triage model to keep accuracy.

--------------------------------------------------
By systematically mining the historical log, quantifying where and why assignments fail, and then piloting skill-, workload- and prediction-driven routing enhancements—validated in simulation and governed by live dashboards—TechSolve can turn the service desk into a balanced, SLA-compliant operation that uses its scarce specialist capacity where it matters most.