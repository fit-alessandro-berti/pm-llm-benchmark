Here's a Log Skeleton model for a hypothetical Purchase-to-Pay process.

```python
log_skeleton = {
    'equivalence': {
        ('Create Purchase Requisition', 'Create Purchase Order'),
        ('Approve Invoice', 'Clear Invoice')
    },
    'always_before': {
        ('Create Purchase Requisition', 'Create Purchase Order'),
        ('Create Purchase Requisition', 'Approve Purchase Order'),
        ('Receive Goods', 'Create Invoice'),
        ('Create Purchase Order', 'Receive Goods'),
        ('Approve Invoice', 'Pay Invoice')
    },
    'always_after': {
        ('Create Purchase Order', 'Approve Purchase Order'),
        ('Create Invoice', 'Approve Invoice'),
        ('Approve Invoice', 'Clear Invoice')
    },
    'never_together': {
        ('Cancel Purchase Order', 'Approve Purchase Order'),
        ('Cancel Purchase Order', 'Receive Goods'),
        ('Create Purchase Requisition', 'Cancel Purchase Requisition')
    },
    'activ_freq': {
        'Create Purchase Requisition': {1},
        'Create Purchase Order': {1},
        'Approve Purchase Order': {0, 1},
        'Cancel Purchase Order': {0, 1},
        'Receive Goods': {0, 1},
        'Create Invoice': {0, 1},
        'Approve Invoice': {0, 1},
        'Clear Invoice': {0, 1},
        'Pay Invoice': {0, 1},
        'Cancel Purchase Requisition': {0, 1}
    },
    'directly_follows': {
        ('Create Purchase Requisition', 'Create Purchase Order'),
        ('Approve Purchase Order', 'Receive Goods'),
        ('Create Invoice', 'Approve Invoice')
    }
}
```
Here's the explanation for the chosen constraints:

- Equivalence constraint between "Create Purchase Requisition" and "Create Purchase Order" ensures that when the purchase is started, the request and the order itself happen together (in a broad sense, i.e., with other activities possibly happening in between).
- The same happens between "Approve Invoice" and "Clear Invoice".
- Always Before, Always After constraints correctly order the process.
- Never Together constraints block abnormal behavior such as approving and cancelling orders contemporaneously.
- Activity Occurrences are mostly limited to one occurrence. Multiple occurrences could happen in other order for some activity. Optionally, activities such as "Approve Purchase Order" and "Cancel Purchase Order" can only happen together zero