ANOMALIES IN THE DECLARE MODEL  

1. Mandatory-Close vs. No-Coexistence with Evaluate  
   • Existence(C) forces every trace to contain at least one Close (C).  
   • NonCoexistence(E,C) forbids any trace that contains Close (C) from also containing Evaluate (E).  
    Result: E becomes a “dead” activity – it can never occur although it is a core step in the intended flow.  

2. Responded-Existence in the wrong direction  
   • RespondedExistence(E,A) only says “if E occurs, A must occur sometime” – it does not guarantee that Assign (A) comes before Evaluate (E).  
   • Business logic requires A to PRECEDE E, not merely co-exist.  

3. Redundant Precedence(R,C)  
   • Precedence(C,R) demands that R appears before every C.  
   • Init(R) already forces R to be the first event in every trace, so the explicit precedence adds nothing and can mask the need for other, more useful, ordering rules (e.g., P before C).  

4. Missing obligations for Approve (P) and Notify (N)  
   • Neither activity is referenced; the model permits a trace R–A–C, skipping both P and N, which contradicts the target process.  

5. Hidden deadlock between rules 1 and 2  
   • Because E is unreachable, the RespondedExistence(E,A) rule will always be trivially satisfied, giving a false sense of correctness.  

6. Potential oversight in specialisation / resource use  
   • No constraint ties Evaluate (E) to an adjuster with the proper specialisation, so system users could perform E without violating the model.  


POSSIBLE REASONS (HYPOTHESES)

• Requirement misinterpretation – “E must not follow C” was captured as “E must not coexist with C”.  
• Incremental policy changes – the obligation to always close a claim (Existence C) was added later without re-evaluating earlier rules.  
• Automatic rule mining – a discovery algorithm inferred NonCoexistence(E,C) from noisy, incomplete logs where Evaluate was systematically missing.  
• Performance pressure – to shorten cycle time, the organisation sometimes closes low-value claims without evaluation; the model was tweaked to legitimise that shortcut.  
• Technical encoding errors – the author intended a “Not Co-Exist E without C” constraint (i.e., E  C) but used the wrong template.  
• Lack of cross-validation – rules were added piecemeal and never checked together for logical consistency.  


SQL-BASED INVESTIGATION STRATEGIES

1. Claims closed without any evaluation (allowed by current model, but undesired in business flow)
```sql
SELECT claim_id
FROM claim_events
GROUP BY claim_id
HAVING COUNT(*) FILTER (WHERE activity = 'C') > 0
   AND COUNT(*) FILTER (WHERE activity = 'E') = 0;
```

2. Traces that violate the model’s own NonCoexistence(E,C) rule (i.e., both E and C appear)
```sql
SELECT claim_id
FROM claim_events
GROUP BY claim_id
HAVING COUNT(*) FILTER (WHERE activity = 'E') > 0
   AND COUNT(*) FILTER (WHERE activity = 'C') > 0;
```

3. Evaluate executed before an Assign, or without any Assign at all
```sql
-- a) E occurs but A never occurs
SELECT claim_id
FROM claim_events
GROUP BY claim_id
HAVING COUNT(*) FILTER (WHERE activity = 'E') > 0
   AND COUNT(*) FILTER (WHERE activity = 'A') = 0;

-- b) A exists but happens after the first E
WITH first_E AS (
    SELECT claim_id, MIN(timestamp) AS first_e_time
    FROM claim_events
    WHERE activity = 'E'
    GROUP BY claim_id
), first_A AS (
    SELECT claim_id, MIN(timestamp) AS first_a_time
    FROM claim_events
    WHERE activity = 'A'
    GROUP BY claim_id
)
SELECT e.claim_id
FROM first_E e
JOIN first_A a USING (claim_id)
WHERE e.first_e_time < a.first_a_time;
```

4. Evaluations performed by a non-adjuster (resource integrity)
```sql
SELECT ce.claim_id,
       ce.resource,
       ce.timestamp
FROM   claim_events  ce
LEFT   JOIN adjusters ad
       ON  ad.adjuster_id::text = ce.resource   -- or ad.name = ce.resource
WHERE  ce.activity = 'E'
  AND  ad.adjuster_id IS NULL;
```

5. Claims that were closed without going through Approve (P) or Notify (N)
```sql
SELECT claim_id
FROM claim_events
GROUP BY claim_id
HAVING COUNT(*) FILTER (WHERE activity = 'C') > 0
   AND COUNT(*) FILTER (WHERE activity = 'P') = 0
   AND COUNT(*) FILTER (WHERE activity = 'N') = 0;
```

6. Frequency report to quantify the impact of each anomaly
```sql
SELECT
    COUNT(DISTINCT CASE WHEN activity = 'E' THEN claim_id END) AS with_evaluate,
    COUNT(DISTINCT CASE WHEN activity = 'C' THEN claim_id END) AS with_close,
    COUNT(DISTINCT case when activity = 'E' then claim_id end)
      - COUNT(DISTINCT case when activity in ('E','C') then claim_id end) as e_without_c
FROM claim_events;
```

Running these queries will show whether the contradictions encoded in the DECLARE model are reflected in real execution data and help prioritise which constraints need to be redesigned.