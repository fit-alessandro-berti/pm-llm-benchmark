```python
log_skeleton = {
    'equivalence': set(),  # No direct equivalence constraints are specified
    'always_before': {(RO, CA), (CA, RI), (RI, PI), (PI, QC), 
                      (QC, PO), (PO, GSL), (GSL, D)},  # Activities must occur in this order
    'always_after': set(),  # No direct "always after" constraints specified in typical sequence logic
    'never_together': {(RO, IC), (CA, IC), (RI, QC), (PI, GSL)},  # Certain activities cannot occur simultaneously
    'activ_freq': {
        'RO': {0},        # Receive Order happens exactly once per case
        'CA': {1},        # Check Availability happens once
        'RI': {1},        # Reserve Items happens once
        'PI': {1},        # Pick Items happens once
        'QC': {1},        # Quality Check happens once
        'PO': {1},        # Pack Order happens once
        'GSL': {1},       # Generate Shipping Label happens once
        'D': {1},         # Dispatch happens once
        'IC': {0, 1},     # Invoice Customer can happen either not at all or after Dispatch
        'RP': {0, 1}      # Record Payment can occur either not at all or after Invoice Customer
    },
    'directly_follows': {(RO, CA), (CA, RI), (RI, PI), (PI, QC), 
                        (QC, PO), (PO, GSL), (GSL, D),
                        (D, IC), (IC, RP)  # Dispatch directly followed by Invoice Customer and then Record Payment
                    }
}
```

### Explanation:

- **Equivalence:** No activities have an exact equivalence specified. Hence, the `equivalence` set is empty.
  
- **Always Before:** Defines a strict sequential order for activities. Each pair in this set indicates that the second activity must precede the first one in any case.
  
- **Never Together:** Specifies forbidden simultaneous executions to avoid conflicts (e.g., `RO` and `IC`, etc.).
  
- **Activity Occurrences (`activ_freq`):** Sets bounds for each activity's occurrences per case, specifying either 0 or 1 as allowed counts, except for `IC` and `RP` which can happen zero times (if the order isn't invoiced) or one time.
  
- **Directly Follows:** Reinforces sequential constraints explicitly by stating direct transitions between activities where possible. The final pair `(D, IC)` and `(IC, RP)` signify that Dispatch directly precedes Invoice Customer and Record Payment respectively, reflecting the typical workflow. 

This Log Skeleton serves as a blueprint for verifying and validating process adherence in the order fulfillment scenario described, ensuring that actual log data conforms to these constraints.