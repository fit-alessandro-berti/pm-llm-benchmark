To address this requirement with a DuckDB SQL query, we'll follow these steps:

1. Identify cases where 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' occur in succession.
2. Further filter those cases to ensure there's more than 5 days between the 'Create Order' event and the 'Confirm Order' event.
3. Exclude such events from `event_log`.

Hereâ€™s how you can achieve that:

```sql
WITH 
    # Step 1: Identify cases with a specific sequence of activities
    sequences AS (
        SELECT case_id,
               activity
          FROM event_log
         WHERE (activity = 'Approve Purchase Requisition' AND LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Create Order'
                AND LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Confirm Order')
    ),
    
    # Step 2: Further filter cases where the time between 'Create Order' and 'Confirm Order' exceeds 5 days
    long_wait AS (
        SELECT s.case_id,
               MIN(s.timestamp) as create_order_timestamp,
               MAX(w.timestamp) as confirm_order_timestamp,
               DATEDIFF(day, w.timestamp, s.timestamp) as wait_time
          FROM sequences s
          JOIN event_log w ON s.case_id = w.case_id AND w.activity = 'Confirm Order'
                        AND w.timestamp > s.timestamp + INTERVAL '1 day'
         GROUP BY s.case_id
    ),
    
    # Step 3: Get the final cases to exclude from `event_log`
    excluded_cases AS (
        SELECT case_id FROM long_wait WHERE wait_time > 5
    )

SELECT * 
FROM event_log e 
LEFT JOIN excluded_cases ec ON e.case_id = ec.case_id
WHERE ec.case_id IS NULL;
```

### Explanation:

1. **Identifying Sequences**: The `sequences` CTE identifies cases where 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' occur in succession.

2. **Further Filtering with Waiting Time**: The `long_wait` CTE checks the duration between 'Create Order' and 'Confirm Order'. If the wait time is more than 5 days, it records these cases in a subquery.

3. **Excluding Cases**: We use the `excluded_cases` to filter out events from those specific cases where the sequences and waiting times meet our criteria.

4. Finally, we select all events from `event_log`, but only return those that do not belong to any of the excluded cases (as determined by `LEFT JOIN` with the filtered case IDs).

This query ensures that you get all events from `event_log` except for those belonging to cases where there is a specific sequence and timing condition.