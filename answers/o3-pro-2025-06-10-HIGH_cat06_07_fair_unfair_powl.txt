Below are two self-contained POWL snippets that you can copy–paste into a Python notebook or script that has pm4py installed.  
Each snippet builds one complete workflow object (`root_unfair` and `root_fair`).  
Both models share the same basic skeleton (application reception, data-completeness loop, skill test, managerial review and final decision), but:

• Model 1 includes an XOR after the skill test that can route the applicant either to a normal cultural fit evaluation OR to a “CommunityAffiliationCheck” that gives a hidden advantage (the potential unfairness).  
• Model 2 removes that branch; every applicant must pass through the same cultural-fit activity.

------------------------------------------------
1) POWL model that still contains the potential unfairness
------------------------------------------------
```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# --- atomic activities ---
receive          = Transition(label="ReceiveApplication")
resume_parse     = Transition(label="ResumeParsing")
data_check       = Transition(label="DataCompletenessCheck")
request_info     = Transition(label="RequestMoreInfo")
skill_test       = Transition(label="SkillAssessment")
cultural_fit     = Transition(label="CulturalFitCheck")
community_affil  = Transition(label="CommunityAffiliationCheck")   #  potential bias path
manager_review   = Transition(label="ManagerialReview")
final_decision   = Transition(label="FinalDecision")

# --- loop for missing-data handling ---
data_loop = OperatorPOWL(operator=Operator.LOOP,
                         children=[data_check, request_info])

# --- XOR that introduces different evaluation paths (fair vs. privileged) ---
culture_xor = OperatorPOWL(operator=Operator.XOR,
                           children=[cultural_fit, community_affil])

# --- build the global partial order (strict sequence apart from the internal loop/XOR) ---
nodes_unfair = [receive, resume_parse, data_loop, skill_test,
                culture_xor, manager_review, final_decision]
root_unfair = StrictPartialOrder(nodes=nodes_unfair)

root_unfair.order.add_edge(receive,       resume_parse)
root_unfair.order.add_edge(resume_parse,  data_loop)
root_unfair.order.add_edge(data_loop,     skill_test)
root_unfair.order.add_edge(skill_test,    culture_xor)
root_unfair.order.add_edge(culture_xor,   manager_review)
root_unfair.order.add_edge(manager_review, final_decision)
```

------------------------------------------------
2) POWL model with the unfair branch removed
------------------------------------------------
```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# --- atomic activities ---
receive        = Transition(label="ReceiveApplication")
resume_parse   = Transition(label="ResumeParsing")
data_check     = Transition(label="DataCompletenessCheck")
request_info   = Transition(label="RequestMoreInfo")
skill_test     = Transition(label="SkillAssessment")
cultural_fit   = Transition(label="CulturalFitCheck")     # single, uniform path
manager_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# --- loop for missing-data handling ---
data_loop = OperatorPOWL(operator=Operator.LOOP,
                         children=[data_check, request_info])

# --- build the global partial order (no XOR this time) ---
nodes_fair = [receive, resume_parse, data_loop, skill_test,
              cultural_fit, manager_review, final_decision]
root_fair = StrictPartialOrder(nodes=nodes_fair)

root_fair.order.add_edge(receive,       resume_parse)
root_fair.order.add_edge(resume_parse,  data_loop)
root_fair.order.add_edge(data_loop,     skill_test)
root_fair.order.add_edge(skill_test,    cultural_fit)
root_fair.order.add_edge(cultural_fit,  manager_review)
root_fair.order.add_edge(manager_review, final_decision)
```

How to interpret the models:

• `data_loop` (“DataCompletenessCheck”  “RequestMoreInfo”) allows an arbitrary number of back-and-forth iterations until the resume is complete.  
• In `root_unfair`, `culture_xor` permits either a normal cultural-fit test or a privileged “CommunityAffiliationCheck,” producing the hidden advantage.  
• `root_fair` forces every applicant through the exact same “CulturalFitCheck,” eliminating that bias source while keeping all other behavioural aspects identical.