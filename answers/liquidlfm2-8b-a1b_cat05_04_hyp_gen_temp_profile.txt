### Anomalies in Temporal Profile

- The time between **Receive (R) and Approve (P)** averages 25 hours with a very low standard deviation (~10 minutes), suggesting an artificially tight and rigid approval window that rarely varies, inconsistent with flexible or variable business-policy-driven timelines.

- The interval from **Approve (P) to Notify (N)** averages 7 days on average with high variability (up to 2 days), indicating erratic scheduling of customer notifications, possibly due to processing backlogs or system failures rather than policy.

- The **Assign (A) to Close (C)** interval averages just 2 hours, extremely short compared to the average 1 day for **Assign to Close**, suggesting incomplete or skipped intermediate steps, meaning some claims progress directly without adequate evaluation.

- Transitions **Evaluate (E) to Notify (N)** average only 5 minutes, far below the typical 8-hour window, implying either rushed processing, skipped validation, or external system delays preventing timely communication.

- Overall, the model shows inconsistent timing patterns: bounded short intervals in approval and notification, but highly stretched timelines in evaluative stages, indicating an unstable workflow with possible bottlenecks or automation flaws.

---

### Hypotheses on Anomalies

- The tightly bounded timelines for **RP** and **CP** may result from rigid internal scheduling or template-driven automation that eliminates variability, making the process brittle to exceptions.

- The long **PN** average and high standard deviation suggest irregularities caused by temporary system outages, manual data reprocesses, or inconsistent workload distribution affecting timely notification.

- The unusually short **AC**, devoid of intermediate steps like Evaluation (E), indicates possible shortcuts that bypass standard risk assessment or compliance mechanisms, potentially increasing claim approval errors.

- The minimal time between **EN** reflects external factors such as delayed review cycles, automated workflow triggers firing out of sequence, or customer communication system failures.

---

### Verification Queries Using SQL

```sql
-- Identify claims with abnormal R to P interval (outside ±2 * STDEV)
SELECT 
    c.claim_id,
    c.submission_date,
    a.name AS adjuster,
    act_rmp.period AS rp_period,
    act_app_pp.period AS app_pp_period,
    act_e_n.period AS eval_n_period,
    act_pn.period AS notify_after_approve,
    act_nc.period AS notify_after_assign
FROM 
    claim_events ce
JOIN claim_events act_rmp ON ce.claim_id = ce.claim_id AND ce.activity = 'R' AND act_rmp.activity = 'P'
JOIN claim_events act_app_pp ON ce.claim_id = ce.claim_id AND ce.activity = 'A' AND act_app_pp.activity = 'P'
JOIN claim_events act_e_n ON ce.claim_id = ce.claim_id AND ce.activity = 'E' AND act_e_n.activity = 'N'
JOIN claim_events act_pn ON ce.claim_id = ce.claim_id AND ce.activity = 'P' AND act_pn.activity = 'N'
JOIN claim_events act_nc ON ce.claim_id = ce.claim_id AND ce.activity = 'N' AND act_nc.activity = 'C'
WHERE 
    ce.timestamp IS NOT NULL 
    AND ce.activity = 'R'
ORDER BY 
    rp_period * 1.0 + act_app_pp.period * 1.0 + act_e_n.period * 1.0 + act_pn.period * 1.0 + act_nc.period * 1.0;

-- Find claims with >2-day gaps (e.g., P to N) among those with R to P within normal bounds to detect delayed notifications after approval
SELECT 
    c.claim_id,
    c.submission_date,
    a.name,
    act_rp.period AS rp_sec,
    act_app_pp.period AS app_pp_sec,
    act_e_n.period AS eval_n_sec,
    act_pn.period AS notify_delay_sec,
    act_nc.period AS notify_gap_sec
FROM 
    claim_events ce
JOIN claim_events act_rmp ON ce.claim_id = ce.claim_id AND ce.activity = 'R' AND act_rmp.activity = 'P'
JOIN claim_events act_app_pp ON ce.claim_id = ce.claim_id AND ce.activity = 'A' AND act_app_pp.activity = 'P'
JOIN claim_events act_e_n ON ce.claim_id = ce.claim_id AND ce.activity = 'E' AND act_e_n.activity = 'N'
JOIN claim_events act_pn ON ce.claim_id = ce.claim_id AND ce.activity = 'P' AND act_pn.activity = 'N'
JOIN claim_events act_nc ON ce.claim_id = ce.claim_id AND ce.activity = 'N' AND act_nc.activity = 'C'
WHERE 
    act_rp.period BETWEEN 3600 AND 86400  -- R to P within 1 hour to 1 day
    AND act_app_pp.period BETWEEN 86400 AND 28800  -- Assign to Close (1 to 3 days)
    AND act_e_n.period > 300  -- E to N longer than 5 minutes
    AND act_pn.period < 3600 OR act_nc.period < 1800  -- N to C takes less than 30 min or closes instantly (outliers)
ORDER BY 
    notify_gap_sec DESC;
```

```sql
-- Analyze adjuster activity patterns: compare closure speed grouped by region or specialization
SELECT 
    CASE 
        WHEN adjuster.region IN ('Midwest', 'South') THEN 'Southern/Western'
        WHEN adjuster.region IN ('Northeast') THEN 'Northeast'
        WHEN adjuster.region IN ('Central') THEN 'Central'
        ELSE 'Other'
    END AS region_jurisdiction,  
    AVG(EXTRACT(HOUR FROM act_c.timestamp - act_app_pp.timestamp)) AS avg_c_in_seconds,  -- Closure from Assign to Close
    AVG(EXTENDED_EPOCH(act_e_n.timestamp - act_pn.timestamp)) AS eval_to_notify_avg_sec,
    COUNT(DISTINCT act_c.claim_id) AS claims_handled
FROM 
    claim_events ce
JOIN adjusters ad ON ce.resource = ad.adjuster_id
JOIN claim_events act_app_pp ON ce.claim_id = ce.claim_id AND ce.activity = 'A' AND act_app_pp.activity = 'P'
JOIN claim_events act_e_n ON ce.claim_id = ce.claim_id AND ce.activity = 'E' AND act_e_n.activity = 'N'
JOIN claim_events act_pn ON ce.claim_id = ce.claim_id AND ce.activity = 'P' AND act_pn.activity = 'N'
WHERE 
    act_app_pp.timestamp IS NOT NULL 
    AND act_c.timestamp IS NOT NULL
GROUP BY 
    region_jurisdiction
ORDER BY 
    avg_c_in_seconds DESC;  -- Identify slow closing adjusters by region
```