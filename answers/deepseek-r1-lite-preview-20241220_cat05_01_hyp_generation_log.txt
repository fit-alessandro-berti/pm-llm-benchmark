### Step-by-Step Explanation

1. **Analyze the Process Flow for Each Order:**

   - The normal process flow is:
     1. Register Order (Sales)
     2. Perform Credit Check (Finance)
     3. Validate Stock (Warehouse)
     4. Confirm Shipment (Logistics)
     5. Ship Goods (Logistics)
     6. Issue Invoice (Finance)
     7. Receive Payment (Finance)

2. **Identify Anomalies in the Event Logs:**

   - **Case 1002:**
     - "Confirm Shipment" occurs before "Perform Credit Check."
     - This deviation could indicate a policy violation or procedural error.

   - **Case 1003:**
     - "Ship Goods" occurs before "Validate Stock."
     - Shipping without validating stock may lead to stock discrepancies.

   - **Case 1004:**
     - "Receive Payment" occurs before "Perform Credit Check" and "Ship Goods."
     - Receiving payment without credit checks could expose the company to bad debt.

3. **Hypothesize Reasons for Anomalies:**

   - **Procedural Errors:**
     - Staff might be skipping steps due to misunderstanding the process.

   - **System Errors:**
     - The system might allow activities to be performed out of order.

   - **Policy Violations:**
     - Intentional bypassing of checks for expedited order processing.

   - **Training Issues:**
     - Inadequate training on the correct process flow.

4. **Propose SQL Queries to Investigate Further:**

   - **Query 1:** Find all cases where "Confirm Shipment" occurs before "Perform Credit Check."

     ```sql
     SELECT o1.case_id
     FROM order_event_log o1
     JOIN order_event_log o2 ON o1.case_id = o2.case_id
     WHERE o1.activity = 'Confirm Shipment'
       AND o2.activity = 'Perform Credit Check'
       AND o1.timestamp < o2.timestamp;
     ```

   - **Query 2:** Find all cases where "Ship Goods" occurs before "Validate Stock."

     ```sql
     SELECT o1.case_id
     FROM order_event_log o1
     JOIN order_event_log o2 ON o1.case_id = o2.case_id
     WHERE o1.activity = 'Ship Goods'
       AND o2.activity = 'Validate Stock'
       AND o1.timestamp < o2.timestamp;
     ```

   - **Query 3:** Find all cases where "Receive Payment" occurs before "Perform Credit Check."

     ```sql
     SELECT o1.case_id
     FROM order_event_log o1
     JOIN order_event_log o2 ON o1.case_id = o2.case_id
     WHERE o1.activity = 'Receive Payment'
       AND o2.activity = 'Perform Credit Check'
       AND o1.timestamp < o2.timestamp;
     ```

   - **Query 4:** Identify resources involved in out-of-order activities.

     ```sql
     SELECT o1.resource, r.role, r.department
     FROM order_event_log o1
     JOIN order_event_log o2 ON o1.case_id = o2.case_id
     JOIN resources r ON o1.resource = r.resource_id
     WHERE o1.activity = 'Confirm Shipment'
       AND o2.activity = 'Perform Credit Check'
       AND o1.timestamp < o2.timestamp;
     ```

   - **Query 5:** Check if there are timing anomalies, such as activities happening too quickly.

     ```sql
     SELECT case_id, activity, timestamp,
            EXTRACT(EPOCH FROM (timestamp - LAG(timestamp) OVER (PARTITION BY case_id ORDER BY timestamp))) AS time_diff
     FROM order_event_log
     ORDER BY case_id, timestamp;
     ```

5. **Analyze Results and Take Action:**

   - Review the results of the queries to identify patterns.
   - Investigate specific cases and resources involved.
   - Consider retraining staff or updating the system to prevent future anomalies.

### Conclusion

By identifying and investigating these anomalies, the company can improve process adherence, reduce risks, and enhance overall operational efficiency.