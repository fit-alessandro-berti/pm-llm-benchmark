To achieve the task described, we can use a subquery or a Common Table Expression (CTE) to first count the number of events per `case_id`, filter out those `case_id` values with more than six events, and then select the events from the original `event_log` table for the remaining `case_id` values.

Here is a SQL query that accomplishes the task using a subquery:

```sql
SELECT *
FROM event_log
WHERE case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
);
```

This query works as follows:
1. The subquery (the inner SELECT statement) groups the `event_log` table by `case_id` and counts the number of rows for each group. It uses the `HAVING COUNT(*) <= 6` clause to only include `case_id` values that are associated with six or fewer events.
2. The outer query selects all columns (`*`) from the `event_log` table but only for the `case_id` values that are returned by the subquery.

Alternatively, you can achieve the same result using a Common Table Expression (CTE):

```sql
WITH filtered_cases AS (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
SELECT e.*
FROM event_log e
JOIN filtered_cases f ON e.case_id = f.case_id;
```

This CTE version works similarly:
1. The CTE (`filtered_cases`) identifies the `case_id` values that have six or fewer events by grouping the `event_log` and applying the count condition.
2. The main query joins the original `event_log` table with the `filtered_cases` CTE on `case_id`, effectively filtering out any events belonging to cases with more than six events.

Both of these approaches should be compatible with DuckDB and accomplish the task as described.