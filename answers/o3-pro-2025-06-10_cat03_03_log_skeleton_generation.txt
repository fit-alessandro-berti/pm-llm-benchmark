```python
# Log–Skeleton for the order-fulfilment process
log_skeleton = {

    # 1.  Equivalence  ----------------------------------------------
    #     – “Pack Order” and “Generate Shipping Label” always occur
    #       the same number of times (exactly once, or not at all
    #       in the very same case).
    #     – “Reserve Items” and “Pick Items” are also equivalent
    #       (one reservation  one picking).
    'equivalence': {
        ('PO', 'GSL'),
        ('RI', 'PI')
    },

    # 2.  Always-Before  --------------------------------------------
    #     If the first activity is seen, the second one must already
    #     have happened somewhere earlier in the trace.
    'always_before': {
        ('CA', 'RO'),   # can only check availability after order received
        ('RI', 'CA'),   # reservation only after availability check
        ('PI', 'RI'),   # pick only after reservation
        ('QC', 'PI'),   # quality check after picking
        ('PO', 'QC'),   # packing after quality check
        ('GSL', 'PO'),  # label after packing
        ('D',  'GSL'),  # dispatch after label creation
        ('IC', 'D'),    # invoice after dispatch
        ('RP', 'IC')    # payment record after invoice
    },

    # 3.  Always-After  ---------------------------------------------
    #     Dual of “always_before” – kept explicitly for completeness.
    'always_after': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D',  'IC'),
        ('IC', 'RP')
    },

    # 4.  Never-Together  -------------------------------------------
    #     No mutually exclusive activities have been identified for
    #     this scenario, so the set is left empty.
    'never_together': set(),

    # 5.  Activity-frequency (per case) -----------------------------
    #     All activities happen exactly once, except that recording
    #     the payment can legitimately be missing (open invoices).
    'activ_freq': {
        'RO': {1},   # Receive Order
        'CA': {1},   # Check Availability
        'RI': {1},   # Reserve Items
        'PI': {1},   # Pick Items
        'QC': {1},   # Quality Check
        'PO': {1},   # Pack Order
        'GSL': {1},  # Generate Shipping Label
        'D':  {1},   # Dispatch
        'IC': {1},   # Invoice Customer
        'RP': {0,1}  # Record Payment (optional – might be unpaid yet)
    },

    # 6.  Directly-Follows constraints ------------------------------
    #     The “happy-path” sequence that is normally observed.
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D',  'IC'),
        ('IC', 'RP')
    }
}
```