To generate a temporal profile for the given process, we need to calculate the average and standard deviation of the times between couples of activities that eventually follow each other in at least one process execution. The temporal profile will be represented as a Python dictionary, where each key is a tuple of two activities, and the value is another tuple containing the average time and standard deviation between those activities.

Given the complexity of the process with multiple variants and activities, we'll need to consider all possible pairs of activities across all process variants and calculate the statistics based on the provided frequencies and performances.

### Approach

1. **Extract Activity Pairs:**
   - For each process variant, extract all unique pairs of activities that follow each other, not just directly.
   - For example, in the trace `Create Fine -> Send Fine -> Insert Fine Notification -> Add penalty -> Send for Credit Collection`, the pairs would be:
     - (Create Fine, Send Fine)
     - (Create Fine, Insert Fine Notification)
     - (Create Fine, Add penalty)
     - (Create Fine, Send for Credit Collection)
     - (Send Fine, Insert Fine Notification)
     - (Send Fine, Add penalty)
     - (Send Fine, Send for Credit Collection)
     - (Insert Fine Notification, Add penalty)
     - (Insert Fine Notification, Send for Credit Collection)
     - (Add penalty, Send for Credit Collection)

2. **Calculate Time Differences:**
   - For each pair of activities, calculate the time difference based on the performance data provided for each variant.
   - Since performance is given for each variant, we can assume it represents the total time for that variant.
   - To find the time between two activities, we need to apportion the total performance time based on the position of the activities in the variant.

3. **Aggregate Statistics:**
   - For each pair, collect the time differences from all variants where the pair appears.
   - Calculate the average and standard deviation of these time differences.

4. **Construct the Temporal Profile:**
   - Store the averages and standard deviations in a dictionary structured as described.

### Solution Code

```python
import numpy as np

def generate_temporal_profile(variants):
    activity_pairs = {}
    
    for variant in variants:
        activities = variant['activities']
        frequency = variant['frequency']
        performance = variant['performance']
        
        n = len(activities)
        for i in range(n):
            for j in range(i+1, n):
                pair = (activities[i], activities[j])
                if pair not in activity_pairs:
                    activity_pairs[pair] = []
                # Assuming linear distribution of time between activities
                time_diff = performance * (j - i) / n
                activity_pairs[pair].extend([time_diff] * frequency)
    
    temporal_profile = {}
    for pair, times in activity_pairs.items():
        avg = np.mean(times)
        std = np.std(times)
        temporal_profile[pair] = (avg, std)
    
    return temporal_profile

# Example usage
variants = [
    {
        'activities': ['Create Fine', 'Send Fine', 'Insert Fine Notification', 'Add penalty', 'Send for Credit Collection'],
        'frequency': 56482,
        'performance': 59591524.946
    },
    # Add other variants similarly
]

temporal_profile = generate_temporal_profile(variants)
print(temporal_profile)
```

### Explanation

1. **Extract Activity Pairs:**
   - For each variant, generate all possible pairs of activities that follow each other.
   
2. **Calculate Time Differences:**
   - Assume the performance time is linearly distributed among the activities.
   - Calculate the time difference for each pair based on their positions in the variant.
   
3. **Aggregate Statistics:**
   - Collect time differences for each pair across all variants.
   - Use numpy to calculate the average and standard deviation for each pair.
   
4. **Construct the Temporal Profile:**
   - Store the results in a dictionary for easy access and reference.

This approach provides a comprehensive temporal profile for the given process, considering all possible activity pairs and their time differences across different process variants.