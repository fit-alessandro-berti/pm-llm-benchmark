### Temporal Profile Construction

To create a representative temporal profile for the global supply chain process, we'll consider various pairs of activities and estimate their average times and standard deviations based on general industry knowledge. The temporal profile is expressed as a Python dictionary where keys are tuples of activity labels, and values are tuples of `(average_time, standard_deviation)`.

```python
temporal_profile = {
    # Directly connected activities
    ('SS', 'OP'): (172800, 86400),  # Supplier selection to order placement: 2 days avg, 1 day std dev
    ('OP', 'RC'): (604800, 172800),  # Order placement to receive components: 7 days avg, 2 days std dev
    ('RC', 'QI'): (86400, 43200),  # Receive components to quality inspection: 1 day avg, 0.5 days std dev
    ('QI', 'CA'): (86400, 43200),  # Quality inspection to component assembly: 1 day avg, 0.5 days std dev
    ('CA', 'PT'): (172800, 86400),  # Component assembly to product testing: 2 days avg, 1 day std dev
    ('PT', 'PK'): (86400, 43200),  # Product testing to packaging: 1 day avg, 0.5 days std dev
    ('PK', 'WS'): (43200, 21600),  # Packaging to warehouse storage: 0.5 days avg, 0.25 days std dev
    ('WS', 'DT'): (86400, 43200),  # Warehouse storage to distribution: 1 day avg, 0.5 days std dev
    ('DT', 'AS'): (1209600, 604800),  # Distribution to after-sales support: 14 days avg, 7 days std dev

    # Activities separated by multiple steps
    ('SS', 'RC'): (1209600, 604800),  # Supplier selection to receive components: 14 days avg, 7 days std dev
    ('OP', 'CA'): (1209600, 604800),  # Order placement to component assembly: 14 days avg, 7 days std dev
    ('QI', 'PT'): (259200, 120960),  # Quality inspection to product testing: 3 days avg, 1.5 days std dev
    ('CA', 'WS'): (345600, 172800),  # Component assembly to warehouse storage: 4 days avg, 2 days std dev
    ('PT', 'DT'): (345600, 172800),  # Product testing to distribution: 4 days avg, 2 days std dev
    ('PK', 'AS'): (604800, 302400),  # Packaging to after-sales support: 7 days avg, 3.5 days std dev
}

# Example usage:
def check_deviation(activity_pair, observed_time, zeta):
    avg, std_dev = temporal_profile[activity_pair]
    lower_bound = avg - zeta * std_dev
    upper_bound = avg + zeta * std_dev
    if observed_time < lower_bound or observed_time > upper_bound:
        return True
    return False

zeta = 2.0  # Example zeta value
observed_time = 100000  # Example observed time
activity_pair = ('SS', 'OP')  # Example activity pair

if check_deviation(activity_pair, observed_time, zeta):
    print(f"Deviation detected for {activity_pair} with observed time {observed_time} and zeta {zeta}")
else:
    print(f"No deviation detected for {activity_pair} with observed time {observed_time} and zeta {zeta}")
```

### Explanation

The `temporal_profile` dictionary includes both directly connected activities and those separated by multiple steps. Estimated average times and standard deviations are provided for each pair, considering typical industry lead times and efficiency factors.

*   The `check_deviation` function allows you to determine if a deviation occurs for a given activity pair, observed time, and zeta value.
*   Example usage is provided to demonstrate how to use the `check_deviation` function with a specific activity pair, observed time, and zeta value.

Feel free to adjust the estimated times and standard deviations according to your specific supply chain process and industry knowledge. The `temporal_profile` dictionary serves as a starting point for constructing your process's temporal profile.