Let's construct an accepting Petri net for the insurance claim management process using `pm4py`. The Petri net will model the sequence of activities, including the loops for re-submission of documents and in-depth investigation. Below is the detailed Python code to construct the Petri net, define the places, transitions, arcs, and initial and final markings.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a Petri net for the insurance claim management process
net = PetriNet(name="insurance_claim_process")

# Define places (states between activities)
start = PetriNet.Place(name="start")  # Start of the process (new claim)
p1 = PetriNet.Place(name="after_cr")  # After Claim Registration
p2 = PetriNet.Place(name="after_dv")  # After Document Verification
p3 = PetriNet.Place(name="after_fc")  # After Fraud Check
p4 = PetriNet.Place(name="after_ca")  # After Claim Assessment
p5 = PetriNet.Place(name="after_ap")  # After Approval (if needed)
p6 = PetriNet.Place(name="after_p")   # After Payment
p7 = PetriNet.Place(name="after_n")   # After Notification
end = PetriNet.Place(name="end")      # End of the process (claim closed)
p_rds = PetriNet.Place(name="need_rds")  # Need Re-Document Submission (loop)
p_ii = PetriNet.Place(name="need_ii")    # Need In-depth Investigation (loop)

# Add places to the Petri net
net.places.add(start)
net.places.add(p1)
net.places.add(p2)
net.places.add(p3)
net.places.add(p4)
net.places.add(p5)
net.places.add(p6)
net.places.add(p7)
net.places.add(end)
net.places.add(p_rds)
net.places.add(p_ii)

# Define transitions (activities)
cr = PetriNet.Transition(name="cr", label="Claim Registration")
dv = PetriNet.Transition(name="dv", label="Document Verification")
fc = PetriNet.Transition(name="fc", label="Fraud Check")
ca = PetriNet.Transition(name="ca", label="Claim Assessment")
ap = PetriNet.Transition(name="ap", label="Approval")
p = PetriNet.Transition(name="p", label="Payment")
n = PetriNet.Transition(name="n", label="Notification")
cl = PetriNet.Transition(name="cl", label="Closure")
rds = PetriNet.Transition(name="rds", label="Re-Document Submission")
ii = PetriNet.Transition(name="ii", label="In-depth Investigation")

# Add transitions to the Petri net
net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(fc)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl)
net.transitions.add(rds)
net.transitions.add(ii)

# Define arcs (connections between places and transitions)
# Start -> Claim Registration -> p1
petri_utils.add_arc_from_to(start, cr, net)
petri_utils.add_arc_from_to(cr, p1, net)

# p1 -> Document Verification -> p2 (normal flow) or p_rds (loop for re-submission)
petri_utils.add_arc_from_to(p1, dv, net)
petri_utils.add_arc_from_to(dv, p2, net)
petri_utils.add_arc_from_to(dv, p_rds, net)  # Loop: if documents are incomplete
petri_utils.add_arc_from_to(p_rds, rds, net)
petri_utils.add_arc_from_to(rds, p1, net)    # Back to before DV

# p2 -> Fraud Check -> p3 (normal flow) or p_ii (loop for in-depth investigation)
petri_utils.add_arc_from_to(p2, fc, net)
petri_utils.add_arc_from_to(fc, p3, net)
petri_utils.add_arc_from_to(fc, p_ii, net)   # Loop: if fraud suspected
petri_utils.add_arc_from_to(p_ii, ii, net)
petri_utils.add_arc_from_to(ii, p2, net)     # Back to before FC

# p3 -> Claim Assessment -> p4
petri_utils.add_arc_from_to(p3, ca, net)
petri_utils.add_arc_from_to(ca, p4, net)

# p4 -> Approval -> p5 (if needed, assuming it always happens for simplicity)
petri_utils.add_arc_from_to(p4, ap, net)
petri_utils.add_arc_from_to(ap, p5, net)

# p5 -> Payment -> p6
petri_utils.add_arc_from_to(p5, p, net)
petri_utils.add_arc_from_to(p, p6, net)

# p6 -> Notification -> p7
petri_utils.add_arc_from_to(p6, n, net)
petri_utils.add_arc_from_to(n, p7, net)

# p7 -> Closure -> End
petri_utils.add_arc_from_to(p7, cl, net)
petri_utils.add_arc_from_to(cl, end, net)

# Define initial marking (a token in the start place)
im = Marking()
im[start] = 1

# Define final marking (a token in the end place)
fm = Marking()
fm[end] = 1

# Print the Petri net details (optional, for debugging)
print("Petri Net Name:", net.name)
print("Places:", [place.name for place in net.places])
print("Transitions:", [trans.name for trans in net.transitions])
print("Initial Marking:", dict(im))
print("Final Marking:", dict(fm))
```

### Explanation of the Petri Net Construction:
1. **Places**: Represent states in the process, such as the start of the process, states after each activity, and special places for loops (`need_rds` for re-submission of documents and `need_ii` for in-depth investigation).
2. **Transitions**: Represent the activities in the process (e.g., "Claim Registration", "Document Verification", etc.), each with a label for clarity.
3. **Arcs**: Define the flow of the process:
   - Normal flow: From `start` to `end` through the sequence of activities (`CR -> DV -> FC -> CA -> AP -> P -> N -> CL`).
   - Loops:
     - After `DV`, if documents are incomplete, a token goes to `p_rds`, triggering `RDS`, and returns to the state before `DV`.
     - After `FC`, if fraud is suspected, a token goes to `p_ii`, triggering `II`, and returns to the state before `FC`.
4. **Initial Marking (im)**: A token is placed in the `start` place, indicating a new claim has arrived.
5. **Final Marking (fm)**: A token is placed in the `end` place, indicating the claim is closed.

### Notes:
- The Petri net assumes that the `Approval` step always happens for simplicity. In a more complex model, you could add a decision place to skip `Approval` if the claim amount is below the threshold.
- The loops (`RDS` and `II`) allow multiple iterations if needed, as tokens can cycle back to earlier states.
- The structure ensures that the process starts with a token in `start` and ends with a token in `end`, satisfying the definition of an accepting Petri net.

This code constructs a complete accepting Petri net for the insurance claim management process, and you can further visualize it using `pm4py`'s visualization tools if needed (e.g., `pm4py.visualization.petri_net.visualizer.apply(net, im, fm)`).