Complete process-tree (text notation)

->(                                   «overall sequence»
  'A',                                Arrival
  'RG',                               Registration
  'IA',                               Intake assessment
  'TI',                               Triage interview
  'TC',                               Triage classification
  X('CE','FBP'),                      XOR on the first diagnostic test
                                      — CE  vs  FBP
  *(                                  LOOP that may be executed 0, 1, … n times
     tau,                             1st child =    the loop may be skipped
     ->(                              2nd child = activities executed in every
        'SC',                               repetition
        X('TM','SPT'),                      XOR treatment (medication vs therapy)
        X('FCE','FBA')                      XOR follow-up test
     )
   ),
  +('AI','NC'),                       Parallel advanced imaging & nutrition
  'FAS',                              Follow-up appointment scheduling
  'DDI',                              Detailed discharge instructions
  +('BL','ICP','MRF')                 Final parallel clearances
)

Interpretation

1. A  RG  IA  TI  TC are always executed in this exact order.
2. CE XOR FBP: only one of the two initial diagnostic tests is performed.
3. The loop models the “abnormal-results re-work” cycle.  
   • Because the first child of * is , the whole loop can be skipped (normal results).  
   • If executed, every iteration performs SC, then chooses between TM or SPT, then chooses between FCE or FBA, after which the decision to iterate again is taken.
4. AI and NC are done in true concurrency; both must finish before the process continues.
5. FAS  DDI is a fixed sequence.
6. BL, ICP and MRF run in parallel as the last step before the patient is released.

--------------------------------------------------------------------
Python construction with pm4py

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# root sequence
root = ProcessTree(operator=Operator.SEQUENCE)

# 1. simple linear activities
for act in ["A", "RG", "IA", "TI", "TC"]:
    child = ProcessTree(label=act, parent=root)
    root.children.append(child)

# 2. XOR (CE vs FBP)
xor_diag = ProcessTree(operator=Operator.XOR, parent=root)
xor_diag.children.append(ProcessTree(label="CE", parent=xor_diag))
xor_diag.children.append(ProcessTree(label="FBP", parent=xor_diag))
root.children.append(xor_diag)

# 3. LOOP  ( ,  SC  (TM xor SPT)  (FCE xor FBA) )
loop = ProcessTree(operator=Operator.LOOP, parent=root)

tau = ProcessTree(label=None, operator=None, parent=loop)  # 
loop.children.append(tau)

#    body of every repetition
body = ProcessTree(operator=Operator.SEQUENCE, parent=loop)

sc = ProcessTree(label="SC", parent=body)
body.children.append(sc)

xor_treat = ProcessTree(operator=Operator.XOR, parent=body)
xor_treat.children.append(ProcessTree(label="TM", parent=xor_treat))
xor_treat.children.append(ProcessTree(label="SPT", parent=xor_treat))
body.children.append(xor_treat)

xor_follow = ProcessTree(operator=Operator.XOR, parent=body)
xor_follow.children.append(ProcessTree(label="FCE", parent=xor_follow))
xor_follow.children.append(ProcessTree(label="FBA", parent=xor_follow))
body.children.append(xor_follow)

loop.children.append(body)
root.children.append(loop)

# 4. Parallel AI and NC
par_imaging = ProcessTree(operator=Operator.PARALLEL, parent=root)
par_imaging.children.append(ProcessTree(label="AI", parent=par_imaging))
par_imaging.children.append(ProcessTree(label="NC", parent=par_imaging))
root.children.append(par_imaging)

# 5. FAS  DDI
root.children.append(ProcessTree(label="FAS", parent=root))
root.children.append(ProcessTree(label="DDI", parent=root))

# 6. Final parallel clearances BL | ICP | MRF
par_clear = ProcessTree(operator=Operator.PARALLEL, parent=root)
for act in ["BL", "ICP", "MRF"]:
    par_clear.children.append(ProcessTree(label=act, parent=par_clear))
root.children.append(par_clear)
```

Executing this script yields a ProcessTree object that exactly matches the textual tree shown above and faithfully captures the complete patient-management scenario, including all sequences, choices, loops, and concurrent blocks.