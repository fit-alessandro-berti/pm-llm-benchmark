Let's write a DuckDB SQL query to solve this problem. Let's break it down step by step and then provide the complete solution.

### Solution Approach:
1. **Identify the sequence of activities**: Use a window function to assign row numbers to events within each `case_id`, ordered by `timestamp`. Then, check for the exact sequence of 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' using `LAG` or by joining rows based on consecutive row numbers.
2. **Check the time difference**: For cases with the sequence, calculate the time difference between 'Create Order' and 'Confirm Order' events to filter for cases where the difference is more than 5 days.
3. **Exclude matching cases**: Identify the `case_id`s that meet both conditions (sequence and time difference) and exclude their events from the final result.
4. **Return remaining events**: Return all events from `event_log` for `case_id`s that do not match the exclusion criteria.

### SQL Query:
```sql
WITH numbered_events AS (
    SELECT 
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_order
    FROM event_log
),
sequence_check AS (
    SELECT 
        e1.case_id,
        e1.activity AS activity1,
        e2.activity AS activity2,
        e3.activity AS activity3,
        e2.timestamp AS create_order_time,
        e3.timestamp AS confirm_order_time
    FROM numbered_events e1
    JOIN numbered_events e2
        ON e1.case_id = e2.case_id 
        AND e1.event_order = e2.event_order - 1
    JOIN numbered_events e3
        ON e2.case_id = e3.case_id 
        AND e2.event_order = e3.event_order - 1
    WHERE e1.activity = 'Approve Purchase Requisition'
        AND e2.activity = 'Create Order'
        AND e3.activity = 'Confirm Order'
),
cases_to_exclude AS (
    SELECT DISTINCT case_id
    FROM sequence_check
    WHERE confirm_order_time > create_order_time + INTERVAL 5 DAY
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, timestamp;
```

### Explanation of the Query:
1. **numbered_events CTE**:
   - Assigns a row number (`event_order`) to each event within a `case_id`, ordered by `timestamp`. This helps identify consecutive events.
2. **sequence_check CTE**:
   - Joins the `numbered_events` table with itself to check for the sequence of three activities in direct succession.
   - Ensures `event_order` values are consecutive (e.g., `e1.event_order = e2.event_order - 1`) to confirm no events occur in between.
   - Filters for the specific sequence: 'Approve Purchase Requisition'  'Create Order'  'Confirm Order'.
   - Captures the timestamps of 'Create Order' and 'Confirm Order' for the time difference check.
3. **cases_to_exclude CTE**:
   - Identifies `case_id`s where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days using `INTERVAL 5 DAY`.
   - Uses `DISTINCT` to avoid duplicate `case_id`s if the sequence appears multiple times in a case (though the problem implies checking for at least one occurrence).
4. **Final SELECT**:
   - Returns all events from `event_log` where the `case_id` is not in the list of `cases_to_exclude`.
   - Orders the result by `case_id` and `timestamp` for readability.

### Key Points:
- The query handles multiple events per case and ensures the sequence is direct (no intervening events) by using consecutive `event_order` values.
- The time difference is calculated using DuckDB's `INTERVAL` syntax, which is straightforward for datetime arithmetic.
- The exclusion logic ensures that all events from matching cases are removed, not just the events in the sequence.
- The query assumes that `timestamp` is in a datetime-compatible format in DuckDB. If it's stored as a string, additional casting may be required.

This query should correctly identify and exclude cases with the specified sequence and timing condition, returning only the events from non-matching cases.