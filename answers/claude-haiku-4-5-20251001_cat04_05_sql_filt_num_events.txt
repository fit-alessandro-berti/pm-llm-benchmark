# Benchmark Solution: Filtering Cases by Event Count in DuckDB

## Prompt Analysis
This is a **process mining / event log filtering** task requiring:
1. Count events per `case_id`
2. Filter cases with 6 events
3. Return full event records for qualifying cases

## Solution

### Standard Approach (Using HAVING)
```sql
SELECT 
    case_id,
    activity,
    timestamp
FROM event_log
GROUP BY case_id
HAVING COUNT(*) <= 6
ORDER BY case_id, timestamp;
```

**Issue:** This approach is **incorrect** because `GROUP BY` without aggregation functions in `SELECT` will fail or produce incomplete results in DuckDB.

---

### Correct Solution #1: Using Window Function (Recommended)
```sql
SELECT 
    case_id,
    activity,
    timestamp
FROM (
    SELECT 
        case_id,
        activity,
        timestamp,
        COUNT(*) OVER (PARTITION BY case_id) AS event_count
    FROM event_log
)
WHERE event_count <= 6
ORDER BY case_id, timestamp;
```

**Advantages:**
-  Preserves all columns from original table
-  Efficient (single pass with window function)
-  Clear logic flow
-  Recommended for DuckDB

---

### Correct Solution #2: Using JOIN with Subquery
```sql
SELECT 
    el.case_id,
    el.activity,
    el.timestamp
FROM event_log el
INNER JOIN (
    SELECT case_id, COUNT(*) AS event_count
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
) case_summary
    ON el.case_id = case_summary.case_id
ORDER BY el.case_id, el.timestamp;
```

**Advantages:**
-  Works in all SQL databases
-  Explicit filtering logic
-  Slightly less efficient (two scans)

---

### Correct Solution #3: Using CTE (Most Readable)
```sql
WITH case_counts AS (
    SELECT 
        case_id,
        COUNT(*) AS event_count
    FROM event_log
    GROUP BY case_id
)
SELECT 
    el.case_id,
    el.activity,
    el.timestamp
FROM event_log el
WHERE el.case_id IN (
    SELECT case_id
    FROM case_counts
    WHERE event_count <= 6
)
ORDER BY el.case_id, el.timestamp;
```

**Advantages:**
-  Most readable
-  Modular structure
-  Good for complex logic

---

## Example Validation

**Sample Data:**
```
case_id | activity    | timestamp
--------|-------------|-------------------
001     | START       | 2024-01-01 10:00
001     | PROCESS     | 2024-01-01 10:30
001     | END         | 2024-01-01 11:00
002     | START       | 2024-01-01 12:00
002     | PROCESS     | 2024-01-01 12:30
002     | PROCESS     | 2024-01-01 13:00
002     | VERIFY      | 2024-01-01 13:30
... (7 more events for case_002)
003     | START       | 2024-01-02 10:00
... (4 more events for case_003)
```

**Expected Output:** Events from case_001 (3 events) and case_003 (5 events), but NOT case_002 (10+ events)

---

## Recommendation

**For DuckDB specifically, use Solution #1 (Window Function)** because:
- DuckDB has excellent window function performance
- Cleaner and more maintainable code
- Single table scan (optimal performance)
- Native DuckDB idiom