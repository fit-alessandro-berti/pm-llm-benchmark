To achieve the outlined task, we can break down the requirements into a series of SQL steps. We will first extract the ordered sequence of activities per `case_id`, then aggregate and count the occurrences of each unique variant, and finally filter the original event log based on the top K variants. Below is the DuckDB SQL query that accomplishes this.

```sql
WITH ordered_sequences AS (
    SELECT 
        case_id, 
        ARRAY_AGG(activity ORDER BY timestamp) AS activity_sequence
    FROM 
        event_log
    GROUP BY 
        case_id
),

variant_counts AS (
    SELECT 
        activity_sequence,
        COUNT(DISTINCT case_id) AS case_count
    FROM 
        ordered_sequences
    GROUP BY 
        activity_sequence
    ORDER BY 
        case_count DESC
    LIMIT K  -- Replace K with the desired number of top variants (e.g., 5)
),

top_variants AS (
    SELECT 
        activity_sequence
    FROM 
        variant_counts
)

SELECT 
    e.*
FROM 
    event_log e
JOIN 
    (
        SELECT 
            case_id
        FROM 
            ordered_sequences
        WHERE 
            activity_sequence IN (SELECT activity_sequence FROM top_variants)
    ) AS filtered_cases
ON 
    e.case_id = filtered_cases.case_id
```

### Explanation:

1. **Subquery `ordered_sequences`**: 
   - We aggregate the `activity` for each `case_id`, ordered by `timestamp`, into an array called `activity_sequence` using `ARRAY_AGG`.
   - This provides a unique ordered sequence of activities for each case.

2. **Subquery `variant_counts`**: 
   - We count the number of distinct `case_id` associated with each `activity_sequence`.
   - The results are ordered by `case_count` in descending order.
   - `LIMIT K` restricts results to the top K variants based on their frequency.

3. **Subquery `top_variants`**: 
   - This selects only the `activity_sequence` that corresponds to the top K variants.

4. **Final Select Statement**:
   - We join the original `event_log` with the filtered cases that belong to the top K variants.
   - This ensures that we only return the entries from `event_log` that correspond to those cases which are part of the top K activity sequences.

Make sure to replace `K` with the actual number you want to filter for (e.g., 5 for the top 5 variants). This query provides a modular approach to identifying the most common process variants and their corresponding events from the event log.