This visualization consists of three main components: 

1. **Process model of two proclet classes (`Lab visit` and `Lab test`) connected through channels (Fig. a)**:
   - **Lab visit**: This represents the patientâ€™s journey when visiting the lab, starting with the doctor or lab assistant entering an order into the system, followed by the lab assistant taking a blood sample. 
   - The results are then judged. If the results are fine, a report is sent. Otherwise, the process loops back to retesting.
   - **Lab test**: This class models the sequence of tasks performed to complete a laboratory test. It starts with performing the test, followed by report generation, and ends with test completion.
   - These two processes are connected through channels (denoted as dotted lines). The communication flow is depicted by message exchanges labeled as **I1.1**, **I1.2**, etc., representing interactions like orders, results, and updates between the two proclet classes.

2. **Class diagram (Fig. b)**:
   - This shows the relationship between the two proclet classes (`Lab visit` and `Lab test`) from a structural perspective. It specifies that one `Lab visit` requires at least one `Lab test`. This association helps formalize how the processes depend on each other.

3. **Example of a performative (Fig. c)**:
   - This table describes a specific interaction in detail, illustrating how communication happens between the two proclet classes.
   - At **11:00**, through the `Order system` channel:
     - The **sender** (`Lab visit - John`) sends a message to the **receiver** (`Lab test - HGB`).
     - **Action**: The action is "Create," meaning a request is being initiated.
     - **Content**: The message asks, "Can you perform an HGB test for John?"
     - Additional attributes include **Scope** (Private, implying limited to the parties involved) and **Direction** (OUT, indicating it is sent outward).

### Key Observations:
- The proclet model demonstrates **modular process design**, where smaller sub-processes (proclets) communicate through defined channels, enhancing flexibility and scalability.
- Interactions are defined by channels and messages (e.g., requests, results, and updates).
- The example performative highlights how interactions are formalized using attributes like time, sender, receiver, action, and content.

This visualization is a structured representation of interconnected processes in a laboratory workflow.