To construct an accepting Petri net for the insurance claim management process, we will define places to represent the states between activities and transitions to represent the activities themselves. We will also include silent transitions to manage the branching and looping logic for document re-submission and in-depth investigation.

Here's the breakdown of the components:

*   **Places (`PetriNet.Place`):** Represent the states or conditions of the claim.
    *   `p_start_claim`: Initial state, a new claim arrives.
    *   `p_claim_registered`: After Claim Registration.
    *   `p_ready_for_dv`: A merging point, indicating the claim is ready for Document Verification (either initially or after re-submission).
    *   `p_dv_decision`: After Document Verification, where the outcome (documents complete/incomplete) is determined.
    *   `p_docs_incomplete`: Documents are incomplete, leading to Re-Document Submission.
    *   `p_docs_resubmitted`: Documents have been re-submitted, ready for re-verification.
    *   `p_ready_for_fc`: A merging point, indicating the claim is ready for Fraud Check (either after complete DV or after investigation).
    *   `p_fc_decision`: After Fraud Check, where the outcome (fraud clear/suspected) is determined.
    *   `p_fraud_suspected`: Fraud is suspected, leading to In-depth Investigation.
    *   `p_investigation_done`: In-depth investigation is complete, ready for re-checking fraud.
    *   `p_ready_for_ca`: Fraud check is clear, ready for Claim Assessment.
    *   `p_claim_assessed`: After Claim Assessment.
    *   `p_claim_approved`: After Approval.
    *   `p_claim_paid`: After Payment.
    *   `p_customer_notified`: After Notification.
    *   `p_claim_closed`: Final state, claim is closed.

*   **Transitions (`PetriNet.Transition`):** Represent the activities or logical steps.
    *   **Activities:** `t_CR` (Claim Registration), `t_DV` (Document Verification), `t_RDS` (Re-Document Submission), `t_FC` (Fraud Check), `t_II` (In-depth Investigation), `t_CA` (Claim Assessment), `t_AP` (Approval), `t_P` (Payment), `t_N` (Notification), `t_CL` (Closure). These will have explicit labels.
    *   **Silent Transitions:** These are unlabeled transitions used for routing logic, such as directing tokens in XOR-splits or OR-joins: `t_move_cr_to_dv`, `t_dv_ok`, `t_dv_nok`, `t_rds_to_dv_loop`, `t_fc_ok`, `t_fc_nok`, `t_ii_to_fc_loop`.

*   **Arcs (`petri_utils.add_arc_from_to`):** Connect places and transitions to define the flow of tokens.

*   **Initial Marking (`Marking`):** A token is placed in `p_start_claim`.
*   **Final Marking (`Marking`):** A token is expected in `p_claim_closed`.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri Net
net = PetriNet(name="Insurance Claim Process")

# 1. Define Places
# Initial and Final places
p_start_claim = PetriNet.Place(name="p_start_claim")
p_claim_closed = PetriNet.Place(name="p_claim_closed") # This is the final state

# Main process flow places
p_claim_registered = PetriNet.Place(name="p_claim_registered")
p_ready_for_dv = PetriNet.Place(name="p_ready_for_dv") # OR-join for initial DV or re-submission DV
p_dv_decision = PetriNet.Place(name="p_dv_decision") # After DV, where decision is made
p_docs_incomplete = PetriNet.Place(name="p_docs_incomplete") # Documents incomplete, ready for RDS
p_docs_resubmitted = PetriNet.Place(name="p_docs_resubmitted") # After RDS, ready for re-DV

p_ready_for_fc = PetriNet.Place(name="p_ready_for_fc") # OR-join for initial FC or re-investigation FC
p_fc_decision = PetriNet.Place(name="p_fc_decision") # After FC, where decision is made
p_fraud_suspected = PetriNet.Place(name="p_fraud_suspected") # Fraud suspected, ready for II
p_investigation_done = PetriNet.Place(name="p_investigation_done") # After II, ready for re-FC

p_ready_for_ca = PetriNet.Place(name="p_ready_for_ca") # Ready for Claim Assessment
p_claim_assessed = PetriNet.Place(name="p_claim_assessed") # After CA
p_claim_approved = PetriNet.Place(name="p_claim_approved") # After AP
p_claim_paid = PetriNet.Place(name="p_claim_paid") # After P
p_customer_notified = PetriNet.Place(name="p_customer_notified") # After N

# Add all places to the net
net.places.add(p_start_claim)
net.places.add(p_claim_registered)
net.places.add(p_ready_for_dv)
net.places.add(p_dv_decision)
net.places.add(p_docs_incomplete)
net.places.add(p_docs_resubmitted)
net.places.add(p_ready_for_fc)
net.places.add(p_fc_decision)
net.places.add(p_fraud_suspected)
net.places.add(p_investigation_done)
net.places.add(p_ready_for_ca)
net.places.add(p_claim_assessed)
net.places.add(p_claim_approved)
net.places.add(p_claim_paid)
net.places.add(p_customer_notified)
net.places.add(p_claim_closed)


# 2. Define Transitions (with labels for activities, None for silent/routing)
t_CR = PetriNet.Transition(name="t_CR", label="Claim Registration")
t_DV = PetriNet.Transition(name="t_DV", label="Document Verification")
t_RDS = PetriNet.Transition(name="t_RDS", label="Re-Document Submission")
t_FC = PetriNet.Transition(name="t_FC", label="Fraud Check")
t_II = PetriNet.Transition(name="t_II", label="In-depth Investigation")
t_CA = PetriNet.Transition(name="t_CA", label="Claim Assessment")
t_AP = PetriNet.Transition(name="t_AP", label="Approval")
t_P = PetriNet.Transition(name="t_P", label="Payment")
t_N = PetriNet.Transition(name="t_N", label="Notification")
t_CL = PetriNet.Transition(name="t_CL", label="Closure")

# Silent transitions for branching/merging logic (no labels)
t_move_cr_to_dv = PetriNet.Transition(name="t_move_cr_to_dv", label=None)
t_dv_ok = PetriNet.Transition(name="t_dv_ok", label=None) # Documents complete
t_dv_nok = PetriNet.Transition(name="t_dv_nok", label=None) # Documents incomplete
t_rds_to_dv_loop = PetriNet.Transition(name="t_rds_to_dv_loop", label=None)

t_fc_ok = PetriNet.Transition(name="t_fc_ok", label=None) # Fraud clear
t_fc_nok = PetriNet.Transition(name="t_fc_nok", label=None) # Fraud doubtful
t_ii_to_fc_loop = PetriNet.Transition(name="t_ii_to_fc_loop", label=None)


# Add all transitions to the net
net.transitions.add(t_CR)
net.transitions.add(t_DV)
net.transitions.add(t_RDS)
net.transitions.add(t_FC)
net.transitions.add(t_II)
net.transitions.add(t_CA)
net.transitions.add(t_AP)
net.transitions.add(t_P)
net.transitions.add(t_N)
net.transitions.add(t_CL)

net.transitions.add(t_move_cr_to_dv)
net.transitions.add(t_dv_ok)
net.transitions.add(t_dv_nok)
net.transitions.add(t_rds_to_dv_loop)
net.transitions.add(t_fc_ok)
net.transitions.add(t_fc_nok)
net.transitions.add(t_ii_to_fc_loop)


# 3. Define Arcs

# Start -> Claim Registration (CR)
petri_utils.add_arc_from_to(p_start_claim, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p_claim_registered, net)

# Initial entry to DV flow (from p_claim_registered to p_ready_for_dv via silent transition)
petri_utils.add_arc_from_to(p_claim_registered, t_move_cr_to_dv, net)
petri_utils.add_arc_from_to(t_move_cr_to_dv, p_ready_for_dv, net)

# Document Verification (DV)
petri_utils.add_arc_from_to(p_ready_for_dv, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p_dv_decision, net) # DV output to decision place

# DV Decision (XOR split from p_dv_decision)
# Path 1: Documents OK -> proceed to FC
petri_utils.add_arc_from_to(p_dv_decision, t_dv_ok, net)
petri_utils.add_arc_from_to(t_dv_ok, p_ready_for_fc, net)

# Path 2: Documents NOT OK -> go to RDS
petri_utils.add_arc_from_to(p_dv_decision, t_dv_nok, net)
petri_utils.add_arc_from_to(t_dv_nok, p_docs_incomplete, net)

# Re-Document Submission (RDS) and loop back to DV
petri_utils.add_arc_from_to(p_docs_incomplete, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_docs_resubmitted, net)
petri_utils.add_arc_from_to(p_docs_resubmitted, t_rds_to_dv_loop, net) # Silent transition to loop back
petri_utils.add_arc_from_to(t_rds_to_dv_loop, p_ready_for_dv, net) # Place token in DV entry OR-join

# Fraud Check (FC)
petri_utils.add_arc_from_to(p_ready_for_fc, t_FC, net) # FC entry OR-join
petri_utils.add_arc_from_to(t_FC, p_fc_decision, net) # FC output to decision place

# FC Decision (XOR split from p_fc_decision)
# Path 1: Fraud OK -> proceed to CA
petri_utils.add_arc_from_to(p_fc_decision, t_fc_ok, net)
petri_utils.add_arc_from_to(t_fc_ok, p_ready_for_ca, net)

# Path 2: Fraud NOT OK -> go to II
petri_utils.add_arc_from_to(p_fc_decision, t_fc_nok, net)
petri_utils.add_arc_from_to(t_fc_nok, p_fraud_suspected, net)

# In-depth Investigation (II) and loop back to FC
petri_utils.add_arc_from_to(p_fraud_suspected, t_II, net)
petri_utils.add_arc_from_to(t_II, p_investigation_done, net)
petri_utils.add_arc_from_to(p_investigation_done, t_ii_to_fc_loop, net) # Silent transition to loop back
petri_utils.add_arc_from_to(t_ii_to_fc_loop, p_ready_for_fc, net) # Place token in FC entry OR-join


# Claim Assessment (CA)
petri_utils.add_arc_from_to(p_ready_for_ca, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p_claim_assessed, net)

# Approval (AP)
petri_utils.add_arc_from_to(p_claim_assessed, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p_claim_approved, net)

# Payment (P)
petri_utils.add_arc_from_to(p_claim_approved, t_P, net)
petri_utils.add_arc_from_to(t_P, p_claim_paid, net)

# Notification (N)
petri_utils.add_arc_from_to(p_claim_paid, t_N, net)
petri_utils.add_arc_from_to(t_N, p_customer_notified, net)

# Closure (CL)
petri_utils.add_arc_from_to(p_customer_notified, t_CL, net)
petri_utils.add_arc_from_to(t_CL, p_claim_closed, net)


# 4. Define Initial Marking (IM)
im = Marking()
im[p_start_claim] = 1

# 5. Define Final Marking (FM)
fm = Marking()
fm[p_claim_closed] = 1

print("Petri net for Insurance Claim Process constructed successfully:")
print(f"- Number of places: {len(net.places)}")
print(f"- Number of transitions: {len(net.transitions)}")
print(f"- Number of arcs: {len(net.arcs)}")

# Optional: To visualize the net (requires graphviz to be installed and in PATH)
# from pm4py.visualization.petri_net import visualizer as pn_visualizer
# gviz = pn_visualizer.apply(net, im, fm, parameters={"format": "png"})
# pn_visualizer.view(gviz)
# pn_visualizer.save(gviz, "insurance_claim_petri_net.png")
```