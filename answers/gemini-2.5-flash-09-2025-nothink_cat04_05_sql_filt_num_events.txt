This is a strong prompt for benchmarking SQL query capabilities, as it requires the use of **Window Functions** or a combination of **Common Table Expressions (CTEs)**/subqueries with **JOIN** or **IN** clauses.

Here is the drafted prompt:

---

## Draft Prompt for the Benchmark: Filtering Cases by Event Count

**Scenario:**

Assume you have an event log stored in a DuckDB table named `event_log`, with each row representing a single event. The table has at least the following columns:

| Column Name | Data Type | Description |
| :--- | :--- | :--- |
| `case_id` | `VARCHAR` / `INTEGER` | Groups events belonging to a single process instance (or 'case'). |
| `activity` | `VARCHAR` | The specific activity performed during the event. |
| `timestamp` | `TIMESTAMP` | The time the event occurred. |

**Your Task:**

Please craft a **DuckDB SQL query** that filters out any *cases* (i.e., `case_id` groups) containing **more than six events**, and returns **only the events** from cases that have six or fewer events in total.

**Requirements:**

1. **Identify and count:** Determine the total number of events for every unique `case_id`.
2. **Exclude cases:** Filter out any `case_id` where the event count is $> 6$.
3. **Return full events:** The final result must return all columns (`case_id`, `activity`, `timestamp`, etc.) for all events belonging to the *retained* cases.

Be sure to consider the correct grouping and filtering methodology (e.g., using `HAVING`, subqueries, or window functions) to achieve this result efficiently.

---