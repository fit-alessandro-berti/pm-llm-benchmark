Let me help you craft a DuckDB SQL query for this requirement. Here's a solution with explanations:
sql
WITH case_counts AS (
    -- First, count events per case_id
    SELECT 
        case_id,
        COUNT(*) as event_count
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
SELECT 
    el.*
FROM event_log el
INNER JOIN case_counts cc 
    ON el.case_id = cc.case_id
ORDER BY el.case_id, el.timestamp;
Let's break down how this query works:
Common Table Expression (CTE) - case_counts:
Groups the events by case_id
Counts the number of events per case using COUNT(*)
Uses HAVING COUNT(*) <= 6 to filter only cases with 6 or fewer events
This creates a temporary result set with valid case_ids
Main Query:
Joins the original event_log table with the CTE
Uses INNER JOIN to keep only events whose case_id appears in case_counts
Returns all columns (el.*) from the original events for qualifying cases
Orders the results by case_id and timestamp for better readability
Alternative approach using a subquery:
sql
SELECT *
FROM event_log
WHERE case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
ORDER BY case_id, timestamp;
Both queries will produce the same result. The CTE version might be more readable and maintainable, while the subquery version is more concise. The choice between them could depend on:
Performance characteristics with your specific data volume
DuckDB's query optimization capabilities
Personal/team preference for SQL style
The query assumes:
The table event_log exists
It has columns case_id, activity, and timestamp
You want all columns returned for qualifying events
Would you like me to modify anything in this query or add additional features?