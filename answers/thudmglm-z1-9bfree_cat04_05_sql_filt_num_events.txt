To solve this problem, we need to filter out cases with more than six events and return only the full set of events from cases that have six or fewer events. The approach involves first determining valid case IDs and then retrieving their associated events.

**Step-by-Step Explanation:**
1. **Group Events by Case ID:** First, we group all events by `case_id` to count the number of events in each case.
2. **Filter Valid Case IDs:** Use a `HAVING` clause to filter out case IDs where the event count exceeds six.
3. **Retrieve Events for Valid Cases:** Return all events from the valid cases identified in the previous step.

**Solution Code:**
```sql
SELECT *
FROM event_log
WHERE case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(activity) <= 6
);
```

**Alternative Using a CTE:**
```sql
WITH valid_cases AS (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(activity) <= 6
)
SELECT events.*
FROM event_log AS events
WHERE case_id IN (SELECT case_id FROM valid_cases);
```

**Key Points:**
- **Efficiency:** The subquery runs first, filtering valid case IDs, ensuring the outer query retrieves minimal data.
- **Correctness:** Both queries reliably exclude cases with >6 events and return all events from valid cases.
- **DuckDB Compatibility:** Uses standard SQL features supported in DuckDB, including `HAVING`, `IN`, and CTEs.