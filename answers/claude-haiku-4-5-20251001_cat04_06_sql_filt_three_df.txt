# DuckDB SQL Query Solution

```sql
WITH ranked_events AS (
  -- Rank all events by case and timestamp to identify direct succession
  SELECT 
    case_id,
    activity,
    timestamp,
    ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_rank
  FROM event_log
),

sequence_matches AS (
  -- Identify cases with the exact sequence in direct succession
  SELECT DISTINCT
    e1.case_id,
    e1.event_rank AS start_rank,
    e3.event_rank AS end_rank,
    e2.timestamp AS create_order_time,
    e3.timestamp AS confirm_order_time
  FROM ranked_events e1
  INNER JOIN ranked_events e2
    ON e1.case_id = e2.case_id 
    AND e2.event_rank = e1.event_rank + 1
    AND e2.activity = 'Create Order'
  INNER JOIN ranked_events e3
    ON e1.case_id = e3.case_id 
    AND e3.event_rank = e2.event_rank + 1
    AND e3.activity = 'Confirm Order'
  WHERE e1.activity = 'Approve Purchase Requisition'
),

cases_to_exclude AS (
  -- Filter sequences where time between Create Order and Confirm Order > 5 days
  SELECT DISTINCT case_id
  FROM sequence_matches
  WHERE (confirm_order_time - create_order_time) > INTERVAL '5 days'
)

-- Return all events from cases NOT matching the criteria
SELECT 
  *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, timestamp;
```

## Explanation

### Step 1: **ranked_events** CTE
- Assigns a sequential rank to each event within each case based on timestamp order
- This allows us to identify "direct succession" by checking if event ranks are consecutive

### Step 2: **sequence_matches** CTE
- Joins three consecutive events (ranks n, n+1, n+2) for the same case
- Enforces that:
  - **e1**: activity = 'Approve Purchase Requisition'
  - **e2**: activity = 'Create Order' (immediate next event)
  - **e3**: activity = 'Confirm Order' (immediate next event after e2)
- Captures timestamps for both Create Order and Confirm Order events

### Step 3: **cases_to_exclude** CTE
- Filters sequence matches where the duration between Create Order and Confirm Order exceeds 5 days
- Uses the `INTERVAL '5 days'` operator for precise date arithmetic

### Step 4: Final SELECT
- Returns all events from `event_log` where the `case_id` is **NOT** in the exclusion list
- Results are ordered by case and timestamp for readability

## Key Features

 **Direct Succession**: Uses `ROW_NUMBER()` to ensure activities appear consecutively with no intervening events  
 **Exact Sequence**: Chains three JOINs to enforce the specific order  
 **Timing Condition**: Checks that the time gap exceeds exactly 5 days  
 **Exclusion Logic**: Returns only cases that do NOT match both criteria  
 **Efficient**: Uses CTEs and set operations for clarity and performance