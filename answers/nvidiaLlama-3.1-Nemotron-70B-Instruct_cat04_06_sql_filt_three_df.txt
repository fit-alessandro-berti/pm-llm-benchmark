**Solution Query:**
```sql
WITH filtered_cases AS (
  SELECT 
    case_id
  FROM (
    SELECT 
      case_id,
      LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity_1,
      LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity_2,
      activity,
      timestamp,
      LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp
    FROM 
      event_log
  ) AS sequenced_events
  WHERE 
    prev_activity_2 = 'Approve Purchase Requisition'
    AND prev_activity_1 = 'Create Order'
    AND activity = 'Confirm Order'
    AND next_timestamp - timestamp > INTERVAL '5 days'
)
SELECT 
  el.*
FROM 
  event_log el
  LEFT JOIN filtered_cases fc ON el.case_id = fc.case_id
WHERE 
  fc.case_id IS NULL;
```

**Explanation:**

1. **Common Table Expression (CTE) for Identifying Filtered Cases**:
   - We create a CTE named `filtered_cases` to first identify the `case_id`s that meet both the sequence and timing conditions.
   - Inside this CTE, we use window functions (`LAG`) to look back at the previous activities for each event. This allows us to identify sequences.
   - We apply the filters for the specific sequence (`'Approve Purchase Requisition'`, `'Create Order'`, `'Confirm Order'`) and for the time difference between `'Create Order'` and `'Confirm Order'` being more than 5 days.
   - We only select the `case_id` of the cases that meet these conditions.

2. **Main Query for Excluding Identified Cases**:
   - The main query selects all columns (`*`) from the `event_log` table (`el`).
   - It performs a `LEFT JOIN` with the `filtered_cases` CTE (`fc`) on the `case_id`.
   - The crucial part is the `WHERE` clause, where we filter out the rows where `fc.case_id IS NOT NULL`, meaning we exclude all events from cases identified in the CTE. 
   - By doing so, we achieve the desired result: all events from cases that **do not** meet the specified sequence and timing conditions.

**Example Use Case:**

Suppose your `event_log` table looks like this:

| `case_id` | `activity`               | `timestamp`       |
|-----------|---------------------------|-------------------|
| 1         | Approve Purchase Requisition| 2023-01-01 10:00 |
| 1         | Create Order              | 2023-01-01 11:00 |
| 1         | Confirm Order             | 2023-01-07 12:00 |
| 2         | Approve Purchase Requisition| 2023-02-01 09:00 |
| 2         | Create Order              | 2023-02-01 10:00 |
| 2         | Other Activity            | 2023-02-03 11:00 |
| 2         | Confirm Order             | 2023-02-04 12:00 |
| 3         | Approve Purchase Requisition| 2023-03-01 10:00 |
| 3         | Create Order              | 2023-03-01 11:00 |
| 3         | Confirm Order             | 2023-03-05 12:00 |

- **Case 1** meets both conditions (sequence and >5 days between 'Create Order' and 'Confirm Order'), so all its events will be **excluded**.
- **Case 2** does not meet the sequence condition due to 'Other Activity' interrupting the sequence, so all its events will be **included**.
- **Case 3** meets the sequence but not the timing condition (<5 days between 'Create Order' and 'Confirm Order'), so all its events will be **included**.

Running the provided query will return all events for `case_id` 2 and 3.