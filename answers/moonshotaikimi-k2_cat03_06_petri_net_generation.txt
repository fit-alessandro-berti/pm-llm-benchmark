```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils as pu

# 1. Create the Petri net object
net = PetriNet(name="insurance_claim_management")

# 2. Create the set of places
p_start           = PetriNet.Place("start")
p_after_CR        = PetriNet.Place("after_CR")
p_after_DV        = PetriNet.Place("after_DV")
p_needs_RDS       = PetriNet.Place("needs_RDS")
p_after_RDS       = PetriNet.Place("after_RDS")
p_after_FC        = PetriNet.Place("after_FC")
p_needs_II        = PetriNet.Place("needs_II")
p_after_II        = PetriNet.Place("after_II")
p_after_CA        = PetriNet.Place("after_CA")
p_after_AP        = PetriNet.Place("after_AP")
p_after_P         = PetriNet.Place("after_P")
p_after_N         = PetriNet.Place("after_N")
p_end             = PetriNet.Place("end")        # Closed-claim place

for place in [p_start, p_after_CR, p_after_DV, p_needs_RDS, p_after_RDS,
              p_after_FC, p_needs_II, p_after_II, p_after_CA,
              p_after_AP, p_after_P, p_after_N, p_end]:
    net.places.add(place)

# 3. Create the set of transitions
t_CR  = PetriNet.Transition("t_CR",  label="Claim Registration (CR)")
t_DV  = PetriNet.Transition("t_DV",  label="Document Verification (DV)")
t_RDS = PetriNet.Transition("t_RDS", label="Re-Document Submission (RDS)")
t_FC  = PetriNet.Transition("t_FC",  label="Fraud Check (FC)")
t_II  = PetriNet.Transition("t_II",  label="In-depth Investigation (II)")
t_CA  = PetriNet.Transition("t_CA",  label="Claim Assessment (CA)")
t_AP  = PetriNet.Transition("t_AP",  label="Approval (AP)")
t_P   = PetriNet.Transition("t_P",   label="Payment (P)")
t_N   = PetriNet.Transition("t_N",   label="Notification (N)")
t_CL  = PetriNet.Transition("t_CL",  label="Closure (CL)")

for trans in [t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL]:
    net.transitions.add(trans)

# 4. Add the arcs (flow relation) -------------------------------------------

# start -> CR -> after_CR
pu.add_arc_from_to(p_start,    t_CR,  net)
pu.add_arc_from_to(t_CR,       p_after_CR, net)

# after_CR -> DV -> after_DV
pu.add_arc_from_to(p_after_CR, t_DV,  net)
pu.add_arc_from_to(t_DV,       p_after_DV, net)

# decision after DV: either documents OK  go to FC  
#                    or need RDS    needs_RDS
pu.add_arc_from_to(p_after_DV, t_FC,  net)
pu.add_arc_from_to(p_after_DV, t_RDS, net)

pu.add_arc_from_to(t_RDS,      p_needs_RDS, net)    # RDS puts tokens on needs_RDS
pu.add_arc_from_to(p_needs_RDS, t_DV,  net)         # re-enter DV loop

# after_FC -> decision: either proceed to CA  
#                       or need II  needs_II
pu.add_arc_from_to(p_after_DV, t_FC,  net)       # already created above
pu.add_arc_from_to(t_FC,       p_after_FC, net)

pu.add_arc_from_to(p_after_FC, t_CA, net)
pu.add_arc_from_to(p_after_FC, t_II, net)

pu.add_arc_from_to(t_II,       p_needs_II, net)    # II puts tokens on needs_II
pu.add_arc_from_to(p_needs_II, t_FC, net)          # loop back to FC

# Standard linear sequence after FC/II resolved
pu.add_arc_from_to(p_after_FC, t_CA, net)   # also from arch above
pu.add_arc_from_to(t_CA,       p_after_CA, net)

pu.add_arc_from_to(p_after_CA, t_AP, net)
pu.add_arc_from_to(t_AP,       p_after_AP, net)

pu.add_arc_from_to(p_after_AP, t_P,  net)
pu.add_arc_from_to(t_P,        p_after_P, net)

pu.add_arc_from_to(p_after_P,  t_N,  net)
pu.add_arc_from_to(t_N,        p_after_N, net)

pu.add_arc_from_to(p_after_N,  t_CL, net)
pu.add_arc_from_to(t_CL,       p_end, net)

# 5. Initial and final markings
im = Marking()
im[p_start] = 1

fm = Marking()
fm[p_end] = 1
```