## POWL Model Representation

Below is a POWL model capturing the global manufacturing and distribution process, as derived from the event log.  
We use:

- `Transition(label)` for observable activities.  
- `SilentTransition()` for unobservable () steps (used here to model “skipping” labeling).  
- `OperatorPOWL` with `Operator.LOOP` for repeating structures (rework loops).  
- `OperatorPOWL` with `Operator.XOR` for exclusive choices (labeling may be skipped).  
- `StrictPartialOrder` to define the overall execution order (and to sequence sub-steps within loop bodies).

```python
import pm4py
from pm4py.objects.powl.obj import (
    StrictPartialOrder,
    OperatorPOWL,
    Transition,
    SilentTransition
)
from pm4py.objects.process_tree.obj import Operator

# 1. Define all activity transitions
OR  = Transition(label="OR")    # Order Received
MS  = Transition(label="MS")    # Material Sourcing
QS  = Transition(label="QS")    # Quality Screening
AS  = Transition(label="AS")    # Assembly
IQC = Transition(label="IQC")   # In-line Quality Check
TST = Transition(label="TST")   # Testing
RT  = Transition(label="RT")    # Re-Testing
PK  = Transition(label="PK")    # Packaging
LB  = Transition(label="LB")    # Labeling
DP  = Transition(label="DP")    # Distribution Planning
D   = Transition(label="D")     # Dispatch

# Silent transition to model skipping of labeling
skip_LB = SilentTransition()

# 2. Sub-model: Assembly + IQC rework loop
#    A1: one cycle of Assembly  IQC
asm_cycle = StrictPartialOrder(nodes=[AS, IQC])
asm_cycle.order.add_edge(AS, IQC)

#    Loop over asm_cycle with rework = AS
#    Semantics: do asm_cycle (ASIQC), then either exit, or do AS and repeat asm_cycle
assembly_rework_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[asm_cycle, AS]
)

# 3. Sub-model: Testing + Re-Testing loop
#    Semantics: do TST once, then either exit, or do RT then TST again
testing_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[TST, RT]
)

# 4. Sub-model: optional labeling
labeling_choice = OperatorPOWL(
    operator=Operator.XOR,
    children=[LB, skip_LB]
)

# 5. Root partial order: stitch everything in sequence
root = StrictPartialOrder(
    nodes=[
        OR, MS, QS,
        assembly_rework_loop,
        testing_loop,
        PK,
        labeling_choice,
        DP, D
    ]
)

# 6. Define the execution order
root.order.add_edge(OR,  MS)                     # OR  MS
root.order.add_edge(MS,  QS)                     # MS  QS
root.order.add_edge(QS,  assembly_rework_loop)   # QS  (ASIQC)
root.order.add_edge(assembly_rework_loop, testing_loop)  # …  (TSTRT)
root.order.add_edge(testing_loop, PK)            # …  PK
root.order.add_edge(PK, labeling_choice)         # PK  (LB XOR skip)
root.order.add_edge(labeling_choice, DP)         # …  DP
root.order.add_edge(DP, D)                       # DP  D

# The resulting 'root' object is the POWL model of the process.
```

**Explanation of the main constructs:**

- **assembly_rework_loop = \* ( asm_cycle, AS )**  
  • `asm_cycle` is a `StrictPartialOrder` enforcing AS  IQC.  
  • Loop semantics: perform ASIQC; if IQC passes, exit; if it fails, perform AS (the rework) then repeat ASIQC.  

- **testing_loop = \* ( TST, RT )**  
  • Perform TST; if it fails, RT then TST again, repeating until success.  

- **labeling_choice = X ( LB, tau )**  
  • After packaging (PK), either do labeling (LB) or take a silent transition to skip it, then move on to DP.  

- **StrictPartialOrder ‘root’**  
  • Sequences the major phases—Order Received through Dispatch—while allowing the internal concurrency/partial orders defined in the loop sub-models.  

This POWL model compactly captures  
1) the **rework loops** in Assembly/IQC and Testing,  
2) the **optional** nature of Labeling, and  
3) the **overall** sequencing from Order Received to Dispatch.