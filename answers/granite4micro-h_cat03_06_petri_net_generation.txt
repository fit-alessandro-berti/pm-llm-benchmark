To construct an accepting Petri net for the described insurance claim management process, we'll follow these steps:

1. **Define Places**: Represent each state in the process with a place. The start place is where new claims begin.
2. **Define Transitions**: Each activity corresponds to a transition labeled with its name (e.g., Claim Registration).
3. **Add Arcs**: Connect transitions and places logically, allowing for loops as required by the process flow.
4. **Set Initial Marking**: Initialize the Petri net with one token in the start place to signify an incoming claim.
5. **Define Final Marking**: After the claim is paid and closed, set a final marking where only the closure place has tokens.

Below is the Python code that constructs this Petri net using `pm4py.objects.petri_net.obj.PetriNet`, `pm4py.objects.petri_net.obj.Marking`, and `pm4py.objects.petri_net.utils.petri_utils`. The initial marking (`im`) places a token in the start place, while the final marking (`fm`) ensures that once all processes are complete (claim is paid and closed), no other tokens remain in any place.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Step 1: Define the Petri Net
net = PetriNet(name="Insurance_Claim_Process")

# Step 2: Define Places and Transitions
start_place = PetriNet.Place(name="Start")
claim_registration_transition = PetriNet.Transition(name="Claim Registration (CR)")
document_verification_transition = PetriNet.Transition(name="Document Verification (DV)")
re_document_submission_transition = PetriNet.Transition(name="Re-Document Submission (RDS)")
fraud_check_transition = PetriNet.Transition(name="Fraud Check (FC)")
in_depth_investigation_transition = PetriNet.Transition(name="In-depth Investigation (II)")
claim_assessment_transition = PetriNet.Transition(name="Claim Assessment (CA)")
approval_transition = PetriNet.Transition(name="Approval (AP)")
payment_transition = PetriNet.Transition(name="Payment (P)")
notification_transition = PetriNet.Transition(name="Notification (N)")
closure_transition = PetriNet.Place(name="Closure (CL"))

# Step 3: Add Arcs to Connect Places and Transitions
petri_utils.add_arc_from_to(start_place, claim_registration_transition, net)
petri_utils.add_arc_from_to(claim_registration_transition, document_verification_transition, net)

# Allow loop for re-submission of documents if needed
petri_utils.add_arc_from_to(document_verification_transition, re_document_submission_transition, net)
petri_utils.add_arc_from_to(re_document_submission_transition, claim_registration_transition, net)  # Loop back

# Fraud Check can lead to further investigation
petri_utils.add_arc_from_to(fraud_check_transition, in_depth_investigation_transition, net)

# Claim Assessment depends on previous steps
petri_utils.add_arc_from_to(claim_assessment_transition, approval_transition, net)
petri_utils.add_arc_from_to(approval_transition, payment_transition, net)  # Direct path to payment

# Payment leads to Notification and Closure
petri_utils.add_arc_from_to(payment_transition, notification_transition, net)
petri_utils.add_arc_from_to(notification_transition, closure_transition, net)

# Final step: Close the Petri Net
net.places.add(closure_transition)

# Step 4: Set Initial Marking (im) - Place a token in Start
im = Marking()
im[start_place] = 1

# Step 5: Define Final Marking (fm) - Token should only remain in Closure after process completion
fm = Marking()
fm[closure_transition] = 1

# Print Petri Net for Verification
print(net)
```

### Explanation:
- **Places**: `Start` is the initial state where a new claim arrives. `Closure` represents the final, accepted state of the claim after payment and notification.
- **Transitions**: Each activity in the process (CR, DV, RDS, FC, II, CA, AP, P, N) corresponds to a transition.
- **Arcs**: Connect transitions logically following their order: CR  DV. If documents are incomplete (DV leads back to RDS), they loop back to re-submit them before proceeding further. FC may result in an additional investigation (II). Finally, after payment (`P`), notification (`N`) and closure (`CL`).
- **Initial Marking**: `im[start_place] = 1`, indicating the arrival of a new claim.
- **Final Marking**: `fm[closure_transition] = 1`, signifying that once the process completes in the `Closure` state, no further tokens should exist elsewhere.

This Petri net model captures all key elements and loops inherent to the insurance claim management process while adhering strictly to the requirements of having an initial marking for new claims and a final marking indicating successful closure.