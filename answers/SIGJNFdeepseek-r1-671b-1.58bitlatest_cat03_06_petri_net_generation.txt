<think>
Okay, I need to create an accepting Petri net for this insurance claim management process using pm4py's objects. Let me think through the steps.

First, understand the scenario: there are several activities in a sequence with potential loops between DV and RDS, as well as FC and II. Also, after Payment comes Notification and Closure. The initial marking is a token at the start, representing a new claim. Final marking should have tokens in places indicating closure.

So I'll model each activity as a transition. Places will represent the state before or after an activity. Arcs connect transitions to places based on flow.

Start with constructing the Petri Net object. Then create all necessary places and transitions. Let's list out the activities:

C (Insurance Claim) – but wait, maybe C is not an activity here? The customer files a claim, which starts the process. So perhaps the first step is Claim Registration CR. Hmm, looking back at the scenario: steps start with CR after the claim is filed. So I think the initial place represents that the claim has been received and needs to be processed.

The activities in order are:

1. CR (Claim Registration)
2. DV (Document Verification)
3. FC (Fraud Check)
4. CA (Claim Assessment)
5. AP (Approval, if needed)
6. P (Payment)
7. N (Notification)
8. CL (Closure)

But also possible loops:

- After DV, if incomplete documents: RDS (Re-Document Submission) then back to DV.
- After FC, doubts arise: II (In-depth Investigation), which can loop multiple times before proceeding to CA.

So the transitions are CR, DV, FC, CA, AP, P, N, CL, and also RDS and II for the loops.

I'll need places between these transitions. For example, after CR comes a place leading to DV. Then after DV leads to next step unless there's a loop via RDS.

Similarly, FC may transition to CA if no issues, or go through II multiple times before proceeding to CA.

Let me sketch the structure:

Initial place (start) -> CR transition. After CR, a place for moving to DV.

DV has two possible outcomes: success leads to next step (FC), failure triggers RDS which goes back to DV.

So after DV transitions: if documents are verified (ok), then go to FC's input place; else trigger RDS, leading back to DV again. So the loop is between DV and RDS.

Similarly for FC -> II loop. After FC, either proceed to CA or perform II multiple times before going to CA.

AP comes after CA only if needed (when amount surpasses threshold). Otherwise, maybe a bypass? Or does CA always go to AP?

Wait, step 5 says Approval is required IF the amount exceeds a threshold. So sometimes CA would lead directly to P without AP, but other cases require AP first.

But in the process description, it's stated that after Claim Assessment (CA), if the amount surpasses certain threshold, then approval by senior manager (AP) is needed. Otherwise, perhaps proceed straight to payment? Or maybe Approval is a mandatory step regardless?

The scenario says: "must be approved by a senior manager if the amount..." So AP might have two paths: one where it's required and another where it isn't. How to model this in Petri nets.

In Petri net terms, after CA, there could be transitions for AP (if needed) or proceed directly to P. But since the decision is based on some condition not modeled here, maybe we need a place that splits into two: one going through AP and another bypassing it? Or perhaps model an XOR split where either transition can fire depending on conditions.

But Petri nets are usually for the structure; if there's a conditional branch, in Petri net terms you could use a transition with guard conditions. However, since pm4py doesn't handle guards directly, maybe we need to have two separate transitions: one that represents passing through AP and another that skips it. But this might complicate things.

Alternatively, the process may always require Approval after CA regardless of amount. Wait, no—the scenario says "if the amount surpasses a certain threshold," then approval is needed. So sometimes yes, sometimes no. Since Petri nets model structure without conditions on tokens (unless using colored), but here it's standard. To represent this in a basic Petri net, we can have two separate branches after CA: one that leads to AP and another directly to P. However, the problem is whether both transitions are enabled depending on some condition.

But perhaps the simplest way is to model it as optional with a loop? Or maybe use places and transitions for each possibility.

Alternatively, think of CA leading into a place from which either AP or a direct path to P can be taken. So after CA transition fires (activity completes), tokens are in a place that allows either the Approval process or moving directly to Payment.

But how do we model this as structure? Let's say:

After CA is done, there's a place called 'post_CA'. From here, two transitions: AP and P. But wait, AP would need an input from post_CA, then output into another place that leads to P.

Wait no—if the approval step (AP) is needed for higher amounts, but not otherwise. So maybe CA's transition fires, deposits a token in 'post_CA' place. Then:

- If Approval is required: AP transitions takes the token from post_CA and moves it to another place leading into P.
- Else: A different transition that directly goes to P.

But how can both be enabled? The Petri net would have two separate transitions after CA, but in reality only one path is taken based on some condition. But since pm4py's basic petri nets don't handle this, perhaps we need to model it as a choice with OR gateways or something else.

Alternatively, maybe for simplicity, AP can be modeled as optional: sometimes you go through AP and other times not. So after CA, the process splits into two transitions: one that requires approval (AP) leading to P's input place, and another transition 'skip_approval' which directly leads to P. But without a condition in the model, both could be enabled once there is a token in post_CA.

But this would allow either path when the token arrives. However, since we need the final marking after all steps are done (CL), perhaps having two possible paths here requires that whichever transition fires will proceed to payment and closure.

Alternatively, maybe CA's output place splits into AP or another step leading directly to P. So transitions after post_CA: one is AP which leads to a place called 'post_AP' which then goes to P; the other is a direct path via a transition (maybe call it auto_approval) from post_CA to a place leading to P.

Hmm, but that might complicate things. Let me think of this structure:

After CA, there's a place p_ca_done.

From here, two transitions: AP and auto_payment (if no approval needed).

AP would take token from p_ca_done and produce into p_ap_done.

Auto_payment takes the token and moves to p_auto_to_p.

Then both p_ap_done and p_auto_to_p need to converge back into a common place before P. Because payment (P) is next step in either case.

So for example, AP's transition would connect from p_ca_done to p_approval_done. Then that leads to the input of P via another transition? No—wait:

Wait Payment needs to come after approval if needed or otherwise direct. So maybe both paths (AP and auto) merge into a place before payment.

Alternatively, when AP is done, it goes directly to payment's start point.

So perhaps post_CA has two options: either go through AP then P, or skip AP and go straight to P.

But how to model that in Petri net. Let me sketch:

After CA transition (activity), there is a place p_post_ca.

From p_post_ca, transitions AP (if needed) and direct_to_p (when approval not needed).

AP leads to another place p_ap_done which then triggers the P transition.

direct_to_p goes from p_post_ca directly into p_pre_p.

Alternatively, maybe after AP, there's a place that connects to same p_pre_p as in direct path. So whether you take AP or direct_to_p, both end up at p_pre_p leading to payment.

This seems feasible. Then the code would have:

- create transitions for CA (done), then transition AP and auto_approval?

Wait perhaps better names: after post_ca place, two transitions: AP_transition which takes token from post_ca, outputs into ap_done place; and another transition called bypass_ap that moves to a p_pre_p.

Then the AP's output is in ap_done, which connects via a transition (maybe move_to_p) that leads to p_pre_p. Or perhaps after AP completes, it immediately goes to payment input.

Alternatively:

AP has an outgoing arc to the same place as bypass_ap would go into.

Hmm, not sure yet. Maybe need to map these steps properly.

Let me proceed step by step.

First places and transitions for each activity.

Start with initial place: p_start (im will have a token here).

Transition CR connects from p_start to p_post_cr after being executed.

Then DV comes next; transition DV is connected from p_post_cr. After DV, two possibilities:

Either proceed to FC if successful or loop back via RDS (Re-Document Submission). So after DV's output place will split into a normal path and the loop.

Similarly for FC: may lead to CA normally, or go through II loops multiple times before proceeding.

So let me detail each part.

First CR:

- Place p_start is initial. Transition CR takes from p_start and produces p_post_cr (place after claim registration).

DV comes next. The transition DV connects from p_post_cr to a place p_dv_out.

But if there's an issue with documents, RDS must happen then go back to DV. So perhaps the structure is:

p_dv_loop: After DV fires and detects incomplete docs, it deposits token here which triggers RDS (transition), leading back to p_post_cr (or another place that connects again to DV). Wait wait.

Wait after DV activity, if documents are not okay, then you need to go through Re-Document Submission. So transition DV has two output places: one for success (leading next step) and another for needing RDS.

But Petri nets transitions can have multiple outgoing arcs. However, in standard petri net transitions fire when input is available and all consumed tokens are taken; the outputs then put tokens into connected places.

So if after DV there's a split based on condition, maybe we need two separate transitions: one for success (DV_success) leading to next steps, and another for needing RDS (DV_failure), looping back. But perhaps I'm overcomplicating.

Alternatively, model the loop as:

After transition DV is fired (which represents completing document verification regardless of outcome?), places have tokens in either p_dv_ok or p_dv_not_ok. Then from there, if not ok: RDS transitions which takes token from p_dv_not_ok and leads back to some place that re-initiates the DV process.

But how can we structure this:

DV is a transition with input from p_post_cr (the previous step's output). When it fires, deposits tokens into two places? Or wait: maybe after DV there are two transitions based on outcome. So perhaps not using implicit conditions but explicit splits.

Wait perhaps the correct approach here is that when Document Verification completes, either:

- if documents are okay: transition to FC

OR 

- else (documents incomplete): trigger Re-Document Submission which goes back into DV again.

But how?

Let me think in terms of places and transitions. The DV activity would have input from p_post_cr and outputs to a place that allows for either proceeding or looping via RDS.

Wait maybe, the structure is as follows:

After transition DV (the activity), there's a place called 'p_dv_result'. From here, two possible paths: one leading forward to FC and another going back through RDS. So transitions would be from p_dv_result into either next steps or loop via RDS.

But wait—this is assuming that after completing the DV transition (which deposits tokens in p_dv_result), then there are two transitions:

1. A 'DV_success' transition which consumes a token from p_dv_result and moves to FC's input place.
2. A 'RDS' transition which takes a token from p_dv_result, processes it through Re-Document Submission activity (transition RDS) leading back into the DV's input.

But that would require connecting RDS's output to the same place as CR's output? Or perhaps to another place before DV?

Hmm. So after DV fires (completes), there is a token in p_dv_result. Then, if success, transition to FC; else need to do RDS then go back into DV.

So for the loop:

The path would be from p_dv_result  Transition RDS takes that token and moves it into some place which connects to DV's input again (maybe a new place called 'p_redo_dv'). Then, after RDS completes, you'd have another transition leading back into DV. Wait no: because the DV activity is already in sequence.

Alternatively:

RDS transitions from p_dv_result to a place that feeds back into DV's input. But then DV would need multiple inputs?

No, each transition can have multiple arcs. So let me structure it like this:

DV has one input (from post_cr). After firing DV, it deposits token(s) in p_dv_result.

Then RDS is a transition connected from p_dv_result to some place that connects back into the DV's input place (post_cr), thus creating a loop. But wait: if after RDS there’s a new activity which leads back to DV's starting point?

Alternatively, maybe when Re-Document Submission happens, it goes through RDS transition and then returns to p_post_cr so that DV is executed again.

So the flow would be:

CR  post_cr place  DV (activity)  dv_result place  if need re-submission: RDS activity takes token from dv_result, puts back into post_cr. Then when documents are submitted again via RDS, then DV can fire again.

Yes! So after DV is completed and a problem found, the Re-Document Submission process leads to going back to p_post_cr (the place before DV), so that DV will be executed again. But in this case, how many times can it loop? As long as there are tokens allowing it, perhaps multiple RDS steps.

So for the structure:

After CR transition: post_cr has a token  DV is enabled and fires, moving to dv_result place (output of DV). Then, from here either another activity (DV_success) moves forward to FC's input or Re-Document Submission (RDS) which puts back into post_cr.

Thus transitions for RDS would connect dv_result to RDS transition, then output token in post_cr. So this forms a loop between DV and RDS: from post_cr  DV  dv_result  RDS  post_cr again if needed.

This makes sense. Similarly, the Fraud Check (FC) may require multiple In-depth Investigations (II). Let's model that similarly:

After FC is executed, there could be success which proceeds to CA or need for II leading back into FC.

So structure would be: after FC activity outputs a place fc_result, from here either transition FC_success leads to CA input, or transition II loops back via in-depth investigation (II) transition and returns to the starting point of FC again. Wait that depends on how it's structured.

Wait original process steps: Fraud Check is followed by possible In-depth Investigation(s), which can loop multiple times before proceeding to Claim Assessment (CA). So after completing FC, if there are doubts, II occurs. Once II completes, perhaps another FC? Or does the same FC transition occur again?

Hmm, according to scenario:

"If Fraud Check raises doubts, an additional in-depth investigation is performed. This can happen multiple times before proceeding."

So: After FC (Fraud Check) activity, if there are doubts  perform In-depth Investigation (II), then maybe back to FC? Or perhaps after II comes another check?

But the description says that this can happen multiple times "before proceeding to CA". So probably after each II, it loops back into FC again. So:

FC is a transition connected from previous step's place.

After FC fires and outputs fc_result (place), then transitions could be either:

- proceed to CA if no issues.
- perform II which leads back to FC's input place so that the check can happen again after investigation.

So similar to DV/RDS loop. So structure would be: after FC transition, output is a fc_result place. From here, two options:

1. Transition FC_ok proceeds to next step (CA).
2. Transition II connects from fc_result back into FC's input place via some other steps? Or perhaps immediately.

Wait if the In-depth Investigation is another activity (II), which after being completed returns to FC again.

So transition FC outputs token in fc_result  II transitions fire, consuming this token and putting it into some place that feeds back into FC's starting point. So then FC can be executed again once more tokens are present.

Wait need to think carefully:

The structure would be:

Place before FC is p_pre_fc (which comes from previous steps like dv_success).

FC transitions takes input from p_pre_fc and outputs fc_result place.

From there, two options: transition II or CA_trigger.

If the Fraud Check leads to needing an in-depth investigation (II), then when the token is in fc_result:

- Transition II fires  performs In-depth Investigation activity  puts a token back into p_pre_fc. So FC can be executed again after II completes.

Else, if FC passes, transition CA_trigger moves the token from fc_result to next step's place (CA input).

So this way, as long as there are tokens in fc_result that choose to loop via II/FC multiple times before proceeding.

But how is the choice made? Since Petri nets don't have built-in conditions, it would depend on transitions' weights or other factors. But for our modeling purposes, both paths can be possible (assuming the model doesn't enforce a real execution path).

So in code:

- Create transition FC connected from p_pre_fc to fc_result.

Then create two transitions: CA_trigger and II.

CA_trigger takes tokens from fc_result to next place leading into CA.

II takes token from fc_result, executes In-depth Investigation (transition II), then outputs back into p_pre_fc's input place. Thus forming a loop between FC and II.

Similarly for RDS looping in the DV step.

Now moving on to other steps: after successful document verification, you go to Fraud Check. Then possibly through loops of II/FC until proceeding to CA.

After CA, if approval is needed (AP), then proceed via AP before payment; else skip it.

So structure:

CA's output place p_ca_done  transitions either AP or bypass_approval leading into next steps towards Payment.

Assume after processing AP, a token goes into post_ap which leads to P. Alternatively, both paths converge on the same input for P.

Once P is done, then Notification (N) and Closure (CL).

So let's build this step by step in code:

Start with imports:

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

Create the net.

Then create places for each state between transitions. Like p_start (initial), post_cr, dv_result, fc_result, ca_done, etc.

Transitions will be CR, DV, FC, CA, AP, P, N, CL, RDS, II.

Now I need to name all these elements properly and connect them with arcs using petri_utils.add_arc_from_to(source, transition, net) or similar functions.

Let me outline the steps:

1. Create Petri Net object.
2. Add places: p_start (initial), post_cr, dv_result, pre_fc, fc_result, ca_done, ap_done, pre_payment, payment_out, notification_in, closure_place etc.
3. Add all transitions with their labels.

Then connect them step by step:

Initial place (p_start) connected to CR transition; output is post_cr.

CR: p_start  CR  post_cr.

post_cr connects to DV (DV's input). Output of DV is dv_result.

From dv_result, two options:
- RDS transitions back into post_cr.
- Another transition that leads to pre_fc place for FC steps.

So:

dv_result has arcs from DV. Then, transition RDS: dv_result  RDS  output to post_cr (loop). And another transition (DV_success) which takes token from dv_result and outputs to pre_fc.

pre_fc is the input to FC transition. Output of FC is fc_result.

From fc_result:
- Transition II that connects back into pre_fc via some steps.
  So: II transition would take token from fc_result, then output a place (maybe post_ii) which goes back to pre_fc? Or directly connect back?

Alternatively, the output of II transitions could be pre_fc. Then after II completes, FC can fire again.

So:

Transition II takes input from fc_result and outputs into pre_fc.

Then transition CA_proceed would take token from fc_result and move to ca_done (input for CA).

Wait no: CA is a step. So the structure should be:

After FC's output place (fc_result), if proceeding, then next activity is CA.

So perhaps the flow after FC_success is pre_ca  CA transition  post_ca.

But that depends on how you model it.

Hmm, I might need to re-examine this. Let me correct myself.

Each step in the process has a transition named according to their abbreviation (CR, DV, RDS, etc.), connected via places between them.

So after CR is processed into post_cr place.

DV's input is from post_cr  dv_result as output.

From dv_result:

- if success: transition leading to pre_fc (input for FC).

Else: RDS transitions back into post_cr.

Similarly, for FC steps:

FC's input comes from pre_fc. Outputs fc_result place.

From fc_result:

- CA_success leads to next steps (pre_ca  CA activity).

Or II loops via transition II leading back into pre_fc.

Now once these loops are set up, then after CA:

CA transitions takes input from a place (post_fc_success or similar) and outputs ca_done. From here, the AP step can occur if needed, proceeding to ap_done which leads into payment steps. Else bypasses via another transition.

So post_ca  AP activity's input; once done it goes to pre_payment. Or a separate path (bypass_ap) connects directly from ca_done to pre_payment.

After that:

pre_payment is the place before P, which after being processed moves into payment_out. Then notification and closure steps follow: payment_out  N transition's input; output of N is notif_done, then CL transitions leading to closure_place (final marking).

So final structure would have places like p_start, post_cr, dv_result, pre_fc, fc_result, ca_done, ap_done, pre_payment, payment_out, notif_done, closure_place.

Final markings should have a token in closure_place.

The initial marking has 1 token in p_start.

Now let me structure all of this into code.

First create the net:

net = PetriNet(name="Insurance Claim Process")

Then define places and transitions. Let's proceed step by step.

Create necessary places:

p_start = PetriNet.Place('start')
post_cr = PetriNet.Place('after_CR')  # after CR
dv_result = PetriNet.Place('DV_outcome')  # outcome of DV
pre_fc = PetriNet.Place('before_FC')    # input to FC transition
fc_result = PetriNet.Place('FC_outcome')
ca_done = PetriNet.Place('after_CA')
ap_done = PetriNet.Place('post_AP')
pre_payment = PetriNet.Place('ready_for_P')
payment_out = PetriNet.Place('paid')    # after P
notif_done = PetriNet.Place('notification_sent')
closure_place = PetriNet.Place('closed')

Additional places:

p_post_ii: maybe not necessary since II's output is to pre_fc directly.

Transitions:

CR_trans = PetriNet.Transition(name="Claim Registration", label="CR")
DV_trans = PetriNet.Transition(name="Document Verification", label="DV")
RDS_trans = PetriNet.Transition(name="Re-Document Submission", label="RDS")
FC_trans = PetriNet.Transition(name="Fraud Check", label="FC")
II_trans = PetriNet.Transition(name="In-depth Investigation", label="II")
CA_trans = PetriNet.Transition(name="Claim Assessment", label="CA")
AP_trans = PetriNet.Transition(name="Approval", label="AP")
bypass_ap_trans = PetriNet.Transition(name="Bypass Approval", label=None)  # or some label?
P_trans = PetriNet.Transition(name="Payment", label="P")
N_trans = PetriNet.Transition(name="Notification", label="N")
CL_trans = PetriNet.Transition(name="Closure", label="CL")

Wait, but the bypass_ap_trans would have to be a transition without a label? Or maybe assign it as "AutoApproved"?

But labels are for activities—so if in the model this is an automatic step (no user activity), then perhaps its label can be None. Alternatively, we may need to create transitions even if they're silent steps.

Wait pm4py's petri_net.obj allows for transitions with or without labels; some might have None as their label, representing invisible transitions.

So in code:

bypass_ap_trans = PetriNet.Transition(name="Bypass Approval", label=None)

Similarly, DV_success and FC_success would be transitions? Or not—because the 'success' paths are modeled via transitions that lead to next steps.

Wait no: for example, after DV (transition) fires and outputs a token into dv_result place, there's another transition RDS_trans which takes from dv_result back to post_cr. Then also another transition (say, proceed_to_FC) which takes token from dv_result and moves it to pre_fc.

But in code:

proceed_DV_success = PetriNet.Transition(name="Proceed after DV success", label=None)

Similarly for transitions that split the paths.

Wait no: perhaps this is getting complicated. Maybe better to think of each transition as an activity (label) with arcs connecting their input and output places.

Alternatively, consider all splits as silent transitions without labels.

But let's clarify:

For the DV step—after DV_trans (activity labeled 'DV') deposits a token into dv_result place, then two possible paths: RDS or proceeding to FC. So these would be separate transitions with arcs from dv_result to their respective next steps.

Thus:

- transition RDS_trans is connected from dv_result and outputs post_cr_again.
- another transition (e.g., DV_success) which connects from dv_result to pre_fc place, labeled as a silent step?

But in code, perhaps those are transitions with labels or not. For example, the path leading directly to FC after successful DV might be an automatic step represented by a silent transition.

So:

DV_success_trans = PetriNet.Transition(name="To Fraud Check", label=None)

Similarly for other paths.

Same applies for proceeding from fc_result to CA: need a silent transition that moves token from fc_result into the input of CA activity.

But maybe I should create these as transitions with or without labels depending on steps.

Alternatively, perhaps model all splits and joins using transitions labeled appropriately. Let me proceed step by step.

First code outline:

Add places and transitions for each named activity. Then connect them via arcs through petri_utils.add_arc_from_to(source, transition, net) etc.

Let's start coding properly.

Initialize the Petri Net:

net = PetriNet(name="Insurance Claim Process")

Create all places:

p_start = PetriNet.Place('start')
post_cr = PetriNet.Place('after_CR')  # place after CR
dv_result = PetriNet.Place('DV_outcome') 
pre_fc = PetriNet.Place('before_FC')
fc_result = PetriNet.Place('FC_outcome')
ca_done = PetriNet.Place('post_CA')
ap_done = PetriNet.Place('after_AP')
pre_payment = PetriNet.Place('ready_for_P')
payment_out = PetriNet.Place('paid')  
notif_done = PetriNet.Place('notification_sent')
closure_place = PetriNet.Place('closed')

Add places to the net:

net.places.add(p_start)
net.places.add(post_cr)
net.places.add(dv_result)
net.places.add(pre_fc)
net.places.add(fc_result)
net.places.add(ca_done)
net.places.add(ap_done)
net.places.add(pre_payment)
net.places.add(payment_out)
net.places.add(notif_done)
net.places.add(closure_place)

Create transitions:

CR_trans = PetriNet.Transition(name="Claim Registration", label="CR")
DV_trans = PetriNet.Transition(name="Document Verification", label="DV")
RDS_trans = PetriNet.Transition(name="Re-Document Submission", label="RDS")
FC_trans = PetriNet.Transition(name="Fraud Check", label="FC")
II_trans = PetriNet.Transition(name="In-depth Investigation", label="II")
CA_trans = PetriNet.Transition(name="Claim Assessment", label="CA")
AP_trans = PetriNet.Transition(name="Approval", label="AP")
bypass_ap_trans = PetriNet.Transition(name="Bypass Approval", label=None)
P_trans = PetriNet.Transition(name="Payment", label="P")
N_trans = PetriNet.Transition(name="Notification", label="N")
CL_trans = PetriNet.Transition(name="Closure", label="CL")

Add all transitions to the net:

net.transitions.add(CR_trans)
net.transitions.add(DV_trans)
net.transitions.add(RDS_trans)
net.transitions.add(FC_trans)
net.transitions.add(II_trans)
net.transitions.add(CA_trans)
net.transitions.add(AP_trans)
net.transitions.add(bypass_ap_trans)
net.transitions.add(P_trans)
net.transitions.add(N_trans)
net.transitions.add(CL_trans)

Now connect the transitions with arcs.

Start:

p_start is initial. CR_trans takes token from p_start and outputs to post_cr.

petri_utils.add_arc_from_to(p_start, CR_trans, net)  # input arc
petri_utils.add_arc_from_to(CR_trans, post_cr, net)  # output arc

Then DV_trans is next. Inputs are from post_cr:

petri_utils.add_arc_from_to(post_cr, DV_trans, net)
petri_utils.add_arc_from_to(DV_trans, dv_result, net)

From dv_result: two transitions.

First RDS_trans which loops back to post_cr (input arc from dv_result):

petri_utils.add_arc_from_to(dv_result, RDS_trans, net)  # input
petri_utils.add_arc_from_to(RDS_trans, post_cr, net)    # output

Second transition for successful DV leading to FC: perhaps a silent transition here.

DV_success_trans = PetriNet.Transition(name="To Fraud Check", label=None)
net.transitions.add(DV_success_trans)

petri_utils.add_arc_from_to(dv_result, DV_success_trans, net)  # input
petri_utils.add_arc_from_to(DV_success_trans, pre_fc, net)     # output

Then FC_trans takes from pre_fc:

petri_utils.add_arc_from_to(pre_fc, FC_trans, net)
petri_utils.add_arc_from_to(FC_trans, fc_result, net)

From fc_result: two transitions.

II_trans and a silent transition leading to CA's input place (pre_ca).

So:

# II loop
petri_utils.add_arc_from_to(fc_result, II_trans, net)
petri_utils.add_arc_from_to(II_trans, pre_fc, net)  # output goes back to FC's starting point.

CA_success_trans = PetriNet.Transition(name="To Claim Assessment", label=None)
net.transitions.add(CA_success_trans)

petri_utils.add_arc_from_to(fc_result, CA_success_trans, net)
pre_ca = PetriNet.Place('before_CA')
net.places.add(pre_ca)
petri_utils.add_arc_from_to(CA_success_trans, pre_ca, net)  # outputs to new place before CA.

Then CA_trans takes from pre_ca:

petri_utils.add_arc_from_to(pre_ca, CA_trans, net)
petri_utils.add_arc_from_to(CA_trans, ca_done, net)

From ca_done: two transitions— AP and bypass approval.

# AP path
petri_utils.add_arc_from_to(ca_done, AP_trans, net)  # input to AP from ca_done
petri_utils.add_arc_from_to(AP_trans, ap_done, net)   # output of AP is ap_done

Then ap_done connects to pre_payment.

ap_to_prepayment = PetriNet.Transition(name="To Payment", label=None)
net.transitions.add(ap_to_prepayment)

petri_utils.add_arc_from_to(ap_done, ap_to_prepayment, net)  # input
petri_utils.add_arc_from_to(ap_to_prepayment, pre_payment, net)   # output

# bypass AP path: from ca_done directly to pre_payment via silent transition.

petri_utils.add_arc_from_to(ca_done, bypass_ap_trans, net)
petri_utils.add_arc_from_to(bypass_ap_trans, pre_payment, net)

Then P_trans takes input from pre_payment:

petri_utils.add_arc_from_to(pre_payment, P_trans, net) 
petri_utils.add_arc_from_to(P_trans, payment_out, net)

Payment leads to notification step.

payment