Here are a few ways to draft a prompt for this benchmark, catering to slightly different emphasis and levels of detail.

---

### Draft Prompt Option 1 (Concise & Direct)

**Title:** DuckDB Query: Filter Cases by Event Count

**Description:**

You have an event log in a DuckDB table named `event_log`. The table includes at least `case_id`, `activity`, and `timestamp` columns. `case_id` uniquely identifies a process instance.

**Task:**

Write a DuckDB SQL query that:

1.  Counts the number of events for each `case_id`.
2.  Filters out all `case_id`s that have **more than six** events.
3.  Returns all columns for the events belonging to the `case_id`s that have **six or fewer** events.

---

### Draft Prompt Option 2 (More Explanatory)

**Title:** Event Log Filtering: Cases with Six or Fewer Events (DuckDB)

**Problem Statement:**

We are working with an event log data set stored in a DuckDB database. The table, named `event_log`, contains records of individual process events. Key columns include:

*   `case_id`: A unique identifier for each process instance.
*   `activity`: The name of the event that occurred.
*   `timestamp`: The time at which the event occurred.

Our goal is to analyze only those process instances (cases) that are relatively short, specifically those that have **six or fewer** total events. Cases with more than six events should be completely excluded from the result set.

**Your Task:**

Construct a DuckDB SQL query that accomplishes the following:

*   **Group events by `case_id`** to determine the total count of events for each individual case.
*   **Apply a filter** to identify and select only those `case_id`s where the event count is strictly less than or equal to six.
*   **Retrieve all original event records** (all columns from `event_log`) for the `case_id`s that satisfy the filtering criteria.

Ensure your query correctly uses DuckDB's SQL dialect for grouping and filtering.

---

### Draft Prompt Option 3 (Focus on Logic Steps)

**Title:** DuckDB Challenge: Select Short Process Cases

**Scenario:**

You are provided with a DuckDB table named `event_log`. This table meticulously tracks events within various process instances. Each row represents one event and contains, at a minimum, the following columns:

*   `case_id`: Identifies the specific process instance (case).
*   `activity`: The action performed in the event.
*   `timestamp`: When the event took place.

**Objective:**

Your mission is to design a DuckDB SQL query to isolate and return the complete event history for only those process cases that consist of **six or fewer** individual events. Cases with seven or more events must be entirely disregarded.

**Steps to Consider:**

1.  **Calculate Event Count per Case:** Determine how many events each unique `case_id` has.
2.  **Identify Qualifying Cases:** Select the `case_id`s where the calculated event count is less than or equal to 6.
3.  **Retrieve Full Event Data:** For the identified qualifying `case_id`s, fetch all rows (all columns) from the `event_log` table.

Please provide the DuckDB SQL query that fulfills this requirement.

---

**Key elements present in all drafts:**

*   **Clear table name:** `event_log`
*   **Key columns specified:** `case_id`, `activity`, `timestamp`
*   **Definition of `case_id`:** Groups events for a single process instance.
*   **Specific filtering criteria:** "more than six events" should be excluded, meaning "six or fewer" should be included.
*   **Output requirement:** Return *all events* from the qualifying cases.
*   **Database system:** DuckDB

Choose the draft that best suits the context and expected technical level of the benchmark participant. Option 1 is great for a quick, focused test. Option 2 adds helpful context for understanding the "why." Option 3 breaks down the logic, which can be useful for ensuring a clear understanding of the task.