Below is a single, self-contained DuckDB query that realises every step requested.  
Replace the parameter ``${K}`` (or `?` if you are binding parameters from your client) with the number of variants you want to keep.

```sql
-- 1) Build the ordered activity sequence (the variant) for every case
WITH ordered_variants AS (          -- one row per case_id
    SELECT
        case_id,
        /* build a pipe-separated string of activities in time order */
        string_agg(activity, '|' ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
),

-- 2) Count how many cases follow every variant
variant_freq AS (                   -- one row per variant
    SELECT
        variant,
        COUNT(*) AS case_cnt
    FROM ordered_variants
    GROUP BY variant
),

-- 3) Pick the TOP K most frequent variants
top_k_variants AS (
    SELECT
        variant
    FROM variant_freq
    ORDER BY case_cnt DESC
    LIMIT ${K}                    --  put the desired K here (e.g. 5)
),

-- 4) Keep only the cases that belong to those variants
top_k_cases AS (
    SELECT
        case_id
    FROM ordered_variants
    WHERE variant IN (SELECT variant FROM top_k_variants)
)

-- 5) Return all events of the retained cases
SELECT      e.*
FROM        event_log AS e
WHERE       e.case_id IN (SELECT case_id FROM top_k_cases)
ORDER BY    e.case_id,
            e.timestamp;          -- optional, for a nice chronological output
```

What the query does, step-by-step:

1. `ordered_variants`: For every `case_id` the activities are concatenated in timestamp order (using `string_agg`) to form the complete variant string.  
2. `variant_freq`: Counts how many cases have each variant.  
3. `top_k_variants`: Keeps only the K variants with the highest `case_cnt`.  
4. `top_k_cases`: Retrieves the `case_id`s whose variant is in that Top K list.  
5. Final `SELECT`: Returns every original event whose `case_id` is in `top_k_cases`, i.e. events from cases following one of the Top K variants; all other cases are excluded.