To address the prompt, we will need to execute a DuckDB SQL query with multiple steps. We'll first identify the cases that match the sequence and timing criteria, and then we'll exclude those cases from the final result. Here’s how to do it:

1. **Identify Cases with the Sequence and Timing Criteria:**

First, we need to find the cases that contain the sequence 'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order' and where the time between 'Create Order' and 'Confirm Order' is more than 5 days.

We can use a window function to achieve this. The idea is to assign a row number to each activity within a case and then check the sequence and timing conditions using these row numbers.

2. **Filter Out the Cases Identified:**

Once we have identified the cases that match the criteria, we can exclude them from the final result.

Here is the SQL query:

```sql
WITH sequence_cases AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) as rn
    FROM
        event_log
),
sequence_filtered AS (
    SELECT
        case_id
    FROM
        sequence_cases
    WHERE
        activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
    GROUP BY
        case_id,
        (CASE
            WHEN activity = 'Approve Purchase Requisition' THEN rn
            WHEN activity = 'Create Order' THEN rn
            WHEN activity = 'Confirm Order' THEN rn
        END)
    HAVING
        COUNT(CASE WHEN activity = 'Approve Purchase Requisition' THEN 1 END) > 0
        AND COUNT(CASE WHEN activity = 'Create Order' THEN 1 END) > 0
        AND COUNT(CASE WHEN activity = 'Confirm Order' THEN 1 END) > 0
        AND MAX(CASE WHEN activity = 'Create Order' THEN timestamp ELSE NULL END) - MIN(CASE WHEN activity = 'Approve Purchase Requisition' THEN timestamp ELSE NULL END) > INTERVAL '5' DAY
        AND MAX(CASE WHEN activity = 'Confirm Order' THEN timestamp ELSE NULL END) - MAX(CASE WHEN activity = 'Create Order' THEN timestamp ELSE NULL END) > INTERVAL '5' DAY
)
SELECT
    el.*
FROM
    event_log el
LEFT JOIN
    sequence_filtered sf ON el.case_id = sf.case_id
WHERE
    sf.case_id IS NULL;
```

### Explanation:

1. **sequence_cases CTE:** Adds a row number (`rn`) to each event within its case, ordered by timestamp.
2. **sequence_filtered CTE:** Filters for cases that have all three activities in the exact sequence and checks that 'Create Order' to 'Confirm Order' is more than 5 days apart.
3. **Final SELECT:** Joins the original `event_log` table with `sequence_filtered` on `case_id` and selects only those events that do not have a matching `case_id` in `sequence_filtered`, effectively excluding the cases that meet the criteria.

This query ensures that we are only returning events from cases that do not match the specified sequence and timing conditions.