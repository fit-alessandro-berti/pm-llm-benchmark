Here's a DuckDB SQL query that accomplishes this task:

```sql
WITH case_event_counts AS (
    SELECT *,
           COUNT(*) OVER (PARTITION BY case_id) AS events_per_case
    FROM event_log
)
SELECT case_id, activity, timestamp
FROM case_event_counts
WHERE events_per_case <= 6
ORDER BY case_id, timestamp;
```

**Alternative approach using a subquery:**

```sql
SELECT *
FROM event_log
WHERE case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
ORDER BY case_id, timestamp;
```

**Explanation:**

**First approach (Window Function):**
- Uses a CTE to add a count of events per case_id using a window function
- The `COUNT(*) OVER (PARTITION BY case_id)` calculates the total events for each case
- Filters the results to keep only rows where the case has 6 or fewer events
- Returns the original columns for qualifying events

**Second approach (Subquery):**
- The inner query identifies all case_ids with 6 or fewer events
- The outer query returns all events belonging to those case_ids
- This approach requires two passes through the data but is straightforward to understand

Both queries will return the same result set - all events from cases that contain 6 or fewer events in total. The ORDER BY clause ensures results are sorted by case and timestamp for better readability.