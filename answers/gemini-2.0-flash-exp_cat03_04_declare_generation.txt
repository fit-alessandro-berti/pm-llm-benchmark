```python
declare_model = {
    'existence': {
        'IG': {'support': 1.0, 'confidence': 1.0},
        'DD': {'support': 1.0, 'confidence': 1.0},
        'TFC': {'support': 1.0, 'confidence': 1.0},
        'CE': {'support': 1.0, 'confidence': 1.0},
        'PC': {'support': 1.0, 'confidence': 1.0},
        'LT': {'support': 1.0, 'confidence': 1.0},
        'UT': {'support': 1.0, 'confidence': 1.0},
        'AG': {'support': 1.0, 'confidence': 1.0},
        'MP': {'support': 1.0, 'confidence': 1.0},
        'FL': {'support': 1.0, 'confidence': 1.0}
    },
    'absence': {},
     'exactly_one': {},
    'init': {
        'IG': {'support': 1.0, 'confidence': 1.0}
        },
    'responded_existence': {
        'DD_IG': {'support': 1.0, 'confidence': 1.0}, #If DD occurs, then IG must have occurred
         'TFC_DD': {'support': 1.0, 'confidence': 1.0},
        'CE_DD': {'support': 1.0, 'confidence': 1.0},
        'PC_TFC': {'support': 1.0, 'confidence': 1.0},
        'PC_CE': {'support': 1.0, 'confidence': 1.0},
        'LT_PC': {'support': 1.0, 'confidence': 1.0},
        'UT_LT': {'support': 1.0, 'confidence': 1.0},
        'AG_UT': {'support': 1.0, 'confidence': 1.0},
        'MP_AG': {'support': 1.0, 'confidence': 1.0},
        'FL_MP': {'support': 1.0, 'confidence': 1.0},
    },
     'coexistence': {
         'PC_TFC': {'support': 1.0, 'confidence': 1.0}, #If PC occurs, TFC also occurs and vice-versa
         'PC_CE': {'support': 1.0, 'confidence': 1.0},
    },
    'response': {
        'IG_DD': {'support': 1.0, 'confidence': 1.0}, # if IG, then eventually DD
        'DD_TFC': {'support': 1.0, 'confidence': 1.0},
        'DD_CE': {'support': 1.0, 'confidence': 1.0},
        'TFC_PC': {'support': 1.0, 'confidence': 1.0},
         'CE_PC': {'support': 1.0, 'confidence': 1.0},
        'PC_LT': {'support': 1.0, 'confidence': 1.0},
        'LT_UT': {'support': 1.0, 'confidence': 1.0},
         'UT_AG': {'support': 1.0, 'confidence': 1.0},
         'AG_MP': {'support': 1.0, 'confidence': 1.0},
        'MP_FL': {'support': 1.0, 'confidence': 1.0}
    },
     'precedence': {
        'DD_IG': {'support': 1.0, 'confidence': 1.0}, # DD must have IG before
         'TFC_DD': {'support': 1.0, 'confidence': 1.0},
        'CE_DD': {'support': 1.0, 'confidence': 1.0},
         'PC_TFC': {'support': 1.0, 'confidence': 1.0},
         'PC_CE': {'support': 1.0, 'confidence': 1.0},
        'LT_PC': {'support': 1.0, 'confidence': 1.0},
        'UT_LT': {'support': 1.0, 'confidence': 1.0},
        'AG_UT': {'support': 1.0, 'confidence': 1.0},
        'MP_AG': {'support': 1.0, 'confidence': 1.0},
        'FL_MP': {'support': 1.0, 'confidence': 1.0}

    },
    'succession':{
        'IG_DD': {'support': 1.0, 'confidence': 1.0}, # IG followed by DD (direct)
        'DD_TFC': {'support': 1.0, 'confidence': 1.0},
        'DD_CE': {'support': 1.0, 'confidence': 1.0},
        'TFC_PC': {'support': 1.0, 'confidence': 1.0},
         'CE_PC': {'support': 1.0, 'confidence': 1.0},
        'PC_LT': {'support': 1.0, 'confidence': 1.0},
        'LT_UT': {'support': 1.0, 'confidence': 1.0},
        'UT_AG': {'support': 1.0, 'confidence': 1.0},
        'AG_MP': {'support': 1.0, 'confidence': 1.0},
        'MP_FL': {'support': 1.0, 'confidence': 1.0}
    },
    'altresponse': {
    },
    'altprecedence': {
    },
     'altsuccession': {
     },
    'chainresponse': {
      'IG_DD': {'support': 1.0, 'confidence': 1.0}, # IG directly followed by DD
        'DD_TFC': {'support': 1.0, 'confidence': 1.0},
        'DD_CE': {'support': 1.0, 'confidence': 1.0},
        'TFC_PC': {'support': 1.0, 'confidence': 1.0},
         'CE_PC': {'support': 1.0, 'confidence': 1.0},
        'PC_LT': {'support': 1.0, 'confidence': 1.0},
        'LT_UT': {'support': 1.0, 'confidence': 1.0},
         'UT_AG': {'support': 1.0, 'confidence': 1.0},
         'AG_MP': {'support': 1.0, 'confidence': 1.0},
        'MP_FL': {'support': 1.0, 'confidence': 1.0}
    },
      'chainprecedence': {
      'DD_IG': {'support': 1.0, 'confidence': 1.0}, # DD directly preceded by IG
         'TFC_DD': {'support': 1.0, 'confidence': 1.0},
        'CE_DD': {'support': 1.0, 'confidence': 1.0},
         'PC_TFC': {'support': 1.0, 'confidence': 1.0},
         'PC_CE': {'support': 1.0, 'confidence': 1.0},
        'LT_PC': {'support': 1.0, 'confidence': 1.0},
        'UT_LT': {'support': 1.0, 'confidence': 1.0},
        'AG_UT': {'support': 1.0, 'confidence': 1.0},
        'MP_AG': {'support': 1.0, 'confidence': 1.0},
        'FL_MP': {'support': 1.0, 'confidence': 1.0}
    },
      'chainsuccession': {
        'IG_DD': {'support': 1.0, 'confidence': 1.0}, # IG directly followed by DD
        'DD_TFC': {'support': 1.0, 'confidence': 1.0},
        'DD_CE': {'support': 1.0, 'confidence': 1.0},
        'TFC_PC': {'support': 1.0, 'confidence': 1.0},
         'CE_PC': {'support': 1.0, 'confidence': 1.0},
        'PC_LT': {'support': 1.0, 'confidence': 1.0},
        'LT_UT': {'support': 1.0, 'confidence': 1.0},
         'UT_AG': {'support': 1.0, 'confidence': 1.0},
         'AG_MP': {'support': 1.0, 'confidence': 1.0},
        'MP_FL': {'support': 1.0, 'confidence': 1.0}
     },
      'noncoexistence':{
          'TFC_CE': {'support': 1.0, 'confidence': 1.0},  #TFC and CE are not allowed to co-occur
           'LT_UT': {'support': 1.0, 'confidence': 1.0}
      },
     'nonsuccession':{
         'PC_AG': {'support': 1.0, 'confidence': 1.0} #PC can not be followed by AG
     },
     'nonchainsuccession':{
         'PC_AG': {'support': 1.0, 'confidence': 1.0} #PC can not be directly followed by AG
     }
}

print(declare_model)
```

**Explanation:**

1.  **Existence Constraints:** All activities (`IG`, `DD`, `TFC`, `CE`, `PC`, `LT`, `UT`, `AG`, `MP`, `FL`) must exist in the process, so we assign 1.0 support and confidence to each.
2.  **Absence Constraints:** There are no activities explicitly forbidden in the process.
3. **Exactly One Constraints:** No activity is required to happen only once in the whole process.
4.  **Init Constraints:** The process always starts with "Idea Generation" activity.
5.  **Responded Existence Constraints:** If an activity occurs, it should be preceded by another one in the process.
6.  **Coexistence Constraints:** In this model, `PC` can co-occur with both `TFC` and `CE`,
7.  **Response Constraints:** An activity must eventually be followed by another activity in the process. For example, `IG` must be followed eventually by `DD`.
8.  **Precedence Constraints:**  An activity must be preceded by another in the process, for example, `DD` must be preceded by `IG`.
9.  **Succession Constraints:** An activity must be followed by another in the process, for example, `IG` must be followed by `DD`
10. **Alternative Response, Precedence and Succession:** There are no alternative constraints defined in this model.
11. **Chain Response Constraints:** An activity must be directly followed by another in the process. For example, `IG` must be directly followed by `DD`.
12. **Chain Precedence Constraints:** An activity must be directly preceded by another in the process. For example, `DD` must be directly preceded by `IG`.
13. **Chain Succession Constraints:** An activity must be directly followed by another in the process. For example, `IG` must be directly followed by `DD`.
14. **Non-Coexistence Constraints:** `TFC` and `CE` can not occur together in the process. In addition, `LT` and `UT` can not occur together
15. **Non-Succession Constraints:** `PC` can never be followed by `AG` in the process
16. **Non-Chain Succession Constraints:** `PC` can never be directly followed by `AG` in the process

This dictionary structure accurately captures the described constraints of the product development process using the DECLARE model format.
