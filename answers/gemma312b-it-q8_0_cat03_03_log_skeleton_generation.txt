```python
log_skeleton = {
    'equivalence': {
        ('RO', 'IC'),  # Invoice customer after receiving order
    },
    'always_before': {
        ('CA', 'RI'),  # Check availability before reserving items
        ('RI', 'PI'),  # Reserve items before picking
        ('PI', 'QC'),  # Pick items before quality check
        ('QC', 'PO'),  # Quality check before packing
        ('PO', 'GSL'),  # Pack order before generating shipping label
        ('GSL', 'D'),  # Generate shipping label before dispatch
        ('D', 'IC'),  # Dispatch before invoicing
        ('IC', 'RP')   # Invoice before recording payment
    },
    'always_after': {
        ('RO', 'D'),  # Receive order before dispatch
        ('RO', 'IC'), # Receive order before invoicing
        ('RP', 'D') # Record payment before dispatch
    },
    'never_together': {
        ('RP', 'IC'), # Cannot record payment and invoice customer at the same time
    },
    'activ_freq': {
        'RO': {1},  # Receive order occurs exactly once
        'CA': {1},  # Check availability occurs exactly once
        'RI': {1},  # Reserve items occurs exactly once
        'PI': {1},  # Pick items occurs exactly once
        'QC': {1},  # Quality check occurs exactly once
        'PO': {1},  # Pack order occurs exactly once
        'GSL': {1},  # Generate shipping label occurs exactly once
        'D': {1},  # Dispatch occurs exactly once
        'IC': {1},  # Invoice customer occurs exactly once
        'RP': {0, 1} # Record payment can occur zero or one time
    },
    'directly_follows': {
        ('CA', 'RI'), # Check availability directly followed by reserve items
        ('RI', 'PI'), # Reserve items directly followed by pick items
    }
}

print(log_skeleton)
```

**Explanation:**

*   **Equivalence:**  The invoice customer activity is equivalent to receiving the order. This means they happen at the same point in the process.
*   **Always Before:** These constraints define the order in which activities must occur.  For example, you must check availability before reserving items.
*   **Always After:** These constraints specify that certain activities must occur after others.
*   **Never Together:**  The payment record and invoice customer cannot occur simultaneously.
*   **Activity Occurrences:**  Most activities are expected to occur exactly once. The payment record can occur zero or one time, allowing for cases where payment is not immediately recorded.
*   **Directly-Follows:**  Check availability is directly followed by reserving items, and reserving items are directly followed by picking items.

This dictionary accurately represents the Log Skeleton for the described order fulfillment process, capturing the relationships and constraints between the various activities involved.  The `activ_freq` dictionary is particularly important for defining the expected number of times each activity occurs within a single case (order fulfillment).
