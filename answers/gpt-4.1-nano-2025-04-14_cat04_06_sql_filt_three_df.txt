Certainly! The task involves filtering out cases that contain a specific sequential pattern with a particular time constraint, and then returning all events from the remaining cases. Here's a detailed approach:

### Steps:
1. **Identify cases that contain the sequence**:
   - The sequence must be `'Approve Purchase Requisition'` -> `'Create Order'` -> `'Confirm Order'`.
   - These activities must appear directly in succession with no other activity from that case in between.

2. **Within those cases**, check whether the **time difference** between `'Create Order'` and `'Confirm Order'` exceeds 5 days.

3. **Exclude** all events from such cases, and **return events** only from cases **not matching** these criteria.

---

### SQL query:

```sql
WITH sequence_cases AS (
    SELECT DISTINCT
        e1.case_id
    FROM
        event_log AS e1
        JOIN event_log AS e2 ON e1.case_id = e2.case_id
        JOIN event_log AS e3 ON e1.case_id = e3.case_id
    WHERE
        -- Ensure the sequence order based on timestamps
        e1.activity = 'Approve Purchase Requisition'
        AND e2.activity = 'Create Order'
        AND e3.activity = 'Confirm Order'
        AND e1.timestamp < e2.timestamp
        AND e2.timestamp < e3.timestamp
        AND
        -- Ensure direct succession: no other activity from the same case between these events
        NOT EXISTS (
            SELECT 1
            FROM event_log AS inter_event
            WHERE
                inter_event.case_id = e1.case_id
                AND inter_event.timestamp > e1.timestamp
                AND inter_event.timestamp < e2.timestamp
        )
        AND NOT EXISTS (
            SELECT 1
            FROM event_log AS inter_event
            WHERE
                inter_event.case_id = e2.case_id
                AND inter_event.timestamp > e2.timestamp
                AND inter_event.timestamp < e3.timestamp
        )
),
long_duration_cases AS (
    SELECT DISTINCT
        sc.case_id
    FROM
        sequence_cases AS sc
        JOIN event_log AS e_create ON e_create.case_id = sc.case_id AND e_create.activity = 'Create Order'
        JOIN event_log AS e_confirm ON e_confirm.case_id = sc.case_id AND e_confirm.activity = 'Confirm Order'
    WHERE
        -- Calculate time difference in days
        JULIANDAY(e_confirm.timestamp) - JULIANDAY(e_create.timestamp) > 5
)

-- Final: select events from cases not in 'long_duration_cases'
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM long_duration_cases)
;
```

---

### Explanation:

- **`sequence_cases`**: Finds cases that have the specific direct sequence `'Approve Purchase Requisition'` -> `'Create Order'` -> `'Confirm Order'` with no intervening activities.
- **`long_duration_cases`**: From those cases, identifies cases where the time difference between `'Create Order'` and `'Confirm Order'` exceeds 5 days.
- **Final query**: Retrieves all events **excluding** those from the cases with the long duration between `'Create Order'` and `'Confirm Order'`.

---

This approach ensures you carefully filter out cases based on the sequence and timing, and then return the relevant event data only from the cases not matching those criteria.