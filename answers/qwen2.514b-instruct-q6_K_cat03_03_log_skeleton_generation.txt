To construct the Log Skeleton for the complex order fulfillment process described, we need to define constraints that reflect the business logic of this process. Hereâ€™s an example of how you might structure these constraints based on typical operational requirements and the activities mentioned.

```python
log_skeleton = {
    'equivalence': {('Reserve Items (RI)', 'Pick Items (PI)')},
    'always_before': {('Quality Check (QC)', 'Pack Order (PO)'),
                      ('Generate Shipping Label (GSL)', 'Dispatch (D)'),
                      ('Record Payment (RP)', 'Invoice Customer (IC)')},
    'always_after': {('Receive Order (RO)', 'Check Availability (CA)'),
                     ('Reserve Items (RI)', 'Quality Check (QC)'),
                     ('Pack Order (PO)', 'Generate Shipping Label (GSL)'),
                     ('Invoice Customer (IC)', 'Record Payment (RP)')},
    'never_together': {('Pick Items (PI)', 'Dispatch (D)'),  # For instance, picking and dispatch should not happen concurrently.
                       ('Check Availability (CA)', 'Quality Check (QC)')},
    'activ_freq': {'Receive Order (RO)': {1},  # Each order starts with exactly one "Receive Order"
                   'Check Availability (CA)': {1},
                   'Reserve Items (RI)': {1},
                   'Pick Items (PI)': {1},
                   'Quality Check (QC)': {1},
                   'Pack Order (PO)': {1},
                   'Generate Shipping Label (GSL)': {1},
                   'Dispatch (D)': {1},
                   'Invoice Customer (IC)': {0, 1},  # Not all orders might need an invoice if payment was pre-arranged
                   'Record Payment (RP)': {1}},
    'directly_follows': {('Receive Order (RO)', 'Check Availability (CA)'),
                         ('Check Availability (CA)', 'Reserve Items (RI)'),
                         ('Reserve Items (RI)', 'Pick Items (PI)'),
                         ('Pick Items (PI)', 'Quality Check (QC)'),
                         ('Quality Check (QC)', 'Pack Order (PO)'),
                         ('Pack Order (PO)', 'Generate Shipping Label (GSL)'),
                         ('Generate Shipping Label (GSL)', 'Dispatch (D)'),
                         ('Invoice Customer (IC)', 'Record Payment (RP)')}
}
```

### Explanation of Constraints:

- **Equivalence**: This constraint is added to show that `Reserve Items` and `Pick Items` are closely related. Depending on the process, this could mean they're part of a single step where items are first reserved then picked.
  
- **Always Before/After**: These constraints enforce the logical order in which activities should occur without any gaps or overlaps (except for the exception noted below).
  - For example, `Generate Shipping Label` must be done before dispatching to ensure accurate tracking information is provided.

- **Never Together**: Ensures that certain pairs of activities do not happen at the same time. 
  - E.g., picking and dispatch might require different staff or systems, so they shouldn't overlap.
  
- **Activity Occurrences (`activ_freq`)**: Specifies how many times each activity should occur during an order fulfillment process:
  - Each major step is expected to be performed exactly once per order.
  - Invoice generation might not always be necessary if payment was prearranged or settled differently.

- **Directly-Follows Constraints**: Defines the immediate sequence of activities ensuring a smooth flow from one task to another without skipping steps.

This Log Skeleton provides a framework that can help in analyzing, optimizing, and potentially automating parts of an order fulfillment process. Adjustments might be necessary based on specific operational details or changes in business requirements.