Here is a simplified DECLARE model dictionary for the scenario. It encodes all activities with a full set of constraints, using 1.0 for both support and confidence in each rule. The list of activities is [IG, DD, TFC, CE, PC, LT, UT, AG, MP, FL].

activities = ['IG', 'DD', 'TFC', 'CE', 'PC', 'LT', 'UT', 'AG', 'MP', 'FL']

declare_model = {
    'existence': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'absence': {},  # no explicit absence constraints
    'exactly_one': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'init': { 'IG': {'support': 1.0, 'confidence': 1.0} },

    'responded_existence': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'coexistence': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'response': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'precedence': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'succession': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'altresponse': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'altprecedence': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'altsuccession': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },

    'chainresponse': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'chainprecedence': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'chainsuccession': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },

    'noncoexistence': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'nonsuccession': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
    'nonchainsuccession': { a: {'support': 1.0, 'confidence': 1.0} for a in activities },
}