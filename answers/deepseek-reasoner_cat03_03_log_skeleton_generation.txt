To construct the Log Skeleton model for the order fulfillment process, we analyze the constraints based on the described workflow. Each activity's sequence, occurrence, and relationships are considered to define the declarative constraints.

```python
log_skeleton = {
    'equivalence': set(),
    'always_before': {
        ('CA', 'RO'),
        ('RI', 'CA'),
        ('PI', 'RI'),
        ('QC', 'PI'),
        ('PO', 'QC'),
        ('GSL', 'PO'),
        ('D', 'GSL'),
        ('IC', 'D'),
        ('RP', 'IC')
    },
    'always_after': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC')
    },
    'never_together': set(),
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {0, 1}
    },
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC')
    }
}
```

### Explanation of Constraints:
1. **Equivalence**: No pairs of activities require mutual occurrence equality.
2. **Always Before**: Ensures prerequisites (e.g., `CA` must occur before `RI`).
3. **Always After**: Ensures subsequent steps (e.g., `RO` is followed by `CA`).
4. **Never Together**: No mutually exclusive activities.
5. **Activity Occurrences**: Most activities occur exactly once, except `RP` (0 or 1).
6. **Directly-Follows**: Enforces strict order for sequential steps (e.g., `RO`  `CA`). The optional `RP` isn't enforced to directly follow `IC` to accommodate cases where payment isn’t recorded.