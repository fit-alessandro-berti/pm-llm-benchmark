To model the order fulfillment process using Log Skeleton constraints, we define the relationships and requirements between activities based on the scenario. Here's the structured Log Skeleton:

```python
log_skeleton = {
    'equivalence': {('GSL', 'D'), ('IC', 'RP')},
    'always_before': {
        ('CA', 'RO'),
        ('RI', 'CA'),
        ('PI', 'RI'),
        ('QC', 'PI'),
        ('PO', 'QC'),
        ('GSL', 'PO'),
        ('D', 'GSL'),
        ('IC', 'D'),
        ('RP', 'IC')
    },
    'always_after': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    },
    'never_together': set(),
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {1}
    },
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    }
}
```

**Explanation:**

1. **Equivalence:**
   - `GSL` and `D` must occur the same number of times (each shipment label corresponds to a dispatch).
   - `IC` and `RP` are paired (each invoice leads to a payment record).

2. **Always Before:**
   - Ensures each activity is preceded by its predecessor (e.g., `CA` requires `RO` to have occurred first).

3. **Always After:**
   - Ensures each activity is followed by its successor (e.g., `RO` must be followed by `CA`).

4. **Never Together:**
   - No activities are mutually exclusive in this process.

5. **Activity Occurrences:**
   - Each activity occurs exactly once per case.

6. **Directly-Follows Constraints:**
   - Enforces a strict sequence where each activity must immediately follow its predecessor (e.g., `QC` directly follows `PI`).