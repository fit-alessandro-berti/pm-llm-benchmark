# DuckDB SQL Query for Process Variant Analysis

Here's a comprehensive DuckDB SQL query that accomplishes all the specified tasks:

```sql
WITH
-- Step 1: Create ordered activity sequences for each case
case_sequences AS (
    SELECT
        case_id,
        LIST(
            activity
            ORDER BY timestamp
        ) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
),

-- Step 2: Group cases by their activity sequence and count occurrences
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count,
        LIST(case_id) AS case_ids
    FROM
        case_sequences
    GROUP BY
        activity_sequence
    ORDER BY
        case_count DESC
),

-- Step 3: Get the top K variants (parameterized with K=5 as example)
top_variants AS (
    SELECT
        activity_sequence,
        case_count,
        case_ids
    FROM
        variant_counts
    LIMIT 5  -- Change this to your desired K value
),

-- Step 4: Unnest the case_ids from top variants
top_case_ids AS (
    SELECT
        UNNEST(case_ids) AS case_id
    FROM
        top_variants
)

-- Step 5: Return all events from cases that belong to top K variants
SELECT
    e.*
FROM
    event_log e
JOIN
    top_case_ids t ON e.case_id = t.case_id
ORDER BY
    e.case_id,
    e.timestamp;
```

## Explanation:

1. **case_sequences**: This CTE creates the ordered activity sequence for each case by:
   - Grouping by `case_id`
   - Using DuckDB's `LIST` function with `ORDER BY timestamp` to create an ordered array of activities

2. **variant_counts**: This CTE:
   - Groups cases by their activity sequence
   - Counts how many cases follow each sequence
   - Creates a list of case_ids for each variant
   - Orders by frequency (descending)

3. **top_variants**: This CTE:
   - Takes only the top K variants (using LIMIT)
   - You can adjust the LIMIT value to get more or fewer variants

4. **top_case_ids**: This CTE:
   - Unnests the case_ids from the top variants to create a flat list

5. **Final SELECT**: Returns all events from the original log that belong to cases in the top K variants

## Usage Notes:

- To change the number of top variants (K), modify the `LIMIT 5` in the `top_variants` CTE
- The query preserves the original event log structure while filtering for only the top variants
- Results are ordered by case_id and timestamp for readability
- For very large datasets, you might want to add appropriate indexes on `case_id` and `timestamp`