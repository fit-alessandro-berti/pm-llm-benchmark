Below is a compact “mathematical” representation of the complete patient-management process tree, followed by fully-working Python code that constructs exactly the same tree with pm4py.

=====================================================================
TEXTUAL PROCESS-TREE NOTATION
=====================================================================

->(                                   -- overall SEQUENCE
  'A',                                -- Arrival
  'RG',                               -- Registration
  'IA',                               -- Intake Assessment
  ->('TI','TC'),                      -- Triage Interview  Triage Classification
  X('CE','FBP'),                      --exclusive initial diagnostic test
  *(                                   -- LOOP: repeat until results become “normal”
     ->(                               --loop body
        'SC',                         --Specialist Consultation
        X('TM','SPT'),                --exclusive treatment
        X('FCE','FBA')                --exclusive re-diagnostic test
     ),
     tau                              --redo/decision branch (silent)
   ),
  +('AI','NC'),                       -- Advanced Imaging  Nutritional Counselling
  'FAS',                              -- Follow-up Appointment Scheduling
  'DDI',                              -- Detailed Discharge Instructions
  +('BL','ICP','MRF')                 -- Billing  Insurance  Medical-records finalisation
)

• The outermost SEQUENCE (->) enforces the global order from Arrival to final clearances.  
• The LOOP * (...) models “do body; if still abnormal, redo body again (via silent tau); else exit”.  
• The two PARALLEL blocks (+) allow their children to execute in any overlapping order.  
• All leaf names in single quotes are observable activities; tau is an unobservable/silent step.

=====================================================================
PYTHON CONSTRUCTION WITH pm4py
=====================================================================

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# ------------------------------------------------------------------
# 1.  helpers
# ------------------------------------------------------------------
def act(label, parent):
    """Create an activity (leaf) and attach it to <parent>."""
    return ProcessTree(label=label, parent=parent)

def tau(parent):
    """Create a silent step (tau) and attach it to <parent>."""
    return ProcessTree(label=None, parent=parent)       # label=None =  in pm4py

# ------------------------------------------------------------------
# 2.  build the tree, always setting the 'parent' in the constructor
# ------------------------------------------------------------------
root = ProcessTree(operator=Operator.SEQUENCE)          # global 

# 2.1 Arrival – Registration – Intake Assessment
root.children.extend([
    act("A",  root),                                    # Arrival
    act("RG", root),                                    # Registration
    act("IA", root)                                     # Intake Assessment
])

# 2.2 Triage Interview  Triage Classification
triage_seq = ProcessTree(operator=Operator.SEQUENCE, parent=root)
triage_seq.children.extend([act("TI", triage_seq), act("TC", triage_seq)])
root.children.append(triage_seq)

# 2.3 XOR(CE, FBP)
init_diag = ProcessTree(operator=Operator.XOR, parent=root)
init_diag.children.extend([act("CE", init_diag), act("FBP", init_diag)])
root.children.append(init_diag)

# 2.4 LOOP  * ( BODY ,  )
loop_node = ProcessTree(operator=Operator.LOOP, parent=root)

# ---- loop BODY: SC  XOR(TM,SPT)  XOR(FCE,FBA)
body = ProcessTree(operator=Operator.SEQUENCE, parent=loop_node)

body.children.append(act("SC", body))                   # Specialist Consultation

treat_xor = ProcessTree(operator=Operator.XOR, parent=body)
treat_xor.children.extend([act("TM", treat_xor), act("SPT", treat_xor)])
body.children.append(treat_xor)

rdt_xor = ProcessTree(operator=Operator.XOR, parent=body)
rdt_xor.children.extend([act("FCE", rdt_xor), act("FBA", rdt_xor)])
body.children.append(rdt_xor)

# ---- assemble LOOP
loop_node.children.extend([body, tau(loop_node)])       # (A, )
root.children.append(loop_node)

# 2.5 PARALLEL(AI, NC)
post_diag_par = ProcessTree(operator=Operator.PARALLEL, parent=root)
post_diag_par.children.extend([act("AI", post_diag_par), act("NC", post_diag_par)])
root.children.append(post_diag_par)

# 2.6 FAS  DDI
root.children.extend([act("FAS", root), act("DDI", root)])

# 2.7 PARALLEL(BL, ICP, MRF)
release_par = ProcessTree(operator=Operator.PARALLEL, parent=root)
release_par.children.extend([
    act("BL",  release_par),
    act("ICP", release_par),
    act("MRF", release_par)
])
root.children.append(release_par)

# ------------------------------------------------------------------
# 3.  the variable `root` now contains the complete process tree
# ------------------------------------------------------------------
```

Running this code yields a `ProcessTree` whose structure exactly matches the textual model above, ready for further analysis or visualisation in pm4py.