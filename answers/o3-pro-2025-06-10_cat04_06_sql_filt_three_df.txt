Here’s a compact solution that

1. looks at every event in its time-order within each case,
2. checks whether that event is immediately followed by  
   • ‘Create Order’ and then  
   • ‘Confirm Order’,  
3. verifies that the elapsed time between the last two of those three events is > 5 days, and  
4. removes every case that satisfies 1-3 from the final result set.

```sql
-- DuckDB SQL
WITH ordered AS (
    SELECT
        case_id,
        activity,
        "timestamp",

        -- look one and two steps ahead in the same case
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY "timestamp")  AS next_act,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY "timestamp")  AS next2_act,
        LEAD("timestamp", 1) OVER (PARTITION BY case_id ORDER BY "timestamp") AS next_ts,
        LEAD("timestamp", 2) OVER (PARTITION BY case_id ORDER BY "timestamp") AS next2_ts
    FROM event_log
),

/* Cases that contain the exact consecutive pattern and
   where Create  Confirm takes more than 5 days          */
cases_to_exclude AS (
    SELECT DISTINCT case_id
    FROM ordered
    WHERE activity   = 'Approve Purchase Requisition'
      AND next_act   = 'Create Order'
      AND next2_act  = 'Confirm Order'
      AND next2_ts - next_ts > INTERVAL '5 days'
)

-- Return every event that is NOT in those cases
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, "timestamp";
```

Explanation of the key points:

• `LEAD` with offsets 1 and 2 lets us inspect the **next** and **next-next** events inside each `case_id`, guaranteeing that no other activity appears between them (direct succession).

• The time check `next2_ts - next_ts > INTERVAL '5 days'` compares the timestamps of ‘Create Order’ and ‘Confirm Order’ in the identified triple.

• Any case that meets both the sequence and timing condition is collected in `cases_to_exclude`; the outer query simply filters those entire cases away, returning only events from the remaining process instances.