```python
log_skeleton = {
    'equivalence': {('RO', 'IC')}, #Receive Order and Invoice Customer occur the same amount of times
    'always_before': {('RI', 'CA'), ('PI', 'RI'), ('QC', 'PI'), ('PO', 'QC'), ('GSL', 'PO'), ('D', 'GSL'), ('RP', 'IC')},
    'always_after': {('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('IC', 'RP')},
    'never_together': {('RO','RP')},
    'activ_freq': {
        'RO': {1},  # Receive Order always occurs exactly once
        'CA': {1},  # Check Availability always occurs exactly once
        'RI': {1},  # Reserve Items always occurs exactly once
        'PI': {1},  # Pick Items always occurs exactly once
        'QC': {1},  # Quality Check always occurs exactly once
        'PO': {1},  # Pack Order always occurs exactly once
        'GSL': {1},  # Generate Shipping Label always occurs exactly once
        'D': {1},   # Dispatch always occurs exactly once
        'IC': {1},  # Invoice Customer always occurs exactly once
        'RP': {0, 1} # Record Payment occurs zero or one time
    },
    'directly_follows': {('RO','CA'), ('CA','RI'), ('RI','PI'), ('PI','QC'), ('QC','PO'), ('PO','GSL'), ('GSL','D'), ('IC','RP')},
}


print(log_skeleton)
```

**Explanation:**

1.  **`equivalence`:**
    *   `{('RO', 'IC')}`: We consider that an order being received implies that an invoice is also generated, so both should have the same occurrences (in this case both have 1).

2.  **`always_before`:**
    *   `{('RI', 'CA'), ('PI', 'RI'), ('QC', 'PI'), ('PO', 'QC'), ('GSL', 'PO'), ('D', 'GSL'), ('RP', 'IC')}` :  For instance,  'Reserve Items' must happen before the 'Check Availability'. Similarly, picking items must occur after items are reserved. This captures the sequential dependencies.

3.  **`always_after`:**
    *   `{('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('IC', 'RP')}`: This reflects the expected sequence where for instance 'Receive Order' should always have 'Check Availability' happening next. 'Invoice Customer' should always have 'Record Payment' following it.

4.  **`never_together`:**
    *   `{('RO','RP')}`: 'Receive Order' and 'Record Payment' should never happen in the same process execution, as a payment should happen after the process is done.

5.  **`activ_freq`:**
    *   This specifies the allowed occurrence counts for each activity. For instance,  `'RO': {1}` indicates 'Receive Order' always appears once for each case, and `'RP': {0, 1}` indicates 'Record Payment' happens 0 or 1 time for each case.

6.  **`directly_follows`:**
    *   `{('RO','CA'), ('CA','RI'), ('RI','PI'), ('PI','QC'), ('QC','PO'), ('PO','GSL'), ('GSL','D'), ('IC','RP')}`: This indicates the exact order of operations where the second activity has to occur immediatelly after the first. For instance 'Check Availability' occurs immediately after 'Receive Order', etc.

This `log_skeleton` dictionary captures the constraints of the order fulfillment process as specified by the problem description. The constraints can be used to evaluate event logs and to discover/verify process models.
