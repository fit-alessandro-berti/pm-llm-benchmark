To meet your requirements, we'll write a DuckDB SQL query that:

1. Identifies the cases containing the specified sequence of three activities in direct succession.
2. Filters out cases where the time elapsed between the 'Create Order' event and the 'Confirm Order' event of that sequence is more than 5 days.
3. Excludes the events from the cases that meet both criteria.

Here's the query to achieve this:

```sql
WITH filtered_cases AS (
  SELECT
    l1.case_id,
    l1.timestamp AS approve_timestamp,
    l2.timestamp AS create_timestamp,
    l3.timestamp AS confirm_timestamp
  FROM
    event_log l1
    JOIN event_log l2 ON l1.case_id = l2.case_id AND l1.timestamp < l2.timestamp
    JOIN event_log l3 ON l2.case_id = l3.case_id AND l2.timestamp < l3.timestamp
  WHERE
    l1.activity = 'Approve Purchase Requisition'
    AND l2.activity = 'Create Order'
    AND l3.activity = 'Confirm Order'
    AND NOT EXISTS (
      SELECT 1
      FROM event_log sub
      WHERE sub.case_id = l1.case_id
        AND sub.timestamp > l1.timestamp
        AND sub.timestamp < l2.timestamp
    )
    AND NOT EXISTS (
      SELECT 1
      FROM event_log sub
      WHERE sub.case_id = l2.case_id
        AND sub.timestamp > l2.timestamp
        AND sub.timestamp < l3.timestamp
    )
    AND (l3.timestamp - l2.timestamp) > INTERVAL '5 DAYS'
),
excluded_cases AS (
  SELECT case_id FROM filtered_cases
)

SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM excluded_cases)
ORDER BY case_id, timestamp;
```

This query creates a CTE (Common Table Expression) `filtered_cases` to find the cases that match the specified sequence and the timing condition. It then creates another CTE, `excluded_cases`, to store the `case_id` of these filtered cases. Finally, it selects all events from `event_log` that do not belong to the excluded cases, ordering the result set by `case_id` and `timestamp`.