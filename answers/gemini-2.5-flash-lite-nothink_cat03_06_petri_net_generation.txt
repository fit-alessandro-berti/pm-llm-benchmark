```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance Claim Management")

# Define places (states)
claim_filed = PetriNet.Place(name="Claim Filed")
claim_registered = PetriNet.Place(name="Claim Registered")
documents_verified = PetriNet.Place(name="Documents Verified")
documents_incomplete = PetriNet.Place(name="Documents Incomplete")
fraud_checked = PetriNet.Place(name="Fraud Checked")
fraud_doubts = PetriNet.Place(name="Fraud Doubts")
claim_assessed = PetriNet.Place(name="Claim Assessed")
claim_approved = PetriNet.Place(name="Claim Approved")
claim_paid = PetriNet.Place(name="Claim Paid")
claim_closed = PetriNet.Place(name="Claim Closed")

# Add places to the net
net.places.add(claim_filed)
net.places.add(claim_registered)
net.places.add(documents_verified)
net.places.add(documents_incomplete)
net.places.add(fraud_checked)
net.places.add(fraud_doubts)
net.places.add(claim_assessed)
net.places.add(claim_approved)
net.places.add(claim_paid)
net.places.add(claim_closed)

# Define transitions (activities)
claim_registration = PetriNet.Transition(name="Claim Registration", label="Claim Registration")
document_verification = PetriNet.Transition(name="Document Verification", label="Document Verification")
fraud_check = PetriNet.Transition(name="Fraud Check", label="Fraud Check")
claim_assessment = PetriNet.Transition(name="Claim Assessment", label="Claim Assessment")
approval = PetriNet.Transition(name="Approval", label="Approval")
payment = PetriNet.Transition(name="Payment", label="Payment")
notification = PetriNet.Transition(name="Notification", label="Notification")
closure = PetriNet.Transition(name="Closure", label="Closure")
re_document_submission = PetriNet.Transition(name="Re-Document Submission", label="Re-Document Submission")
in_depth_investigation = PetriNet.Transition(name="In-depth Investigation", label="In-depth Investigation")

# Add transitions to the net
net.transitions.add(claim_registration)
net.transitions.add(document_verification)
net.transitions.add(fraud_check)
net.transitions.add(claim_assessment)
net.transitions.add(approval)
net.transitions.add(payment)
net.transitions.add(notification)
net.transitions.add(closure)
net.transitions.add(re_document_submission)
net.transitions.add(in_depth_investigation)

# Connect places and transitions with arcs

# Start of the process
petri_utils.add_arc_from_to(claim_filed, claim_registration, net)

# Claim Registration to Document Verification
petri_utils.add_arc_from_to(claim_registered, document_verification, net)

# Document Verification logic
petri_utils.add_arc_from_to(document_verification, documents_verified, net)
petri_utils.add_arc_from_to(document_verification, documents_incomplete, net) # Branch for incomplete documents
petri_utils.add_arc_from_to(documents_incomplete, re_document_submission, net) # Re-submission of documents
petri_utils.add_arc_from_to(re_document_submission, document_verification, net) # Loop back for re-verification

# Document Verification to Fraud Check (after successful verification)
petri_utils.add_arc_from_to(documents_verified, fraud_check, net)

# Fraud Check logic
petri_utils.add_arc_from_to(fraud_check, fraud_checked, net)
petri_utils.add_arc_from_to(fraud_check, fraud_doubts, net) # Branch for doubts
petri_utils.add_arc_from_to(fraud_doubts, in_depth_investigation, net) # In-depth investigation
# Loop for multiple in-depth investigations
petri_utils.add_arc_from_to(in_depth_investigation, fraud_check, net)
petri_utils.add_arc_from_to(in_depth_investigation, fraud_doubts, net) # Another chance for doubts after investigation

# Fraud Check to Claim Assessment (after successful check or resolved doubts)
petri_utils.add_arc_from_to(fraud_checked, claim_assessment, net)

# Claim Assessment to Approval
petri_utils.add_arc_from_to(claim_assessed, approval, net)

# Approval logic (assuming a threshold for approval)
# For simplicity, we'll have a direct path assuming approval is always needed for payment
petri_utils.add_arc_from_to(approval, claim_approved, net)

# Claim Approved to Payment
petri_utils.add_arc_from_to(claim_approved, payment, net)

# Payment to Notification
petri_utils.add_arc_from_to(claim_paid, notification, net)

# Notification to Closure
petri_utils.add_arc_from_to(notification, closure, net)
petri_utils.add_arc_from_to(closure, claim_closed, net) # Final state

# Define the initial marking
im = Marking()
im[claim_filed] = 1  # A new claim arrives

# Define the final marking
fm = Marking()
fm[claim_closed] = 1 # The claim is closed

print("Accepting Petri Net constructed successfully.")
print("\nInitial Marking:", im)
print("Final Marking:", fm)

# You can now use 'net', 'im', and 'fm' for further analysis or visualization.
# For example, to visualize (requires graphviz):
# from pm4py.visualization.petri_net import visualizer as pn_visualizer
# net_vis = pn_visualizer.apply(net, im, fm)
# pn_visualizer.save(net_vis, "insurance_claim_petri_net.png")
# print("Petri net visualization saved as insurance_claim_petri_net.png")
```