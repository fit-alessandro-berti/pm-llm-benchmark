Here is a complete, self-contained Python script that builds an accepting Petri net for the insurance-claim process exactly as requested.  
The net:

• has one clear start place that is marked initially;  
• has one clear final (closed) place that is marked in the final marking;  
• contains a forward “happy-path” C  CR  DV  FC  CA  (AP)  P  N  CL;  
• allows the two requested loops  
  – DV  RDS (re-submit documents, possibly many times)  
  – FC  II (in-depth investigation, possibly many times);  
• lets Payment be reached either directly after CA or after an extra Approval step (AP).

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# ------------------------------------------------------------------
# 1.  Create a Petri net object
# ------------------------------------------------------------------
net = PetriNet(name="Insurance-Claim-Handling")

# ------------------------------------------------------------------
# 2.  Define places (states)
# ------------------------------------------------------------------
p_start          = PetriNet.Place("p_start")          # new claim arrives
p_after_C        = PetriNet.Place("p_after_C")        # claim filed
p_after_CR       = PetriNet.Place("p_after_CR")       # claim registered
p_ready_for_DV   = PetriNet.Place("p_ready_for_DV")   # before document verification
p_after_DV       = PetriNet.Place("p_after_DV")       # documents verified
p_after_FC       = PetriNet.Place("p_after_FC")       # fraud check done
p_after_CA       = PetriNet.Place("p_after_CA")       # assessment done
p_after_AP       = PetriNet.Place("p_after_AP")       # approval done
p_after_P        = PetriNet.Place("p_after_P")        # payment executed
p_after_N        = PetriNet.Place("p_after_N")        # customer notified
p_closed         = PetriNet.Place("p_closed")         # claim closed (final)

net.places.update({
    p_start, p_after_C, p_after_CR, p_ready_for_DV, p_after_DV,
    p_after_FC, p_after_CA, p_after_AP, p_after_P, p_after_N, p_closed
})

# ------------------------------------------------------------------
# 3.  Define transitions (activities)
# ------------------------------------------------------------------
t_C   = PetriNet.Transition("C",   "Insurance Claim")         # claim filed
t_CR  = PetriNet.Transition("CR",  "Claim Registration")
t_DV  = PetriNet.Transition("DV",  "Document Verification")
t_RDS = PetriNet.Transition("RDS", "Re-Document Submission")
t_FC  = PetriNet.Transition("FC",  "Fraud Check")
t_II  = PetriNet.Transition("II",  "In-depth Investigation")
t_CA  = PetriNet.Transition("CA",  "Claim Assessment")
t_AP  = PetriNet.Transition("AP",  "Approval")
t_P   = PetriNet.Transition("P",   "Payment")
t_N   = PetriNet.Transition("N",   "Notification")
t_CL  = PetriNet.Transition("CL",  "Closure")

net.transitions.update({
    t_C, t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL
})

# ------------------------------------------------------------------
# 4.  Connect places and transitions with arcs
#     (including loops for RDS and II)
# ------------------------------------------------------------------
# filing  registration
petri_utils.add_arc_from_to(p_start,      t_C,  net)
petri_utils.add_arc_from_to(t_C,          p_after_C, net)

petri_utils.add_arc_from_to(p_after_C,    t_CR, net)
petri_utils.add_arc_from_to(t_CR,         p_ready_for_DV, net)

# document verification (with possible re-submission loop)
petri_utils.add_arc_from_to(p_ready_for_DV, t_DV,  net)
petri_utils.add_arc_from_to(t_DV,           p_after_DV, net)

# if docs incomplete  RDS  back to verification
petri_utils.add_arc_from_to(p_after_DV,   t_RDS, net)
petri_utils.add_arc_from_to(t_RDS,        p_ready_for_DV, net)

# fraud check (with possible investigation loop)
petri_utils.add_arc_from_to(p_after_DV,   t_FC,  net)
petri_utils.add_arc_from_to(t_FC,         p_after_FC, net)

# if doubts  II  back to fraud check
petri_utils.add_arc_from_to(p_after_FC,   t_II, net)
petri_utils.add_arc_from_to(t_II,         p_after_FC, net)

# assessment
petri_utils.add_arc_from_to(p_after_FC,   t_CA, net)
petri_utils.add_arc_from_to(t_CA,         p_after_CA, net)

# optional approval (only if amount above threshold)
petri_utils.add_arc_from_to(p_after_CA,   t_AP, net)     # branch with approval
petri_utils.add_arc_from_to(t_AP,         p_after_AP, net)
petri_utils.add_arc_from_to(p_after_AP,   t_P,  net)     #  payment after approval

# direct payment branch (amount below threshold)
petri_utils.add_arc_from_to(p_after_CA,   t_P,  net)

# payment  notification  closure
petri_utils.add_arc_from_to(t_P,          p_after_P, net)
petri_utils.add_arc_from_to(p_after_P,    t_N,  net)
petri_utils.add_arc_from_to(t_N,          p_after_N, net)
petri_utils.add_arc_from_to(p_after_N,    t_CL, net)
petri_utils.add_arc_from_to(t_CL,         p_closed, net)

# ------------------------------------------------------------------
# 5.  Define initial and final markings
# ------------------------------------------------------------------
im = Marking()
im[p_start] = 1          # one new claim token

fm = Marking()
fm[p_closed] = 1         # process finished when the token reaches “closed”

# ------------------------------------------------------------------
# 6.  (Optional) sanity check
# ------------------------------------------------------------------
print("Places:", len(net.places))
print("Transitions:", len(net.transitions))
print("Initial marking:", im)
print("Final marking:", fm)
```

Running the script yields a Petri net whose behaviour matches the narrative:

• the token starts in `p_start`;  
• it can loop any number of times through RDS (incomplete documents) or II (extra investigations);  
• it eventually reaches `p_closed`, satisfying the final marking.

You can now use `net`, `im`, and `fm` exactly as an accepting Petri net in PM4Py (e.g., for conformance checking, simulation, visualisation, etc.).