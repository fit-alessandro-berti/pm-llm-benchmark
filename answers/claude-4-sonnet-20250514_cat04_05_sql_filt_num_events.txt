Here's a DuckDB SQL query that accomplishes this task:

```sql
SELECT el.*
FROM event_log el
WHERE el.case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
);
```

**Alternative approach using a window function:**

```sql
SELECT case_id, activity, timestamp
FROM (
    SELECT case_id, 
           activity, 
           timestamp,
           COUNT(*) OVER (PARTITION BY case_id) as case_event_count
    FROM event_log
) subquery
WHERE case_event_count <= 6;
```

**Alternative approach using a CTE (Common Table Expression):**

```sql
WITH case_counts AS (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
SELECT el.*
FROM event_log el
INNER JOIN case_counts cc ON el.case_id = cc.case_id;
```

All three approaches will:
1. Identify cases that have 6 or fewer events
2. Return all events belonging to those cases
3. Exclude all events from cases that have more than 6 events

The first approach using a subquery with `IN` is probably the most straightforward and readable. The window function approach might be more efficient for very large datasets since it only scans the table once, while the CTE approach offers good readability and explicit separation of the filtering logic.