# Insurance Claim Management Petri Net

I'll create an accepting Petri net for the insurance claim management process with all the specified activities and logic flows. The model will include the main process flow, the document resubmission loop, and the in-depth investigation loop.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance_Claim_Management")

# Create places
p_start = PetriNet.Place(name="start")
p_claim_filed = PetriNet.Place(name="claim_filed")
p_claim_registered = PetriNet.Place(name="claim_registered")
p_docs_to_verify = PetriNet.Place(name="docs_to_verify")
p_docs_verified = PetriNet.Place(name="docs_verified")
p_docs_incomplete = PetriNet.Place(name="docs_incomplete")
p_ready_for_fraud_check = PetriNet.Place(name="ready_for_fraud_check")
p_fraud_check_complete = PetriNet.Place(name="fraud_check_complete")
p_fraud_suspicious = PetriNet.Place(name="fraud_suspicious")
p_ready_for_assessment = PetriNet.Place(name="ready_for_assessment")
p_assessment_complete = PetriNet.Place(name="assessment_complete")
p_approved = PetriNet.Place(name="approved")
p_payment_processed = PetriNet.Place(name="payment_processed")
p_customer_notified = PetriNet.Place(name="customer_notified")
p_end = PetriNet.Place(name="end")

# Add places to the net
places = [
    p_start, p_claim_filed, p_claim_registered, p_docs_to_verify, 
    p_docs_verified, p_docs_incomplete, p_ready_for_fraud_check,
    p_fraud_check_complete, p_fraud_suspicious, p_ready_for_assessment,
    p_assessment_complete, p_approved, p_payment_processed, 
    p_customer_notified, p_end
]

for p in places:
    net.places.add(p)

# Create transitions
t_file_claim = PetriNet.Transition(name="t_file_claim", label="Insurance Claim (C)")
t_register = PetriNet.Transition(name="t_register", label="Claim Registration (CR)")
t_verify_docs = PetriNet.Transition(name="t_verify_docs", label="Document Verification (DV)")
t_docs_complete = PetriNet.Transition(name="t_docs_complete", label="Documents Complete")
t_docs_incomplete = PetriNet.Transition(name="t_docs_incomplete", label="Documents Incomplete")
t_resubmit_docs = PetriNet.Transition(name="t_resubmit_docs", label="Re-Document Submission (RDS)")
t_fraud_check = PetriNet.Transition(name="t_fraud_check", label="Fraud Check (FC)")
t_no_fraud = PetriNet.Transition(name="t_no_fraud", label="No Fraud Detected")
t_fraud_suspicious = PetriNet.Transition(name="t_fraud_suspicious", label="Fraud Suspicious")
t_in_depth_investigation = PetriNet.Transition(name="t_in_depth_investigation", label="In-depth Investigation (II)")
t_assess_claim = PetriNet.Transition(name="t_assess_claim", label="Claim Assessment (CA)")
t_approve = PetriNet.Transition(name="t_approve", label="Approval (AP)")
t_process_payment = PetriNet.Transition(name="t_process_payment", label="Payment (P)")
t_notify = PetriNet.Transition(name="t_notify", label="Notification (N)")
t_close = PetriNet.Transition(name="t_close", label="Closure (CL)")

# Add transitions to the net
transitions = [
    t_file_claim, t_register, t_verify_docs, t_docs_complete, t_docs_incomplete,
    t_resubmit_docs, t_fraud_check, t_no_fraud, t_fraud_suspicious,
    t_in_depth_investigation, t_assess_claim, t_approve, t_process_payment,
    t_notify, t_close
]

for t in transitions:
    net.transitions.add(t)

# Create arcs
# Main flow
petri_utils.add_arc_from_to(p_start, t_file_claim, net)
petri_utils.add_arc_from_to(t_file_claim, p_claim_filed, net)
petri_utils.add_arc_from_to(p_claim_filed, t_register, net)
petri_utils.add_arc_from_to(t_register, p_claim_registered, net)
petri_utils.add_arc_from_to(p_claim_registered, t_verify_docs, net)
petri_utils.add_arc_from_to(t_verify_docs, p_docs_to_verify, net)

# Document verification branch
petri_utils.add_arc_from_to(p_docs_to_verify, t_docs_complete, net)
petri_utils.add_arc_from_to(p_docs_to_verify, t_docs_incomplete, net)
petri_utils.add_arc_from_to(t_docs_complete, p_docs_verified, net)
petri_utils.add_arc_from_to(t_docs_incomplete, p_docs_incomplete, net)
petri_utils.add_arc_from_to(p_docs_incomplete, t_resubmit_docs, net)
petri_utils.add_arc_from_to(t_resubmit_docs, p_docs_to_verify, net)

# Continue with main flow after document verification
petri_utils.add_arc_from_to(p_docs_verified, t_fraud_check, net)
petri_utils.add_arc_from_to(t_fraud_check, p_ready_for_fraud_check, net)

# Fraud check branch
petri_utils.add_arc_from_to(p_ready_for_fraud_check, t_no_fraud, net)
petri_utils.add_arc_from_to(p_ready_for_fraud_check, t_fraud_suspicious, net)
petri_utils.add_arc_from_to(t_no_fraud, p_fraud_check_complete, net)
petri_utils.add_arc_from_to(t_fraud_suspicious, p_fraud_suspicious, net)
petri_utils.add_arc_from_to(p_fraud_suspicious, t_in_depth_investigation, net)
petri_utils.add_arc_from_to(t_in_depth_investigation, p_ready_for_fraud_check, net)

# Continue with main flow after fraud check
petri_utils.add_arc_from_to(p_fraud_check_complete, t_assess_claim, net)
petri_utils.add_arc_from_to(t_assess_claim, p_assessment_complete, net)
petri_utils.add_arc_from_to(p_assessment_complete, t_approve, net)
petri_utils.add_arc_from_to(t_approve, p_approved, net)
petri_utils.add_arc_from_to(p_approved, t_process_payment, net)
petri_utils.add_arc_from_to(t_process_payment, p_payment_processed, net)
petri_utils.add_arc_from_to(p_payment_processed, t_notify, net)
petri_utils.add_arc_from_to(t_notify, p_customer_notified, net)
petri_utils.add_arc_from_to(p_customer_notified, t_close, net)
petri_utils.add_arc_from_to(t_close, p_end, net)

# Define initial and final markings
im = Marking()
im[p_start] = 1  # Initial marking: one token in the start place

fm = Marking()
fm[p_end] = 1  # Final marking: one token in the end place

# The accepting Petri net is now defined by (net, im, fm)
```

## Explanation of the Petri Net

This Petri net models the insurance claim management process with the following components:

1. **Places**: Represent states between activities (e.g., claim filed, documents verified)
2. **Transitions**: Represent activities in the process (e.g., Claim Registration, Document Verification)
3. **Arcs**: Connect places to transitions and transitions to places to define the flow

The process flow includes:
- The main sequential flow from claim filing to closure
- A loop for document resubmission when documents are incomplete
- A loop for in-depth investigation when fraud is suspected

The initial marking places a token in the `start` place, representing a new claim arriving in the system. The final marking expects a token in the `end` place, representing a successfully closed claim.

The model captures all the specified activities and their logical sequence, including the conditional branches and loops for document resubmission and fraud investigation.