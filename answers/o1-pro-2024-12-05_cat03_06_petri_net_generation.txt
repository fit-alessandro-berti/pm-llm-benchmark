```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create an empty Petri net
net = PetriNet(name="Insurance_Claim_Management")

# -----------------------
# PLACES
# -----------------------
# Start of process
p_start = PetriNet.Place("p_start")

# After Insurance Claim is filed (C)
p_after_C = PetriNet.Place("p_after_C")

# After Claim Registration (CR)
p_after_CR = PetriNet.Place("p_after_CR")

# After Document Verification (DV)
p_after_DV = PetriNet.Place("p_after_DV")

# Ready for Fraud Check (FC)
p_ready_for_FC = PetriNet.Place("p_ready_for_FC")

# After Fraud Check (FC)
p_after_FC = PetriNet.Place("p_after_FC")

# After In-depth Investigation (II)
p_after_II = PetriNet.Place("p_after_II")

# After Claim Assessment (CA)
p_after_CA = PetriNet.Place("p_after_CA")

# After Approval (AP) if needed
p_after_AP = PetriNet.Place("p_after_AP")

# After Payment (P)
p_after_P = PetriNet.Place("p_after_P")

# After Notification (N)
p_after_N = PetriNet.Place("p_after_N")

# After Closure (CL)
p_after_CL = PetriNet.Place("p_after_CL")

net.places.update({
    p_start, p_after_C, p_after_CR, p_after_DV, p_ready_for_FC,
    p_after_FC, p_after_II, p_after_CA, p_after_AP, p_after_P,
    p_after_N, p_after_CL
})

# -----------------------
# TRANSITIONS
# -----------------------
# C: Insurance Claim arrival
t_C = PetriNet.Transition("t_C", label="Insurance Claim (C)")

# CR: Claim Registration
t_CR = PetriNet.Transition("t_CR", label="Claim Registration (CR)")

# DV: Document Verification
t_DV = PetriNet.Transition("t_DV", label="Document Verification (DV)")

# RDS: Re-Document Submission (loop if DV fails)
t_RDS = PetriNet.Transition("t_RDS", label="Re-Document Submission (RDS)")

# Silent transition to pass DV
t_pass_DV = PetriNet.Transition("t_pass_DV", label=None)  # silent transition

# FC: Fraud Check
t_FC = PetriNet.Transition("t_FC", label="Fraud Check (FC)")

# II: In-depth Investigation (loop if FC suspicious)
t_II = PetriNet.Transition("t_II", label="In-depth Investigation (II)")

# CA: Claim Assessment
t_CA = PetriNet.Transition("t_CA", label="Claim Assessment (CA)")

# AP: Approval (if needed)
t_AP = PetriNet.Transition("t_AP", label="Approval (AP)")

# Silent transition to skip AP if not needed
t_skip_AP = PetriNet.Transition("t_skip_AP", label=None)

# P: Payment
t_P = PetriNet.Transition("t_P", label="Payment (P)")

# N: Notification
t_N = PetriNet.Transition("t_N", label="Notification (N)")

# CL: Closure
t_CL = PetriNet.Transition("t_CL", label="Closure (CL)")

net.transitions.update({
    t_C, t_CR, t_DV, t_RDS, t_pass_DV, t_FC, t_II,
    t_CA, t_AP, t_skip_AP, t_P, t_N, t_CL
})

# -----------------------
# ARCS
# -----------------------

# Start -> C -> p_after_C
petri_utils.add_arc_from_to(p_start, t_C, net)
petri_utils.add_arc_from_to(t_C, p_after_C, net)

# p_after_C -> CR -> p_after_CR
petri_utils.add_arc_from_to(p_after_C, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p_after_CR, net)

# p_after_CR -> DV -> p_after_DV
petri_utils.add_arc_from_to(p_after_CR, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p_after_DV, net)

# From p_after_DV we can either do RDS (if docs incomplete) or pass DV
# If RDS: p_after_DV -> RDS -> p_after_CR (loop back)
petri_utils.add_arc_from_to(p_after_DV, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_after_CR, net)

# If pass DV: p_after_DV -> pass_DV (silent) -> p_ready_for_FC
petri_utils.add_arc_from_to(p_after_DV, t_pass_DV, net)
petri_utils.add_arc_from_to(t_pass_DV, p_ready_for_FC, net)

# p_ready_for_FC -> FC -> p_after_FC
petri_utils.add_arc_from_to(p_ready_for_FC, t_FC, net)
petri_utils.add_arc_from_to(t_FC, p_after_FC, net)

# From p_after_FC: either we do CA (if FC passed) or II (if suspicious)
# If suspicious: p_after_FC -> II -> p_after_II -> back to p_ready_for_FC (for another FC)
petri_utils.add_arc_from_to(p_after_FC, t_II, net)
petri_utils.add_arc_from_to(t_II, p_after_II, net)
petri_utils.add_arc_from_to(p_after_II, p_ready_for_FC, net)

# If FC passed: p_after_FC -> CA -> p_after_CA
petri_utils.add_arc_from_to(p_after_FC, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p_after_CA, net)

# After CA: either AP if needed or skip_AP directly to Payment
petri_utils.add_arc_from_to(p_after_CA, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p_after_AP, net)

petri_utils.add_arc_from_to(p_after_CA, t_skip_AP, net)  # skip AP
petri_utils.add_arc_from_to(t_skip_AP, p_after_AP, net)  # go to p_after_AP regardless

# p_after_AP -> P -> p_after_P
petri_utils.add_arc_from_to(p_after_AP, t_P, net)
petri_utils.add_arc_from_to(t_P, p_after_P, net)

# p_after_P -> N -> p_after_N
petri_utils.add_arc_from_to(p_after_P, t_N, net)
petri_utils.add_arc_from_to(t_N, p_after_N, net)

# p_after_N -> CL -> p_after_CL (final)
petri_utils.add_arc_from_to(p_after_N, t_CL, net)
petri_utils.add_arc_from_to(t_CL, p_after_CL, net)

# -----------------------
# MARKINGS
# -----------------------
im = Marking()
im[p_start] = 1  # initial marking: token in p_start

fm = Marking()
fm[p_after_CL] = 1  # final marking: token in p_after_CL

# The net, im, and fm now represent the accepting Petri net for the given scenario.
```