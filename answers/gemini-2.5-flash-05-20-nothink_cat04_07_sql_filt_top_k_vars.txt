```sql
-- Define a CTE to simulate the event_log table for demonstration purposes
WITH event_log AS (
    SELECT 'case_1' AS case_id, 'start' AS activity, '2023-01-01 10:00:00'::TIMESTAMP AS timestamp UNION ALL
    SELECT 'case_1', 'activity_A', '2023-01-01 10:15:00'::TIMESTAMP UNION ALL
    SELECT 'case_1', 'activity_B', '2023-01-01 10:30:00'::TIMESTAMP UNION ALL
    SELECT 'case_1', 'end', '2023-01-01 10:45:00'::TIMESTAMP UNION ALL

    SELECT 'case_2', 'start', '2023-01-01 11:00:00'::TIMESTAMP UNION ALL
    SELECT 'case_2', 'activity_A', '2023-01-01 11:10:00'::TIMESTAMP UNION ALL
    SELECT 'case_2', 'activity_C', '2023-01-01 11:20:00'::TIMESTAMP UNION ALL
    SELECT 'case_2', 'end', '2023-01-01 11:30:00'::TIMESTAMP UNION ALL

    SELECT 'case_3', 'start', '2023-01-01 12:00:00'::TIMESTAMP UNION ALL
    SELECT 'case_3', 'activity_A', '2023-01-01 12:15:00'::TIMESTAMP UNION ALL
    SELECT 'case_3', 'activity_B', '2023-01-01 12:30:00'::TIMESTAMP UNION ALL
    SELECT 'case_3', 'end', '2023-01-01 12:45:00'::TIMESTAMP UNION ALL

    SELECT 'case_4', 'start', '2023-01-02 09:00:00'::TIMESTAMP UNION ALL
    SELECT 'case_4', 'activity_X', '2023-01-02 09:10:00'::TIMESTAMP UNION ALL
    SELECT 'case_4', 'end', '2023-01-02 09:20:00'::TIMESTAMP UNION ALL

    SELECT 'case_5', 'start', '2023-01-02 10:00:00'::TIMESTAMP UNION ALL
    SELECT 'case_5', 'activity_A', '2023-01-02 10:15:00'::TIMESTAMP UNION ALL
    SELECT 'case_5', 'activity_B', '2023-01-02 10:30:00'::TIMESTAMP UNION ALL
    SELECT 'case_5', 'end', '2023-01-02 10:45:00'::TIMESTAMP
),
-- 1. Determine the ordered sequence of activities for each case_id
CaseActivitySequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, '->' ORDER BY timestamp) AS process_variant_sequence
    FROM
        event_log
    GROUP BY
        case_id
),
-- 2. Group cases by their complete activity sequence to identify unique process variants
-- 3. Count how many cases correspond to each variant and determine the top K variants
--    (Here, K is hardcoded for demonstration. In a real scenario, it could be a parameter.)
VariantFrequencies AS (
    SELECT
        process_variant_sequence,
        COUNT(case_id) AS variant_count,
        ROW_NUMBER() OVER (ORDER BY COUNT(case_id) DESC) AS rank_by_frequency
    FROM
        CaseActivitySequences
    GROUP BY
        process_variant_sequence
),
-- Select the top K variants (e.g., top 2 variants)
TopKVariants AS (
    SELECT
        process_variant_sequence
    FROM
        VariantFrequencies
    WHERE
        rank_by_frequency <= 2 -- Set K here, e.g., 2 for top 2 variants
)
-- 4. Return all events from the original event log that belong only to cases which are part of these top K variants.
SELECT
    el.case_id,
    el.activity,
    el.timestamp
FROM
    event_log AS el
JOIN
    CaseActivitySequences AS cas
    ON el.case_id = cas.case_id
JOIN
    TopKVariants AS tkv
    ON cas.process_variant_sequence = tkv.process_variant_sequence
ORDER BY
    el.case_id, el.timestamp;
```