Below is one valid solution using Common Table Expressions (CTEs) and window functions. In this solution we first identify all cases that contain the consecutive sequence ('Approve Purchase Requisition', then 'Create Order', then 'Confirm Order') where the events follow consecutively in the ordering of events per case. Then we check that the time between the "Create Order" event and its following "Confirm Order" event is more than 5 days. Finally, we use that set of case_ids to exclude matching cases from the result. One such query is as follows:

---------------------------------------------------------------------------
WITH ordered_events AS (
  SELECT
    case_id,
    activity,
    timestamp,
    ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
  FROM event_log
),
-- join the table with itself two times to “peek ahead” for the next two events in each case
sequence_candidate AS (
  SELECT
    e1.case_id,
    e1.timestamp AS ts_approve,
    e2.timestamp AS ts_create_order,
    e3.timestamp AS ts_confirm_order
  FROM ordered_events e1
  JOIN ordered_events e2
    ON e1.case_id = e2.case_id
   AND e2.rn = e1.rn + 1
  JOIN ordered_events e3
    ON e1.case_id = e3.case_id
   AND e3.rn = e1.rn + 2
  WHERE e1.activity = 'Approve Purchase Requisition'
    AND e2.activity = 'Create Order'
    AND e3.activity = 'Confirm Order'
),
-- from those candidates, keep only situations where the time elapsed between Create Order and Confirm Order is more than 5 days
cases_to_exclude AS (
  SELECT DISTINCT case_id
  FROM sequence_candidate
  WHERE ts_confirm_order - ts_create_order > INTERVAL '5 days'
)
-- Finally, return all events from event_log that are NOT in those cases 
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, timestamp;
---------------------------------------------------------------------------

Explanation:

1. In the first CTE (ordered_events) we assign a row number to events per case based on the event timestamp. This helps when “looking ahead” to check if three events occur consecutively.

2. In sequence_candidate we self-join the CTE twice ensuring that event e1 is immediately followed by e2 and then e3. We then restrict the activities to be exactly 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' respectively.

3. In cases_to_exclude we filter out cases based on the timing condition where the gap from the 'Create Order' event (ts_create_order) to the 'Confirm Order' (ts_confirm_order) is above 5 days.

4. Finally the outer query returns all events whose case_id is not in the exclusion set.

This solution satisfies all requirements of the prompt.