Sure! To create a Partially Ordered Workflow Language (POWL) model for an hypothetical Purchase-to-Pay process using `pm4py`, we need to define activities, choices, and possibly loops based on the workflow of the process. Let's consider a simple scenario where:

1. A purchase request is initiated.
2. The purchase request is either approved or rejected.
3. If approved, a purchase order is created.
4. The supplier then sends an invoice.
5. Finally, the payment is processed.

We'll model this as follows:
- An activity for each of the steps mentioned above.
- A choice between approval and rejection after the purchase request.
- No loops are needed in this scenario.

Here's how you can implement it:

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
purchase_request = Transition(label="Purchase Request")
approve = Transition(label="Approve")
reject = Transition(label="Reject")
create_purchase_order = Transition(label="Create Purchase Order")
send_invoice = Transition(label="Send Invoice")
process_payment = Transition(label="Process Payment")

# Choice between approve or reject after the purchase request
choice_approve_reject = OperatorPOWL(operator=Operator.XOR, children=[approve, reject])

# Create partial order for the whole process
powl_model = StrictPartialOrder(nodes=[
    purchase_request,
    choice_approve_reject,
    create_purchase_order,
    send_invoice,
    process_payment
])
powl_model.order.add_edge(purchase_request, choice_approve_reject)
powl_model.order.add_edge(approve, create_purchase_order)  # Approval leads to creating a purchase order
powl_model.order.add_edge(create_purchase_order, send_invoice)  # Purchase order creation followed by sending an invoice
powl_model.order.add_edge(send_invoice, process_payment)  # Sending the invoice is followed by processing payment

# Output the POWL model for inspection (if needed)
print(powl_model)

# Optionally, you can visualize it using pm4py's visualization capabilities
from pm4py.visualization.powl import visualizer as powl_visualizer
gviz = powl_visualizer.apply(powl_model)
powl_visualizer.view(gviz)
```

### Explanation:
- **Transitions**: Each activity in the Purchase-to-Pay process is represented by a `Transition` object.
- **Choice Operator**: The `choice_approve_reject` node models the decision point between approving or rejecting the purchase request using an XOR operator (`Operator.XOR`).
- **Partial Order Model**: This model connects all these activities in the correct order, ensuring that:
  - The approval/rejection happens only after the purchase request is made.
  - A purchase order can only be created if the request was approved.
  - An invoice can be sent only once a purchase order has been created.
  - Payment processing follows receiving an invoice.

This model captures the basic flow of a Purchase-to-Pay process using POWL concepts in `pm4py`.