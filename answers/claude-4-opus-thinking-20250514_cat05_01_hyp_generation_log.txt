## Analysis of Event Log Anomalies

After examining the provided event log data, I've identified several concerning anomalies and undesirable behaviors:

### Key Anomalies Identified:

1. **Case 1002**: Goods were shipped BEFORE performing credit check and stock validation
   - This violates basic risk management principles
   - Could result in shipping to customers with poor credit

2. **Case 1003**: 
   - Stock validation was completely skipped
   - Shipment confirmation occurred AFTER goods were already shipped
   - Could lead to shipping items not in stock

3. **Case 1004**: 
   - Payment was received immediately after order registration (before any processing)
   - Invoice was issued AFTER payment was received
   - Both credit check and stock validation were skipped
   - Suggests possible manual intervention or system bypass

### Potential Root Causes:

1. **System Integration Issues**: Different systems may not be enforcing proper sequencing
2. **Manual Overrides**: Staff bypassing standard procedures for "urgent" orders
3. **Training Gaps**: Resources may not understand the importance of process compliance
4. **Performance Pressure**: Teams rushing to meet shipment targets
5. **Technical Glitches**: Timestamp errors or delayed event logging

### SQL Queries for Further Investigation:

```sql
-- 1. Identify all cases where critical validation steps were skipped
WITH expected_activities AS (
    SELECT DISTINCT case_id
    FROM order_event_log
    WHERE activity IN ('Perform Credit Check', 'Validate Stock')
)
SELECT 
    o.case_id,
    o.order_type,
    o.order_value,
    STRING_AGG(DISTINCT oel.activity, ', ' ORDER BY oel.activity) as activities_performed
FROM orders o
LEFT JOIN order_event_log oel ON o.case_id = oel.case_id
LEFT JOIN expected_activities ea ON o.case_id = ea.case_id
WHERE ea.case_id IS NULL
GROUP BY o.case_id, o.order_type, o.order_value;

-- 2. Find cases where activities occurred out of expected sequence
WITH activity_sequence AS (
    SELECT 
        case_id,
        activity,
        timestamp,
        LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp) as prev_activity,
        LEAD(activity) OVER (PARTITION BY case_id ORDER BY timestamp) as next_activity
    FROM order_event_log
)
SELECT *
FROM activity_sequence
WHERE 
    (activity = 'Ship Goods' AND prev_activity NOT IN ('Confirm Shipment', 'Validate Stock'))
    OR (activity = 'Receive Payment' AND prev_activity != 'Issue Invoice')
    OR (activity = 'Confirm Shipment' AND next_activity != 'Ship Goods');

-- 3. Analyze which resources/departments are involved in anomalous cases
SELECT 
    r.resource_id,
    r.role,
    r.department,
    COUNT(DISTINCT oel.case_id) as cases_handled,
    COUNT(DISTINCT CASE 
        WHEN oel.case_id IN (1002, 1003, 1004) THEN oel.case_id 
    END) as anomalous_cases
FROM order_event_log oel
JOIN resources r ON oel.resource = r.resource_id
GROUP BY r.resource_id, r.role, r.department
HAVING COUNT(DISTINCT CASE WHEN oel.case_id IN (1002, 1003, 1004) THEN oel.case_id END) > 0
ORDER BY anomalous_cases DESC;

-- 4. Check for unusually fast process completion times
WITH case_duration AS (
    SELECT 
        case_id,
        MIN(timestamp) as start_time,
        MAX(timestamp) as end_time,
        EXTRACT(EPOCH FROM (MAX(timestamp) - MIN(timestamp)))/3600 as duration_hours
    FROM order_event_log
    GROUP BY case_id
)
SELECT 
    cd.*,
    o.order_type,
    o.order_value,
    COUNT(oel.activity) as total_activities
FROM case_duration cd
JOIN orders o ON cd.case_id = o.case_id
JOIN order_event_log oel ON cd.case_id = oel.case_id
WHERE cd.duration_hours < 1  -- Completed in less than 1 hour
GROUP BY cd.case_id, cd.start_time, cd.end_time, cd.duration_hours, o.order_type, o.order_value;

-- 5. Identify payment timing anomalies
WITH payment_timing AS (
    SELECT 
        p.case_id,
        p.timestamp as payment_time,
        i.timestamp as invoice_time,
        CASE 
            WHEN p.timestamp < i.timestamp THEN 'Payment Before Invoice'
            ELSE 'Normal'
        END as payment_anomaly
    FROM order_event_log p
    JOIN order_event_log i ON p.case_id = i.case_id
    WHERE p.activity = 'Receive Payment' 
    AND i.activity = 'Issue Invoice'
)
SELECT * FROM payment_timing WHERE payment_anomaly = 'Payment Before Invoice';

-- 6. Analyze patterns by order type and value
SELECT 
    o.order_type,
    CASE 
        WHEN o.order_value < 1000 THEN 'Low'
        WHEN o.order_value < 2000 THEN 'Medium'
        ELSE 'High'
    END as value_category,
    COUNT(DISTINCT o.case_id) as total_orders,
    COUNT(DISTINCT CASE 
        WHEN NOT EXISTS (
            SELECT 1 FROM order_event_log oel 
            WHERE oel.case_id = o.case_id 
            AND oel.activity = 'Perform Credit Check'
        ) THEN o.case_id 
    END) as orders_without_credit_check
FROM orders o
GROUP BY o.order_type, value_category;

-- 7. Check for concurrent activity violations (same resource working on multiple activities simultaneously)
SELECT 
    a.resource,
    a.case_id as case_1,
    a.activity as activity_1,
    a.timestamp as time_1,
    b.case_id as case_2,
    b.activity as activity_2,
    b.timestamp as time_2
FROM order_event_log a
JOIN order_event_log b ON a.resource = b.resource
WHERE a.case_id != b.case_id
AND a.timestamp = b.timestamp
AND a.event_id < b.event_id;
```

These queries will help uncover patterns in the anomalies and guide corrective actions such as system improvements, training programs, or policy enforcement.