To solve this problem, we need to follow a structured approach. This involves identifying the sequence of activities and the timing condition, and then filtering out the cases that meet these conditions. Here is a step-by-step SQL query to achieve this:

1. Identify cases with the sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order'.
2. Ensure that the time between 'Create Order' and 'Confirm Order' is more than 5 days.
3. Exclude these cases from the final result.

Below is the complete query:

```sql
WITH sequences AS (
    -- Find cases with the sequence of activities
    SELECT 
        case_id,
        activity,
        timestamp,
        LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
        LAG(timestamp) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_timestamp
    FROM 
        event_log
),
filtered_sequences AS (
    -- Filter cases with the sequence and timing condition
    SELECT 
        case_id
    FROM 
        sequences
    WHERE 
        activity = 'Approve Purchase Requisition' 
        AND prev_activity = 'Create Order'
        AND prev_timestamp < timestamp
        AND prev_timestamp IS NOT NULL
    QUALIFY
        RANK() OVER (PARTITION BY case_id ORDER BY prev_timestamp) = 1
),
excluded_cases AS (
    -- Identify the cases that need to be excluded
    SELECT 
        case_id
    FROM 
        filtered_sequences
    WHERE 
        TIMESTAMPDIFF(DAY, prev_timestamp, timestamp) > 5
),
final_result AS (
    -- Exclude the events from the cases that match the sequence and timing condition
    SELECT 
        *
    FROM 
        event_log
    WHERE 
        case_id NOT IN (SELECT case_id FROM excluded_cases)
)
SELECT 
    *
FROM 
    final_result;
```

### Explanation:

1. **sequences CTE**: This Common Table Expression (CTE) uses the `LAG` window function to get the previous activity and timestamp for each row, partitioned by `case_id` and ordered by `timestamp`.

2. **filtered_sequences CTE**: This CTE filters out the cases that contain the sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order' and ensures that the time between 'Create Order' and 'Confirm Order' is more than 5 days. The `QUALIFY` clause ensures that the sequence is correctly identified.

3. **excluded_cases CTE**: This CTE identifies the cases that should be excluded based on the timing condition.

4. **final_result CTE**: This CTE selects all events from `event_log` except those that belong to the cases identified in the `excluded_cases` CTE.

5. **Final SELECT**: This returns the final result set containing all events from `event_log` except those that match the specified sequence and timing condition.

This query ensures that only the events from cases that do not contain the specified sequence and timing condition are returned.