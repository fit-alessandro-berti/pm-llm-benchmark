To solve this problem, we need to follow several steps in our SQL query:

1. **Identify the Sequence and Timing Condition**: First, we need to identify all rows that are part of the sequence 'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order' with the specific timing condition (more than 5 days between 'Create Order' and 'Confirm Order').

2. **Exclude Cases Meeting the Criteria**: After identifying the cases that meet the sequence and timing conditions, we exclude all events from these cases from our final result.

3. **Return Remaining Events**: Finally, we return all events from the `event_log` table except those belonging to cases that were identified in step 1.

The following DuckDB SQL query achieves the desired outcome:

```sql
WITH 
-- Step 1: Identify the sequence and calculate the time difference
sequence_events AS (
    SELECT 
        el1.case_id,
        el1.timestamp AS approve_timestamp,
        el2.timestamp AS create_timestamp,
        el3.timestamp AS confirm_timestamp,
        (el3.timestamp - el2.timestamp) AS time_diff
    FROM 
        event_log el1
    JOIN 
        event_log el2 ON el1.case_id = el2.case_id AND el1.timestamp < el2.timestamp
    JOIN 
        event_log el3 ON el2.case_id = el3.case_id AND el2.timestamp < el3.timestamp
    WHERE 
        el1.activity = 'Approve Purchase Requisition'
        AND el2.activity = 'Create Order'
        AND el3.activity = 'Confirm Order'
        AND NOT EXISTS (
            SELECT 1
            FROM event_log el4
            WHERE el4.case_id = el1.case_id
            AND el4.timestamp > el1.timestamp AND el4.timestamp < el2.timestamp
        )
        AND NOT EXISTS (
            SELECT 1
            FROM event_log el5
            WHERE el5.case_id = el2.case_id
            AND el5.timestamp > el2.timestamp AND el5.timestamp < el3.timestamp
        )
),
-- Step 2: Filter cases based on the time difference
filtered_cases AS (
    SELECT 
        DISTINCT case_id
    FROM 
        sequence_events
    WHERE 
        time_diff > INTERVAL '5 days'
)
-- Step 3: Return events not belonging to filtered cases
SELECT 
    *
FROM 
    event_log
WHERE 
    case_id NOT IN (SELECT case_id FROM filtered_cases);
```

This query first identifies the cases with the specified sequence and calculates the time difference between 'Create Order' and 'Confirm Order'. It then filters out cases where this time difference is more than 5 days. Finally, it selects all events from the `event_log` table except those belonging to the filtered cases.

Please note, the use of `NOT EXISTS` in the first CTE (`sequence_events`) ensures that there are no other activities between 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' for the same case. This is crucial for maintaining the sequence requirement.