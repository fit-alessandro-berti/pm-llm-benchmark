
1.  What in the POWL model looks “wrong”?


A.  Endless Evaluate/Approve loop  
   • The LOOP(E,P) says  
     1. run E (Evaluate),  
     2. either leave the loop *or* run P (Approve) and go back to E again.  
   • Consequences  
     – A claim may be evaluated many times.  
     – A claim may be approved many times.  
     – The loop can also finish right after E, i.e., “evaluated but never approved”.

B.  XOR {Notify, -skip}  
   • Notification (N) can be replaced by a silent step, so the customer may never be told the result.  
   • Because the XOR itself is not ordered with respect to C, even if N is chosen it may still happen after closing.

C.  Missing edges around Close (C)  
   • There is an edge A  C but *no* edge  
     – loop  C, nor  
     – xor  C.  
   • Therefore C can occur  
     – immediately after A (no evaluation, approval or notification), or  
     – in parallel with them.

D.  Other minor ordering gaps  
   • Nothing forbids P before N, or even before a *first* E in a later loop iteration.  
   • Nothing stops duplicate R steps if the log should contain them (R is not forced to be unique).


2.  Plausible reasons the model ended up like this


H1  Fast-track / low-value claims  
    – For very small amounts the company may allow “evaluate & close” without approval or notification.

H2  Iterative reviews of complex claims  
    – Some large cases require several appraisal / approval cycles; the modeller encoded this as a loop.

H3  Partially implemented rule changes  
    – A rule “customer must always be notified” was introduced, but the XOR was never removed.

H4  Parallel system activities  
    – Closing the claim in the core system and finishing paperwork in a satellite system happen concurrently; the modeller tried to reflect this by leaving C unconstrained.

H5  Modelling or tool mistake  
    – Designer simply forgot to add the missing precedence edges or to make N mandatory.


3.  How to test the hypotheses with SQL


Below, : marks places where you can vary the filter to focus on a specific anomaly.

A.  Claims that were CLOSED without ever being EVALUATED or APPROVED  
```sql
SELECT claim_id
FROM   claim_events
GROUP  BY claim_id
HAVING SUM( CASE WHEN activity = 'C'            THEN 1 ELSE 0 END ) > 0   -- has C
   AND SUM( CASE WHEN activity IN ('E','P')     THEN 1 ELSE 0 END ) = 0;  -- lacks E & P
```

B.  Claims where CLOSE happened *before* the first E or P  
```sql
WITH t AS (
  SELECT claim_id,
         MIN( CASE WHEN activity='C'                 THEN timestamp END) AS t_close,
         MIN( CASE WHEN activity IN('E','P')         THEN timestamp END) AS t_eval_or_appr
  FROM   claim_events
  GROUP  BY claim_id)
SELECT claim_id
FROM   t
WHERE  t_close < t_eval_or_appr;         -- premature close
```

C.  Multiple approvals (loop symptom)  
```sql
SELECT claim_id, COUNT(*) AS approval_cnt
FROM   claim_events
WHERE  activity = 'P'
GROUP  BY claim_id
HAVING COUNT(*) > 1;                     -- more than one P
```

D.  Evaluate  Evaluate directly (loop without an intervening P)  
```sql
WITH ordered AS (
  SELECT claim_id,
         activity,
         timestamp,
         ROW_NUMBER() OVER (PARTITION BY claim_id ORDER BY timestamp) AS rn
  FROM   claim_events
  WHERE  activity IN ('E','P'))
SELECT  cur.claim_id
FROM    ordered cur
JOIN    ordered prev
       ON prev.claim_id = cur.claim_id AND prev.rn = cur.rn - 1
WHERE   prev.activity = 'E' AND cur.activity = 'E';     -- consecutive E’s
```

E.  Claims closed without customer notification  
```sql
SELECT claim_id
FROM   claim_events
GROUP  BY claim_id
HAVING SUM( CASE WHEN activity='C' THEN 1 END ) > 0      -- closed
   AND SUM( CASE WHEN activity='N' THEN 1 END ) = 0;     -- no notify
```

F.  Close and Assign almost at the same time (seconds apart) – indicates “A  C” shortcut  
```sql
SELECT c1.claim_id, c1.timestamp AS t_assign, c2.timestamp AS t_close
FROM   claim_events c1
JOIN   claim_events c2 ON c2.claim_id = c1.claim_id
WHERE  c1.activity = 'A'
  AND  c2.activity = 'C'
  AND  c2.timestamp - c1.timestamp <= INTERVAL '5 minutes';
```

G.  Correlating with master data (example) – Fast-track by amount?  
```sql
SELECT cl.claim_id, cl.claim_amount
FROM   claims        cl
JOIN   ( /* query A or B */ ) bad ON bad.claim_id = cl.claim_id
WHERE  cl.claim_amount < 500;      -- are most anomalies on low amounts?
```

H.  Are specific adjusters involved?  
```sql
SELECT ev.resource, COUNT(*) AS premature_closes
FROM   claim_events ev
JOIN   ( /* query B */ ) prem  ON prem.claim_id = ev.claim_id
WHERE  ev.activity = 'C'
GROUP  BY ev.resource
ORDER  BY premature_closes DESC;
```


Using the results

• If fast-track claims dominate the “no-approval” population and their amounts are tiny (query G), H1 is plausible.  
• If only a handful of adjusters show up in premature closes (query H), H4 (parallel systems / local practice) may be the cause.  
• If the anomalies appear evenly everywhere, H5 (modelling error) is more likely.  
• Re-running the same checks after a process-model change will confirm whether the fix was effective.

These queries give concrete, data-driven evidence about whether the strange paths allowed by the POWL model are actually taken in day-to-day operations.