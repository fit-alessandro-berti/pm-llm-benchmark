To accomplish the task, we need to follow a few steps in our DuckDB SQL query:

1. Identify cases that contain the sequence 'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order' in direct succession.
2. Filter out these cases if the time between 'Create Order' and 'Confirm Order' is more than 5 days.
3. Exclude events from cases that match both conditions.
4. Return all events from the `event_log` that do not belong to the filtered cases.

Here's the SQL query that achieves this:

```sql
WITH valid_cases AS (
    SELECT
        case_id
    FROM (
        SELECT
            case_id,
            activity,
            timestamp,
            LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
            LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev2_activity
        FROM
            event_log
    ) AS with_lag
    WHERE
        prev_activity = 'Approve Purchase Requisition' AND
        activity = 'Create Order' AND
        prev2_activity = 'Approve Purchase Requisition'
),
filtered_cases AS (
    SELECT
        valid_cases.case_id
    FROM
        valid_cases
    JOIN
        event_log AS e1 ON valid_cases.case_id = e1.case_id
    JOIN
        event_log AS e2 ON valid_cases.case_id = e2.case_id
    WHERE
        e1.activity = 'Create Order' AND
        e2.activity = 'Confirm Order' AND
        e1.timestamp < e2.timestamp - INTERVAL '5 days'
)
SELECT
    *
FROM
    event_log
WHERE
    case_id NOT IN (SELECT case_id FROM filtered_cases);
```

### Explanation:

1. **valid_cases CTE**: This common table expression (CTE) identifies cases where the activities 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' appear in direct succession.
   - We use the `LAG` window function to check the previous and second previous activities for each row within a case.

2. **filtered_cases CTE**: This CTE filters out cases where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.
   - We join the `event_log` table with itself to find the 'Create Order' and 'Confirm Order' activities within the same case and ensure the time difference is more than 5 days.

3. **Final SELECT**: This query returns all events from the `event_log` that are not part of the filtered cases.
   - We use a `NOT IN` clause to exclude events from the filtered cases.

This query ensures that only events from cases that do not meet the specified sequence and timing conditions are returned.