Here is one way to model the insuranceclaim process as an accepting Petri net in PM4Py.  We create explicit loops for “redocument submission” after Document Verification and for “indepth investigation” after Fraud Check by replicating the DV and FC transitions (both copies carry the same visible label).

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# 1. Create the net
net = PetriNet(name="Insurance Claim Process")

# 2. Create places
p_start = PetriNet.Place(name="start")       # new claim arrives
p_cr    = PetriNet.Place(name="cr_done")     # after Claim Registration
p_dv    = PetriNet.Place(name="dv_done")     # after Document Verification
p_rds   = PetriNet.Place(name="rds_done")    # after ReDocument Submission
p_fc    = PetriNet.Place(name="fc_done")     # after Fraud Check
p_ii    = PetriNet.Place(name="ii_done")     # after Indepth Investigation
p_ca    = PetriNet.Place(name="ca_done")     # after Claim Assessment
p_ap    = PetriNet.Place(name="ap_done")     # after Approval
p_p     = PetriNet.Place(name="p_done")      # after Payment
p_n     = PetriNet.Place(name="n_done")      # after Notification
p_cl    = PetriNet.Place(name="cl_done")     # after Closure

for p in [p_start, p_cr, p_dv, p_rds, p_fc, p_ii, p_ca, p_ap, p_p, p_n, p_cl]:
    net.places.add(p)

# 3. Create transitions
t_cr   = PetriNet.Transition(name="t_cr",   label="Claim Registration")
t_dv1  = PetriNet.Transition(name="t_dv1",  label="Document Verification")
t_dv2  = PetriNet.Transition(name="t_dv2",  label="Document Verification")
t_rds  = PetriNet.Transition(name="t_rds",  label="Re-Document Submission")
t_fc1  = PetriNet.Transition(name="t_fc1",  label="Fraud Check")
t_ii   = PetriNet.Transition(name="t_ii",   label="In-depth Investigation")
t_fc2  = PetriNet.Transition(name="t_fc2",  label="Fraud Check")
t_ca   = PetriNet.Transition(name="t_ca",   label="Claim Assessment")
t_ap   = PetriNet.Transition(name="t_ap",   label="Approval")
t_pay  = PetriNet.Transition(name="t_pay",  label="Payment")
t_not  = PetriNet.Transition(name="t_not",  label="Notification")
t_cl   = PetriNet.Transition(name="t_cl",   label="Closure")

for t in [t_cr, t_dv1, t_dv2, t_rds, t_fc1, t_ii, t_fc2, t_ca, t_ap, t_pay, t_not, t_cl]:
    net.transitions.add(t)

# 4. Add arcs
# start  CR  cr_done
petri_utils.add_arc_from_to(p_start, t_cr,  net)
petri_utils.add_arc_from_to(t_cr,    p_cr,   net)

# cr_done  DV (initial)  dv_done
petri_utils.add_arc_from_to(p_cr,   t_dv1,  net)
petri_utils.add_arc_from_to(t_dv1,  p_dv,   net)

# dv_done  RDS  rds_done  DV (resubmission)  dv_done
petri_utils.add_arc_from_to(p_dv,   t_rds,  net)
petri_utils.add_arc_from_to(t_rds,  p_rds,  net)
petri_utils.add_arc_from_to(p_rds,  t_dv2,  net)
petri_utils.add_arc_from_to(t_dv2,  p_dv,   net)

# dv_done  FC (initial)  fc_done
petri_utils.add_arc_from_to(p_dv,   t_fc1,  net)
petri_utils.add_arc_from_to(t_fc1,  p_fc,   net)

# fc_done  II  ii_done  FC (recheck)  fc_done
petri_utils.add_arc_from_to(p_fc,   t_ii,   net)
petri_utils.add_arc_from_to(t_ii,   p_ii,   net)
petri_utils.add_arc_from_to(p_ii,   t_fc2,  net)
petri_utils.add_arc_from_to(t_fc2,  p_fc,   net)

# fc_done  CA  ca_done  AP  ap_done  P  p_done  N  n_done  CL  cl_done
petri_utils.add_arc_from_to(p_fc,   t_ca,   net)
petri_utils.add_arc_from_to(t_ca,   p_ca,   net)
petri_utils.add_arc_from_to(p_ca,   t_ap,   net)
petri_utils.add_arc_from_to(t_ap,   p_ap,   net)
petri_utils.add_arc_from_to(p_ap,   t_pay,  net)
petri_utils.add_arc_from_to(t_pay,  p_p,    net)
petri_utils.add_arc_from_to(p_p,    t_not,  net)
petri_utils.add_arc_from_to(t_not,  p_n,    net)
petri_utils.add_arc_from_to(p_n,    t_cl,   net)
petri_utils.add_arc_from_to(t_cl,   p_cl,   net)

# 5. Define initial and final markings
im = Marking()
im[p_start] = 1   # one token in the start place

fm = Marking()
fm[p_cl] = 1      # one token in the closure place

# net, im, fm now form an accepting Petri net
```

Explanation of the loop structures:

- After `Document Verification` (DV) fires and puts a token in `p_dv`, two things can happen:
  - If documents are complete, the token goes on to Fraud Check (`t_fc1`).
  - If documents are incomplete, `t_rds` fires, returns to `p_rds`, and then the reverification transition `t_dv2` (also labeled “Document Verification”) fires, putting the token back into `p_dv`.

- After `Fraud Check` fires and puts a token in `p_fc`, two things can happen:
  - If no doubt, the token goes on to Claim Assessment (`t_ca`).
  - If further investigation is needed, `t_ii` fires, moves to `p_ii`, and then `t_fc2` (another “Fraud Check” transition) fires, returning the token to `p_fc`.

The process then continues linearly through Claim Assessment, Approval, Payment, Notification, and finally Closure. The initial marking puts one token in `start`, and the final marking requires one token in `cl_done`.