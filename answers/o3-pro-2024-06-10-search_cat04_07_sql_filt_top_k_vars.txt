Here is a single, self-contained DuckDB SQL script that performs every requested step.  
Replace :K with the desired number of variants you want to keep (e.g. set :K = 5).

```sql
-- 1.  Build the per-case activity sequence in timestamp order
WITH variant_per_case AS (
    SELECT
        case_id,
        /* Build a canonical ordered string such as  "A->B->C"                 */
        string_agg(activity, '->' ORDER BY timestamp, activity) AS variant_seq
    FROM event_log
    GROUP BY case_id
),

-- 2.  Count cases per complete sequence (= process variant)
variant_freq AS (
    SELECT
        variant_seq,
        COUNT(*) AS case_cnt
    FROM variant_per_case
    GROUP BY variant_seq
    ORDER BY case_cnt DESC,            -- most frequent first
             variant_seq               -- tie-breaker for deterministic order
    LIMIT :K                           -- 3. keep only the Top-K variants
),

-- 3.  Keep the case_ids that belong to those Top-K variants
top_cases AS (
    SELECT vp.case_id
    FROM variant_per_case  vp
    JOIN variant_freq      vf  ON vp.variant_seq = vf.variant_seq
)

-- 4.  Return every original event that belongs to the kept cases
SELECT  e.*
FROM    event_log  e
JOIN    top_cases  tc USING (case_id)
ORDER BY e.case_id,
         e.timestamp,
         e.activity;     -- deterministic within identical timestamps
```

What each CTE does  
• variant_per_case   – assembles the complete ordered activity string for every case.  
• variant_freq       – groups those strings to obtain one row per unique variant and counts how many cases follow it, then keeps only the :K most frequent variants.  
• top_cases          – lists all case_id values whose variant is among those Top-K.  
• final SELECT       – returns the original (unaggregated) event rows, but only for the retained cases, preserving their natural timestamp order.