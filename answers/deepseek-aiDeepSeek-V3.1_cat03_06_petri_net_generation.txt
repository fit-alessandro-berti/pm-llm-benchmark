I'll construct an accepting Petri net for the insurance claim management process. The net will handle the main flow as well as the loops for document re-submission and investigation.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance_Claim_Process")

# Create places
start = PetriNet.Place(name="start")
after_cr = PetriNet.Place(name="after_cr")
before_dv = PetriNet.Place(name="before_dv")
after_dv = PetriNet.Place(name="after_dv")
docs_ok = PetriNet.Place(name="docs_ok")
docs_incomplete = PetriNet.Place(name="docs_incomplete")
before_fc = PetriNet.Place(name="before_fc")
after_fc = PetriNet.Place(name="after_fc")
fc_ok = PetriNet.Place(name="fc_ok")
fc_doubt = PetriNet.Place(name="fc_doubt")
before_ca = PetriNet.Place(name="before_ca")
after_ca = PetriNet.Place(name="after_ca")
before_ap = PetriNet.Place(name="before_ap")
after_ap = PetriNet.Place(name="after_ap")
before_p = PetriNet.Place(name="before_p")
after_p = PetriNet.Place(name="after_p")
before_n = PetriNet.Place(name="before_n")
after_n = PetriNet.Place(name="after_n")
end = PetriNet.Place(name="end")

# Add places to the net
net.places.add(start)
net.places.add(after_cr)
net.places.add(before_dv)
net.places.add(after_dv)
net.places.add(docs_ok)
net.places.add(docs_incomplete)
net.places.add(before_fc)
net.places.add(after_fc)
net.places.add(fc_ok)
net.places.add(fc_doubt)
net.places.add(before_ca)
net.places.add(after_ca)
net.places.add(before_ap)
net.places.add(after_ap)
net.places.add(before_p)
net.places.add(after_p)
net.plates.add(before_n)
net.places.add(after_n)
net.places.add(end)

# Create transitions with labels
c = PetriNet.Transition(name="C", label="Insurance_Claim")
cr = PetriNet.Transition(name="CR", label="Claim_Registration")
dv = PetriNet.Transition(name="DV", label="Document_Verification")
rds = PetriNet.Transition(name="RDS", label="Re_Document_Submission")
fc = PetriNet.Transition(name="FC", label="Fraud_Check")
ii = PetriNet.Transition(name="II", label="In_depth_Investigation")
ca = PetriNet.Transition(name="CA", label="Claim_Assessment")
ap = PetriNet.Transition(name="AP", label="Approval")
p = PetriNet.Transition(name="P", label="Payment")
n = PetriNet.Transition(name="N", label="Notification")
cl = PetriNet.Transition(name="CL", label="Closure")

# Add transitions to the net
net.transitions.add(c)
net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(rds)
net.transitions.add(fc)
net.transitions.add(ii)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl)

# Add arcs to connect the main flow
petri_utils.add_arc_from_to(start, c, net)
petri_utils.add_arc_from_to(c, after_cr, net)
petri_utils.add_arc_from_to(after_cr, cr, net)
petri_utils.add_arc_from_to(cr, before_dv, net)
petri_utils.add_arc_from_to(before_dv, dv, net)
petri_utils.add_arc_from_to(dv, after_dv, net)

# Add arcs for document verification outcome
petri_utils.add_arc_from_to(after_dv, docs_ok, net)
petri_utils.add_arc_from_to(after_dv, docs_incomplete, net)
petri_utils.add_arc_from_to(docs_ok, before_fc, net)
petri_utils.add_arc_from_to(docs_incomplete, rds, net)
petri_utils.add_arc_from_to(rds, before_dv, net)  # Loop back for re-submission

# Add arcs for fraud check
petri_utils.add_arc_from_to(before_fc, fc, net)
petri_utils.add_arc_from_to(fc, after_fc, net)
petri_utils.add_arc_from_to(after_fc, fc_ok, net)
petri_utils.add_arc_from_to(after_fc, fc_doubt, net)
petri_utils.add_arc_from_to(fc_ok, before_ca, net)
petri_utils.add_arc_from_to(fc_doubt, ii, net)
petri_utils.add_arc_from_to(ii, before_fc, net)  # Loop back for investigation

# Add arcs for claim assessment and approval
petri_utils.add_arc_from_to(before_ca, ca, net)
petri_utils.add_arc_from_to(ca, after_ca, net)
petri_utils.add_arc_from_to(after_ca, before_ap, net)
petri_utils.add_arc_from_to(before_ap, ap, net)
petri_utils.add_arc_from_to(ap, after_ap, net)
petri_utils.add_arc_from_to(after_ap, before_p, net)

# Add arcs for payment, notification and closure
petri_utils.add_arc_from_to(before_p, p, net)
petri_utils.add_arc_from_to(p, after_p, net)
petri_utils.add_arc_from_to(after_p, before_n, net)
petri_utils.add_arc_from_to(before_n, n, net)
petri_utils.add_arc_from_to(n, after_n, net)
petri_utils.add_arc_from_to(after_n, cl, net)
petri_utils.add_arc_from_to(cl, end, net)

# Define initial marking (start of the process)
im = Marking()
im[start] = 1  # Token in the start place representing a new claim

# Define final marking (completion of the process)
fm = Marking()
fm[end] = 1  # Token in the end place representing a closed claim
```

This Petri net models the complete insurance claim process with:

1. **Main process flow**: C  CR  DV  FC  CA  AP  P  N  CL
2. **Document Verification loop**: If documents are incomplete (DV  RDS), the process loops back to before DV
3. **Fraud Check loop**: If doubts arise (FC  II), the process loops back to before FC for additional investigation
4. **Proper gateways**: Places like docs_ok/docs_incomplete and fc_ok/fc_doubt serve as decision points
5. **Initial marking**: Token in "start" place representing a new claim arrival
6. **Final marking**: Token in "end" place representing claim closure

The net handles all the specified activities and their relationships, including the potential loops for document re-submission and in-depth investigation.