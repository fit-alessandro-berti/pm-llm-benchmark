<think>
Okay, let's see. I need to write a DuckDB SQL query that filters out cases with more than six events and returns the events from the remaining cases. Hmm.

First, the problem says each row is an event, grouped by case_id. So the goal is to find all case_ids that have a count of events 6, then get all their events.

So the steps would be: calculate the count of events per case_id, filter those case_ids where count >6 are excluded, then join back to the original table to get the events.

Wait, right. So maybe use a subquery to first get the case_ids that meet the condition, then select all events from the event_log where case_id is in that subquery.

How to structure that. Let's think about the subquery. Using GROUP BY case_id and HAVING COUNT(*) <=6. Then, the main query selects * from event_log where case_id IN (that subquery).

Yes, that makes sense. So the subquery would generate a list of case_ids with 6 or fewer events. Then the main query filters the events to only those case_ids.

Wait, but in DuckDB, can I use a subquery in the IN clause like that? I think yes. So the structure would be:

SELECT * FROM event_log
WHERE case_id IN (
    SELECT case_id FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
);

That seems right. Let me check. The subquery groups by case_id, counts the number of rows (events) per case, and selects case_id where the count is 6. Then the outer query selects all events where the case_id is in that list.

Yes, that should work. But wait, what if a case_id has exactly 6 events? Then it's included. If it has 7, excluded. That's what the problem requires.

Another way could be using a JOIN with the aggregated table. Like:

SELECT e1.*
FROM event_log e1
JOIN (
    SELECT case_id FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <=6
) e2 ON e1.case_id = e2.case_id;

Either approach should work. The IN clause might be simpler here.

But I should make sure that the subquery is correctly structured. Also, in DuckDB, the subquery in the IN clause should return a single column (case_id), which it does.

Testing with sample data. Suppose case A has 5 events, case B has 7. The subquery would return case A. Then the outer query selects all events from case A.

Yes. So the query should work.

I think that's the solution. So the final SQL query is as written above with the IN clause and the subquery.
</think>

```python
query = """
SELECT * FROM event_log
WHERE case_id IN (
    SELECT case_id FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
);
"""
```