Step 1 – Produce a concrete trace that the tree allows  
Receive_Order    Check_Inventory    Cancel_Order    Close_Order    Ship_Order  

The tree root is a sequence:  
Receive_Order  
 Check_Inventory  
 xor(success sequence | cancel sequence)  
 Close_Order  

Inside the right branch of the XOR we only have Cancel_Order  Close_Order.  
Inside the left branch the “successful” cases are declared as  

{Authorize_Payment  Package_Items  Ship_Order}  (all in parallel).  

The tree, however, does **not** say that the right branch (cancel) excludes the activities of the left branch.  
Because Ship_Order belongs to the left branch which is marked parallel, it may still occur **after** the `Close_Order` event required at the end of the whole sequence.  
Therefore the trace above is accepted.

Step 2 – Why it is nonsense in the order-to-cash world  
- After an order has been cancelled and closed the items are not even supposed to exist as an open shipment any more.  
- Having a `Ship_Order` logged **after** the `Close_Order` event would mean the merchandise left the warehouse although finance already terminated the document, the customer no longer expects the goods, and the inventory balance would be wrong.  

Hence, while the underfitted tree regards the trace as valid, in the real process it is an impossible / forbidden sequence.