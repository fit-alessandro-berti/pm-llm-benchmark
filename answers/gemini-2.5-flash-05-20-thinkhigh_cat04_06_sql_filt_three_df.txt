To address this problem, we need to perform the following steps:

1.  **Identify the specific sequence**: For each `case_id`, we'll order events by `timestamp` and use window functions (`LAG`) to look at preceding activities. We'll identify events that are 'Confirm Order' and are immediately preceded by 'Create Order', which in turn is immediately preceded by 'Approve Purchase Requisition'.
2.  **Calculate the time difference**: For the identified sequences, we'll calculate the time difference between the 'Create Order' event and the 'Confirm Order' event using their respective timestamps.
3.  **Filter based on time difference**: We'll select only those sequences where this time difference is greater than 5 days.
4.  **Identify `case_id`s to exclude**: From the sequences meeting both criteria, we'll extract the unique `case_id`s.
5.  **Final exclusion**: We will then select all events from the original `event_log` table, excluding any event whose `case_id` is in the list identified in step 4.

Here's the DuckDB SQL query:

```sql
SELECT
    el.case_id,
    el.activity,
    el.timestamp
FROM
    event_log AS el
WHERE
    el.case_id NOT IN (
        -- Step 4: Identify case_ids to exclude
        SELECT DISTINCT sequenced_events.case_id
        FROM (
            -- Step 1 & 2: Identify the sequence and calculate time difference
            SELECT
                t.case_id,
                t.activity,
                t.timestamp,
                -- Get the activity of the event immediately before the current one
                LAG(t.activity, 1) OVER (PARTITION BY t.case_id ORDER BY t.timestamp) AS prev_activity_1,
                -- Get the activity of the event two steps before the current one
                LAG(t.activity, 2) OVER (PARTITION BY t.case_id ORDER BY t.timestamp) AS prev_activity_2,
                -- Get the timestamp of the event immediately before the current one ('Create Order' timestamp)
                LAG(t.timestamp, 1) OVER (PARTITION BY t.case_id ORDER BY t.timestamp) AS prev_timestamp_1
            FROM
                event_log AS t
        ) AS sequenced_events
        WHERE
            -- Current event is 'Confirm Order'
            sequenced_events.activity = 'Confirm Order'
            -- Immediately preceded by 'Create Order'
            AND sequenced_events.prev_activity_1 = 'Create Order'
            -- Two steps before (immediately before 'Create Order') was 'Approve Purchase Requisition'
            AND sequenced_events.prev_activity_2 = 'Approve Purchase Requisition'
            -- Step 3: Time elapsed between 'Create Order' (prev_timestamp_1) and 'Confirm Order' (timestamp) is > 5 days
            AND (sequenced_events.timestamp - sequenced_events.prev_timestamp_1) > INTERVAL 5 DAY
    );

```