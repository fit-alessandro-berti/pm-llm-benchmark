Below is the Python code for constructing an accepting Petri net that models the described insurance claim management process. The Petri net includes places, transitions, and arcs to represent the logical flow of activities, including loops for re-submission of documents and in-depth investigations.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define places
start = PetriNet.Place("start")  # Start place for a new claim
claim_registration = PetriNet.Place("claim_registration")
document_verification = PetriNet.Place("document_verification")
re_document_submission = PetriNet.Place("re_document_submission")
fraud_check = PetriNet.Place("fraud_check")
in_depth_investigation = PetriNet.Place("in_depth_investigation")
claim_assessment = PetriNet.Place("claim_assessment")
approval = PetriNet.Place("approval")
payment = PetriNet.Place("payment")
notification = PetriNet.Place("notification")
closure = PetriNet.Place("closure")  # Final place for a closed claim

# Add places to the Petri net
net.places.add(start)
net.places.add(claim_registration)
net.places.add(document_verification)
net.places.add(re_document_submission)
net.places.add(fraud_check)
net.places.add(in_depth_investigation)
net.places.add(claim_assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(closure)

# Define transitions
t_claim_registration = PetriNet.Transition("t_claim_registration", "Claim Registration (CR)")
t_document_verification = PetriNet.Transition("t_document_verification", "Document Verification (DV)")
t_re_document_submission = PetriNet.Transition("t_re_document_submission", "Re-Document Submission (RDS)")
t_fraud_check = PetriNet.Transition("t_fraud_check", "Fraud Check (FC)")
t_in_depth_investigation = PetriNet.Transition("t_in_depth_investigation", "In-depth Investigation (II)")
t_claim_assessment = PetriNet.Transition("t_claim_assessment", "Claim Assessment (CA)")
t_approval = PetriNet.Transition("t_approval", "Approval (AP)")
t_payment = PetriNet.Transition("t_payment", "Payment (P)")
t_notification = PetriNet.Transition("t_notification", "Notification (N)")
t_closure = PetriNet.Transition("t_closure", "Closure (CL)")

# Add transitions to the Petri net
net.transitions.add(t_claim_registration)
net.transitions.add(t_document_verification)
net.transitions.add(t_re_document_submission)
net.transitions.add(t_fraud_check)
net.transitions.add(t_in_depth_investigation)
net.transitions.add(t_claim_assessment)
net.transitions.add(t_approval)
net.transitions.add(t_payment)
net.transitions.add(t_notification)
net.transitions.add(t_closure)

# Connect places and transitions with arcs
petri_utils.add_arc_from_to(start, t_claim_registration, net)
petri_utils.add_arc_from_to(t_claim_registration, claim_registration, net)

petri_utils.add_arc_from_to(claim_registration, t_document_verification, net)
petri_utils.add_arc_from_to(t_document_verification, document_verification, net)

# Loop for re-document submission
petri_utils.add_arc_from_to(document_verification, t_re_document_submission, net)
petri_utils.add_arc_from_to(t_re_document_submission, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, t_document_verification, net)  # Back to document verification

petri_utils.add_arc_from_to(document_verification, t_fraud_check, net)
petri_utils.add_arc_from_to(t_fraud_check, fraud_check, net)

# Loop for in-depth investigation
petri_utils.add_arc_from_to(fraud_check, t_in_depth_investigation, net)
petri_utils.add_arc_from_to(t_in_depth_investigation, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, t_fraud_check, net)  # Back to fraud check

petri_utils.add_arc_from_to(fraud_check, t_claim_assessment, net)
petri_utils.add_arc_from_to(t_claim_assessment, claim_assessment, net)

petri_utils.add_arc_from_to(claim_assessment, t_approval, net)
petri_utils.add_arc_from_to(t_approval, approval, net)

petri_utils.add_arc_from_to(approval, t_payment, net)
petri_utils.add_arc_from_to(t_payment, payment, net)

petri_utils.add_arc_from_to(payment, t_notification, net)
petri_utils.add_arc_from_to(t_notification, notification, net)

petri_utils.add_arc_from_to(notification, t_closure, net)
petri_utils.add_arc_from_to(t_closure, closure, net)

# Define initial marking (a token in the start place)
im = Marking()
im[start] = 1

# Define final marking (a token in the closure place)
fm = Marking()
fm[closure] = 1

# Print the constructed Petri net details
print("Petri Net Places:", [p.name for p in net.places])
print("Petri Net Transitions:", [t.name for t in net.transitions])
print("Initial Marking:", im)
print("Final Marking:", fm)
```

### Explanation:
1. **Places** represent states between activities, such as `start`, `claim_registration`, `document_verification`, etc.
2. **Transitions** represent activities, such as `Claim Registration (CR)`, `Document Verification (DV)`, etc.
3. **Arcs** connect places and transitions to define the flow of tokens.
4. **Loops** are implemented for:
   - Re-document submission (`document_verification` → `re_document_submission` → `document_verification`).
   - In-depth investigation (`fraud_check` → `in_depth_investigation` → `fraud_check`).
5. **Initial Marking**: A token starts in the `start` place.
6. **Final Marking**: A token ends in the `closure` place, indicating the claim is closed.

This Petri net accurately models the described insurance claim management process.