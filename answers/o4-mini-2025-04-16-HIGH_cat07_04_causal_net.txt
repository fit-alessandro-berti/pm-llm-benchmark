The diagram on the left is a small workflow (or “process”) model for handling some kind of request; the little black circles on the arcs and the small white “connector” squares indicate different kinds of splits and joins (OR-, AND- and XOR-) – a legend for those six connectortypes lives in the gray box at bottom right. Here’s how the process reads, step by step:

1. Activity a (“register request”) is the start.  
2. Out of a you hit an ORsplit connector  leading to three possible examination tasks (you may do any one, two or all three, in any combination):  
   • b: “examine thoroughly”  
   • c: “examine casually”  
   • d: “check ticket”  
3. Any of those three tasks, once complete, feed into two possible things:  
   – the OR-join that leads on to e (“decide”), or  
   – the OR-join that leads to f (“reinitiate request”), which loops you back to the OR-split so you can do further examinations if needed.  
4. Once you finally hit the OR-join into e (“decide”), you leave that task via an XOR-split (a pure oneoutcome choice) to one of two endings:  
   • g: “pay compensation” or  
   • h: “reject request.”  
5. Those two branches then merge at an XOR-join and flow into z (“end”).

The little inset in the lower right corner simply shows, for reference, what each of the six connectors means:  
 – XOR-split (only one outgoing branch)  
 – AND-split (all outgoing branches in parallel)  
 – OR-split (any non-empty subset of outgoing branches)  
 – XOR-join (exactly one incoming branch)  
 – AND-join (all incoming branches must arrive)  
 – OR-join (any non-empty subset of incoming branches)