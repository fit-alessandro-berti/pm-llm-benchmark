Here's the Python code for constructing the Petri net as per the provided scenario:
```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Define the initial and final markings
im = Marking()
im["start"] = 1

fm = Marking()
fm["closed"] = 1

# Construct the Petri net
net = PetriNet(name="Insurance Claim Process")

# Define places (states)
claim = PetriNet.Place(name="Claim")
registration = PetriNet.Place(name="Registration")
verification = PetriNet.Place(name="Verification")
fraud_check = PetriNet.Place(name="Fraud Check")
assessment = PetriNet.Place(name="Assessment")
approval = PetriNet.Place(name="Approval")
payment = PetriNet.Place(name="Payment")
notification = PetriNet.Place(name="Notification")
closure = PetriNet.Place(name="Closure")
re_submission = PetriNet.Place(name="Re-Document Submission")
in_depth_investigation = PetriNet.Place(name="In-depth Investigation")

# Add places to the net
net.places.add(claim)
net.places.add(registration)
net.places.add(verification)
net.places.add(fraud_check)
net.places.add(assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(closure)
net.places.add(re_submission)
net.places.add(in_depth_investigation)

# Define transitions (activities)
register = PetriNet.Transition(name="Register", label="Claim Registration")
verify = PetriNet.Transition(name="Verify", label="Document Verification")
check = PetriNet.Transition(name="Check", label="Fraud Check")
assess = PetriNet.Transition(name="Assess", label="Claim Assessment")
approve = PetriNet.Transition(name="Approve", label="Approval")
pay = PetriNet.Transition(name="Pay", label="Payment")
notify = PetriNet.Transition(name="Notify", label="Notification")
close = PetriNet.Transition(name="Close", label="Closure")
re_submit = PetriNet.Transition(name="Re-Submit", label="Re-Document Submission")
investigate = PetriNet.Transition(name="Investigate", label="In-depth Investigation")

# Add transitions to the net
net.transitions.add(register)
net.transitions.add(verify)
net.transitions.add(check)
net.transitions.add(assess)
net.transitions.add(approve)
net.transitions.add(pay)
net.transitions.add(notify)
net.transitions.add(close)
net.transitions.add(re_submit)
net.transitions.add(investigate)

# Establish arcs (sequences)
petri_utils.add_arc_from_to(claim, register, net)
petri_utils.add_arc_from_to(registration, verify, net)
petri_utils.add_arc_from_to(verification, check, net)
petri_utils.add_arc_from_to(check, fraud_check, net)  # Loop for Fraud Check
petri_utils.add_arc_from_to(fraud_check, investigate, net)
petri_utils.add_arc_from_to(investigate, assess, net)
petri_utils.add_arc_from_to(assessment, approval, net)
petri_utils.add_arc_from_to(approval, pay, net)
petri_utils.add_arc_from_to(pay, notify, net)
petri_utils.add_arc_from_to(notify, closure, net)
petri_utils.add_arc_from_to(closure, claim, net)  # Loop for re-submissions and investigations
petri_utils.add_arc_from_to(verification, re_submit, net)
petri_utils.add_arc_from_to(re_submission, verification, net)
```

This code sets up a Petri net that models the insurance claim process, including all the specified activities and potential loops for re-document submission and in-depth investigation. The initial marking starts with a token at the "start" place, representing a new insurance claim, and the final marking ends with a token at the "closed" place, indicating the claim has been successfully processed and closed.