 Sure! Below is an example of how to create a temporal profile for a hypothetical "Purchase-to-Pay" (P2P) process in Python. In this case, we will define a few activities and some hypothetical times between those activities.

### Example Activities:
1. **Order Request** (OR)
2. **Order Approval** (OA)
3. **Purchase Order** (PO)
4. **Goods Receipt** (GR)
5. **Invoice Verification** (IV)
6. **Payment Authorization** (PA)
7. **Payment Processing** (PP)

### Example Temporal Profile:
```python
# Define the temporal profile for a hypothetical Purchase-to-Pay process
temporal_profile = {
    ('OR', 'OA'): (1, 0.5),   # Average time between OR and OA is 1 day, stddev is 0.5 days
    ('OA', 'PO'): (2, 1),     # Average time between OA and PO is 2 days, stddev is 1 day
    ('PO', 'GR'): (7, 3),     # Average time between PO and GR is 7 days, stddev is 3 days
    ('GR', 'IV'): (4, 2),     # Average time between GR and IV is 4 days, stddev is 2 days
    ('IV', 'PA'): (1, 0.5),   # Average time between IV and PA is 1 day, stddev is 0.5 days
    ('PA', 'PP'): (3, 1)      # Average time between PA and PP is 3 days, stddev is 1 day
}

# Positive value ZETA for deviation calculation
ZETA = 2

def calculate_deviations(temporal_profile, ZETA):
    deviations = {}
    for (act1, act2), (avg, stddev) in temporal_profile.items():
        lower_bound = avg - ZETA * stddev
        upper_bound = avg + ZETA * stddev
        deviations[act1, act2] = {'avg': avg, 'stddev': stddev, 'lower_bound': lower_bound, 'upper_bound': upper_bound}
    return deviations

# Calculate the deviation bounds for each activity pair
deviation_bounds = calculate_deviations(temporal_profile, ZETA)
for (act1, act2), data in deviation_bounds.items():
    print(f"Activity Pair: {act1} -> {act2}")
    print(f"  Average Time: {data['avg']} days")
    print(f"  Standard Deviation: {data['stddev']} days")
    print(f"  Lower Bound: {data['lower_bound']} days")
    print(f"  Upper Bound: {data['upper_bound']} days")
    print()
```

### Explanation:
- **Temporal Profile**: This is a dictionary where each key is a tuple of two activities, and the value is another tuple containing the average time (in days) and the standard deviation (in days) between those activities.
- **ZETA Value**: Defines how many standard deviations from the mean will be considered as deviations. In this example, ZETA is set to 2, which means any time outside of `avg ± ZETA * stddev` will be considered a deviation.

### Calculate Deviations:
- The function `calculate_deviations` computes the lower and upper bounds for each activity pair based on the average time, standard deviation, and the given ZETA value.

This example illustrates how to model and calculate temporal profiles in a hypothetical Purchase-to-Pay process using Python dictionaries.