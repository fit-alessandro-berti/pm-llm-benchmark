Here is the DuckDB SQL query to meet the requirements:

```sql
SELECT * 
FROM event_log
EXCEPT (
    SELECT el.*
    FROM event_log AS el
    JOIN (
        SELECT DISTINCT case_id
        FROM event_log
        WHERE activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
        GROUP BY case_id
        HAVING COUNT(*) = 3 -- Exactly 3 events in this order
    ) AS seq_check
    ON el.case_id = seq_check.case_id
    JOIN (
        SELECT case_id
        FROM event_log
        WHERE activity = 'Create Order'
        AND timestamp > timestamp - INTERVAL '5 DAYS'
        GROUP BY case_id
        HAVING COUNT(*) = 1 -- Exactly one 'Create Order' event in this case
    ) AS timed_filter
    ON el.case_id = timed_filter.case_id
)
ORDER BY case_id, timestamp;
```

### Explanation:

1. **First Filter: Identify Cases Meeting the Sequence and Timing Condition**:
	- The subquery `seq_check` identifies cases where the sequence of events `'Approve Purchase Requisition'  'Create Order'  'Confirm Order'` appears in that exact order and without any other activity in between.
	- The subquery `timed_filter` ensures that there is only one `'Create Order'` event for each selected case, and its timestamp is more than 5 days before the `'Confirm Order'` event.
2. **Main Query: Exclude Matched Cases**:
	- The main query excludes any events associated with cases identified by the subqueries `seq_check` and `timed_filter`.
3. **Ordering**:
	- The final result orders the remaining events by `case_id` and `timestamp`.

This ensures the output includes all events except those from cases meeting both conditions.