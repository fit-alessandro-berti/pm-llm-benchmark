# DuckDB SQL Query to Exclude Cases with Specific Activity Sequence and Timing

Here's a DuckDB SQL query that identifies cases with the specified sequence and timing condition, then excludes them from the final result:

```sql
WITH
-- First, identify all cases that have the exact sequence of three activities
cases_with_sequence AS (
    SELECT DISTINCT e1.case_id
    FROM event_log e1
    JOIN event_log e2 ON e1.case_id = e2.case_id
        AND e1.timestamp < e2.timestamp
        AND e2.activity = 'Create Order'
        AND e1.activity = 'Approve Purchase Requisition'
        -- Ensure no other events between e1 and e2
        AND NOT EXISTS (
            SELECT 1 FROM event_log e
            WHERE e.case_id = e1.case_id
            AND e.timestamp > e1.timestamp
            AND e.timestamp < e2.timestamp
        )
    JOIN event_log e3 ON e2.case_id = e3.case_id
        AND e2.timestamp < e3.timestamp
        AND e3.activity = 'Confirm Order'
        -- Ensure no other events between e2 and e3
        AND NOT EXISTS (
            SELECT 1 FROM event_log e
            WHERE e.case_id = e2.case_id
            AND e.timestamp > e2.timestamp
            AND e.timestamp < e3.timestamp
        )
),

-- Then filter those cases to only include ones where time between Create and Confirm is >5 days
cases_to_exclude AS (
    SELECT cs.case_id
    FROM cases_with_sequence cs
    JOIN event_log e1 ON cs.case_id = e1.case_id AND e1.activity = 'Create Order'
    JOIN event_log e2 ON cs.case_id = e2.case_id AND e2.activity = 'Confirm Order'
        AND e2.timestamp > e1.timestamp
    WHERE DATEDIFF('day', e1.timestamp, e2.timestamp) > 5
)

-- Finally, return all events except those from the excluded cases
SELECT e.*
FROM event_log e
WHERE e.case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY e.case_id, e.timestamp;
```

## Explanation:

1. **First CTE (`cases_with_sequence`)**:
   - Identifies cases with the exact sequence of three activities in direct succession
   - Uses self-joins with timestamp comparisons to ensure proper ordering
   - Uses NOT EXISTS to verify no other events occur between the sequence activities

2. **Second CTE (`cases_to_exclude`)**:
   - Takes the cases from the first CTE and further filters them
   - Only keeps cases where the time between 'Create Order' and 'Confirm Order' is >5 days
   - Uses DATEDIFF to calculate the day difference between timestamps

3. **Final Query**:
   - Returns all events from the original table
   - Excludes any events belonging to cases identified in the second CTE
   - Orders results by case_id and timestamp for readability

This query efficiently identifies and excludes the problematic cases while preserving all other events in the log.