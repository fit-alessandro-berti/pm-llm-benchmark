To achieve the task outlined in the prompt, we need to break it down into several steps. Here's how we can construct the DuckDB SQL query:

1. **Determine the sequence of activities for each `case_id`**: This requires ordering the activities by `timestamp` within each `case_id`.
2. **Group cases by their complete activity sequence**: We will concatenate the ordered activities into a string to identify unique process variants.
3. **Count how many cases correspond to each variant**: Use the `COUNT` function to aggregate the cases per variant.
4. **Determine the top K variants by their frequency**: Order the variants by their count and limit the results to the top K.
5. **Filter down to the cases belonging to the top K variants**: Join the original event log with the list of top K variants.
6. **Return the corresponding events from those filtered cases**: Ensure that only the events from the top K variants are included.

Here is the DuckDB SQL query that accomplishes this:

```sql
WITH ranked_activities AS (
    SELECT 
        case_id,
        STRING_AGG(activity ORDER BY timestamp) AS activity_sequence
    FROM 
        event_log
    GROUP BY 
        case_id
),
variant_counts AS (
    SELECT 
        activity_sequence,
        COUNT(*) AS variant_count
    FROM 
        ranked_activities
    GROUP BY 
        activity_sequence
),
top_k_variants AS (
    SELECT 
        activity_sequence
    FROM 
        variant_counts
    ORDER BY 
        variant_count DESC
    LIMIT 
        K -- Replace K with the desired number of top variants
)
SELECT 
    el.*
FROM 
    event_log el
JOIN 
    ranked_activities ra ON el.case_id = ra.case_id
JOIN 
    top_k_variants tkv ON ra.activity_sequence = tkv.activity_sequence;
```

### Explanation:
1. **ranked_activities**: This CTE (Common Table Expression) concatenates the activities for each `case_id` in the order of `timestamp`. The `STRING_AGG` function is used to create a string of the ordered activities.
2. **variant_counts**: This CTE counts the number of cases (`COUNT(*)`) for each unique `activity_sequence`.
3. **top_k_variants**: This CTE selects the top K variants based on the frequency (`variant_count`). The `ORDER BY variant_count DESC` ensures that the most frequent variants come first, and `LIMIT K` restricts the result to the top K variants.
4. **Final SELECT**: The final query joins the original `event_log` with the `ranked_activities` and `top_k_variants` to filter out only the events that belong to the top K variants.

Replace `K` with the actual number of top variants you want to consider.