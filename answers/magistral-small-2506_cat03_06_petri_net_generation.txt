# Accepting Petri Net for Insurance Claim Management Process

Here's the Python code to construct the accepting Petri net for the insurance claim management process:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance Claim Management Process")

# Define places (states)
start = PetriNet.Place(name="Start")
after_CR = PetriNet.Place(name="After Claim Registration")
after_DV = PetriNet.Place(name="After Document Verification")
after_FC = PetriNet.Place(name="After Fraud Check")
after_CA = PetriNet.Place(name="After Claim Assessment")
after_AP = PetriNet.Place(name="After Approval")
after_P = PetriNet.Place(name="After Payment")
after_N = PetriNet.Place(name="After Notification")
end = PetriNet.Place(name="End")

# Add places to the net
net.places.add(start)
net.places.add(after_CR)
net.places.add(after_DV)
net.places.add(after_FC)
net.places.add(after_CA)
net.places.add(after_AP)
net.places.add(after_P)
net.places.add(after_N)
net.places.add(end)

# Define transitions (activities)
claim_registration = PetriNet.Transition(name="claim_registration", label="Claim Registration")
document_verification = PetriNet.Transition(name="document_verification", label="Document Verification")
fraud_check = PetriNet.Transition(name="fraud_check", label="Fraud Check")
claim_assessment = PetriNet.Transition(name="claim_assessment", label="Claim Assessment")
approval = PetriNet.Transition(name="approval", label="Approval")
payment = PetriNet.Transition(name="payment", label="Payment")
notification = PetriNet.Transition(name="notification", label="Notification")
closure = PetriNet.Transition(name="closure", label="Closure")
re_document_submission = PetriNet.Transition(name="re_document_submission", label="Re-Document Submission")
in_depth_investigation = PetriNet.Transition(name="in_depth_investigation", label="In-depth Investigation")

# Add transitions to the net
net.transitions.add(claim_registration)
net.transitions.add(document_verification)
net.transitions.add(fraud_check)
net.transitions.add(claim_assessment)
net.transitions.add(approval)
net.transitions.add(payment)
net.transitions.add(notification)
net.transitions.add(closure)
net.transitions.add(re_document_submission)
net.transitions.add(in_depth_investigation)

# Add arcs to connect the places and transitions
# Main flow
petri_utils.add_arc_from_to(start, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, after_CR, net)
petri_utils.add_arc_from_to(after_CR, document_verification, net)
petri_utils.add_arc_from_to(document_verification, after_DV, net)
petri_utils.add_arc_from_to(after_DV, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, after_FC, net)
petri_utils.add_arc_from_to(after_FC, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, after_CA, net)
petri_utils.add_arc_from_to(after_CA, approval, net)
petri_utils.add_arc_from_to(approval, after_AP, net)
petri_utils.add_arc_from_to(after_AP, payment, net)
petri_utils.add_arc_from_to(payment, after_P, net)
petri_utils.add_arc_from_to(after_P, notification, net)
petri_utils.add_arc_from_to(notification, closure, net)
petri_utils.add_arc_from_to(closure, end, net)

# Optional flows with loops
# DV -> RDS loop (if documents are incomplete)
petri_utils.add_arc_from_to(after_DV, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, document_verification, net)

# FC -> II loop (if fraud is suspected)
petri_utils.add_arc_from_to(after_FC, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, fraud_check, net)

# Define initial and final markings
im = Marking()
im[start] = 1  # Initial state: new claim arrives

fm = Marking()
fm[end] = 1  # Final state: claim is closed

# For visualization (optional)
# from pm4py.visualization.petri_net import visualizer as pn_visualizer
# gviz = pn_visualizer.apply(net, im, fm)
# pn_visualizer.view(gviz)
```

### Explanation:

1. **Places** represent the states between activities:
   - `start`: Initial state (new claim arrives)
   - `after_CR` to `after_N`: States after each major activity
   - `end`: Final state (claim closed)

2. **Transitions** represent the activities with proper labels:
   - Main process flow: CR, DV, FC, CA, AP, P, N, CL
   - Optional activities: RDS (re-submission) and II (investigation)

3. **Arcs** connect the places and transitions to form the process flow:
   - Main sequence follows the 8-step process
   - Additional arcs create loops for document re-submission and in-depth investigations

4. **Markings**:
   - Initial marking: 1 token in `start` place (new claim)
   - Final marking: 1 token in `end` place (closed claim)

This Petri net accurately represents the described insurance claim process with all its sequential steps and potential loops for re-verification and investigation.