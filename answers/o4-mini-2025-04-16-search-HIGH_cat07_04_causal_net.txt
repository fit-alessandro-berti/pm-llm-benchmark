The picture you’ve given is a little “workflownet” (a kind of Petrinet or BPMN fragment) for handling a customer request.  White rectangles are the actual work-steps (transitions); black dots are the control-flow connectors (places) that implement different split/join semantics.  In the lower-right you even have a legend for the six connector types:

  • XOR-split (one of many branches)  
  • AND-split (all branches)  
  • OR-split (any non-empty combination of branches)  
  • XOR-join (exactly one incoming branch)  
  • AND-join (all incoming branches)  
  • OR-join (at least one incoming branch)

Here’s how the main process works:

 1.  **a “register request”**  
     – The very first task is to register the incoming request (box a).  
     – Immediately after a fires, control flows into an OR-split: from here you may take *any* one or more of the four outgoing branches.

 2.  **OR-split  b, c, d or f**  
     – **b: “examine thoroughly”**  
     – **c: “examine casually”**  
     – **d: “check ticket”**  
     – **f: “reinitiate request”** (if, for example, the request was invalid or incomplete)  
     Any non-empty subset of {b, c, d, f} can be executed in parallel.

 3.  **Looping**  
     – If the “reinitiate request” task f is taken, it loops back into the same OR-split (so the request gets re-registered and you go around again).

 4.  **OR-join  e “decide”**  
     – As soon as *any* of b, c, d or f completes, a token arrives at the OR-join in front of task e.  
     – e (“decide”) can then fire based on whatever exam or re-initiation result came back.

 5.  **XOR-split after “decide”**  
     – Once decision e is done, you must choose exactly one of the two next tasks:  
       • g: “pay compensation”  
       • h: “reject request”

 6.  **XOR-join  z “end”**  
     – Whichever branch you choose (g or h), it flows into an XOR-join and then into the final “end” task z.

In summary, the net illustrates:

  • An **OR-split** out of the initial registration: you may do one, more than one, or even just a re-initiation.  
  • An **OR-join** into the decision step: you can decide as soon as any of those branches finishes.  
  • An **XOR-split** in the decision: you must pick exactly one outcome (compensate or reject).  
  • An **XOR-join** at the very end, merging those two outcomes back into a single “end.”  

And the inset in the lower-right corner reminds you of all six of the common split/join styles (XOR, AND, OR) for both diverging and converging control flow.