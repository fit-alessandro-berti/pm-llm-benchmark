1. What is wrong with the current tree?  
• The huge PARALLEL (AND-split) after the requisitionsteps lets the remaining five activities fire in any order.  
– It is therefore possible (and allowed by the model) to …  
• pay an invoice before the invoice is even received,  
• match an invoice to a PO before the PO is created,  
• receive goods after payment, etc.  
• In a normal Procure-to-Pay flow the order must be much stricter:  
1 Create Purchase Requisition   
2 Approve Purchase Requisition   
3 Create Purchase Order   
4 Receive Goods and 5 Receive Invoice (either can come first, but both must happen)   
6 Match Invoice to PO   
7 Pay Invoice   
8 Close Case.  
• Only “Receive Goods” and “Receive Invoice” may occur in either order; everything else is strictly sequential.

2. Corrected (tightened) process tree  

```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# activities
create_req      = ProcessTree(label="Create_Purchase_Requisition")
approve_req     = ProcessTree(label="Approve_Purchase_Requisition")
create_po       = ProcessTree(label="Create_Purchase_Order")
receive_goods   = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice   = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice     = ProcessTree(label="Pay_Invoice")
close_case      = ProcessTree(label="Close_Case")

# the only parallelism we still allow: goods receipt and invoice receipt
receive_and_invoice = ProcessTree(
    operator=Operator.PARALLEL,          # AND-split / AND-join
    children=[receive_goods, receive_invoice]
)

# root sequence that enforces the business order
root = ProcessTree(
    operator=Operator.SEQUENCE,
    children=[
        create_req,          # 1
        approve_req,         # 2
        create_po,           # 3
        receive_and_invoice, # 4 & 5 (unordered between them)
        match_invoice,       # 6
        pay_invoice,         # 7
        close_case           # 8
    ]
)
```

3. Why this tree is now conformant  

• SEQUENCE nodes in a process tree enforce a strict left-to-right order.  
– Therefore “Match Invoice” can only start after both receipt activities have completed,  
– “Pay Invoice” can only start after successful matching,  
– and “Close Case” is only possible after payment.  

• The single PARALLEL (AND) block between “Receive Goods” and “Receive Invoice” behaves like an AND-split followed by an AND-join: both children must occur once, in any order, before the parent path can continue. This mirrors real life, where either the goods or the supplier’s invoice might arrive first, but finance cannot match or pay until both are present.  

• Because all other activities sit in the SEQUENCE outside that block, it is impossible for the system to execute them out of order (e.g., paying before receiving goods/invoice or matching before a PO exists).  

Hence the new tree still contains exactly the same eight activities, keeps the only concurrency that is business-acceptable, but eliminates every under-fitting behaviour that the original model allowed.