Below are two self-contained POWL models created exactly with the pm4py API.

1. root_unfair – reproduces the hiring procedure that contains an XOR branch after the skill assessment. Applicants either go through a normal “CulturalFitCheck” or, if they belong to a favoured group, through “CommunityAffiliationCheck”, which can give them an (unfair) uplift.

2. root_fair – represents the same hiring procedure but removes the special community branch. Everyone is assessed by the same “CulturalFitCheck”, eliminating the potential source of bias.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

###############################################################################
# 1.  POWL MODEL WITH POTENTIAL UNFAIRNESS
###############################################################################

# atomic activities -----------------------------------------------------------
receive               = Transition(label="ReceiveApplication")
data_complete_check   = Transition(label="DataCompletenessCheck")
request_more_info     = Transition(label="RequestMoreInfo")
skill_assessment      = Transition(label="SkillAssessment")
cultural_fit_check    = Transition(label="CulturalFitCheck")
community_affiliation = Transition(label="CommunityAffiliationCheck")   # unfair branch
manager_review        = Transition(label="ManagerialReview")
final_decision        = Transition(label="FinalDecision")

# loop for data completeness --------------------------------------------------
data_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[data_complete_check, request_more_info])

# XOR for alternative cultural handling ---------------------------------------
xor_culture = OperatorPOWL(
    operator=Operator.XOR,
    children=[cultural_fit_check, community_affiliation])

# build overall partial order --------------------------------------------------
root_unfair = StrictPartialOrder(
    nodes=[receive,
           data_loop,
           skill_assessment,
           xor_culture,
           manager_review,
           final_decision])

root_unfair.order.add_edge(receive,           data_loop)
root_unfair.order.add_edge(data_loop,         skill_assessment)
root_unfair.order.add_edge(skill_assessment,  xor_culture)
root_unfair.order.add_edge(xor_culture,       manager_review)
root_unfair.order.add_edge(manager_review,    final_decision)


###############################################################################
# 2.  POWL MODEL WITHOUT UNFAIRNESS
###############################################################################

# atomic activities (fresh objects to stay independent) -----------------------
receive_f             = Transition(label="ReceiveApplication")
data_complete_check_f = Transition(label="DataCompletenessCheck")
request_more_info_f   = Transition(label="RequestMoreInfo")
skill_assessment_f    = Transition(label="SkillAssessment")
cultural_fit_check_f  = Transition(label="CulturalFitCheck")      # single path
manager_review_f      = Transition(label="ManagerialReview")
final_decision_f      = Transition(label="FinalDecision")

# same data-completeness loop --------------------------------------------------
data_loop_f = OperatorPOWL(
    operator=Operator.LOOP,
    children=[data_complete_check_f, request_more_info_f])

# build overall partial order (no XOR this time) ------------------------------
root_fair = StrictPartialOrder(
    nodes=[receive_f,
           data_loop_f,
           skill_assessment_f,
           cultural_fit_check_f,
           manager_review_f,
           final_decision_f])

root_fair.order.add_edge(receive_f,            data_loop_f)
root_fair.order.add_edge(data_loop_f,          skill_assessment_f)
root_fair.order.add_edge(skill_assessment_f,   cultural_fit_check_f)
root_fair.order.add_edge(cultural_fit_check_f, manager_review_f)
root_fair.order.add_edge(manager_review_f,     final_decision_f)
```

Usage notes:
• Both `root_unfair` and `root_fair` are valid POWL models and can be directly visualised or analysed with pm4py.  
• The only structural difference is the presence (or absence) of the XOR operator that introduces the potentially discriminatory “CommunityAffiliationCheck” activity.