To address this task, we'll need to construct a multi-step SQL query in DuckDB. Let's break down the solution into parts and then combine them into a final query.

1. **Extract the ordered sequence of activities per case:**

   We'll use the `list` function to create an ordered list of activities for each case, ordered by timestamp.

2. **Aggregate and count cases per variant:**

   We'll group by the list of activities and count the number of cases for each variant.

3. **Determine the top K variants:**

   We'll use a subquery to rank the variants by their count and select the top K.

4. **Filter down to the cases belonging to the top K variants:**

   We'll join this information back to our original event log to filter out cases not in the top K variants.

5. **Return the corresponding events from those filtered cases:**

   Our final result will be the filtered event log.

Here's the complete DuckDB SQL query to accomplish these steps:

```sql
-- Set the value of K (number of top variants to return)
SET k = 5;

-- Main query
WITH 
-- Step 1: Extract the ordered sequence of activities per case
case_variants AS (
    SELECT 
        case_id,
        list(activity ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

-- Step 2 & 3: Aggregate and count cases per variant, then determine top K variants
top_variants AS (
    SELECT 
        activity_sequence,
        count(*) AS case_count,
        row_number() OVER (ORDER BY count(*) DESC) AS variant_rank
    FROM case_variants
    GROUP BY activity_sequence
    HAVING variant_rank <= $k
),

-- Step 4: Filter down to the cases belonging to the top K variants
filtered_cases AS (
    SELECT cv.case_id
    FROM case_variants cv
    JOIN top_variants tv ON cv.activity_sequence = tv.activity_sequence
)

-- Step 5: Return the corresponding events from those filtered cases
SELECT el.*
FROM event_log el
JOIN filtered_cases fc ON el.case_id = fc.case_id
ORDER BY el.case_id, el.timestamp;
```

Let's break down the query and explain each part:

1. **Setting K**: We use a SET statement to define K, which can be easily adjusted. In this example, K is set to 5.

2. **case_variants CTE**: This Common Table Expression (CTE) creates the ordered sequence of activities for each case using the `list` function, ordered by `timestamp`.

3. **top_variants CTE**: This CTE aggregates the variants, counts the number of cases for each variant, and uses `row_number()` to rank them. The `HAVING` clause filters to keep only the top K variants.

4. **filtered_cases CTE**: This CTE joins the `case_variants` with `top_variants` to get the `case_id`s that belong to the top K variants.

5. **Final SELECT**: This joins the original `event_log` with `filtered_cases` to return only the events from cases that are part of the top K variants. The results are ordered by `case_id` and `timestamp` for better readability.

This query efficiently solves the given task, extracting process variants, identifying the top K variants, and returning the relevant events from the original log. The use of CTEs makes the query more readable and maintainable.