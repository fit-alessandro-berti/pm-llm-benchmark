To model the complex insurance claim management process as an accepting Petri net, we need to represent each activity as a transition, with places indicating the state between these activities. The process includes loops for re-submission of documents and in-depth investigations. Here's the implementation:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet("Insurance Claim Process")

# Create places
source = PetriNet.Place("source")
after_CR = PetriNet.Place("after_CR")
dv_done = PetriNet.Place("dv_done")
fc_done = PetriNet.Place("fc_done")
ca_done = PetriNet.Place("ca_done")
ap_done = PetriNet.Place("ap_done")
p_done = PetriNet.Place("p_done")
n_done = PetriNet.Place("n_done")
cl_done = PetriNet.Place("cl_done")

# Add places to the net
places = [source, after_CR, dv_done, fc_done, ca_done, ap_done, p_done, n_done, cl_done]
for place in places:
    net.places.add(place)

# Create transitions with labels
transitions = {
    "CR": PetriNet.Transition("CR", "Claim Registration"),
    "DV": PetriNet.Transition("DV", "Document Verification"),
    "RDS": PetriNet.Transition("RDS", "Re-Document Submission"),
    "FC": PetriNet.Transition("FC", "Fraud Check"),
    "II": PetriNet.Transition("II", "In-depth Investigation"),
    "CA": PetriNet.Transition("CA", "Claim Assessment"),
    "AP": PetriNet.Transition("AP", "Approval"),
    "skip_AP": PetriNet.Transition("skip_AP", None),  # Silent transition
    "P": PetriNet.Transition("P", "Payment"),
    "N": PetriNet.Transition("N", "Notification"),
    "CL": PetriNet.Transition("CL", "Closure")
}

# Add transitions to the net
for trans in transitions.values():
    net.transitions.add(trans)

# Connect transitions and places with arcs
petri_utils.add_arc_from_to(source, transitions["CR"], net)
petri_utils.add_arc_from_to(transitions["CR"], after_CR, net)
petri_utils.add_arc_from_to(after_CR, transitions["DV"], net)
petri_utils.add_arc_from_to(transitions["DV"], dv_done, net)
petri_utils.add_arc_from_to(dv_done, transitions["FC"], net)
petri_utils.add_arc_from_to(transitions["FC"], fc_done, net)
petri_utils.add_arc_from_to(dv_done, transitions["RDS"], net)
petri_utils.add_arc_from_to(transitions["RDS"], after_CR, net)
petri_utils.add_arc_from_to(fc_done, transitions["CA"], net)
petri_utils.add_arc_from_to(transitions["CA"], ca_done, net)
petri_utils.add_arc_from_to(fc_done, transitions["II"], net)
petri_utils.add_arc_from_to(transitions["II"], dv_done, net)
petri_utils.add_arc_from_to(ca_done, transitions["AP"], net)
petri_utils.add_arc_from_to(transitions["AP"], ap_done, net)
petri_utils.add_arc_from_to(ca_done, transitions["skip_AP"], net)
petri_utils.add_arc_from_to(transitions["skip_AP"], ap_done, net)
petri_utils.add_arc_from_to(ap_done, transitions["P"], net)
petri_utils.add_arc_from_to(transitions["P"], p_done, net)
petri_utils.add_arc_from_to(p_done, transitions["N"], net)
petri_utils.add_arc_from_to(transitions["N"], n_done, net)
petri_utils.add_arc_from_to(n_done, transitions["CL"], net)
petri_utils.add_arc_from_to(transitions["CL"], cl_done, net)

# Initial and final markings
im = Marking()
im[source] = 1
fm = Marking()
fm[cl_done] = 1
```

**Explanation:**
- **Places** represent states between activities. `source` is the initial place where a new claim starts, and `cl_done` is the final place indicating a closed claim.
- **Transitions** correspond to activities in the process. Silent transitions (e.g., `skip_AP`) handle conditional flows without an explicit activity.
- **Arcs** connect places and transitions to model the process flow. Loops for re-submission (`RDS`) and investigation (`II`) are implemented by connecting back to earlier places.
- **Initial marking** (`im`) has a token in `source`, while the **final marking** (`fm`) has a token in `cl_done` after closure.