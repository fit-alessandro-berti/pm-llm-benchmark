```sql
WITH OrderedActivities AS (
    SELECT
        case_id,
        activity,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_order
    FROM
        event_log
),
CaseVariants AS (
    SELECT
        case_id,
        STRING_AGG(activity, '->') WITHIN GROUP (ORDER BY activity_order) AS variant
    FROM
        OrderedActivities
    GROUP BY
        case_id
),
TopKVariants AS (
    SELECT
        variant
    FROM
        CaseVariants
    GROUP BY
        variant
    ORDER BY
        COUNT(*) DESC
    LIMIT K  -- Replace K with the desired number of top variants
)
SELECT
    el.*
FROM
    event_log el
JOIN
    CaseVariants cv ON el.case_id = cv.case_id
WHERE
    cv.variant IN (SELECT variant FROM TopKVariants);
```

**Explanation:**

1. **`OrderedActivities` CTE:**
   - This CTE assigns an order to activities within each `case_id` based on the `timestamp`.  `ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp)` generates a sequential number for each activity within a case, ordered by time.

2. **`CaseVariants` CTE:**
   - This CTE creates the process variant for each case.  `STRING_AGG(activity, '->') WITHIN GROUP (ORDER BY activity_order)` concatenates the activities in the correct order (using the `activity_order` from the previous CTE) into a single string representing the variant.  The `'->'` is used as a separator between activities in the sequence.  The `GROUP BY case_id` ensures that we get one variant per case.

3. **`TopKVariants` CTE:**
   - This CTE identifies the top K most frequent variants.  It groups the `CaseVariants` by `variant`, counts the number of cases for each variant (`COUNT(*)`), orders the results in descending order of count (`ORDER BY COUNT(*) DESC`), and then uses `LIMIT K` to select only the top K variants.  **Important:**  Replace `K` with the actual number you want to retrieve (e.g., `LIMIT 5` for the top 5 variants).

4. **Final `SELECT` Statement:**
   - This statement retrieves all columns from the original `event_log` table.
   - It joins `event_log` with `CaseVariants` on `case_id` to associate each event with its corresponding variant.
   - The `WHERE` clause filters the results to include only events belonging to cases whose variant is present in the `TopKVariants` CTE.  This ensures that only events from the top K variants are returned.

**How to use:**

1.  **Replace `K`:**  Change the `LIMIT K` clause in the `TopKVariants` CTE to the desired number of top variants you want to retrieve.
2.  **Execute the query:** Run the entire SQL query against your DuckDB database containing the `event_log` table.

This query efficiently extracts the process variants, identifies the top K most frequent ones, and then returns the relevant events from the original log.  The use of CTEs makes the query more readable and maintainable.