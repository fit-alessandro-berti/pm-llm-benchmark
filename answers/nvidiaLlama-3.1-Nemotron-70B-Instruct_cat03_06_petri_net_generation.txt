**Accepting Petri Net Construction for Insurance Claim Management Process**
====================================================================

Below is the Python code to construct the accepting Petri net for the described insurance claim management process:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking, Place, Transition
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri Net
net = PetriNet(name="Insurance Claim Management")

# **Places**
start_place = Place(name="start")
claim_registered = Place(name="claim_registered")
documents_verified = Place(name="documents_verified")
documents_incomplete = Place(name="documents_incomplete")
fraud_check_done = Place(name="fraud_check_done")
investigation_required = Place(name="investigation_required")
claim_assessed = Place(name="claim_assessed")
awaiting_approval = Place(name="awaiting_approval")
approved = Place(name="approved")
payment_done = Place(name="payment_done")
notified = Place(name="notified")
closed = Place(name="closed")

# Add places to the net
net.places.add(start_place)
net.places.add(claim_registered)
net.places.add(documents_verified)
net.places.add(documents_incomplete)
net.places.add(fraud_check_done)
net.places.add(investigation_required)
net.places.add(claim_assessed)
net.places.add(awaiting_approval)
net.places.add(approved)
net.places.add(payment_done)
net.places.add(notified)
net.places.add(closed)

# **Transitions**
transition_claim_submission = Transition(name="C", label="Insurance Claim")
transition_claim_registration = Transition(name="CR", label="Claim Registration")
transition_document_verification = Transition(name="DV", label="Document Verification")
transition_re_document_submission = Transition(name="RDS", label="Re-Document Submission")
transition_fraud_check = Transition(name="FC", label="Fraud Check")
transition_in_depth_investigation = Transition(name="II", label="In-depth Investigation")
transition_claim_assessment = Transition(name="CA", label="Claim Assessment")
transition_approval = Transition(name="AP", label="Approval")
transition_payment = Transition(name="P", label="Payment")
transition_notification = Transition(name="N", label="Notification")
transition_closure = Transition(name="CL", label="Closure")

# Add transitions to the net
net.transitions.add(transition_claim_submission)
net.transitions.add(transition_claim_registration)
net.transitions.add(transition_document_verification)
net.transitions.add(transition_re_document_submission)
net.transitions.add(transition_fraud_check)
net.transitions.add(transition_in_depth_investigation)
net.transitions.add(transition_claim_assessment)
net.transitions.add(transition_approval)
net.transitions.add(transition_payment)
net.transitions.add(transition_notification)
net.transitions.add(transition_closure)

# **Arcs**
petri_utils.add_arc_from_to(start_place, transition_claim_submission, net)
petri_utils.add_arc_from_to(transition_claim_submission, claim_registered, net)
petri_utils.add_arc_from_to(claim_registered, transition_claim_registration, net)
petri_utils.add_arc_from_to(transition_claim_registration, documents_verified, net)
petri_utils.add_arc_from_to(documents_verified, transition_document_verification, net)
petri_utils.add_arc_from_to(transition_document_verification, documents_incomplete, net)
petri_utils.add_arc_from_to(transition_document_verification, fraud_check_done, net)  # Direct path if docs are complete
petri_utils.add_arc_from_to(documents_incomplete, transition_re_document_submission, net)
petri_utils.add_arc_from_to(transition_re_document_submission, documents_verified, net)  # Loop for re-submission
petri_utils.add_arc_from_to(fraud_check_done, transition_fraud_check, net)
petri_utils.add_arc_from_to(transition_fraud_check, investigation_required, net)
petri_utils.add_arc_from_to(transition_fraud_check, claim_assessed, net)  # Direct path if no fraud
petri_utils.add_arc_from_to(investigation_required, transition_in_depth_investigation, net)
petri_utils.add_arc_from_to(transition_in_depth_investigation, fraud_check_done, net)  # Loop for investigation
petri_utils.add_arc_from_to(claim_assessed, transition_claim_assessment, net)
petri_utils.add_arc_from_to(transition_claim_assessment, awaiting_approval, net)
petri_utils.add_arc_from_to(awaiting_approval, transition_approval, net)
petri_utils.add_arc_from_to(transition_approval, approved, net)
petri_utils.add_arc_from_to(approved, transition_payment, net)
petri_utils.add_arc_from_to(transition_payment, payment_done, net)
petri_utils.add_arc_from_to(payment_done, transition_notification, net)
petri_utils.add_arc_from_to(transition_notification, notified, net)
petri_utils.add_arc_from_to(notified, transition_closure, net)
petri_utils.add_arc_from_to(transition_closure, closed, net)

# **Initial Marking (IM)**
im = Marking()
im[start_place] = 1

# **Final Marking (FM)**
fm = Marking()
fm[closed] = 1
```

**Explanation:**

- **Places** represent the states between activities (e.g., `claim_registered`, `documents_verified`).
- **Transitions** are labeled with the activity names (e.g., `transition_claim_registration`, `transition_document_verification`).
- **Arcs** connect places and transitions to form a logical sequence, including loops for re-document submission after `Document Verification` and for in-depth investigation after `Fraud Check`.
- The **Initial Marking (IM)** places a token in the `start_place`, indicating a new claim arrival.
- The **Final Marking (FM)** represents a closed claim with a token in the `closed` place.