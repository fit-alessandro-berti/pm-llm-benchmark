To solve the problem, we'll employ a subquery to first identify the `case_id`s that have six or fewer events, and then use a main query to select all events from these cases. Here's the SQL query for DuckDB that accomplishes this:

```sql
SELECT
    el1.case_id,
    el1.activity,
    el1.timestamp
FROM
    event_log AS el1
INNER JOIN (
    SELECT
        case_id
    FROM
        event_log
    GROUP BY
        case_id
    HAVING
        COUNT(*) <= 6
) AS el2 ON el1.case_id = el2.case_id;
```

Explanation:

1. **Subquery (`el2`):**
   - This part of the query identifies which `case_id`s have six or fewer events.
   - `GROUP BY case_id` groups the events by `case_id`.
   - `HAVING COUNT(*) <= 6` filters the groups to only include those with six or fewer events.

2. **Main Query (`el1`):**
   - This selects the full set of events for the `case_id`s identified by the subquery.
   - `INNER JOIN` is used to combine rows from `el1` and `el2` where the `case_id` matches. Since `el2` only contains `case_id`s with six or fewer events, this effectively filters `el1` to the desired cases.
   - The `SELECT` clause at the beginning of the query specifies which columns to retrieve from `el1`.

This query will return all the events (`case_id`, `activity`, `timestamp`) from cases that have six or fewer events, as requested.