```sql
WITH filtered_cases AS (
    SELECT 
        `case_id`
    FROM 
        event_log
    WHERE 
        `activity` = 'Approve Purchase Requisition'
        OR `activity` = 'Create Order'
        OR `activity` = 'Confirm Order'
),
filtered_sequence AS (
    SELECT 
        `case_id`,
        MIN(`timestamp`) OVER (PARTITION BY `case_id`, `activity`) AS min_timestamp,
        MAX(`timestamp`) OVER (PARTITION BY `case_id`, `activity`) AS max_timestamp
    FROM 
        filtered_cases
)
SELECT 
    *
FROM 
    event_log
WHERE 
    NOT EXISTS (
        SELECT 
            1 
        FROM 
            filtered_sequence fs
        WHERE 
            fs.`case_id` = event_log.`case_id`
            AND fs.activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
            AND fs.activity = 'Approve Purchase Requisition'
            AND event_log.`activity` != 'Approve Purchase Requisition'
    )
    OR NOT EXISTS (
        SELECT 
            1 
        FROM 
            filtered_sequence fs
        WHERE 
            fs.`case_id` = event_log.`case_id`
            AND fs.activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
            AND fs.activity = 'Create Order'
            AND event_log.`activity` != 'Create Order'
    )
    OR NOT EXISTS (
        SELECT 
            1 
        FROM 
            filtered_sequence fs
        WHERE 
            fs.`case_id` = event_log.`case_id`
            AND fs.activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
            AND fs.activity = 'Confirm Order'
            AND event_log.`activity` != 'Confirm Order'
    );
```

This solution uses Common Table Expressions (CTEs) to first filter out relevant rows based on the presence of the required activities and then checks if there exists a sequence of exactly three consecutive activities as described. It ensures that only events from cases that do not contain the specified sequence or do not meet the timing condition are returned.