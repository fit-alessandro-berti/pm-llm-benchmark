```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# 1. Initialize the Petri Net
net = PetriNet(name="InsuranceClaimManagement")

# 2. Define Places (representing states in the process)
p_start = PetriNet.Place("p_start")                                 # Initial state: Claim Filed
p_claim_registered = PetriNet.Place("p_claim_registered")           # After CR, before DV
p_docs_verified_decision = PetriNet.Place("p_docs_verified_decision") # After DV, decision for RDS or FC
p_fraud_checked_decision = PetriNet.Place("p_fraud_checked_decision") # After FC, decision for II or CA
p_claim_assessed_decision = PetriNet.Place("p_claim_assessed_decision") # After CA, decision for AP or direct P
p_ready_for_payment = PetriNet.Place("p_ready_for_payment")         # After AP or if AP skipped
p_payment_processed = PetriNet.Place("p_payment_processed")         # After P, before N
p_customer_notified = PetriNet.Place("p_customer_notified")         # After N, before CL
p_end = PetriNet.Place("p_end")                                     # Final state: Claim Closed

# Add places to the net
places = [p_start, p_claim_registered, p_docs_verified_decision,
          p_fraud_checked_decision, p_claim_assessed_decision,
          p_ready_for_payment, p_payment_processed, p_customer_notified, p_end]
for place in places:
    net.places.add(place)

# 3. Define Transitions (representing activities)
t_cr = PetriNet.Transition("CR", "Claim Registration")
t_dv = PetriNet.Transition("DV", "Document Verification")
t_rds = PetriNet.Transition("RDS", "Re-Document Submission")
t_fc = PetriNet.Transition("FC", "Fraud Check")
t_ii = PetriNet.Transition("II", "In-depth Investigation")
t_ca = PetriNet.Transition("CA", "Claim Assessment")
t_ap = PetriNet.Transition("AP", "Approval")
# This transition represents the path where approval is NOT needed
t_skip_ap = PetriNet.Transition("skip_AP", "Proceed to Payment (No Approval)")
t_p = PetriNet.Transition("P", "Payment")
t_n = PetriNet.Transition("N", "Notification")
t_cl = PetriNet.Transition("CL", "Closure")

# Add transitions to the net
transitions = [t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_skip_ap, t_p, t_n, t_cl]
for transition in transitions:
    net.transitions.add(transition)

# 4. Define Arcs (connecting places and transitions)

# Start -> Claim Registration (CR) -> p_claim_registered
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_claim_registered, net)

# p_claim_registered -> Document Verification (DV) -> p_docs_verified_decision
petri_utils.add_arc_from_to(p_claim_registered, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_docs_verified_decision, net)

# Loop for Re-Document Submission (RDS)
# p_docs_verified_decision -> Re-Document Submission (RDS) -> p_claim_registered (back for DV)
petri_utils.add_arc_from_to(p_docs_verified_decision, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_claim_registered, net)

# If documents OK: p_docs_verified_decision -> Fraud Check (FC) -> p_fraud_checked_decision
petri_utils.add_arc_from_to(p_docs_verified_decision, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fraud_checked_decision, net)

# Loop for In-depth Investigation (II)
# p_fraud_checked_decision -> In-depth Investigation (II) -> p_fraud_checked_decision (back for FC decision)
petri_utils.add_arc_from_to(p_fraud_checked_decision, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_fraud_checked_decision, net) # Allows multiple IIs or proceeding to CA

# If fraud check OK: p_fraud_checked_decision -> Claim Assessment (CA) -> p_claim_assessed_decision
petri_utils.add_arc_from_to(p_fraud_checked_decision, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_claim_assessed_decision, net)

# Conditional path for Approval (AP)
# Path 1: Approval needed
# p_claim_assessed_decision -> Approval (AP) -> p_ready_for_payment
petri_utils.add_arc_from_to(p_claim_assessed_decision, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ready_for_payment, net)

# Path 2: Approval not needed (skip_AP)
# p_claim_assessed_decision -> Skip Approval (t_skip_ap) -> p_ready_for_payment
petri_utils.add_arc_from_to(p_claim_assessed_decision, t_skip_ap, net)
petri_utils.add_arc_from_to(t_skip_ap, p_ready_for_payment, net)

# p_ready_for_payment -> Payment (P) -> p_payment_processed
petri_utils.add_arc_from_to(p_ready_for_payment, t_p, net)
petri_utils.add_arc_from_to(t_p, p_payment_processed, net)

# p_payment_processed -> Notification (N) -> p_customer_notified
petri_utils.add_arc_from_to(p_payment_processed, t_n, net)
petri_utils.add_arc_from_to(t_n, p_customer_notified, net)

# p_customer_notified -> Closure (CL) -> p_end
petri_utils.add_arc_from_to(p_customer_notified, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# 5. Define Initial Marking
im = Marking()
im[p_start] = 1

# 6. Define Final Marking
fm = Marking()
fm[p_end] = 1

# --- Verification (Optional: Print details to check) ---
print("Petri Net: ", net.name)
print("Places:")
for p in net.places:
    print(f"- {p.name}")
print("\nTransitions:")
for t in net.transitions:
    print(f"- {t.name} (Label: {t.label})")
print("\nArcs:")
for arc in net.arcs:
    print(f"- From {arc.source.name} to {arc.target.name} (Weight: {arc.weight})")

print("\nInitial Marking:")
for place, tokens in im.items():
    print(f"- Place: {place.name}, Tokens: {tokens}")

print("\nFinal Marking:")
for place, tokens in fm.items():
    print(f"- Place: {place.name}, Tokens: {tokens}")

# Example of how the example destruction might be used (not required by task but shown for completeness)
# For instance, if we wanted to remove the 'Closure' step conceptually:
# petri_utils.remove_transition(net, t_cl) # This would also remove connected arcs
# # If t_cl was removed, fm would need to be redefined, e.g., to fm[p_customer_notified] = 1
# # And p_end might be removed if it's no longer reachable or needed.
# # petri_utils.remove_place(net, p_end)
# # if p_end in fm: del fm[p_end] # Adjust final marking

# This completes the construction of the accepting Petri net.
```