To solve this task, we can use DuckDB's advanced SQL features to construct a query that extracts process variants, ranks them by frequency, and returns the events for the top K variants. Here's a SQL query that accomplishes this:

```sql
WITH case_sequences AS (
  SELECT 
    case_id,
    STRING_AGG(activity, '>' ORDER BY timestamp) AS variant
  FROM event_log
  GROUP BY case_id
),
variant_counts AS (
  SELECT 
    variant,
    COUNT(*) AS variant_count
  FROM case_sequences
  GROUP BY variant
),
top_k_variants AS (
  SELECT variant
  FROM variant_counts
  ORDER BY variant_count DESC
  LIMIT :K
),
top_k_cases AS (
  SELECT case_id
  FROM case_sequences
  WHERE variant IN (SELECT variant FROM top_k_variants)
)
SELECT el.*
FROM event_log el
JOIN top_k_cases tkc ON el.case_id = tkc.case_id
ORDER BY el.case_id, el.timestamp;
```

Let's break down this query:

1. The `case_sequences` CTE determines the sequence of activities for each `case_id`:
   - We use `STRING_AGG` to concatenate activities, ordered by timestamp, creating a string representation of the variant for each case[1].

2. The `variant_counts` CTE groups cases by their complete activity sequence and counts occurrences:
   - This gives us the frequency of each unique process variant.

3. The `top_k_variants` CTE selects the top K variants by their frequency:
   - We order by the count descending and use the `LIMIT` clause to select the top K variants[1].
   - The `:K` parameter allows for easy adjustment of how many top variants to consider.

4. The `top_k_cases` CTE identifies all cases that belong to the top K variants:
   - This step filters down to only the cases we want to include in the final result.

5. The main query joins the original `event_log` with the `top_k_cases` to return all events from cases that are part of the top K variants:
   - We order the result by `case_id` and `timestamp` to maintain the original event sequence within each case.

This query leverages DuckDB's SQL capabilities, including:
- Common Table Expressions (CTEs) for clear step-by-step logic[1].
- Window functions (implicitly used in `STRING_AGG`) for ordered aggregation within groups[1].
- Subqueries and joins for filtering and combining intermediate results[1].

To use this query:
1. Replace `:K` with the desired number of top variants you want to consider.
2. Ensure your `event_log` table has the specified `case_id`, `activity`, and `timestamp` columns.

This solution efficiently extracts process variants, ranks them, and filters the event log to only include events from the top K variants, meeting all the requirements of the task.