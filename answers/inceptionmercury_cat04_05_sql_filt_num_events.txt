```sql
WITH CaseEventCounts AS (
    SELECT
        case_id,
        COUNT(*) AS event_count
    FROM
        event_log
    GROUP BY
        case_id
    HAVING
        COUNT(*) <= 6  -- Filter out cases with more than 6 events
)
SELECT
    el.*
FROM
    event_log el
JOIN
    CaseEventCounts cec ON el.case_id = cec.case_id;
```

**Explanation:**

1. **`CaseEventCounts` CTE (Common Table Expression):**
   - This CTE calculates the number of events for each `case_id`.
   - `SELECT case_id, COUNT(*) AS event_count`:  Selects the `case_id` and counts the number of events for each group.
   - `FROM event_log`: Specifies the table to retrieve data from.
   - `GROUP BY case_id`: Groups the rows by `case_id` so that `COUNT(*)` counts events within each case.
   - `HAVING COUNT(*) <= 6`:  Crucially, this filters the grouped results, keeping only those `case_id`s where the event count is less than or equal to 6.  The `HAVING` clause is used to filter *after* the grouping has been performed.

2. **Main Query:**
   - `SELECT el.*`: Selects all columns from the `event_log` table (aliased as `el`).
   - `FROM event_log el JOIN CaseEventCounts cec ON el.case_id = cec.case_id`:  Joins the original `event_log` table with the `CaseEventCounts` CTE based on the `case_id`.  This join ensures that only events belonging to cases that passed the filtering criteria in the CTE are included in the final result.

**How it works:**

The query first identifies the `case_id`s that meet the criteria (having 6 or fewer events).  Then, it joins this list of valid `case_id`s back to the original `event_log` table, effectively selecting only the events that belong to those valid cases.  This approach efficiently filters the data at the case level before retrieving the individual events.