Here's an example of how you could create a temporal profile for a hypothetical Purchase-to-Pay process:

```
from datetime import timedelta

# Define the average times between activities in seconds
average_times = {
    ('Purchase', 'Order'): 86400,  # 1 day
    ('Order', 'Approval'): 21600,   # 6 hours
    ('Approval', 'Payment'): 7200,  # 2 hours
    ('Payment', 'Delivery'): 604800, # 7 days (for shipping)
    ('Delivery', 'Receipt'): 86400  # 1 day
}

# Define the standard deviations in seconds
standard_deviations = {
    ('Purchase', 'Order'): 3600,   # 1 hour
    ('Order', 'Approval'): 21600,   # 6 hours
    ('Approval', 'Payment'): 720,   # 2 minutes
    ('Payment', 'Delivery'): 604800, # 7 days (for shipping)
    ('Delivery', 'Receipt'): 86400  # 1 day
}

# Create the temporal profile dictionary
temporal_profile = {}

# Populate the temporal profile dictionary
for activity1, activity2 in average_times.items():
    avg_time = activity1[0]
    std_dev = activity1[1]
    if (avg_time, std_dev) not in temporal_profile:
        temporal_profile[(avg_time, std_dev)] = []
    
    # Append the couple of activities to the list
    temporal_profile[(avg_time, std_dev)].append((activity1, activity2))

for avg_time, std_dev in standard_deviations.items():
    if (avg_time, std_dev) not in temporal_profile:
        temporal_profile[(avg_time, std_dev)] = []
    
    # Append the couple of activities to the list
    temporal_profile[(avg_time, std_dev)].append((avg_time, std_dev))

# Print the temporal profile
for avg_time, std_dev, activities in temporal_profile.items():
    print(f"Average Time: {avg_time}, Standard Deviation: {std_dev}")
    for activity1, activity2 in activities:
        print(f"- {activity1[0]} -> {activity2[0]}")
```

This script generates a `temporal_profile` dictionary where each key represents a couple of average times and standard deviations, while the value is a list of pairs of activities that have these time statistics. Note that for consistency with your example, I used `(avg_time, std_dev)` as keys to indicate which pair of activity is involved by how much. The script also prints out the temporal profile in a human-readable format.

The time taken between each couple of activities are assumed to be symmetric around average. For instance, if you know that Purchase->Order has an average duration of 1 day and standard deviation of one hour, then it's likely that Order->Approval will have roughly similar statistics (i.e., average of about one day with a standard deviation of 6 hours).