Here's a DuckDB SQL query that accomplishes all the requirements:

```sql
WITH case_sequences AS (
  -- Step 1: Extract ordered sequence of activities for each case
  SELECT 
    case_id,
    LIST_AGG(activity ORDER BY timestamp) AS activity_sequence
  FROM event_log
  GROUP BY case_id
),

variant_counts AS (
  -- Step 2 & 3: Group by sequence and count occurrences, then get top K variants
  SELECT 
    activity_sequence,
    COUNT(*) as variant_frequency,
    ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as variant_rank
  FROM case_sequences
  GROUP BY activity_sequence
),

top_k_variants AS (
  -- Get the top K variant sequences
  SELECT activity_sequence
  FROM variant_counts 
  WHERE variant_rank <= K  -- Replace K with the desired number
),

top_k_cases AS (
  -- Get all case_ids that belong to top K variants
  SELECT cs.case_id
  FROM case_sequences cs
  INNER JOIN top_k_variants tkv ON cs.activity_sequence = tkv.activity_sequence
)

-- Step 4: Return all events from cases that belong to top K variants
SELECT el.*
FROM event_log el
INNER JOIN top_k_cases tkc ON el.case_id = tkc.case_id
ORDER BY el.case_id, el.timestamp;
```

**Key Components Explained:**

1. **`case_sequences` CTE**: 
   - Groups events by `case_id`
   - Uses `LIST_AGG(activity ORDER BY timestamp)` to create an ordered array of activities representing the complete sequence for each case
   - This maintains the temporal order as required

2. **`variant_counts` CTE**:
   - Groups the sequences to identify unique process variants
   - Counts occurrences of each variant (frequency)
   - Uses `ROW_NUMBER()` to rank variants by frequency in descending order

3. **`top_k_variants` CTE**:
   - Filters to keep only the top K variant sequences based on the rank
   - Note: Replace `K` with your desired number (e.g., 5 for top 5 variants)

4. **`top_k_cases` CTE**:
   - Joins back to identify all `case_id`s that belong to the top K variants

5. **Final SELECT**:
   - Returns all original events from the filtered cases
   - Preserves the original event log structure with all columns
   - Orders by `case_id` and `timestamp` for readability

**Usage Notes:**
- Replace `K` in the `WHERE variant_rank <= K` clause with your desired number of top variants
- The query preserves all original columns from `event_log` (`case_id`, `activity`, `timestamp`)
- Cases that don't belong to the top K variants are completely excluded from the result
- The final result maintains the temporal ordering within each case

**Example with K=3:**
```sql
-- In the top_k_variants CTE, replace the WHERE clause with:
WHERE variant_rank <= 3
```

This query efficiently handles the sequence extraction, variant identification, frequency counting, and filtering while maintaining the original event structure for the selected cases.