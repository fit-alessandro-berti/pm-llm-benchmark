**Step-by-Step Explanation:**

1. **Identify the Activities:**
   - Define each activity in the Purchase-to-Pay process as a `Transition` with a label.

2. **Create Choices:**
   - Use `OperatorPOWL` with `Operator.XOR` to model exclusive choices, such as different approval paths.

3. **Create Loops:**
   - Use `OperatorPOWL` with `Operator.LOOP` to model loops, such as re-submitting a requisition if rejected.

4. **Define Partial Order:**
   - Use `StrictPartialOrder` to define the partial order between the main components of the process.
   - Use `root.order.add_edge(source, target)` to set the execution order between components.

5. **Assemble the Model:**
   - Combine choices, loops, and activities into the overall partial order model.

**Python Code:**

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities as Transition objects
requisition_creation = Transition(label="Requisition Creation")
requisition_approval = Transition(label="Requisition Approval")
purchase_order_creation = Transition(label="Purchase Order Creation")
purchase_order_approval = Transition(label="Purchase Order Approval")
goods_receipt = Transition(label="Goods Receipt")
invoice_receipt = Transition(label="Invoice Receipt")
payment_processing = Transition(label="Payment Processing")
payment_approval = Transition(label="Payment Approval")
payment_execution = Transition(label="Payment Execution")

# Define silent transitions
skip = SilentTransition()

# Create a loop for requisition re-submission
requisition_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[requisition_creation, requisition_approval]
)

# Create a choice for different approval paths based on amount
# Here, we assume two paths: standard approval and executive approval
standard_approval = Transition(label="Standard Approval")
executive_approval = Transition(label="Executive Approval")
approval_choice = OperatorPOWL(
    operator=Operator.XOR,
    children=[standard_approval, executive_approval]
)

# Define partial order for the main process flow
# Nodes are the main components
root = StrictPartialOrder(nodes=[
    requisition_loop,
    purchase_order_creation,
    purchase_order_approval,
    goods_receipt,
    invoice_receipt,
    payment_processing,
    payment_approval,
    payment_execution
])

# Define the execution order
root.order.add_edge(requisition_loop, purchase_order_creation)
root.order.add_edge(purchase_order_creation, purchase_order_approval)
root.order.add_edge(purchase_order_approval, goods_receipt)
root.order.add_edge(goods_receipt, invoice_receipt)
root.order.add_edge(invoice_receipt, payment_processing)
root.order.add_edge(payment_processing, payment_approval)
root.order.add_edge(payment_approval, payment_execution)

# Integrate the approval choice after requisition approval
# Assuming the approval choice is part of the requisition loop
# Adjust the loop to include the approval choice
requisition_loop.children.append(approval_choice)
root.order.add_edge(requisition_loop, purchase_order_creation)
```

**Explanation:**

- **Activities:** Each step in the Purchase-to-Pay process is represented as a `Transition` with a descriptive label.
- **Loop:** The `requisition_loop` models the process where a requisition is created and approved, potentially looping back if rejected.
- **Choice:** The `approval_choice` models the exclusive choice between `standard_approval` and `executive_approval`.
- **Partial Order:** The `root` `StrictPartialOrder` defines the overall flow, setting the execution order of the main components.
- **Integration:** The approval choice is added to the requisition loop, and dependencies between components are established using `root.order.add_edge()`.