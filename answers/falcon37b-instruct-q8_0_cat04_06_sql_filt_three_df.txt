
### Solution:

To solve this problem using DuckDB SQL, we'll need to perform a multi-step query. Here's how we can achieve this:

1. **Identify Cases with the Specified Sequence:**
   - We first identify cases that contain the sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order' in direct succession without any other activities in between.

2. **Filter by Time Condition:**
   - From the identified cases, further filter those where the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.

3. **Exclude Cases Meeting Both Criteria:**
   - Finally, we exclude these cases from our final result.

Hereâ€™s a detailed DuckDB SQL query to achieve this:

```sql
WITH sequence_cases AS (
    SELECT case_id
    FROM (
        SELECT DISTINCT case_id, activity, LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
        LAG(LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp)) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev2_activity
        FROM event_log
        WHERE activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
    ) sub
    WHERE activity = 'Create Order'
      AND prev_activity = 'Approve Purchase Requisition'
      AND prev2_activity = 'Approve Purchase Requisition'
),
time_exceeds AS (
    SELECT case_id, MIN(timestamp) AS start_time
    FROM event_log
    WHERE activity IN ('Create Order', 'Confirm Order')
    GROUP BY case_id
)
SELECT event_log.*
FROM event_log
WHERE case_id NOT IN (
    SELECT case_id
    FROM sequence_cases
    INNER JOIN time_exceeds ON sequence_cases.case_id = time_exceeds.case_id
    WHERE timestamp_diff(day, start_time, MIN(timestamp)) > 5
)
```

### Explanation:

1. **sequence_cases CTE:**
   - This subquery identifies case IDs that have the exact sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order' in direct succession. It uses window functions `LAG` to check for the previous activities.

2. **time_exceeds CTE:**
   - This subquery finds the minimum timestamps of 'Create Order' and 'Confirm Order' events for each case ID, which will be used to calculate the time difference.

3. **Final SELECT:**
   - The final SELECT statement retrieves all rows from `event_log` except those that belong to cases (found in `sequence_cases`) where the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.

This query ensures that we correctly identify and exclude the specified cases, providing the desired result set.