```python
log_skeleton = {
    'equivalence': {
        ('Receive Order', 'Check Availability'),  # RO and CA should always happen together
        ('Pack Order', 'Generate Shipping Label') # PO and GSL should always happen together
    },
    'always_before': {
        ('Receive Order', 'Check Availability'),
        ('Check Availability', 'Reserve Items'),
        ('Reserve Items', 'Pick Items'),
        ('Pick Items', 'Quality Check'),
        ('Quality Check', 'Pack Order'),
        ('Pack Order', 'Generate Shipping Label'),
        ('Generate Shipping Label', 'Dispatch'),
        ('Receive Order', 'Invoice Customer') # Invoice should be after order received
    },
    'always_after': {
        ('Dispatch', 'Record Payment'), # RP should happen after D
        ('Invoice Customer', 'Record Payment') # RP should happen after IC
    },
    'never_together': {
        ('Reserve Items', 'Pick Items') # These shouldn't happen in the same case - a logical error if they do
    },
    'activ_freq': {
        'Receive Order': {1},  # RO must happen exactly once
        'Check Availability': {1}, # CA must happen exactly once
        'Reserve Items': {1},  # RI must happen exactly once
        'Pick Items': {1},  # PI must happen exactly once
        'Quality Check': {1},  # QC must happen exactly once
        'Pack Order': {1},  # PO must happen exactly once
        'Generate Shipping Label': {1}, # GSL must happen exactly once
        'Dispatch': {1},  # D must happen exactly once
        'Invoice Customer': {1}, # IC must happen exactly once
        'Record Payment': {0, 1}  # RP can happen 0 or 1 times (payment might be delayed)
    },
    'directly_follows': {
        ('Check Availability', 'Reserve Items'),
        ('Pick Items', 'Quality Check'),
        ('Quality Check', 'Pack Order'),
        ('Pack Order', 'Generate Shipping Label'),
        ('Generate Shipping Label', 'Dispatch')
    }
}

# Example usage (optional - for verification)
# print(log_skeleton)
```

**Explanation:**

1.  **`equivalence`**:  `RO` and `CA` are linked because an order must be checked for availability immediately after it's received. Similarly, `PO` and `GSL` are linked as they are sequential steps.
2.  **`always_before`**: This defines the natural order of the process.  Each activity must happen before the next in the sequence.  `RO` must happen before `IC` as you can't invoice before receiving the order.
3.  **`always_after`**: `Record Payment` must happen after `Dispatch` and `Invoice Customer`.
4.  **`never_together`**:  `Reserve Items` and `Pick Items` should not occur in the same case.  If they do, it indicates a process error (e.g., items were reserved twice).
5.  **`activ_freq`**:  Most activities are required to happen exactly once (`{1}`).  `Record Payment` is allowed to happen 0 or 1 times, as a customer might delay payment.
6.  **`directly_follows`**: Specifies activities that must occur immediately after each other. This adds more granularity to the process flow.

This `log_skeleton` dictionary accurately represents the constraints of the order fulfillment process described in the scenario.  It can be used for process mining, conformance checking, or other process analysis tasks.
