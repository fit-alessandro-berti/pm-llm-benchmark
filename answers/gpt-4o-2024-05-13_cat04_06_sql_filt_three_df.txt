To accomplish the requirements, we'll break down the task into a few steps and then combine them into a single DuckDB SQL query.

1. Identify `case_id`s that contain the specific sequence of activities in direct succession.
2. Filter cases based on the timing condition.
3. Exclude those cases from the final result.

Here's the complete DuckDB SQL query:

```sql
WITH ordered_events AS (
    SELECT 
        case_id, 
        activity, 
        timestamp,
        LEAD(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
        LAG(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_timestamp_1,
        LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity_1,
        LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity_2
    FROM 
        event_log
),
filtered_cases AS (
    SELECT 
        case_id
    FROM 
        ordered_events
    WHERE
        activity = 'Confirm Order'
        AND prev_activity_1 = 'Create Order'
        AND prev_activity_2 = 'Approve Purchase Requisition'
        AND (julianday(timestamp) - julianday(prev_timestamp_1)) > 5
),
excluded_cases AS (
    SELECT 
        DISTINCT case_id 
    FROM 
        filtered_cases
)
SELECT 
    * 
FROM 
    event_log 
WHERE 
    case_id NOT IN (SELECT case_id FROM excluded_cases)
ORDER BY 
    case_id, timestamp;
```

Explanation:

1. **ordered_events CTE**: This Common Table Expression orders events within each case and assigns the next and previous activities along with their timestamps. This is crucial to check the direct succession of the required activities.
2. **filtered_cases CTE**: This CTE filters the specific sequence of activities ('Approve Purchase Requisition', 'Create Order', and 'Confirm Order') in direct succession. Additionally, it checks if the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.
3. **excluded_cases CTE**: This CTE identifies unique `case_id`s that meet the criteria of the specific sequence and timing condition.
4. **Final SELECT statement**: This statement retrieves all events from `event_log` table except those belonging to the `case_id`s identified in the `excluded_cases` CTE.

The query ensures only events from cases not matching the specified sequence and timing criteria are returned, ordered by `case_id` and `timestamp`.