Sure! Here is an example of how you could define a process tree for a Purchase-to-Pay process using pm4py:
```
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Create the root node of the process tree
root = ProcessTree(operator=Operator.SEQUENCE)

# Create the "Request" node and add it as a child of the root node
request = ProcessTree(label="Request", parent=root)
root.children.append(request)

# Create the "Approve" node and add it as a child of the root node
approve = ProcessTree(label="Approve", parent=root)
root.children.append(approve)

# Create the "Order" node and add it as a child of the root node
order = ProcessTree(label="Order", parent=root)
root.children.append(order)

# Create the "Receive" node and add it as a child of the root node
receive = ProcessTree(label="Receive", parent=root)
root.children.append(receive)

# Create the "Invoice" node and add it as a child of the root node
invoice = ProcessTree(label="Invoice", parent=root)
root.children.append(invoice)

# Create the "Pay" node and add it as a child of the root node
pay = ProcessTree(label="Pay", parent=root)
root.children.append(pay)

# Create a sub-process tree for the "Approve" node
approve_seq = ProcessTree(operator=Operator.SEQUENCE)
approve_seq.children.append(ProcessTree(label="Check request", parent=approve_seq))
approve_seq.children.append(ProcessTree(label="Approve request", parent=approve_seq))
approve.children.append(approve_seq)

# Create a sub-process tree for the "Order" node
order_xor = ProcessTree(operator=Operator.XOR)
order_xor.children.append(ProcessTree(label="Order from supplier", parent=order_xor))
order_xor.children.append(ProcessTree(label="Create purchase order", parent=order_xor))
order.children.append(order_xor)

# Create a sub-process tree for the "Receive" node
receive_par = ProcessTree(operator=Operator.PARALLEL)
receive_par.children.append(ProcessTree(label="Inspect goods", parent=receive_par))
receive_par.children.append(ProcessTree(label="Update inventory", parent=receive_par))
receive.children.append(receive_par)

# Create a sub-process tree for the "Invoice" node
invoice_loop = ProcessTree(operator=Operator.LOOP)
invoice_loop.children.append(ProcessTree(label="Receive invoice", parent=invoice_loop))
invoice_loop.children.append(ProcessTree(label="Check invoice", parent=invoice_loop))
invoice_loop.children.append(ProcessTree(label="Reject invoice", parent=invoice_loop))
invoice_loop.children.append(ProcessTree(label="Approve invoice", parent=invoice_loop))
invoice.children.append(invoice_loop)
```
This process tree defines a sequence of activities for a Purchase-to-Pay process, with some branches and loops for certain activities. The `Request` activity is executed first, followed by the `Approve`, `Order`, `Receive`, `Invoice`, and `Pay` activities in sequence. The `Approve` activity consists of a sequence of two activities: `Check request` and `Approve request`. The `Order` activity has an exclusive choice between two activities: `Order from supplier` and `Create purchase order`. The `Receive` activity consists of two activities that are executed in parallel: `Inspect goods` and `Update inventory`. The `Invoice` activity is a loop that starts with the `Receive invoice` activity and ends with the `Approve invoice` activity. The loop can be exited at any time by executing the `Reject invoice` activity.

I hope this helps! Let me know if you have any questions.