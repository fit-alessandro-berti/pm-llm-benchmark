## Anomalies, Hypotheses, and Verification Queries

**Anomalies:**

*   **Receive to Approve (R to P):** Very short average time (25 hours) with a low standard deviation.
*   **Approve to Notify (P to N):** Extremely long average time (7 days) with a high standard deviation.
*   **Assign to Close (A to C):** Relatively quick closure (2 hours) after assignment.
*   **Evaluate to Notify (E to N):** Very short average time (5 minutes).

**Hypotheses:**

*   **R to P:**  A rigid approval process, potentially automated, that forces claims to be approved quickly regardless of complexity.  Could be a service level agreement (SLA) target being aggressively pursued.
*   **P to N:**  Notification is backlogged due to resource constraints (e.g., a single notification specialist), or the notification process is not automated and relies on manual intervention.  Could also indicate a prioritization system where some claims are notified quickly while others are delayed.
*   **A to C:** Claims are being prematurely closed, possibly due to errors in the claim handling process or a desire to reduce workload.  Could also be a specific type of claim that is handled very quickly.
*   **E to N:** The evaluation and notification steps are combined into a single automated process, or the evaluation is superficial and doesn's require a full review before notification.

**Verification Queries (SQL):**

1.  **Verify R to P Anomaly:** Find claims where the time between Receive and Approve exceeds a threshold (e.g., 36 hours).

    ```sql
    SELECT claim_id
    FROM claim_events
    WHERE activity = 'R'
    AND claim_id IN (
        SELECT claim_id
        FROM claim_events
        WHERE activity = 'P'
    )
    AND TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM claim_events WHERE activity = 'R' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1), (SELECT timestamp FROM claim_events WHERE activity = 'P' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1)) > 3600 * 36;
    ```

2.  **Verify P to N Anomaly:** Find claims where the time between Approve and Notify is exceptionally long.

    ```sql
    SELECT claim_id
    FROM claim_events
    WHERE activity = 'P'
    AND claim_id IN (
        SELECT claim_id
        FROM claim_events
        WHERE activity = 'N'
    )
    AND TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM claim_events WHERE activity = 'P' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1), (SELECT timestamp FROM claim_events WHERE activity = 'N' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1)) > 604800 * 2;
    ```

3.  **Verify A to C Anomaly:** Find claims closed quickly after assignment.

    ```sql
    SELECT claim_id
    FROM claim_events
    WHERE activity = 'A'
    AND claim_id IN (
        SELECT claim_id
        FROM claim_events
        WHERE activity = 'C'
    )
    AND TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM claim_events WHERE activity = 'A' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1), (SELECT timestamp FROM claim_events WHERE activity = 'C' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1)) < 3600 * 2;
    ```

4.  **Verify E to N Anomaly:** Find claims where evaluation and notification are very close together.

    ```sql
    SELECT claim_id
    FROM claim_events
    WHERE activity = 'E'
    AND claim_id IN (
        SELECT claim_id
        FROM claim_events
        WHERE activity = 'N'
    )
    AND TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM claim_events WHERE activity = 'E' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1), (SELECT timestamp FROM claim_events WHERE activity = 'N' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1)) < 300;
    ```

5.  **Correlate P to N with Adjuster:** Find adjusters responsible for claims with long Approve to Notify times.

    ```sql
    SELECT adjusters.name, COUNT(claim_events.claim_id) AS num_delayed_claims
    FROM claim_events
    JOIN claim_events AS p ON claim_events.claim_id = p.claim_id AND p.activity = 'N'
    JOIN claims ON claim_events.claim_id = claims.claim_id
    JOIN claim_events AS a ON claim_events.claim_id = a.claim_id AND a.activity = 'A'
    JOIN adjusters ON a.resource = adjusters.name
    WHERE TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM claim_events WHERE activity = 'P' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1), (SELECT timestamp FROM claim_events WHERE activity = 'N' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1)) > 604800
    GROUP BY adjusters.name
    ORDER BY num_delayed_claims DESC;
    ```

6.  **Correlate A to C with Claim Type:** Find claim types that are closed quickly after assignment.

    ```sql
    SELECT claims.claim_type, COUNT(claim_events.claim_id) AS num_quick_closures
    FROM claim_events
    JOIN claims ON claim_events.claim_id = claims.claim_id
    WHERE activity = 'A'
    AND claim_id IN (
        SELECT claim_id
        FROM claim_events
        WHERE activity = 'C'
    )
    AND TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM claim_events WHERE activity = 'A' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1), (SELECT timestamp FROM claim_events WHERE activity = 'C' AND claim_id = claim_events.claim_id ORDER BY timestamp ASC LIMIT 1)) < 3600 * 2
    GROUP BY claims.claim_type
    ORDER BY num_quick_closures DESC;
    ```
