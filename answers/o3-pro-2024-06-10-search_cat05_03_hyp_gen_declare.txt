ANOMALIES IN THE DECLARE MODEL

1. Mandatory Close vs. Forbidden Evaluation  
   • Existence(C) forces every trace to contain at least one C (Close).  
   • NonCoexistence(E, C) forbids any trace from containing both E (Evaluate) and C.  
    Because C is compulsory, E becomes impossible—even though evaluation is a normal step.  
    The model guarantees that no claim can ever be evaluated.

2. Reversed Responsibility Chain  
   • RespondedExistence(E  A) states that whenever E happens, A (Assign Adjuster) must eventually occur (formally, after or anywhere).  
   • In a normal claims process an adjuster is assigned before evaluation, not after.  
    Either A can occur twice (before and after) or the constraint enforces an illogical order.

3. Unidirectional Precedence Only on the First/Last Activities  
   • Precedence(C  R) allows any activities between R and C, but does not restrict their order relative to each other.  
   • Because no other ordering rules exist, the model allows paths such as R  C  E (which is still illegal by NonCoexistence), or R  C  N with no adjuster ever assigned.

4. Dead Constraint  
   • RespondedExistence(E  A) references E—yet E is rendered impossible by anomaly 1.  
   • A constraint that can never be activated is a modelling smell: it inflates conformance metrics while adding no real control.

5. Incomplete Init Specification  
   • Init(R) alone does not prohibit multiple R events or later occurrences of R.  
   • Combined with lack of ordering rules, a claim could be reopened (another R) after being closed.

HYPOTHESES FOR THEIR ORIGIN

1. Requirement Drift  
   – Older rules mandating every claim be closed were kept, while newer rules forbidding “evaluate after close” were added without reconciliation.

2. Misunderstood Declare Templates  
   – Modeler may have confused Responded Existence with Precedence, or Non-Coexistence with Not-After, leading to inverted or over-strict constraints.

3. Incremental Mining Noise  
   – Automated discovery from an event log with incomplete data (e.g., missing E events due to system migration) can generate NonCoexistence(E,C) even though the true process needs both.

4. Performance-Driven Over-Simplification  
   – To reduce cycle-time, someone experimented with “straight-through processing” (receive--close) and encoded it as mandatory close/no evaluation, but left older evaluation-related rules in place.

5. Data Mapping Errors  
   – If some evaluations were logged under a different code, the mining algorithm saw zero E events coexisting with C and inferred NonCoexistence.

SQL-BASED VERIFICATION STRATEGIES

1. Claims closed without any evaluation  
```sql
SELECT c.claim_id
FROM claims        AS c
JOIN claim_events  AS e_c
  ON e_c.claim_id = c.claim_id
WHERE e_c.activity = 'C'
  AND NOT EXISTS (
        SELECT 1
        FROM claim_events AS e_e
        WHERE e_e.claim_id = c.claim_id
          AND e_e.activity = 'E'
      );
```

2. Traces where evaluation and close both occur (should be impossible per model)  
```sql
SELECT claim_id
FROM claim_events
WHERE activity IN ('E','C')
GROUP BY claim_id
HAVING COUNT(DISTINCT activity) = 2;
```

3. Order of Assign vs. Evaluate  
   a. Assignments that happened after evaluation (contradicts business logic but satisfies the model):  
```sql
WITH ae AS (
  SELECT claim_id,
         MIN(CASE WHEN activity = 'A' THEN timestamp END) AS first_A,
         MIN(CASE WHEN activity = 'E' THEN timestamp END) AS first_E
  FROM claim_events
  WHERE activity IN ('A','E')
  GROUP BY claim_id
)
SELECT claim_id, first_E, first_A
FROM ae
WHERE first_E IS NOT NULL
  AND first_A IS NOT NULL
  AND first_A > first_E;
```

   b. Evaluations without any assign (violates RespondedExistence)  
```sql
SELECT DISTINCT claim_id
FROM claim_events
WHERE activity = 'E'
EXCEPT
SELECT DISTINCT claim_id
FROM claim_events
WHERE activity = 'A';
```

4. Close occurring before Receive (violates Precedence)  
```sql
WITH rc AS (
  SELECT claim_id,
         MIN(CASE WHEN activity = 'R' THEN timestamp END) AS first_R,
         MIN(CASE WHEN activity = 'C' THEN timestamp END) AS first_C
  FROM claim_events
  WHERE activity IN ('R','C')
  GROUP BY claim_id
)
SELECT claim_id, first_R, first_C
FROM rc
WHERE first_C < first_R;
```

5. Multiple Receive events after Close (re-open pattern)  
```sql
WITH rc AS (
  SELECT claim_id,
         MAX(CASE WHEN activity = 'C' THEN timestamp END) AS last_C
  FROM claim_events
  GROUP BY claim_id
)
SELECT e.claim_id, e.timestamp AS extra_R_after_C
FROM claim_events e
JOIN rc
  ON rc.claim_id = e.claim_id
WHERE e.activity = 'R'
  AND e.timestamp > rc.last_C;
```

6. Ensure evaluation resources are actual adjusters with matching specialization  
```sql
SELECT ce.claim_id,
       ce.resource        AS evaluator,
       a.adjuster_id,
       a.specialization,
       c.claim_type
FROM claim_events ce
JOIN adjusters    a ON a.name = ce.resource
JOIN claims       c ON c.claim_id = ce.claim_id
WHERE ce.activity = 'E'
  AND (a.adjuster_id IS NULL
       OR CASE
            WHEN c.claim_type LIKE '%home%' THEN a.specialization <> 'home'
            WHEN c.claim_type LIKE '%auto%' THEN a.specialization <> 'auto'
            ELSE TRUE
          END);
```

Running these queries highlights whether the contradictory model reflects real execution problems or merely modelling artefacts.