Certainly! Below is a DuckDB SQL query fulfilling all your requirements.

Let's assume you define `K` as a parameter (replace `{{K}}` with your desired integer, e.g., `5`):

```sql
-- Step 1: Construct ordered sequence of activities per case
WITH case_variants AS (
    SELECT
        case_id,
        string_agg(activity, '->' ORDER BY timestamp) AS variant_sequence
    FROM event_log
    GROUP BY case_id
),

-- Step 2: Count frequency of each variant
variant_counts AS (
    SELECT
        variant_sequence,
        COUNT(*) AS num_cases
    FROM case_variants
    GROUP BY variant_sequence
),

-- Step 3: Select top K variants by case count
top_k_variants AS (
    SELECT
        variant_sequence
    FROM variant_counts
    ORDER BY num_cases DESC
    LIMIT {{K}}
),

-- Step 4: Get case_ids belonging to top K variants
top_k_cases AS (
    SELECT
        cv.case_id
    FROM case_variants cv
    JOIN top_k_variants v
        ON cv.variant_sequence = v.variant_sequence
)

-- Step 5: Return all events from those case_ids
SELECT e.*
FROM event_log e
JOIN top_k_cases tkc
    ON e.case_id = tkc.case_id;
```

###  **Instructions/Highlights**:

- Replace `{{K}}` with your desired integer for top variants (e.g., `5`).
- The sequence separator `'->'` in `string_agg` can be changed as needed.
- The query preserves activity ordering **by timestamp** within each case.
- In case of ties in variant frequency at the cutoff, only the first K variants (according to sorting) are retained.
- Returns **all events** of cases with a top-K variant.

---

Let me know if you want an explanation or adaptation for other SQL dialects!