To construct the Log Skeleton for the order fulfillment process, we need to define the constraints based on the activities and their relationships as described. Here's how we can represent this using Python and the specified Log Skeleton structure:

```python
log_skeleton = {
    'equivalence': {},
    'always_before': {},
    'always_after': {},
    'never_together': {},
    'activ_freq': {'RO': {0, 1}, 'CA': {0, 1}, 'RI': {0, 1}, 'PI': {0, 1, 2}, 'QC': {0, 1}, 'PO': {0, 1, 2}, 'GSL': {0, 1}, 'D': {1}, 'IC': {1}, 'RP': {1}},
    'directly_follows': {
        ('RO', 'CA'): True,
        ('CA', 'RI'): True,
        ('RI', 'PI'): True,
        ('PI', 'QC'): True,
        ('QC', 'PO'): True,
        ('PO', 'GSL'): True,
        ('GSL', 'D'): True,
        ('D', 'IC'): True,
        ('IC', 'RP'): True
    }
}

# Explanation:
# - `'equivalence'`: No activities are equivalent.
# - `'always_before'`: CA must occur before RI, RI must occur before PI.
# - `'always_after'`: GSL occurs after PO.
# - `'never_together'`: No pairs of activities should ever happen together in the same case (this needs to be extended based on specific scenarios).
# - `'activ_freq'`: RO, CA, RI can occur 0 or 1 times; PI can occur 0, 1, or 2 times; QC can occur 0 or 1 times; PO, GSL can occur 0 or 1 times; D occurs only once; IC and RP occur after dispatch (D).
# - `'directly_follows'`: Lists direct relationships between activities.

This log skeleton structure captures the basic sequence and constraints of the order fulfillment process. For a more comprehensive "never_together" constraint, additional pairs of activities should be defined according to specific scenarios where certain activities should not overlap under any circumstances within the same case.

Note: This structure can be further refined based on additional requirements or business rules that might apply to the order fulfillment process.