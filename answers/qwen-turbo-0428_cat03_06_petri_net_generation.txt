```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define places
start_place = PetriNet.Place("Start")
cr_done = PetriNet.Place("CR_done")
dv_done = PetriNet.Place("DV_done")
fc_start = PetriNet.Place("FC_start")
fc_done = PetriNet.Place("FC_done")
ca_start = PetriNet.Place("CA_start")
ap_start = PetriNet.Place("AP_start")
p_start = PetriNet.Place("P_start")
n_start = PetriNet.Place("N_start")
cl_done = PetriNet.Place("CL_done")
rds_start = PetriNet.Place("RDS_start")
rds_done = PetriNet.Place("RDS_done")
ii_start = PetriNet.Place("II_start")
ii_done = PetriNet.Place("II_done")

# Add places to the net
net.places.add(start_place)
net.places.add(cr_done)
net.places.add(dv_done)
net.places.add(fc_start)
net.places.add(fc_done)
net.places.add(ca_start)
net.places.add(ap_start)
net.places.add(p_start)
net.places.add(n_start)
net.places.add(cl_done)
net.places.add(rds_start)
net.places.add(rds_done)
net.places.add(ii_start)
net.places.add(ii_done)

# Define transitions
cr_trans = PetriNet.Transition("CR", "CR")
dv_trans = PetriNet.Transition("DV", "DV")
dv_check_trans = PetriNet.Transition("DV_check", "DV_check")
rds_trans = PetriNet.Transition("RDS", "RDS")
fc_trans = PetriNet.Transition("FC", "FC")
fc_check_trans = PetriNet.Transition("FC_check", "FC_check")
ii_trans = PetriNet.Transition("II", "II")
ca_trans = PetriNet.Transition("CA", "CA")
ap_trans = PetriNet.Transition("AP", "AP")
p_trans = PetriNet.Transition("P", "P")
n_trans = PetriNet.Transition("N", "N")
cl_trans = PetriNet.Transition("CL", "CL")

# Add transitions to the net
net.transitions.add(cr_trans)
net.transitions.add(dv_trans)
net.transitions.add(dv_check_trans)
net.transitions.add(rds_trans)
net.transitions.add(fc_trans)
net.transitions.add(fc_check_trans)
net.transitions.add(ii_trans)
net.transitions.add(ca_trans)
net.transitions.add(ap_trans)
net.transitions.add(p_trans)
net.transitions.add(n_trans)
net.transitions.add(cl_trans)

# Add arcs
# Start -> CR -> CR_done
petri_utils.add_arc_from_to(start_place, cr_trans, net)
petri_utils.add_arc_from_to(cr_trans, cr_done, net)

# CR_done -> DV -> DV_done
petri_utils.add_arc_from_to(cr_done, dv_trans, net)
petri_utils.add_arc_from_to(dv_trans, dv_done, net)

# DV_done -> DV_check -> FC_start and RDS_start
petri_utils.add_arc_from_to(dv_done, dv_check_trans, net)
petri_utils.add_arc_from_to(dv_check_trans, fc_start, net)
petri_utils.add_arc_from_to(dv_check_trans, rds_start, net)

# FC_start -> FC -> FC_done
petri_utils.add_arc_from_to(fc_start, fc_trans, net)
petri_utils.add_arc_from_to(fc_trans, fc_done, net)

# FC_done -> FC_check -> CA_start and II_start
petri_utils.add_arc_from_to(fc_done, fc_check_trans, net)
petri_utils.add_arc_from_to(fc_check_trans, ca_start, net)
petri_utils.add_arc_from_to(fc_check_trans, ii_start, net)

# CA_start -> CA -> AP_start
petri_utils.add_arc_from_to(ca_start, ca_trans, net)
petri_utils.add_arc_from_to(ca_trans, ap_start, net)

# AP_start -> AP -> P_start
petri_utils.add_arc_from_to(ap_start, ap_trans, net)
petri_utils.add_arc_from_to(ap_trans, p_start, net)

# P_start -> P -> N_start
petri_utils.add_arc_from_to(p_start, p_trans, net)
petri_utils.add_arc_from_to(p_trans, n_start, net)

# N_start -> N -> CL_done
petri_utils.add_arc_from_to(n_start, n_trans, net)
petri_utils.add_arc_from_to(n_trans, cl_done, net)

# RDS loop: RDS_start -> RDS -> RDS_done -> DV_done
petri_utils.add_arc_from_to(rds_start, rds_trans, net)
petri_utils.add_arc_from_to(rds_trans, rds_done, net)
petri_utils.add_arc_from_to(rds_done, dv_done, net)

# II loop: II_start -> II -> II_done -> FC_done
petri_utils.add_arc_from_to(ii_start, ii_trans, net)
petri_utils.add_arc_from_to(ii_trans, ii_done, net)
petri_utils.add_arc_from_to(ii_done, fc_done, net)

# Initial marking: Start place has 1 token
im = Marking()
im[start_place] = 1

# Final marking: CL_done place has 1 token
fm = Marking()
fm[cl_done] = 1
```

---

### Explanation:
- **Places** represent states (e.g., `Start`, `CR_done`, `DV_done`, `CL_done`).
- **Transitions** represent activities (e.g., `CR`, `DV`, `RDS`, `II`).
- **Arcs** connect places and transitions to model the flow of tokens.
- **Loops** are modeled using feedback arcs (e.g., `RDS` and `II` loops back to earlier places).
- **Initial marking** starts with a token in the `Start` place.
- **Final marking** is reached when the `CL_done` place is marked.