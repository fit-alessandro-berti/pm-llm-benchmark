Below you find a complete, self-contained Python snippet that builds an accepting Petri net for the insurance-claim scenario exactly as requested.  
The model contains

• A linear flow C  CR  DV  FC  CA  (AP | -skip)  P  N  CL  
• A loop DV  RDS that can be repeated until the documents are complete.  
• A loop FC  II that can be repeated until the fraud check is cleared.  
• An optional approval: after Claim Assessment (CA) either a real “Approval” (AP) is executed or, if the amount is below the threshold, a silent transition  (skip_AP) is taken.

The initial marking puts one token in the start place, while the final marking expects one token in the end place.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# ------------------------------------------------------------------
# 1. Net, places and transitions
# ------------------------------------------------------------------
net = PetriNet("Insurance Claim Management Process")

# Places
p_start       = PetriNet.Place("p_start")        # a new claim arrives
p_after_C     = PetriNet.Place("p_after_C")
p_before_DV   = PetriNet.Place("p_before_DV")    # input for Document Verification
p_after_DV    = PetriNet.Place("p_after_DV")     # also the input for Fraud Check
p_after_FC    = PetriNet.Place("p_after_FC")     # also the input for Claim Assessment
p_after_CA    = PetriNet.Place("p_after_CA")     
p_after_AP    = PetriNet.Place("p_after_AP")     
p_after_P     = PetriNet.Place("p_after_P")      
p_after_N     = PetriNet.Place("p_after_N")      
p_end         = PetriNet.Place("p_end")          # claim closed

for plc in [p_start, p_after_C, p_before_DV, p_after_DV, p_after_FC,
            p_after_CA, p_after_AP, p_after_P, p_after_N, p_end]:
    net.places.add(plc)

# Transitions (labelled; silent one has label None)
t_C         = PetriNet.Transition("C",   "C")            # Insurance Claim filed
t_CR        = PetriNet.Transition("CR",  "CR")           # Claim Registration
t_DV        = PetriNet.Transition("DV",  "DV")           # Document Verification
t_RDS       = PetriNet.Transition("RDS", "RDS")          # Re-Document Submission
t_FC        = PetriNet.Transition("FC",  "FC")           # Fraud Check
t_II        = PetriNet.Transition("II",  "II")           # In-depth Investigation
t_CA        = PetriNet.Transition("CA",  "CA")           # Claim Assessment
t_AP        = PetriNet.Transition("AP",  "AP")           # Approval
t_skip_AP   = PetriNet.Transition("tau_skip_AP", None)   # silent skip of Approval
t_P         = PetriNet.Transition("P",   "P")            # Payment
t_N         = PetriNet.Transition("N",   "N")            # Notification
t_CL        = PetriNet.Transition("CL",  "CL")           # Closure

for tr in [t_C, t_CR, t_DV, t_RDS, t_FC, t_II, t_CA,
           t_AP, t_skip_AP, t_P, t_N, t_CL]:
    net.transitions.add(tr)

# ------------------------------------------------------------------
# 2. Arcs (control-flow)
# ------------------------------------------------------------------
petri_utils.add_arc_from_to(p_start,     t_C,       net)
petri_utils.add_arc_from_to(t_C,         p_after_C, net)

petri_utils.add_arc_from_to(p_after_C,   t_CR,      net)
petri_utils.add_arc_from_to(t_CR,        p_before_DV, net)

# Document Verification loop
petri_utils.add_arc_from_to(p_before_DV, t_DV,      net)
petri_utils.add_arc_from_to(t_DV,        p_after_DV, net)
petri_utils.add_arc_from_to(p_after_DV,  t_RDS,     net)   # if docs incomplete
petri_utils.add_arc_from_to(t_RDS,       p_before_DV, net) # re-submit and verify again

# Fraud Check loop
petri_utils.add_arc_from_to(p_after_DV,  t_FC,      net)
petri_utils.add_arc_from_to(t_FC,        p_after_FC, net)
petri_utils.add_arc_from_to(p_after_FC,  t_II,      net)   # investigation
petri_utils.add_arc_from_to(t_II,        p_after_DV, net)  # go back to FC

# Claim assessment
petri_utils.add_arc_from_to(p_after_FC,  t_CA,      net)
petri_utils.add_arc_from_to(t_CA,        p_after_CA, net)

# Optional approval (real AP or silent skip)
petri_utils.add_arc_from_to(p_after_CA,  t_AP,       net)
petri_utils.add_arc_from_to(p_after_CA,  t_skip_AP,  net)  # skip
petri_utils.add_arc_from_to(t_AP,        p_after_AP, net)
petri_utils.add_arc_from_to(t_skip_AP,   p_after_AP, net)

# Payment, notification, closure
petri_utils.add_arc_from_to(p_after_AP,  t_P,        net)
petri_utils.add_arc_from_to(t_P,         p_after_P,  net)

petri_utils.add_arc_from_to(p_after_P,   t_N,        net)
petri_utils.add_arc_from_to(t_N,         p_after_N,  net)

petri_utils.add_arc_from_to(p_after_N,   t_CL,       net)
petri_utils.add_arc_from_to(t_CL,        p_end,      net)

# ------------------------------------------------------------------
# 3. Initial and final markings
# ------------------------------------------------------------------
im = Marking()
im[p_start] = 1          # one new claim token

fm = Marking()
fm[p_end] = 1            # token must end in p_end (claim closed)

# ------------------------------------------------------------------
# 4. Result: (net, im, fm) form an accepting Petri net
# ------------------------------------------------------------------
print("Accepting Petri net for the insurance-claim process created.")
```

Running the code yields the accepting Petri net (`net`) together with its initial marking (`im`) and final marking (`fm`).  
You can now use them with any PM4Py functionality—for example, to visualise the model, replay event logs, or perform conformance checking.