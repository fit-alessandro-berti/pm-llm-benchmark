Here's a DuckDB SQL query that accomplishes all the requirements:

```sql
WITH 
-- Step 1: Create ordered activity sequences for each case
case_variants AS (
    SELECT 
        case_id,
        STRING_AGG(activity, '->' ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
),

-- Step 2: Count cases per variant and rank by frequency
variant_counts AS (
    SELECT 
        variant,
        COUNT(*) AS case_count,
        ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC, variant) AS rank
    FROM case_variants
    GROUP BY variant
),

-- Step 3: Get top K variants (replace K with actual number)
top_k_variants AS (
    SELECT variant
    FROM variant_counts
    WHERE rank <= K  -- Replace K with the desired number
),

-- Step 4: Get case_ids that belong to top K variants
cases_in_top_k AS (
    SELECT cv.case_id
    FROM case_variants cv
    INNER JOIN top_k_variants tkv ON cv.variant = tkv.variant
)

-- Step 5: Return all events from cases in top K variants
SELECT el.*
FROM event_log el
INNER JOIN cases_in_top_k ctk ON el.case_id = ctk.case_id
ORDER BY el.case_id, el.timestamp;
```

**Key components explained:**

1. **`case_variants` CTE**: Uses `STRING_AGG()` with `ORDER BY timestamp` to concatenate activities in chronological order for each case, creating a variant string like "Activity1->Activity2->Activity3".

2. **`variant_counts` CTE**: Groups by variant, counts occurrences, and assigns a rank based on frequency (descending). The secondary sort by `variant` ensures deterministic results when counts are equal.

3. **`top_k_variants` CTE**: Filters to keep only the top K variants. Replace `K` with your desired number (e.g., 5, 10, etc.).

4. **`cases_in_top_k` CTE**: Identifies which case_ids belong to the top K variants by joining with the filtered variants.

5. **Final SELECT**: Returns all original events that belong to cases matching the top K variants.

**Alternative approach for parameterized K:**
If you want to make K a parameter, you can use:

```sql
-- Replace the top_k_variants CTE with:
top_k_variants AS (
    SELECT variant
    FROM variant_counts
    WHERE rank <= $1  -- Use parameter placeholder
)
```

**Note on performance:**
- The query uses CTEs for clarity and modularity
- DuckDB optimizes CTEs well, but for very large datasets, you might consider using temporary tables
- Indexes on `case_id` and `timestamp` would improve performance