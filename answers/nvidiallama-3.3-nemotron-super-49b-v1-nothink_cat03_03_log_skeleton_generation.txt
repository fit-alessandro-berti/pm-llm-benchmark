### Log Skeleton Construction for Order Fulfillment Process

Below is the Python dictionary representing the Log Skeleton for the described order fulfillment process. The constraints are defined based on the logical sequence and dependencies of the activities involved in the process.

```python
log_skeleton = {
    'equivalence': set(),  # No direct equivalences defined in the scenario
    'always_before': {
        ('RO', 'CA'),  # Receive Order must happen before Check Availability
        ('CA', 'RI'),  # Check Availability before Reserve Items
        ('RI', 'PI'),  # Reserve Items before Pick Items
        ('PI', 'QC'),  # Pick Items before Quality Check
        ('QC', 'PO'),  # Quality Check before Pack Order
        ('PO', 'GSL'),  # Pack Order before Generate Shipping Label
        ('GSL', 'D'),   # Generate Shipping Label before Dispatch
        ('D', 'IC'),    # Dispatch before Invoice Customer (assuming invoice sent after dispatch)
        ('IC', 'RP')   # Invoice Customer before Record Payment
    },
    'always_after': set(),  # Covered by 'always_before' for simplicity in this linear process
    'never_together': set(),  # No scenarios where activities cannot co-exist in the same case
    'activ_freq': {
        'RO': {1},  # Each case starts with exactly one Receive Order
        'CA': {1},  # One Check Availability per order
        'RI': {1},  # Reserve Items exactly once per order
        'PI': {1},  # Pick Items once per order
        'QC': {1},  # Quality Check occurs once per order
        'PO': {1},  # Pack Order once per order
        'GSL': {1},  # Generate Shipping Label once per order
        'D': {1},   # Dispatch once per order
        'IC': {1},  # Invoice Customer once per order
        'RP': {1}   # Record Payment once per successful invoice
    },
    'directly_follows': {
        ('RO', 'CA'),  # Receive Order is directly followed by Check Availability
        ('CA', 'RI'),  # Check Availability directly followed by Reserve Items
        ('RI', 'PI'),  # Reserve Items directly followed by Pick Items
        ('PI', 'QC'),  # Pick Items directly followed by Quality Check
        ('QC', 'PO'),  # Quality Check directly followed by Pack Order
        ('PO', 'GSL'),  # Pack Order directly followed by Generate Shipping Label
        ('GSL', 'D'),   # Generate Shipping Label directly followed by Dispatch
        ('D', 'IC'),    # Dispatch directly followed by Invoice Customer
        ('IC', 'RP')   # Invoice Customer directly followed by Record Payment
    }
}
```

### Explanation and Assumptions:

- **Linear Process Assumption**: The process is modeled as largely linear for simplicity, reflecting a common order fulfillment workflow. In real-world scenarios, there might be parallel activities or loops (e.g., re-checking availability if initial reservation fails), which are not captured here due to the simplicity requested.
  
- **Always Before vs. Always After**: Given the linear nature, `always_after` is left empty as the relationships are fully expressed through `always_before`. In a more complex model with branching, `always_after` might be used to specify dependencies not linearly sequential.

- **Never Together**: Since all activities are part of a sequential flow without mentioned constraints against concurrent execution within the same case (aside from the implicit sequence), this set remains empty.

- **Activity Frequencies**: Each activity is set to occur exactly once per case, assuming a straightforward, successful fulfillment process without retries or optional steps. Real processes might allow for variations (e.g., multiple `QC` steps).

- **Equivalence**: No activities are considered equivalent in this scenario, as each serves a distinct purpose.

### Example Usage:

To validate or utilize this `log_skeleton`, you might write functions to check compliance of a given process log against these constraints. For instance:

```python
def check_compliance(process_log, log_skeleton):
    # Simplified example: Check 'always_before' constraint
    for activity1, activity2 in log_skeleton['always_before']:
        indices1 = [i for i, x in enumerate(process_log) if x == activity1]
        indices2 = [i for i, x in enumerate(process_log) if x == activity2]
        for idx1 in indices1:
            if not any(idx2 < idx1 for idx2 in indices2):
                return False, f"Violation: {activity1} not before {activity2}"
    return True, "Compliant"

# Example Process Log
process_log = ['RO', 'CA', 'RI', 'PI', 'QC', 'PO', 'GSL', 'D', 'IC', 'RP']

compliant, message = check_compliance(process_log, log_skeleton)
print(message)
```

This example checks if every occurrence of `activity1` is indeed before `activity2` for all pairs defined in `always_before`, ensuring the process log adheres to the defined order. For a full implementation, similar checks would be needed for other constraints.