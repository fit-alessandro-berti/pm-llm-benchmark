To achieve this in DuckDB, we need to identify and exclude specific sequences of activities with their associated timing constraints. We will use a combination of window functions, common table expressions (CTEs), and filtering conditions to accomplish this.

Here is the step-by-step SQL query:

```sql
WITH activity_sequence AS (
    -- First, find all cases that contain the sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order'
    SELECT 
        case_id,
        LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
        activity,
        LEAD(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity
    FROM event_log
),
filtered_cases AS (
    -- Filter cases that contain the exact sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order'
    SELECT 
        case_id
    FROM activity_sequence
    WHERE prev_activity = 'Approve Purchase Requisition' AND activity = 'Create Order' AND next_activity = 'Confirm Order'
),
filtered_events AS (
    -- Find the events that belong to the filtered cases and where the time between 'Create Order' and 'Confirm Order' is more than 5 days
    SELECT 
        case_id,
        timestamp,
        activity
    FROM event_log
    WHERE case_id IN (SELECT case_id FROM filtered_cases)
    AND (activity = 'Create Order' OR activity = 'Confirm Order')
),
sequence_events AS (
    -- Find the exact sequence of events for the identified cases that do not meet the timing constraint
    SELECT 
        case_id,
        timestamp,
        activity
    FROM event_log
    WHERE case_id IN (SELECT case_id FROM filtered_cases)
    AND EXISTS (
        SELECT 1
        FROM activity_sequence
        WHERE case_id = event_log.case_id
        AND LAG(activity) OVER (ORDER BY timestamp) = 'Approve Purchase Requisition'
        AND activity = 'Create Order'
        AND LEAD(activity) OVER (ORDER BY timestamp) = 'Confirm Order'
    )
),
final_result AS (
    -- Exclude the sequence events from all events in the original log
    SELECT 
        case_id,
        timestamp,
        activity
    FROM event_log
    WHERE NOT EXISTS (SELECT 1 FROM sequence_events WHERE event_log.case_id = sequence_events.case_id AND event_log.timestamp BETWEEN sequence_events.timestamp - INTERVAL '5 days' AND sequence_events.timestamp)
)
-- Return the final result set excluding events from cases that match the specific sequence and timing condition.
SELECT 
    *
FROM final_result
ORDER BY case_id, timestamp;
```

### Explanation:

1. **activity_sequence CTE**: This CTE uses window functions `LAG` and `LEAD` to identify potential sequences of activities in each `case_id`. The `LAG(activity)` and `LEAD(activity)` give us the previous and next activity for each row within a case, ordered by timestamp.

2. **filtered_cases CTE**: This CTE filters out cases where the exact sequence 'Approve Purchase Requisition', 'Create Order', 'Confirm Order' is present.

3. **filtered_events CTE**: This CTE finds events from these filtered cases that are either 'Create Order' or 'Confirm Order'. 

4. **sequence_events CTE**: This CTE identifies specific sequences where the time between 'Create Order' and 'Confirm Order' is more than 5 days for the identified cases.

5. **final_result CTE**: This CTE excludes events from `event_log` that belong to cases with the specified sequence and timing condition by using a `NOT EXISTS` clause in combination with a range check (within 5 days).

6. **Final SELECT Statement**: The final query returns all rows from `event_log` except those identified as part of sequences matching both criteria.

This approach ensures that only events not meeting the specified conditions are returned, thus excluding any cases containing the exact sequence and timing condition for 'Create Order' to 'Confirm Order'.