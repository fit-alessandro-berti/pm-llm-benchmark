To solve this problem, we will first need to create a series of subqueries that each accomplish one part of the task. Here's a step-by-step breakdown:

1. **Order the activities by their timestamp within each case** and then concatenate these activities to form a sequence for each case.
2. **Group events by their activity sequence** (activity variant) and count the number of cases per variant.
3. **Determine the top K variants** by the count of associated case IDs.
4. **Filter the original event log** to include only those events that are part of cases matching the top K variants.

Let's assume the value of K is given in a variable `K`. Here's the SQL query that accomplishes all these tasks:

```sql
WITH ordered_activities AS (
    SELECT 
        case_id,
        STRING_AGG(activity, '->' ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

variant_counts AS (
    SELECT 
        activity_sequence,
        COUNT(case_id) AS case_count
    FROM ordered_activities
    GROUP BY activity_sequence
),

top_variants AS (
    SELECT 
        activity_sequence
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT K
),

filtered_cases AS (
    SELECT 
        case_id
    FROM ordered_activities
    WHERE activity_sequence IN (SELECT activity_sequence FROM top_variants)
)

SELECT 
    el.*
FROM event_log AS el
JOIN filtered_cases AS fc ON el.case_id = fc.case_id;
```

### Explanation:

1. **ordered_activities CTE**: This first Common Table Expression (CTE) constructs the ordered sequence of activities for each case. It orders the activities by the `timestamp` within each `case_id` and then uses `STRING_AGG` to concatenate these activity names into a single string `activity_sequence`.

2. **variant_counts CTE**: In this CTE, we perform aggregation over the `ordered_activities` results by `activity_sequence`. This allows us to count how many distinct `case_ids` follow each `activity_sequence`, giving us the number of case occurrences for each variant.

3. **top_variants CTE**: This CTE identifies the `activity_sequence` of the top K most common variants. We use a simple `ORDER BY` on `case_count` combined with `LIMIT K` to achieve this.

4. **filtered_cases CTE**: Here, we select the `case_id`s that correspond to the activity sequences identified as the top K variants in the last CTE.

5. **Final SELECT statement**: The final bit of the query joins the `event_log` with the `filtered_cases` on `case_id` to extract all the events that belong to the cases from the top K variants.

Make sure to replace `K` with the actual number of top variants you are interested in if it's not dynamically provided in your analysis setup.