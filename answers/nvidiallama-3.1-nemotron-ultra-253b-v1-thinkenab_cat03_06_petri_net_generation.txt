<think>
Okay, I need to create a Petri net for this insurance claim process. Let me start by understanding the steps and the possible loops.

First, the process starts with a claim (C), then goes through registration (CR), document verification (DV), fraud check (FC), assessment (CA), approval (AP), payment (P), notification (N), and closure (CL). But there are two loops mentioned: one between DV and RDS if documents are incomplete, and another between FC and II if more investigation is needed.

So, each activity is a transition in the Petri net. Places will represent the states between these transitions. Let me map out the sequence.

Starting with the initial place (source). The first transition is C (Insurance Claim), which leads to CR (Claim Registration). Then CR leads to DV. Now, DV can either proceed to FC or loop back to RDS. But wait, the problem says if documents are incomplete after DV, RDS occurs before continuing. So after DV, there's a possibility to go to RDS and then back to DV? Or does RDS come after DV and then return to DV again?

Wait, the description says: "if documents are incomplete after DV, a re-submission step (RDS) occurs before the process continues." So the flow would be DV -> RDS -> DV? Or DV -> RDS, then after RDS, the process continues. So maybe after DV, there's a decision: if documents are okay, proceed to FC; if not, go to RDS. Then RDS would need to go back to DV again for re-verification. So that's a loop between DV and RDS.

Similarly, after FC, if doubts are raised, an In-depth Investigation (II) is done, which can happen multiple times. So FC might transition to II, and II transitions back to FC. So that's another loop between FC and II.

So transitions would be:

C -> CR -> DV -> (possible RDS loop) -> FC -> (possible II loop) -> CA -> AP -> P -> N -> CL.

Now, the Petri net structure.

Each transition is an activity. The places are in between. So:

Source place (start) -> C transition -> place p1 -> CR -> p2 -> DV -> p3.

But after DV, the process can either go to FC or to RDS. So from p3, there should be two outgoing arcs: one to RDS transition, and one to FC transition? Wait, no. Because the loop is optional. The RDS occurs only if documents are incomplete. So the decision to go to RDS or proceed to FC is determined by some condition, which in Petri net terms is modeled by having two possible paths from p3. But how to model that? Normally, in a Petri net, the choice is non-deterministic unless controlled by places or guards. But here, we need to model the possibility of taking the RDS path or not. So perhaps after DV (transition DV), which connects from p2 to p3, then from p3, we have transitions to RDS and FC. But that would require a choice between RDS and FC. Wait, but the process can go to RDS multiple times. So maybe after DV, the process can either go to RDS or to FC. If RDS is taken, then after RDS, it goes back to DV for re-verification. So the RDS transition would lead back to DV's input place. Let's see:

DV transition is from p2 to p3. Then, from p3, we have two transitions: one to FC (if documents are okay) and one to RDS. But RDS transition would go from p3 to some place p4, and then from p4 back to DV transition? Wait, no. Because RDS is a step that needs to be processed. So the RDS transition would take a token from p3, process it, and then output to a place that leads back to DV. So:

- After DV (p3), the token can go to FC or to RDS.
- If it goes to RDS, then after RDS is done, it should go back to DV to try again.

So RDS transition would consume the token from p3, produce a token in a new place p5, which connects back to DV. So the arc would be RDS -> p5, and p5 is connected to DV. So the path would be: p3 -> RDS -> p5 -> DV. Then DV would process the token again, leading back to p3, where the choice is again made. So this creates a loop between DV and RDS.

Similarly, for FC and II: after FC, there's a possibility to go to II, which loops back to FC. So after FC transition, which leads to a place p6, from p6 there are two options: proceed to CA or go to II. If II is taken, then after II, it goes back to FC's input place. So the structure would be:

FC is connected from p3 (if documents are okay) to p6. From p6, transitions to CA or II. If II is taken, it goes to a place p7, which is connected back to FC. So the loop is FC -> II -> FC.

Putting this all together:

Start with source place. Then transitions:

C connects source to p1.

p1 connects to CR.

CR connects to p2.

p2 connects to DV.

DV connects to p3.

From p3, two transitions: FC (to p6) and RDS (to p4).

RDS connects p4 to p5.

p5 connects back to DV.

Then, from p6 (after FC), transitions to CA (to p8) and II (to p7).

II connects p7 back to FC's input place, which is p6? Wait, no. Because FC is from p3 to p6. So if II is taken, after FC, the token is in p6. Then, taking II would consume the token from p6, process it, and produce a token in p7. Then p7 needs to connect back to FC's input. Wait, FC's input is p3. So to loop back, II's output place should connect to p3? That way, after II, the token is back at p3, which allows FC to be processed again. Wait, but that might not be correct. Let's think again.

Original path after DV is p3. From p3, you can go to FC (to p6) or RDS (to p4). So FC is a transition from p3 to p6. Then, from p6, you can go to CA (to p8) or II (to p7). If II is taken, the transition is from p6 to p7. Then, after II is processed, where does it go? The II transition would take the token from p7 and output to p3 (the same place where FC is waiting). So:

II transition is from p7 to p3. Then, p3 can again choose between FC and RDS. So this creates the loop: FC -> II -> FC.

Wait, but FC is from p3 to p6. So after FC is done, the token is in p6. From p6, you can choose CA or II. If II is chosen, then the token goes to p7. Then II transition is from p7 to p3. Then, in p3, the token can again go to FC (to p6) or RDS (to p4). So that allows multiple iterations of FC and II.

Yes, that seems right.

So now, after CA, which is from p6 to p8, then CA leads to AP. Then AP to P, then P to N, then N to CL. And CL leads to the sink place.

The final marking is when the token is in the sink place.

Now, let's outline all transitions and places:

Transitions:

- C (Insurance Claim)
- CR (Claim Registration)
- DV (Document Verification)
- RDS (Re-Document Submission)
- FC (Fraud Check)
- II (In-depth Investigation)
- CA (Claim Assessment)
- AP (Approval)
- P (Payment)
- N (Notification)
- CL (Closure)

Places:

- source (initial)
- p1 (after C)
- p2 (after CR)
- p3 (after DV)
- p4 (after RDS)
- p5 (after RDS leads back to DV)
- p6 (after FC)
- p7 (after II)
- p8 (after CA)
- p9 (after AP)
- p10 (after P)
- p11 (after N)
- sink (after CL)

Wait, maybe I need to adjust the places. Let me retrace:

1. Source -> C -> p1
2. p1 -> CR -> p2
3. p2 -> DV -> p3
4. From p3:
   - To FC -> p6
   - To RDS -> p4
5. RDS -> p4 -> p5 (but where does RDS lead? RDS transition consumes p3's token, produces p4, then p4 connects to DV. So RDS's output is p4, and p4 is connected to DV. Wait, DV is a transition. So transitions consume tokens from input places and produce to output places. So:

DV transition is from p2 to p3. RDS transition is from p3 to p4. Then, p4 is connected to DV. So after RDS is done, the token is in p4, which is the input place for DV. So DV can process it again. So that loop is possible.

Similarly, FC is from p3 to p6. Then, from p6, transitions to CA (to p8) and II (to p7). II transition is from p6 to p7. Then, p7 is connected to FC transition? Wait, FC's input is p3. So after II, the token is in p7. How does it get back to FC? The FC transition is from p3 to p6. So to loop back, the II transition should output to p3. So:

II transition is from p7 to p3. Wait, no. The II transition is from p6 to p7 (if we choose to go to II). Then, the II transition must have an output place. So II transition takes token from p6, and produces a token in p7. Then, p7 must be connected to FC's input place, which is p3. So there should be an arc from p7 to FC? No, transitions are connected via places. So the II transition is from p6 to p7. Then, p7 is connected to FC transition. But FC transition's input is p3. So this would not connect. So perhaps the correct way is:

After FC (p6), if we choose II, then II transition is from p6 to p7. Then, p7 is connected back to FC's input place, which is p3. Wait, but FC's input is p3, so p7 should have an arc to FC's input place. Wait, no. FC transition is from p3 to p6. So after II is done (which is in p7), how do we get back to FC? The FC transition can only be triggered if there's a token in p3. So to loop back, after II, the token should be placed back into p3. Therefore, the II transition should produce a token in p3. So:

II transition is from p6 to p3. So when II is taken, the token is consumed from p6, and produced in p3. Then, p3 can again choose between FC and RDS. That way, the loop is FC -> II -> FC.

Wait, but how does II transition get connected? Let me think again.

Original flow after FC:

FC is a transition from p3 to p6. So after FC, token is in p6. From p6, two options:

- Go to CA transition (from p6 to p8)
- Go to II transition (from p6 to p7)

If II is taken, the II transition would take the token from p6 and put it into p7. Then, after II is processed, where does the token go? The II transition must have an output place. To loop back to FC, the II transition's output should be p3. So:

II transition is from p6 to p3. So when II occurs, the token is taken from p6 and placed into p3. Then, from p3, the token can again go to FC (back to p6) or RDS (to p4). So this allows multiple cycles through FC and II.

Yes, that makes sense. So the II transition connects p6 to p3.

So transitions:

- From p3: FC (to p6) and RDS (to p4)
- From p6: CA (to p8) and II (to p3)
- From p4: RDS transition leads to p4, then p4 is connected to DV? Wait, no. The RDS transition is from p3 to p4. Then, after RDS is done, the token is in p4. Then, p4 must be connected to DV transition. So DV transition has input places p2 and p4? Wait, no. DV transition is from p2 to p3. But if RDS is connected to DV, that would require that DV has another input place. But transitions can have multiple input places, but in this case, DV is supposed to be triggered after CR (from p2) or after RDS (from p4). So the DV transition should have input places p2 and p4. Wait, but that would mean that DV can be triggered by either p2 or p4. But that's not correct. Because the initial flow is CR -> DV (from p2), and the RDS loop is RDS -> DV (from p4). So DV must be able to be triggered by either p2 or p4. So the DV transition has two input places: p2 and p4. But transitions in Petri nets can have multiple input places, but the transition can only fire if all input places have sufficient tokens. Wait, no. If a transition has multiple input places, it requires tokens in all of them to fire. But in this case, we want the transition to fire if either p2 or p4 has a token. So that's not possible with a single transition. Therefore, perhaps the DV transition should have two input places, but with an OR semantics. But standard Petri nets don't support OR; they require all input places to have tokens. So to model this, we need to have two separate transitions for DV? Or perhaps model it differently.

Wait, this is a problem. Because after RDS, the process should return to DV. So the RDS transition is from p3 to p4. Then, DV needs to be triggered again. But DV is already connected from p2 to p3. So how to connect p4 to DV? Because DV's input is p2. So perhaps the DV transition needs to have another input place. But that would require that both p2 and p4 have tokens for DV to fire, which is not desired.

Ah, here's the mistake. The RDS transition leads to p4, and then p4 should be connected to DV. But DV is a transition that is already connected from p2. So to allow DV to be triggered from p4, the DV transition must have an input from p4. But that would mean that the DV transition requires both p2 and p4 to have tokens to fire, which is not the case. Therefore, the initial approach is incorrect.

Alternative approach: After RDS, the process should go back to DV. So the RDS transition is from p3 to p4, and then p4 is connected to DV. But DV's input is p2. So this would not connect. Therefore, the correct way is to have the RDS transition output to a place that is connected back to the DV transition's input. Wait, perhaps the DV transition is from p2 and p4 to p3. But in that case, the transition can be triggered by either p2 or p4. But in standard Petri net, transitions require all input places to have tokens. So this is not possible. Therefore, the model needs to be adjusted.

Wait, perhaps the RDS loop should be modeled as follows:

After DV (p3), the token can go to RDS (p4). Then, after RDS, the token is in p5. Then, p5 is connected to DV. So DV's input is p2 and p5. But again, this would require both p2 and p5 to have tokens for DV to fire. Which is not desired.

Hmm, this is a problem. Because in Petri nets, transitions require all input places to have tokens. So to model an XOR choice between proceeding to FC or RDS after DV, and then after RDS, returning to DV, we need to structure the places and transitions correctly.

Let me think again. The DV transition is from p2 to p3. Then, after DV, the token is in p3. From p3, there are two transitions: FC (leading to p6) and RDS (leading to p4). If RDS is taken, the token moves to p4. Then, after RDS is processed, the token should go back to DV. So the RDS transition is from p3 to p4, and then p4 is connected to DV. But DV's input is p2. So how to connect p4 to DV? The DV transition must have an input from p4 as well. So DV would have two input places: p2 and p4. But that would require both p2 and p4 to have tokens for DV to fire, which is not the case. So this approach doesn't work.

Ah, here's the solution: The RDS transition should lead back to the same place that DV's output is connected to. Wait, no. Let me try to model this correctly.

The correct way to model a loop after DV is:

- After DV (transition DV from p2 to p3), the token is in p3.
- From p3, the token can go to FC (transition FC from p3 to p6) or to RDS (transition RDS from p3 to p4).
- If RDS is taken, the token is in p4. Then, after RDS is processed, the token should go back to DV. So the RDS transition must connect p4 back to DV's input. But DV's input is p2. So this suggests that DV must be able to be triggered by p4. But how?

Wait, perhaps the DV transition is from p2 OR p4 to p3. But in Petri net, transitions can't have OR inputs. So the only way to model this is to have two separate transitions: one for the initial DV (from p2 to p3) and another for the RDS loop (from p4 to p3). But that would require two transitions named DV, which is not allowed. Alternatively, we can model the loop with a different transition, but that would not be accurate.

Alternatively, perhaps the RDS transition leads back to the place before DV. Wait, the place before DV is p2. So after RDS, the token is placed back into p2, which allows DV to be triggered again. But that would mean that after RDS, the process goes back to the state after CR, which is p2. Then, DV can be executed again. That might model the loop correctly.

Let me try this approach:

- DV transition is from p2 to p3.
- From p3, transitions to FC (p6) and RDS (p4).
- RDS transition is from p3 to p4.
- Then, RDS's output is p4, which connects back to p2 (the place before DV). So after RDS, the token is back in p2, allowing DV to be executed again.

This way, the loop is:

DV (p2 -> p3) -> RDS (p3 -> p4) -> p4 -> p2 -> DV.

Yes, this works. Because after RDS, the token is in p4, which is connected to p2. Then, DV can be triggered again by the token in p2.

But wait, how is p4 connected to p2? We need an arc from p4 to p2. So after RDS transition, the token is in p4, and then p4 has an outgoing arc to p2. So the RDS transition is from p3 to p4, and then p4 is connected to p2 via an arc. That way, after RDS, the token goes back to p2, allowing DV to be processed again.

This would correctly model the loop: after DV, if documents are incomplete, RDS is done, and then the process returns to the state after CR (p2), so DV is executed again.

Similarly, for the FC and II loop:

- FC transition is from p3 to p6.
- From p6, transitions to CA (p8) and II (p7).
- II transition is from p6 to p7.
- Then, p7 is connected back to p3 (the place after DV). So after II is done, the token is in p7, which connects back to p3, allowing FC to be triggered again.

Wait, but FC is from p3 to p6. So if after II, the token is in p3, then FC can be triggered again. So the II transition should output to p3. So:

II transition is from p6 to p3. So when II is taken, the token is consumed from p6 and produced in p3. Then, from p3, the process can again choose between FC and RDS. This creates the loop between FC and II.

So putting this all together:

Transitions and places:

1. Source -> C -> p1
2. p1 -> CR -> p2
3. p2 -> DV -> p3
4. p3 has two transitions:
   - FC -> p6
   - RDS -> p4
5. RDS transition is from p3 to p4
6. p4 has an arc to p2 (so after RDS, back to p2 to re-run DV)
7. From p6, two transitions:
   - CA -> p8
   - II -> p3 (so after II, back to p3 to re-run FC)
8. CA transition from p6 to p8
9. p8 -> AP -> p9
10. p9 -> P -> p10
11. p10 -> N -> p11
12. p11 -> CL -> sink

Now, let's verify the loops:

- DV and RDS loop: After DV (p3), if RDS is taken, token goes to p4, which connects back to p2. Then, DV is triggered again from p2. So the loop is possible.
- FC and II loop: After FC (p6), if II is taken, token goes back to p3. Then, FC can be triggered again from p3. So the loop is possible.

Now, the initial marking is the source place with 1 token. The final marking is the sink place with 1 token.

Now, let's code this.

First, create all transitions and places:

- source (PetriNet.Place)
- sink (PetriNet.Place)
- C, CR, DV, RDS, FC, II, CA, AP, P, N, CL transitions.

Then, connect them with arcs.

Code steps:

1. Create the PetriNet instance.
2. Create all places: source, p1, p2, p3, p4, p6, p7, p8, p9, p10, p11, sink.
Wait, need to list all places:

Wait, let's list all the places needed based on the transitions:

- source
- p1 (after C)
- p2 (after CR)
- p3 (after DV)
- p4 (after RDS)
- p6 (after FC)
- p8 (after CA)
- p9 (after AP)
- p10 (after P)
- p11 (after N)
- sink (after CL)

Wait, but in the FC and II loop, after FC is p6. From p6, transitions to CA (p8) and II (to p3). So after II, token is in p3.

So the places are:

source, p1, p2, p3, p4, p6, p8, p9, p10, p11, sink.

Wait, but what about the place after RDS (p4) connects back to p2. So after RDS, the token is in p4, which is connected to p2. So p4 has an outgoing arc to p2. So p4 is a place that, when tokens are present, they are moved to p2.

So in code:

Places:

source = PetriNet.Place("source")
p1 = PetriNet.Place("p1")
p2 = PetriNet.Place("p2")
p3 = PetriNet.Place("p3")
p4 = PetriNet.Place("p4")
p6 = PetriNet.Place("p6")
p8 = PetriNet.Place("p8")
p9 = PetriNet.Place("p9")
p10 = PetriNet.Place("p10")
p11 = PetriNet.Place("p11")
sink = PetriNet.Place("sink")

Transitions:

C = PetriNet.Transition("C", label="Insurance Claim")
CR = PetriNet.Transition("CR", label="Claim Registration")
DV = PetriNet.Transition("DV", label="Document Verification")
RDS = PetriNet.Transition("RDS", label="Re-Document Submission")
FC = PetriNet.Transition("FC", label="Fraud Check")
II = PetriNet.Transition("II", label="In-depth Investigation")
CA = PetriNet.Transition("CA", label="Claim Assessment")
AP = PetriNet.Transition("AP", label="Approval")
P = PetriNet.Transition("P", label="Payment")
N = PetriNet.Transition("N", label="Notification")
CL = PetriNet.Transition("CL", label="Closure")

Now, connect the arcs:

From source to C: source -> C -> p1
petri_utils.add_arc_from_to(source, C, net)
petri_utils.add_arc_from_to(C, p1, net)

p1 to CR: p1 -> CR -> p2
petri_utils.add_arc_from_to(p1, CR, net)
petri_utils.add_arc_from_to(CR, p2, net)

p2 to DV: p2 -> DV -> p3
petri_utils.add_arc_from_to(p2, DV, net)
petri_utils.add_arc_from_to(DV, p3, net)

p3 to FC and RDS:
petri_utils.add_arc_from_to(p3, FC, net)
petri_utils.add_arc_from_to(p3, RDS, net)

FC to p6: FC -> p6
petri_utils.add_arc_from_to(FC, p6, net)

RDS to p4: RDS -> p4
petri_utils.add_arc_from_to(RDS, p4, net)

p4 to p2: p4 -> p2 (so after RDS, token goes back to p2)
petri_utils.add_arc_from_to(p4, p2, net)

From p6 to CA and II:
petri_utils.add_arc_from_to(p6, CA, net)
petri_utils.add_arc_from_to(p6, II, net)

CA to p8: CA -> p8
petri_utils.add_arc_from_to(CA, p8, net)

II to p3: II -> p3
petri_utils.add_arc_from_to(II, p3, net)

p8 to AP: p8 -> AP -> p9
petri_utils.add_arc_from_to(p8, AP, net)
petri_utils.add_arc_from_to(AP, p9, net)

p9 to P: p9 -> P -> p10
petri_utils.add_arc_from_to(p9, P, net)
petri_utils.add_arc_from_to(P, p10, net)

p10 to N: p10 -> N -> p11
petri_utils.add_arc_from_to(p10, N, net)
petri_utils.add_arc_from_to(N, p11, net)

p11 to CL: p11 -> CL -> sink
petri_utils.add_arc_from_to(p11, CL, net)
petri_utils.add_arc_from_to(CL, sink, net)

Wait, but the arc from II to p3: II is a transition, so the arc is from II to p3. So the code should be:

petri_utils.add_arc_from_to(II, p3, net)

Yes.

Now, the initial marking (im) is a Marking with source: 1.

The final marking (fm) is a Marking with sink: 1.

So:

im = Marking()
im[source] = 1

fm = Marking()
fm[sink] = 1

Putting all this into code.

But wait, in the example given, after creating the net, they added all places and transitions to the net. So in code, we need to add all places and transitions to the net.places and net.transitions.

So code steps:

Initialize the net.

Add all places to net.places.

Add all transitions to net.transitions.

Then add the arcs.

So the full code:

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="insurance_claim")

# Create places
source = PetriNet.Place(name="source")
p1 = PetriNet.Place(name="p1")
p2 = PetriNet.Place(name="p2")
p3 = PetriNet.Place(name="p3")
p4 = PetriNet.Place(name="p4")
p6 = PetriNet.Place(name="p6")
p8 = PetriNet.Place(name="p8")
p9 = PetriNet.Place(name="p9")
p10 = PetriNet.Place(name="p10")
p11 = PetriNet.Place(name="p11")
sink = PetriNet.Place(name="sink")

# Add places to net
net.places.update([source, p1, p2, p3, p4, p6, p8, p9, p10, p11, sink])

# Create transitions
C = PetriNet.Transition(name="C", label="Insurance Claim")
CR = PetriNet.Transition(name="CR", label="Claim Registration")
DV = PetriNet.Transition(name="DV", label="Document Verification")
RDS = PetriNet.Transition(name="RDS", label="Re-Document Submission")
FC = PetriNet.Transition(name="FC", label="Fraud Check")
II = PetriNet.Transition(name="II", label="In-depth Investigation")
CA = PetriNet.Transition(name="CA", label="Claim Assessment")
AP = PetriNet.Transition(name="AP", label="Approval")
P = PetriNet.Transition(name="P", label="Payment")
N = PetriNet.Transition(name="N", label="Notification")
CL = PetriNet.Transition(name="CL", label="Closure")

# Add transitions to net
net.transitions.update([C, CR, DV, RDS, FC, II, CA, AP, P, N, CL])

# Add arcs
petri_utils.add_arc_from_to(source, C, net)
petri_utils.add_arc_from_to(C, p1, net)

petri_utils.add_arc_from_to(p1, CR, net)
petri_utils.add_arc_from_to(CR, p2, net)

petri_utils.add_arc_from_to(p2, DV, net)
petri_utils.add_arc_from_to(DV, p3, net)

petri_utils.add_arc_from_to(p3, FC, net)
petri_utils.add_arc_from_to(p3, RDS, net)

petri_utils.add_arc_from_to(FC, p6, net)

petri_utils.add_arc_from_to(RDS, p4, net)
petri_utils.add_arc_from_to(p4, p2, net)  # RDS loop back to p2

petri_utils.add_arc_from_to(p6, CA, net)
petri_utils.add_arc_from_to(p6, II, net)

petri_utils.add_arc_from_to(II, p3, net)  # II loop back to p3

petri_utils.add_arc_from_to(CA, p8, net)

petri_utils.add_arc_from_to(p8, AP, net)
petri_utils.add_arc_from_to(AP, p9, net)

petri_utils.add_arc_from_to(p9, P, net)
petri_utils.add_arc_from_to(P, p10, net)

petri_utils.add_arc_from_to(p10, N, net)
petri_utils.add_arc_from_to(N, p11, net)

petri_utils.add_arc_from_to(p11, CL, net)
petri_utils.add_arc_from_to(CL, sink, net)

# Define initial and final markings
im = Marking()
im[source] = 1

fm = Marking()
fm[sink] = 1

Wait, but in the example, they added arcs using petri_utils.add_arc_from_to, which connects the source to the transition, and the transition to the target. So the code for the arcs is correct.

But let me double-check the RDS loop:

After RDS transition, the token is in p4. Then, there's an arc from p4 to p2. So petri_utils.add_arc_from_to(p4, p2, net). Yes, that's correct. So when p4 has a token, it's automatically moved to p2, allowing DV to be triggered again.

Similarly, after II transition, the token is in p3, allowing FC to be triggered again.

This should model the loops correctly.

Now, the initial marking has the token in source. The final marking has the token in sink.

So this should be the correct Petri net.
</think>

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="insurance_claim")

# Create places
source = PetriNet.Place(name="source")
p1 = PetriNet.Place(name="p1")
p2 = PetriNet.Place(name="p2")
p3 = PetriNet.Place(name="p3")
p4 = PetriNet.Place(name="p4")
p6 = PetriNet.Place(name="p6")
p8 = PetriNet.Place(name="p8")
p9 = PetriNet.Place(name="p9")
p10 = PetriNet.Place(name="p10")
p11 = PetriNet.Place(name="p11")
sink = PetriNet.Place(name="sink")

# Add places to the net
net.places.update([source, p1, p2, p3, p4, p6, p8, p9, p10, p11, sink])

# Create transitions
C = PetriNet.Transition(name="C", label="Insurance Claim")
CR = PetriNet.Transition(name="CR", label="Claim Registration")
DV = PetriNet.Transition(name="DV", label="Document Verification")
RDS = PetriNet.Transition(name="RDS", label="Re-Document Submission")
FC = PetriNet.Transition(name="FC", label="Fraud Check")
II = PetriNet.Transition(name="II", label="In-depth Investigation")
CA = PetriNet.Transition(name="CA", label="Claim Assessment")
AP = PetriNet.Transition(name="AP", label="Approval")
P = PetriNet.Transition(name="P", label="Payment")
N = PetriNet.Transition(name="N", label="Notification")
CL = PetriNet.Transition(name="CL", label="Closure")

# Add transitions to the net
net.transitions.update([C, CR, DV, RDS, FC, II, CA, AP, P, N, CL])

# Connect arcs
petri_utils.add_arc_from_to(source, C, net)
petri_utils.add_arc_from_to(C, p1, net)

petri_utils.add_arc_from_to(p1, CR, net)
petri_utils.add_arc_from_to(CR, p2, net)

petri_utils.add_arc_from_to(p2, DV, net)
petri_utils.add_arc_from_to(DV, p3, net)

petri_utils.add_arc_from_to(p3, FC, net)
petri_utils.add_arc_from_to(p3, RDS, net)

petri_utils.add_arc_from_to(FC, p6, net)

petri_utils.add_arc_from_to(RDS, p4, net)
petri_utils.add_arc_from_to(p4, p2, net)  # Loop back to re-verify documents

petri_utils.add_arc_from_to(p6, CA, net)
petri_utils.add_arc_from_to(p6, II, net)

petri_utils.add_arc_from_to(II, p3, net)  # Loop back for further investigation

petri_utils.add_arc_from_to(CA, p8, net)

petri_utils.add_arc_from_to(p8, AP, net)
petri_utils.add_arc_from_to(AP, p9, net)

petri_utils.add_arc_from_to(p9, P, net)
petri_utils.add_arc_from_to(P, p10, net)

petri_utils.add_arc_from_to(p10, N, net)
petri_utils.add_arc_from_to(N, p11, net)

petri_utils.add_arc_from_to(p11, CL, net)
petri_utils.add_arc_from_to(CL, sink, net)

# Define initial and final markings
im = Marking()
im[source] = 1

fm = Marking()
fm[sink] = 1
```