To generate a temporal profile for this process, we need to calculate the average and standard deviation of the times between each pair of activities.

Here is a Python script that should help you achieve this:
```python
import re
from collections import defaultdict
from statistics import mean, stdev

# Process variants
variants = [
    "Create Fine -> Send Fine -> Insert Fine Notification -> Add penalty -> Send for Credit Collection ( frequency = 56482  performance = 59591524.946 )",
    "Create Fine -> Payment ( frequency = 46371  performance = 889688.400 )",
    #... (rest of the process variants)
]

# Extract activities and their timestamps from each variant
activities = defaultdict(list)
for variant in variants:
    matches = re.findall(r"(\w+ \w+) -> (\w+ \w+) \( frequency = (\d+)  performance = (\d+\.\d+) \)", variant)
    for (activity1, activity2, frequency, performance) in matches:
        activities[(activity1, activity2)].append(float(performance))

# Calculate average and standard deviation of times between activities
temporal_profile = {}
for (activity1, activity2), timestamps in activities.items():
    avg = mean(timestamps)
    std_dev = stdev(timestamps)
    temporal_profile[(activity1, activity2)] = (avg, std_dev)

print(temporal_profile)
```
This script uses regular expressions to extract the activities and their timestamps from each process variant. It then calculates the average and standard deviation of the timestamps for each pair of activities using the `mean` and `stdev` functions from the `statistics` module. Finally, it stores the results in a dictionary called `temporal_profile`.

Note that this script assumes that the timestamps are in seconds. If they are in a different unit, you may need to adjust the script accordingly.

Also, keep in mind that this script only considers the direct successors of each activity. If you want to consider all possible successors (not just direct ones), you may need to modify the script to use a more sophisticated approach, such as a graph-based algorithm.