Here’s one way to do it in DuckDB SQL:

```sql
-- 1. Identify cases that have the exact 3step sequence
--    Approve Purchase Requisition  Create Order  Confirm Order
--    in direct succession, and where ConfirmOrder is more than 5 days
--    after CreateOrder.
WITH flagged_cases AS (
  SELECT DISTINCT case_id
  FROM (
    SELECT
      case_id,
      activity         AS act0,
      timestamp        AS ts0,
      LEAD(activity,1) OVER (PARTITION BY case_id ORDER BY timestamp) AS act1,
      LEAD(timestamp,1) OVER (PARTITION BY case_id ORDER BY timestamp) AS ts1,
      LEAD(activity,2) OVER (PARTITION BY case_id ORDER BY timestamp) AS act2,
      LEAD(timestamp,2) OVER (PARTITION BY case_id ORDER BY timestamp) AS ts2
    FROM event_log
  ) seq
  WHERE
    act0 = 'Approve Purchase Requisition'
    AND act1 = 'Create Order'
    AND act2 = 'Confirm Order'
    -- ensure more than 5 days elapsed between Create and Confirm
    AND ts2 > ts1 + INTERVAL '5 days'
)

-- 2. Return all events whose case_id is NOT in the flagged set
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM flagged_cases)
ORDER BY case_id, timestamp;
```

Explanation of the steps:

1. In the CTE `flagged_cases` we use `LEAD()` to look 1 and 2 events ahead within each `case_id`, ordered by `timestamp`.
2. We filter for rows where  
   - the current activity (`act0`) is  
     `'Approve Purchase Requisition'`,  
   - the next is `'Create Order'`,  
   - the one after that is `'Confirm Order'`,  
   - and the timestamp difference between the 2nd and 1st lookahead (`ts2 - ts1`) exceeds 5 days.
3. We `SELECT DISTINCT case_id` from those matches.
4. Finally, we pull *all* events from `event_log` where `case_id` is *not* in that flagged set.