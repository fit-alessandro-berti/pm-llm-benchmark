Here’s one way to do it in DuckDB, using window-functions to spot the exact 3-event pattern in direct succession, filter on the 5-day criterion, and then exclude all events from any case that matches:

```sql
-- 1) Identify all cases that have the exact 3-event pattern in a row
--    with >5 days between 'Create Order' and 'Confirm Order'
WITH sequences AS (
  SELECT
    case_id,
    activity,
    timestamp,
    LEAD(activity, 1)   OVER (PARTITION BY case_id ORDER BY timestamp) AS next_act,
    LEAD(timestamp, 1)  OVER (PARTITION BY case_id ORDER BY timestamp) AS next_ts,
    LEAD(activity, 2)   OVER (PARTITION BY case_id ORDER BY timestamp) AS next2_act,
    LEAD(timestamp, 2)  OVER (PARTITION BY case_id ORDER BY timestamp) AS next2_ts
  FROM event_log
),
flagged_cases AS (
  SELECT DISTINCT case_id
  FROM sequences
  WHERE
    activity  = 'Approve Purchase Requisition'
    AND next_act  = 'Create Order'
    AND next2_act = 'Confirm Order'
    -- ensure > 5 days between Create Order and Confirm Order
    AND next2_ts > next_ts + INTERVAL '5 days'
)
-- 2) Return every event except those from flagged cases
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM flagged_cases)
ORDER BY case_id, timestamp;
```

Explanation of the steps:

1. **sequences**  
   - For each event we pull in its “next” and “nextnext” rows (by timestamp) within the same case via `LEAD(...) OVER (PARTITION BY case_id ORDER BY timestamp)`.  
   - This guarantees direct succession: if there were any intervening event the pattern would be broken.

2. **flagged_cases**  
   - We filter to only those rows where the three activities line up exactly as  
       Approve Purchase Requisition  Create Order  Confirm Order  
   - And we add the timedifference condition  
       `next2_ts > next_ts + INTERVAL '5 days'`  
   - We `SELECT DISTINCT case_id` to get the list of all cases that must be excluded.

3. **Final SELECT**  
   - We simply pull **all** events from `event_log` whose `case_id` is **not** in our `flagged_cases` set.
   - Optionally ordered by `case_id, timestamp` so the remaining log reads nicely in timesequence per case.