## Identified Anomalies & Undesirable Behaviors

### 1. **Order 1002: Credit Check Performed After Shipping**

**Observation:** The credit check activity occurs **after** goods have been shipped, suggesting potential financial risk.

**SQL Investigation:**
```sql
-- Find orders where credit check occurs after goods shipment
SELECT 
    oel.case_id,
    MIN(CASE WHEN oel.activity = 'Ship Goods' THEN oel.timestamp END) as shipment_time,
    MIN(CASE WHEN oel.activity = 'Perform Credit Check' THEN oel.timestamp END) as credit_check_time,
    MIN(CASE WHEN oel.activity = 'Ship Goods' THEN oel.timestamp END) - 
    MIN(CASE WHEN oel.activity = 'Perform Credit Check' THEN oel.timestamp END) as delay_interval,
    o.order_value,
    o.order_type
FROM order_event_log oel
JOIN orders o ON oel.case_id = o.case_id
WHERE oel.activity IN ('Ship Goods', 'Perform Credit Check')
GROUP BY oel.case_id, o.order_value, o.order_type
HAVING MIN(CASE WHEN oel.activity = 'Ship Goods' THEN oel.timestamp END) < 
       MIN(CASE WHEN oel.activity = 'Perform Credit Check' THEN oel.timestamp END);
```

**Potential Causes:**
- Priority shipping override for VIP customers
- System glitch allowing shipment without credit approval
- Manual override by warehouse staff

### 2. **Order 1003: Shipment Without Stock Validation**

**Observation:** Goods shipped before stock validation occurred, risking fulfillment failures.

**SQL Investigation:**
```sql
-- Orders shipping goods before stock validation
SELECT 
    oel.case_id,
    o.order_value,
    o.order_type,
    MIN(CASE WHEN oel.activity = 'Ship Goods' THEN oel.timestamp END) as shipment_time,
    MIN(CASE WHEN oel.activity = 'Validate Stock' THEN oel.timestamp END) as validation_time,
    r.role as shipper_role,
    r.department as shipper_dept
FROM order_event_log oel
JOIN orders o ON oel.case_id = o.case_id
JOIN resources r ON oel.resource = r.resource_id
WHERE oel.activity IN ('Ship Goods', 'Validate Stock')
GROUP BY oel.case_id, o.order_value, o.order_type, r.role, r.department
HAVING MIN(CASE WHEN oel.activity = 'Ship Goods' THEN oel.timestamp END) < 
       MIN(CASE WHEN oel.activity = 'Validate Stock' THEN oel.timestamp END);
```

### 3. **Order 1004: Process Initiated Backwards**

**Observation:** Payment received before any order processing activities (registration, credit check, etc.)

**SQL Investigation:**
```sql
-- Find all events for reverse-process orders
SELECT 
    oel.case_id,
    oel.activity,
    oel.timestamp,
    oel.resource,
    o.order_value,
    r.department,
    -- Calculate position of first payment vs first registration
    ROW_NUMBER() OVER (PARTITION BY oel.case_id ORDER BY oel.timestamp ASC) as event_order,
    FIRST_VALUE(oel.activity) OVER (PARTITION BY oel.case_id ORDER BY oel.timestamp ASC) as first_activity
FROM order_event_log oel
JOIN orders o ON oel.case_id = o.case_id
JOIN resources r ON oel.resource = r.resource_id
WHERE oel.case_id = 1004
ORDER BY oel.timestamp;

-- Find similar cases system-wide
SELECT 
    oel.case_id,
    MIN(CASE WHEN oel.activity = 'Receive Payment' THEN oel.timestamp END) as payment_time,
    MIN(CASE WHEN oel.activity = 'Register Order' THEN oel.timestamp END) as registration_time,
    o.order_value,
    o.order_type
FROM order_event_log oel
JOIN orders o ON oel.case_id = o.case_id
WHERE oel.activity IN ('Receive Payment', 'Register Order')
GROUP BY oel.case_id, o.order_value, o.order_type
HAVING MIN(CASE WHEN oel.activity = 'Register Order' THEN oel.timestamp END) IS NULL
   OR MIN(CASE WHEN oel.activity = 'Receive Payment' THEN oel.timestamp END) < 
       MIN(CASE WHEN oel.activity = 'Register Order' THEN oel.timestamp END);
```

### 4. **Confirm Shipment Before Stock Validation**

**SQL Investigation:**
```sql
-- Orders confirming shipment before stock validation
WITH shipment_events AS (
    SELECT 
        oel.case_id,
        oel.timestamp as shipment_confirm_time,
        oel.resource as logistics_manager
    FROM order_event_log oel
    WHERE oel.activity = 'Confirm Shipment'
),
stock_events AS (
    SELECT 
        oel.case_id