```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create net
net = PetriNet(name="InsuranceClaimProcess")

# Places
p_start = PetriNet.Place("p_start")
p_after_C = PetriNet.Place("p_after_C")
p_ready_for_DV = PetriNet.Place("p_ready_for_DV")
p_post_DV = PetriNet.Place("p_post_DV")
p_to_RDS = PetriNet.Place("p_to_RDS")
p_ready_for_FC = PetriNet.Place("p_ready_for_FC")
p_post_FC = PetriNet.Place("p_post_FC")
p_to_II = PetriNet.Place("p_to_II")
p_ready_for_CA = PetriNet.Place("p_ready_for_CA")
p_post_CA = PetriNet.Place("p_post_CA")
p_ready_for_P = PetriNet.Place("p_ready_for_P")
p_post_P = PetriNet.Place("p_post_P")
p_post_N = PetriNet.Place("p_post_N")
p_end = PetriNet.Place("p_end")

net.places.update({
    p_start, p_after_C, p_ready_for_DV, p_post_DV, p_to_RDS,
    p_ready_for_FC, p_post_FC, p_to_II, p_ready_for_CA, p_post_CA,
    p_ready_for_P, p_post_P, p_post_N, p_end
})

# Transitions (labeled)
t_C = PetriNet.Transition("Insurance Claim (C)", "C")
t_CR = PetriNet.Transition("Claim Registration (CR)", "CR")
t_DV = PetriNet.Transition("Document Verification (DV)", "DV")
t_RDS = PetriNet.Transition("Re-Document Submission (RDS)", "RDS")
t_FC = PetriNet.Transition("Fraud Check (FC)", "FC")
t_II = PetriNet.Transition("In-depth Investigation (II)", "II")
t_CA = PetriNet.Transition("Claim Assessment (CA)", "CA")
t_AP = PetriNet.Transition("Approval (AP)", "AP")
t_P = PetriNet.Transition("Payment (P)", "P")
t_N = PetriNet.Transition("Notification (N)", "N")
t_CL = PetriNet.Transition("Closure (CL)", "CL")

# Silent transitions for routing/conditions
tau_dv_ok = PetriNet.Transition("tau_dv_ok", None)
tau_dv_incomplete = PetriNet.Transition("tau_dv_incomplete", None)
tau_fc_clean = PetriNet.Transition("tau_fc_clean", None)
tau_fc_doubt = PetriNet.Transition("tau_fc_doubt", None)
tau_skip_ap = PetriNet.Transition("tau_skip_ap", None)

net.transitions.update({
    t_C, t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL,
    tau_dv_ok, tau_dv_incomplete, tau_fc_clean, tau_fc_doubt, tau_skip_ap
})

# Arcs
# Start -> C -> CR -> DV
petri_utils.add_arc_from_to(p_start, t_C, net)
petri_utils.add_arc_from_to(t_C, p_after_C, net)

petri_utils.add_arc_from_to(p_after_C, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p_ready_for_DV, net)

petri_utils.add_arc_from_to(p_ready_for_DV, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p_post_DV, net)

# After DV: either OK -> FC, or incomplete -> RDS -> back to DV (loop)
petri_utils.add_arc_from_to(p_post_DV, tau_dv_ok, net)
petri_utils.add_arc_from_to(tau_dv_ok, p_ready_for_FC, net)

petri_utils.add_arc_from_to(p_post_DV, tau_dv_incomplete, net)
petri_utils.add_arc_from_to(tau_dv_incomplete, p_to_RDS, net)

petri_utils.add_arc_from_to(p_to_RDS, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_ready_for_DV, net)

# FC with possible repeated II loop before proceeding to CA
petri_utils.add_arc_from_to(p_ready_for_FC, t_FC, net)
petri_utils.add_arc_from_to(t_FC, p_post_FC, net)

petri_utils.add_arc_from_to(p_post_FC, tau_fc_clean, net)
petri_utils.add_arc_from_to(tau_fc_clean, p_ready_for_CA, net)

petri_utils.add_arc_from_to(p_post_FC, tau_fc_doubt, net)
petri_utils.add_arc_from_to(tau_fc_doubt, p_to_II, net)

petri_utils.add_arc_from_to(p_to_II, t_II, net)
petri_utils.add_arc_from_to(t_II, p_ready_for_FC, net)

# CA then optional AP (skip via tau) -> Payment
petri_utils.add_arc_from_to(p_ready_for_CA, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p_post_CA, net)

petri_utils.add_arc_from_to(p_post_CA, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p_ready_for_P, net)

petri_utils.add_arc_from_to(p_post_CA, tau_skip_ap, net)
petri_utils.add_arc_from_to(tau_skip_ap, p_ready_for_P, net)

# Payment -> Notification -> Closure -> end
petri_utils.add_arc_from_to(p_ready_for_P, t_P, net)
petri_utils.add_arc_from_to(t_P, p_post_P, net)

petri_utils.add_arc_from_to(p_post_P, t_N, net)
petri_utils.add_arc_from_to(t_N, p_post_N, net)

petri_utils.add_arc_from_to(p_post_N, t_CL, net)
petri_utils.add_arc_from_to(t_CL, p_end, net)

# Initial and final markings
im = Marking()
im[p_start] = 1

fm = Marking()
fm[p_end] = 1
```