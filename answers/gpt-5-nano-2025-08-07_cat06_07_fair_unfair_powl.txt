Below are two POWL models built with pm4py, following the descriptions you provided.

1) POWL Model with Potential Unfairness
- This model includes an XOR branch after the SkillAssessment stage. One branch is a standard CulturalFitCheck, and the other is a CommunityAffiliationCheck that could confer a subtle advantage to applicants affiliated with a local group (introducing potential unfair bias).

Code:

import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# Top-level activities
ReceiveApplication = Transition(label="ReceiveApplication")

# Loop for data completeness: DataCompletenessCheck (A) and RequestMoreInfo (B)
data_loop = OperatorPOWL(operator=Operator.LOOP, children=[
    Transition(label="DataCompletenessCheck"),
    Transition(label="RequestMoreInfo")
])

SkillAssessment = Transition(label="SkillAssessment")

# XOR branch after skill assessment
CulturalFitCheck = Transition(label="CulturalFitCheck")
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")

# Managerial review and final decision
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Potential bias path: XOR between cultural fit types
# Note: CommunityAffiliationCheck introduces potential unfair advantage in this branch
xor_branch = OperatorPOWL(operator=Operator.XOR, children=[
    CulturalFitCheck,
    CommunityAffiliationCheck
])

# Build the root partial order
root_unfair = StrictPartialOrder(nodes=[
    ReceiveApplication,
    data_loop,
    SkillAssessment,
    xor_branch,
    ManagerialReview,
    FinalDecision
])

# Edges to enforce the described sequence
root_unfair.order.add_edge(ReceiveApplication, data_loop)
root_unfair.order.add_edge(data_loop, SkillAssessment)
root_unfair.order.add_edge(SkillAssessment, xor_branch)
root_unfair.order.add_edge(xor_branch, ManagerialReview)
root_unfair.order.add_edge(ManagerialReview, FinalDecision)

# The root_unfair model demonstrates where unfairness could arise via the XOR branch.


2) POWL Model Without Unfairness
- This model uses a loop for data completeness, a sequential skill check, and a single, uniform CulturalFitCheck path (no community-based branching). All applicants undergo the same cultural fit evaluation, then proceed to managerial review and final decision.

Code:

import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# Top-level activities
ReceiveApplication = Transition(label="ReceiveApplication")

# Loop for data completeness: DataCompletenessCheck (A) and RequestMoreInfo (B)
data_loop_no_bias = OperatorPOWL(operator=Operator.LOOP, children=[
    Transition(label="DataCompletenessCheck"),
    Transition(label="RequestMoreInfo")
])

SkillAssessment = Transition(label="SkillAssessment")

# Single, uniform Cultural Fit path (no community-based branch)
CulturalFitCheck = Transition(label="CulturalFitCheck")

# Managerial review and final decision
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Build the root partial order (no XOR branch)
root_no_bias = StrictPartialOrder(nodes=[
    ReceiveApplication,
    data_loop_no_bias,
    SkillAssessment,
    CulturalFitCheck,
    ManagerialReview,
    FinalDecision
])

# Edges to enforce the described sequence
root_no_bias.order.add_edge(ReceiveApplication, data_loop_no_bias)
root_no_bias.order.add_edge(data_loop_no_bias, SkillAssessment)
root_no_bias.order.add_edge(SkillAssessment, CulturalFitCheck)
root_no_bias.order.add_edge(CulturalFitCheck, ManagerialReview)
root_no_bias.order.add_edge(ManagerialReview, FinalDecision)

# This model removes the potential source of bias by avoiding any branch that grants
# preferential treatment based on community affiliation.