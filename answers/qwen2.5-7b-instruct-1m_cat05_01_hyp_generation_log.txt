To identify anomalies and undesirable behaviors in the given event log, we need to analyze the sequence and timing of events for each `case_id`. Here are some potential anomalies and hypotheses, along with SQL queries to investigate them:

### Anomaly 1: Unusual Credit Check Timing
- **Hypothesis:** The credit check was performed too late in the process, which might indicate a delay in the credit check or a problem with the credit check process.

```sql
SELECT 
    case_id,
    MIN(timestamp) AS min_timestamp,
    MAX(timestamp) AS max_timestamp,
    activity
FROM 
    order_event_log
WHERE 
    activity = 'Perform Credit Check'
GROUP BY 
    case_id
HAVING 
    MAX(timestamp) - MIN(timestamp) > INTERVAL '15 minutes';
```

### Anomaly 2: Early Shipment Confirmation
- **Hypothesis:** The shipment was confirmed before all necessary checks were completed, which might indicate an error in the process.

```sql
SELECT 
    case_id,
    timestamp,
    activity,
    resource
FROM 
    order_event_log
WHERE 
    activity = 'Confirm Shipment' 
    AND EXISTS (
        SELECT 1 
        FROM order_event_log o 
        WHERE o.case_id = order_event_log.case_id 
          AND o.activity = 'Ship Goods' 
          AND o.timestamp < order_event_log.timestamp
    );
```

### Anomaly 3: Missing Credit Check
- **Hypothesis:** The credit check might have been skipped, which could lead to financial risks.

```sql
SELECT 
    case_id,
    activity,
    COUNT(*) AS count
FROM 
    order_event_log
WHERE 
    activity IN ('Register Order', 'Validate Stock', 'Ship Goods', 'Issue Invoice', 'Receive Payment')
GROUP BY 
    case_id, activity
HAVING 
    activity NOT IN ('Perform Credit Check')
    AND COUNT(*) > 0;
```

### Anomaly 4: Multiple Shipment Confirmation by Different Managers
- **Hypothesis:** This might indicate a process where multiple managers are involved in confirming the shipment, which could lead to confusion or errors.

```sql
SELECT 
    case_id,
    COUNT(DISTINCT resource) AS num_managers,
    COUNT(DISTINCT timestamp) AS num_confirmations
FROM 
    order_event_log
WHERE 
    activity = 'Confirm Shipment'
GROUP BY 
    case_id
HAVING 
    COUNT(DISTINCT resource) > 1;
```

### Anomaly 5: Immediate Shipment Without Stock Check
- **Hypothesis:** The shipment might have been confirmed without validating the stock, which could lead to discrepancies.

```sql
SELECT 
    case_id,
    timestamp,
    activity,
    resource
FROM 
    order_event_log
WHERE 
    activity = 'Confirm Shipment' 
    AND NOT EXISTS (
        SELECT 1 
        FROM order_event_log o 
        WHERE o.case_id = order_event_log.case_id 
          AND o.activity = 'Validate Stock' 
          AND o.timestamp < order_event_log.timestamp
    );
```

### Anomaly 6: Payment Received Before Invoice Issued
- **Hypothesis:** The payment might have been received before the invoice was issued, which could indicate an issue with the billing process.

```sql
SELECT 
    case_id,
    MAX(timestamp) AS max_invoice_time,
    MIN(timestamp) AS min_payment_time
FROM 
    order_event_log
WHERE 
    activity IN ('Issue Invoice', 'Receive Payment')
GROUP BY 
    case_id
HAVING 
    MAX(timestamp) < MIN(timestamp);
```

### Anomaly 7: Late Shipment Confirmation
- **Hypothesis:** The shipment might have been confirmed late, which could indicate delays in the logistics process.

```sql
SELECT 
    case_id,
    timestamp,
    activity,
    resource
FROM 
    order_event_log
WHERE 
    activity = 'Confirm Shipment' 
    AND EXISTS (
        SELECT 1 
        FROM order_event_log o 
        WHERE o.case_id = order_event_log.case_id 
          AND o.activity = 'Ship Goods' 
          AND o.timestamp > order_event_log.timestamp
    );
```

These queries should help identify potential anomalies and undesirable behaviors in the event log. Further investigation can be conducted by analyzing the `orders` and `resources` tables to understand the context and potential causes of these anomalies.