Let's create a DuckDB SQL query that solves this problem step by step. I'll use a series of CTEs (Common Table Expressions) to make the logic clear and maintainable. I'll also parameterize `K` as a variable for flexibility (you can replace it with a specific number if needed).

```sql
-- Parameter for top K variants (can be replaced with a specific number)
SET K = 5;

-- Step 1: Order events within each case by timestamp and assign a sequence number
WITH OrderedEvents AS (
    SELECT 
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS seq_num
    FROM event_log
),
-- Step 2: Concatenate activities into a single string per case to represent the variant
CaseVariants AS (
    SELECT 
        case_id,
        STRING_AGG(activity, ' -> ') OVER (PARTITION BY case_id ORDER BY seq_num) AS variant
    FROM OrderedEvents
),
-- Step 3: Count the frequency of each unique variant
VariantFrequencies AS (
    SELECT 
        variant,
        COUNT(DISTINCT case_id) AS frequency
    FROM CaseVariants
    GROUP BY variant
),
-- Step 4: Select the top K variants based on frequency
TopVariants AS (
    SELECT 
        variant
    FROM VariantFrequencies
    ORDER BY frequency DESC
    LIMIT (SELECT value FROM duckdb_settings WHERE name = 'K')
),
-- Step 5: Get the case_ids that belong to the top K variants
TopCases AS (
    SELECT DISTINCT 
        c.case_id
    FROM CaseVariants c
    JOIN TopVariants t ON c.variant = t.variant
)
-- Step 6: Return all events from the original log for cases in the top K variants
SELECT 
    e.case_id,
    e.activity,
    e.timestamp
FROM event_log e
JOIN TopCases tc ON e.case_id = tc.case_id
ORDER BY e.case_id, e.timestamp;
```

### Explanation of Each Step:
1. **OrderedEvents**: This CTE assigns a sequence number to each event within a `case_id` based on the `timestamp` order using `ROW_NUMBER()`. This ensures we maintain the correct order of activities for each case.
2. **CaseVariants**: Here, we use `STRING_AGG` to concatenate the activities of each case into a single string (e.g., "A -> B -> C") representing the process variant for that case. The aggregation respects the sequence number order.
3. **VariantFrequencies**: This groups the cases by their variant (the concatenated sequence) and counts how many unique `case_id`s correspond to each variant, giving us the frequency of each variant.
4. **TopVariants**: This selects the top K variants based on their frequency, ordered descending. The `K` value is parameterized using DuckDB's settings for flexibility.
5. **TopCases**: This identifies the `case_id`s that belong to the top K variants by joining with the `CaseVariants` CTE.
6. **Final Query**: Finally, we join the original `event_log` with the filtered `case_id`s from `TopCases` to return only the events corresponding to cases in the top K variants. The result is ordered by `case_id` and `timestamp` for clarity.

### Key Features:
- **Correct Ordering**: The use of `ROW_NUMBER()` ensures activities are ordered by `timestamp` within each case.
- **Variant Representation**: `STRING_AGG` creates a readable and unique representation of each variant.
- **Top K Filtering**: The `LIMIT` clause dynamically uses the parameterized `K` value.
- **Event Preservation**: The final join ensures that all original events (with their timestamps and details) are returned for the filtered cases.

This query should efficiently handle large event logs in DuckDB, leveraging its columnar storage and query optimization capabilities. If you have a specific value for `K`, you can replace the `SET K = 5` with your desired number or directly hardcode it in the `LIMIT` clause.