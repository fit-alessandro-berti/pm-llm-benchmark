Let’s construct a DuckDB SQL query to solve this problem step-by-step, addressing all requirements: determining process variants, counting their frequencies, identifying the top K variants, and returning the original events for cases belonging to those variants. I’ll assume K is a parameter (e.g., k_value) that can be set as needed.
Here’s the solution with detailed explanations:
sql
WITH OrderedActivities AS (
    -- Step 1: Order activities per case_id by timestamp and assign a sequence number
    SELECT 
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_order
    FROM event_log
),
VariantSequences AS (
    -- Step 2: Concatenate ordered activities into a single string per case_id
    SELECT 
        case_id,
        STRING_AGG(activity, ' -> ') WITHIN GROUP (ORDER BY activity_order) AS variant
    FROM OrderedActivities
    GROUP BY case_id
),
VariantFrequencies AS (
    -- Step 3: Group by variant and count occurrences, then rank them
    SELECT 
        variant,
        COUNT(*) AS variant_count,
        RANK() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
    FROM VariantSequences
    GROUP BY variant
),
TopKVariants AS (
    -- Step 4: Filter to top K variants
    SELECT variant
    FROM VariantFrequencies
    WHERE variant_rank <= :k_value  -- Replace :k_value with desired K (e.g., 5)
),
CasesInTopK AS (
    -- Step 5: Get case_ids belonging to top K variants
    SELECT DISTINCT vs.case_id
    FROM VariantSequences vs
    INNER JOIN TopKVariants tkv ON vs.variant = tkv.variant
)
-- Step 6: Return all original events for cases in top K variants
SELECT el.*
FROM event_log el
INNER JOIN CasesInTopK ctk ON el.case_id = ctk.case_id
ORDER BY el.case_id, el.timestamp;
Explanation of Each Step:
OrderedActivities CTE:
For each case_id, we use ROW_NUMBER() to assign a sequence number to activities based on their timestamp. This ensures the activities are ordered correctly within each case.
Columns: case_id, activity, timestamp, activity_order.
VariantSequences CTE:
We group by case_id and use STRING_AGG to concatenate the activity names into a single string (e.g., "A -> B -> C"), preserving the order from activity_order.
Result: Each case_id mapped to its process variant as a string.
VariantFrequencies CTE:
Group by variant to count how many cases follow each unique sequence.
Use RANK() to rank variants by frequency (variant_count) in descending order. Ties in frequency get the same rank.
TopKVariants CTE:
Filter to variants where variant_rank <= K, selecting the top K most frequent variants. Here, :k_value is a placeholder for the desired K (e.g., 5).
CasesInTopK CTE:
Join VariantSequences with TopKVariants to get the case_ids that belong to the top K variants.
Use DISTINCT to avoid duplicate case_ids.
Final SELECT:
Join the original event_log with CasesInTopK to retrieve all events (with all columns: case_id, activity, timestamp) for cases in the top K variants.
Order by case_id and timestamp for readability.
Example Usage:
If k_value = 3, the query returns all events from cases belonging to the 3 most frequent variants. For instance:
If the top variant "A -> B -> C" has 10 cases, "A -> C" has 8, and "B -> A" has 5, only events from those 23 cases are returned.
Notes:
Replace :k_value with a specific number (e.g., 5) or use a parameter if running in a parameterized environment.
The STRING_AGG delimiter (" -> ") is arbitrary; adjust it as needed (e.g., "," or "|").
This assumes timestamp uniquely orders events within a case_id. If ties are possible, you might need an additional tiebreaker (e.g., an event ID).
This query efficiently handles the task while maintaining clarity and correctness. Let me know if you’d like adjustments or a sample dataset to test it!