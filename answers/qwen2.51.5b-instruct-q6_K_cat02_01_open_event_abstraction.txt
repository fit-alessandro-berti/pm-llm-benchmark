Event abstracting is primarily used in two contexts: business intelligence (BI) and service-oriented architecture (SOA). In both scenarios, it plays a crucial role by reducing the complexity in handling high volumes of data originating from dispersed devices or sources. 

In a broad sense, this approach involves condensing large event logs into more manageable narratives representing their essence without losing core details.

### 1. **Business Intelligence (BI) Domain:**
- **Data Ecosystem Expansion:** BI systems like Tableau and Microsoft Power BI are enhanced by abstracting complex business events to reveal meaningful insights quickly.
- **Analytics Efficiency:** By understanding the most common, impactful event types or patterns from vast quantities of data, companies can spot unusual trends and anomalies that might not stand out without abstraction.

### 2. **Service-Oriented Architecture (SOA) Domain:**
- **Business Process Optimization:** SOA utilizes abstracted models to identify the "as-is" service operations with minimal disruption during transformations towards new service architectures.
    - **Legacy Systems Integration:** By creating a simplified view of complex systems, developers can more effectively integrate legacy systems into modern architectures.
    - **Scalability:** Service integration becomes easier by focusing on business needs rather than technical infrastructure details.

### General Application in Modeling:
- **Process Mining**: Tools like Pega (formerly LogiGear) can abstract processes from event logs for better understanding and reporting, aiding stakeholders without needing granular operational knowledge.
  
### Practical Example: Event Abstraction in Complex Processes

Let’s consider a manufacturing logistics process involving shipping orders to suppliers.

1. **Event-Driven Components**:
    - Orders placed at Manufacturing
    - Delivery status updates from Suppliers
    - Supplier response times
    - Order fulfillment actions taken by Logistics department

2. **Abstraction**:
    - Instead of focusing on every event, consider a "Order Fulfilled" business event that indicates an order has been completed.
    - If the order isn’t fulfilled within one day, another abstraction creates a "Late Fulfillment Notification." This helps identify trends rather than tracking every single shipment notification.

3. **Process Model Representation**:
    - Instead of showing thousands of different statuses for each delivered item, represent major stages like "Order Placed," "Product Manufactured," "Order Shipped," and "Supply Chain Delivered (including notifications about late deliveries) along with the key processes in between."

By using event abstraction effectively, organizations can:

- **Streamline Monitoring:** Spotting inefficiencies or anomalies easier;
- **Prioritize Alerts:** Understanding what truly matters based on business urgency or stakeholder feedback;
- **Support Decision Making:** Gaining quick access to a simplified model of operations for decision-making.

In essence, event abstraction is the modern day equivalent of high-level data visualization techniques — condensing masses of detailed information into key insights easily understandable by those who need them.