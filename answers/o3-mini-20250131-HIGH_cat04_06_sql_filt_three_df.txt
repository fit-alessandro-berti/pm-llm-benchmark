Below is one correct solution. In this query, we first assign a row number to each event per case (ordered by timestamp) so that we can look at consecutive events. Then we look for a three‐event sequence (using self‐joins on the ordered events) that matches:

1. `'Approve Purchase Requisition'`
2. `'Create Order'`
3. `'Confirm Order'`

with the condition that the time between the second and third events is greater than 5 days. We then exclude any cases having at least one occurrence of that sequence from the final result.

```sql
WITH ordered_events AS (
  SELECT 
    case_id,
    activity,
    timestamp,
    ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
  FROM event_log
),
bad_cases AS (
  SELECT DISTINCT e1.case_id
  FROM ordered_events e1
  JOIN ordered_events e2 
    ON e1.case_id = e2.case_id AND e2.rn = e1.rn + 1
  JOIN ordered_events e3 
    ON e1.case_id = e3.case_id AND e3.rn = e1.rn + 2
  WHERE e1.activity = 'Approve Purchase Requisition'
    AND e2.activity = 'Create Order'
    AND e3.activity = 'Confirm Order'
    AND e3.timestamp > e2.timestamp + INTERVAL 5 DAY
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM bad_cases)
ORDER BY case_id, timestamp;
```

### Explanation

1. **`ordered_events` CTE:**  
   - Uses `ROW_NUMBER()` partitioned by `case_id` and ordered by `timestamp` to label events in their occurrence order within each case.

2. **`bad_cases` CTE:**  
   - Joins the `ordered_events` table three times so that we can compare an event with its immediate two successors.
   - Filters for the specific activity sequence.
   - Checks that the time between `'Create Order'` (second event) and `'Confirm Order'` (third event) is more than 5 days.
   - Uses `DISTINCT` to list each offending `case_id` only once.

3. **Final Query:**  
   - Selects all events from `event_log` where the `case_id` is **not** in the set of `bad_cases`.
   - Orders the final result by `case_id` and `timestamp` for clarity.

This query meets the requirements by excluding any case that contains the given sequence with the timing condition, and returning all other events.