To construct the Log Skeleton for the order fulfillment process, we need to define the declarative constraints based on the typical workflow and business rules of the process. Here is a step-by-step breakdown of the constraints and the resulting Python dictionary:

1. **Equivalence:** No activities in this process are expected to be equivalent.
2. **Always Before:** Certain activities must occur before others.
3. **Always After:** Certain activities must occur after others.
4. **Never Together:** No activities in this process are mutually exclusive.
5. **Activity Occurrences:** Define the bounds on how many times each activity can occur.
6. **Directly-Follows Constraints:** Define which activities must immediately follow others.

Here is the Python dictionary representing the Log Skeleton for the given scenario:

```python
log_skeleton = {
    'equivalence': set(),
    'always_before': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    },
    'always_after': {
        ('CA', 'RO'),
        ('RI', 'CA'),
        ('PI', 'RI'),
        ('QC', 'PI'),
        ('PO', 'QC'),
        ('GSL', 'PO'),
        ('D', 'GSL'),
        ('IC', 'D'),
        ('RP', 'IC')
    },
    'never_together': set(),
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {1}
    },
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    }
}
```

### Explanation:
- **Equivalence:** No activities are equivalent, so the set is empty.
- **Always Before:** Each activity must occur before the next in the process sequence. For example, `RO` must occur before `CA`, `CA` must occur before `RI`, and so on.
- **Always After:** This is the reverse of the "Always Before" constraint. Each activity must occur after the previous one in the process sequence. For example, `CA` must occur after `RO`, `RI` must occur after `CA`, and so on.
- **Never Together:** No activities are mutually exclusive, so the set is empty.
- **Activity Occurrences:** Each activity should occur exactly once in each case.
- **Directly-Follows Constraints:** Each activity must be immediately followed by the next activity in the process sequence. For example, `RO` is directly followed by `CA`, `CA` is directly followed by `RI`, and so on.

This dictionary provides a structured representation of the constraints for the order fulfillment process, ensuring that the process adheres to the defined workflow and business rules.