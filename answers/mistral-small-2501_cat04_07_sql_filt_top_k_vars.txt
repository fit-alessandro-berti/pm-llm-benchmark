To achieve the outlined objectives using DuckDB, you need to follow a series of SQL operations. Here’s a step-by-step breakdown of the solution:

1. **Extract the ordered sequence of activities for each `case_id`.**
2. **Group cases by their activity sequence to identify unique variants.**
3. **Count the number of cases per variant and determine the top K variants.**
4. **Filter the original event log to include only the cases that belong to the top K variants.**

Below is the DuckDB SQL query to accomplish these tasks.

```sql
-- Step 1: Extract the ordered sequence of activities for each case_id
WITH ordered_activities AS (
    SELECT
        case_id,
        string_agg(activity, ' -> ') AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
    ORDER BY
        timestamp
),
-- Step 2: Group cases by their activity sequence and count the occurrences
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(case_id) AS case_count
    FROM
        ordered_activities
    GROUP BY
        activity_sequence
),
-- Step 3: Determine the top K variants by their frequency
top_k_variants AS (
    SELECT
        activity_sequence
    FROM
        variant_counts
    ORDER BY
        case_count DESC
    LIMIT 4 -- Replace 4 with the desired K value
),
-- Step 4: Filter the original event log to include only the cases that belong to the top K variants
filtered_events AS (
    SELECT
        el.case_id,
        el.activity,
        el.timestamp
    FROM
        event_log el
    JOIN
        ordered_activities oa
    ON
        el.case_id = oa.case_id
    WHERE
        oa.activity_sequence IN (SELECT activity_sequence FROM top_k_variants)
);

-- Step 5: Return the final result
SELECT * FROM filtered_events;
```

### Explanation:

1. **ordered_activities CTE**: This common table expression (CTE) groups the events by `case_id` and aggregates the activities into a single string, maintaining the order imposed by the `timestamp` using `string_agg`.

2. **variant_counts CTE**: This CTE groups the cases by their activity sequence and counts the number of cases for each sequence.

3. **top_k_variants CTE**: This CTE selects the top K variants based on their frequency. Adjust the `LIMIT` clause to set the desired value of K.

4. **filtered_events CTE**: This CTE filters the original event log to include only those cases that belong to the top K variants by joining the original log with the `ordered_activities` based on `case_id`.

5. **Final SELECT**: The final query selects all the events from the filtered cases.

This query ensures that you correctly extract and process the data to identify and filter the top K process variants, and return the corresponding events from those variants.