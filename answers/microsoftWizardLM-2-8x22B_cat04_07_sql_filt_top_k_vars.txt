 To achieve the task described, we can follow these steps in DuckDB:

1. Use the `LISTAGG` window function to concatenate the activities in the correct order per case.
2. Aggregate the concatenated sequences to identify unique process variants.
3. Count the instances of each variant and select the top K variants.
4. Filter the original event log to include only the cases that correspond to the top K variants.

Here's a DuckDB SQL query that accomplishes this:

```sql
WITH OrderedActivities AS (
    SELECT
        case_id,
        LISTAGG(activity, ',') WITHIN GROUP (ORDER BY timestamp) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
),
VariantCounts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS variant_count
    FROM
        OrderedActivities
    GROUP BY
        activity_sequence
),
TopKVariants AS (
    SELECT
        activity_sequence
    FROM
        VariantCounts
    ORDER BY
        variant_count DESC
    LIMIT K -- Replace K with the desired number of top variants
),
FilteredCases AS (
    SELECT
        e.case_id
    FROM
        event_log e
    JOIN
        OrderedActivities o ON e.case_id = o.case_id
    JOIN
        TopKVariants t ON o.activity_sequence = t.activity_sequence
)
SELECT
    e.*
FROM
    event_log e
JOIN
    FilteredCases f ON e.case_id = f.case_id
ORDER BY
    e.case_id, e.timestamp;
```

Please replace `K` in the `TopKVariants` CTE with the actual number of top variants you want to retrieve.

Here's a breakdown of the query:

- `OrderedActivities`: This CTE uses `LISTAGG` to create a comma-separated list of activities per `case_id`, ordered by the `timestamp`.
- `VariantCounts`: This CTE counts the number of occurrences for each unique process variant.
- `TopKVariants`: This CTE selects the top K variants based on their frequency.
- `FilteredCases`: This CTE filters the `case_id`s to include only those that match the top K variants.
- The final `SELECT` statement retrieves all events from the original `event_log` table that belong to the cases identified in `FilteredCases`.

Make sure to adjust the `LIMIT K` clause to the desired number of top variants you wish to consider. If you want to use a parameter for `K`, you would need to pass it to the query from the environment where you're executing the SQL (e.g., a script or a programming language that interfaces with DuckDB).