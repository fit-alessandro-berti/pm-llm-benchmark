# Process Mining Analysis: Anomalies in Order Processing

After analyzing the event log data, I've identified several anomalies and deviations from the expected process flow. Let me break down what I've found, why these might be occurring, and propose SQL queries to investigate further.

## 1. Out-of-Sequence Activities

### Observations:
- Case 1002: Shipping activities (Confirm Shipment, Ship Goods) occurred before credit check and stock validation
- Case 1003: Ship Goods occurred before Validate Stock and Confirm Shipment
- Case 1004: Payment received before invoice was issued

### Hypotheses:
- Lack of system controls allowing activities to be performed out of sequence
- Manual overrides for priority orders (note that case 1002 is a "priority" order)
- Possible training issues where staff don't understand the correct sequence
- System recording errors where timestamps are incorrect

### SQL Queries to Investigate:

```sql
-- Find all cases where shipping occurs before credit check
SELECT a.case_id, 
       a.activity AS first_activity, 
       a.timestamp AS first_timestamp,
       b.activity AS second_activity, 
       b.timestamp AS second_timestamp,
       o.order_type
FROM order_event_log a
JOIN order_event_log b ON a.case_id = b.case_id
JOIN orders o ON a.case_id = o.case_id
WHERE (a.activity IN ('Confirm Shipment', 'Ship Goods'))
  AND (b.activity = 'Perform Credit Check')
  AND a.timestamp < b.timestamp
ORDER BY a.case_id;
```

```sql
-- Check if out-of-sequence activities are more common in priority orders
SELECT o.order_type, 
       COUNT(DISTINCT e.case_id) AS cases_with_sequence_issues
FROM orders o
JOIN (
    SELECT a.case_id
    FROM order_event_log a
    JOIN order_event_log b ON a.case_id = b.case_id
    WHERE (a.activity IN ('Confirm Shipment', 'Ship Goods', 'Receive Payment'))
      AND (b.activity IN ('Perform Credit Check', 'Validate Stock', 'Issue Invoice'))
      AND a.timestamp < b.timestamp
    GROUP BY a.case_id
) e ON o.case_id = e.case_id
GROUP BY o.order_type;
```

## 2. Missing Activities

### Observations:
- Case 1003: "Validate Stock" activity is missing
- Case 1004: "Perform Credit Check" and "Validate Stock" activities are missing

### Hypotheses:
- Activities performed but not recorded in the system
- Deliberate skipping of steps for high-value or trusted customers
- Process shortcuts taken during busy periods
- System integration issues causing data loss

### SQL Queries to Investigate:

```sql
-- Identify all cases with missing activities from the standard process
WITH expected_activities AS (
    SELECT 'Register Order' AS activity UNION ALL
    SELECT 'Perform Credit Check' UNION ALL
    SELECT 'Validate Stock' UNION ALL
    SELECT 'Confirm Shipment' UNION ALL
    SELECT 'Ship Goods' UNION ALL
    SELECT 'Issue Invoice' UNION ALL
    SELECT 'Receive Payment'
),
case_activities AS (
    SELECT DISTINCT case_id, activity
    FROM order_event_log
)
SELECT o.case_id, 
       o.order_type,
       o.order_value,
       e.activity AS missing_activity
FROM orders o
CROSS JOIN expected_activities e
LEFT JOIN case_activities c ON o.case_id = c.case_id AND e.activity = c.activity
WHERE c.activity IS NULL
ORDER BY o.case_id, e.activity;
```

```sql
-- Check if missing activities correlate with order value
SELECT 
    CASE 
        WHEN order_value < 1500 THEN 'Low (<1500)'
        WHEN order_value BETWEEN 1500 AND 2500 THEN 'Medium (1500-2500)'
        ELSE 'High (>2500)'
    END AS value_category,
    COUNT(DISTINCT o.case_id) AS total_orders,
    COUNT(DISTINCT CASE WHEN missing_activities > 0 THEN o.case_id END) AS orders_with_missing_steps,
    ROUND(COUNT(DISTINCT CASE WHEN missing_activities > 0 THEN o.case_id END)::numeric / 
          COUNT(DISTINCT o.case_id)::numeric * 100, 2) AS percentage
FROM orders o
JOIN (
    SELECT case_id, 
           7 - COUNT(DISTINCT activity) AS missing_activities
    FROM order_event_log
    GROUP BY case_id
) m ON o.case_id = m.case_id
GROUP BY value_category
ORDER BY value_category;
```

## 3. Unusual Resource Assignments

### Observations:
- Different resources performing the same activity across cases
- Some activities performed by resources that might not be authorized

### Hypotheses:
- Lack of clear role assignments
- Resource constraints requiring staff to perform activities outside their normal roles
- Possible security/access control issues

### SQL Queries to Investigate:

```sql
-- Analyze which resources perform which activities and identify unusual patterns
SELECT e.activity,
       e.resource,
       r.role,
       r.department,
       COUNT(*) AS frequency
FROM order_event_log e
JOIN resources r ON e.resource = r.resource_id
GROUP BY e.activity, e.resource, r.role, r.department
ORDER BY e.activity, frequency DESC;
```

```sql
-- Identify activities performed by resources from unexpected departments
SELECT e.case_id,
       e.activity,
       e.resource,
       r.role,
       r.department,
       CASE 
           WHEN e.activity LIKE 'Register%' AND r.department != 'Sales' THEN 'Unusual'
           WHEN e.activity IN ('Perform Credit Check', 'Issue Invoice', 'Receive Payment') 
                AND r.department != 'Finance' THEN 'Unusual'
           WHEN e.activity IN ('Validate Stock', 'Ship Goods', 'Confirm Shipment') 
                AND r.department != 'Logistics' THEN 'Unusual'
           ELSE 'Normal'
       END AS assignment_type
FROM order_event_log e
JOIN resources r ON e.resource = r.resource_id
WHERE CASE 
          WHEN e.activity LIKE 'Register%' AND r.department != 'Sales' THEN 1
          WHEN e.activity IN ('Perform Credit Check', 'Issue Invoice', 'Receive Payment') 
               AND r.department != 'Finance' THEN 1
          WHEN e.activity IN ('Validate Stock', 'Ship Goods', 'Confirm Shipment') 
               AND r.department != 'Logistics' THEN 1
          ELSE 0
      END = 1
ORDER BY e.case_id, e.timestamp;
```

## 4. Timing Anomalies

### Observations:
- Case 1002: Very quick succession of activities (Register Order â†’ Confirm Shipment in just 5 minutes)
- Case 1004: Payment received almost immediately after order registration

### Hypotheses:
- Timestamp recording errors
- Batch processing of activities causing incorrect timestamps
- Possible fraudulent activities or system manipulation
- Pre-payments for certain customers

### SQL Queries to Investigate:

```sql
-- Identify suspiciously quick transitions between activities
SELECT a.case_id,
       a.activity AS first_activity,
       b.activity AS next_activity,
       a.timestamp AS first_timestamp,
       b.timestamp AS next_timestamp,
       EXTRACT(EPOCH FROM (b.timestamp - a.timestamp))/60 AS minutes_between,
       o.order_type,
       o.order_value
FROM order_event_log a
JOIN order_event_log b ON a.case_id = b.case_id
JOIN orders o ON a.case_id = o.case_id
WHERE b.timestamp > a.timestamp
  AND NOT EXISTS (
      SELECT 1 FROM order_event_log c
      WHERE c.case_id = a.case_id
        AND c.timestamp > a.timestamp
        AND c.timestamp < b.timestamp
  )
  AND EXTRACT(EPOCH FROM (b.timestamp - a.timestamp))/60 < 10  -- Less than 10 minutes
ORDER BY minutes_between;
```

```sql
-- Check for payment received before or very soon after order registration
SELECT e1.case_id,
       e1.timestamp AS order_timestamp,
       e2.timestamp AS payment_timestamp,
       EXTRACT(EPOCH FROM (e2.timestamp - e1.timestamp))/60 AS minutes_between,
       o.order_value,
       o.order_type
FROM order_event_log e1
JOIN order_event_log e2 ON e1.case_id = e2.case_id
JOIN orders o ON e1.case_id = o.case_id
WHERE e1.activity = 'Register Order'
  AND e2.activity = 'Receive Payment'
  AND (e2.timestamp < e1.timestamp OR  -- Payment before order
       EXTRACT(EPOCH FROM (e2.timestamp - e1.timestamp))/60 < 60)  -- Payment within 60 min
ORDER BY minutes_between;
```

## 5. Process Compliance Analysis

### SQL Query to Calculate Overall Process Compliance:

```sql
-- Calculate process compliance score for each case
WITH expected_sequence AS (
    SELECT 1 AS step, 'Register Order' AS activity UNION ALL
    SELECT 2, 'Perform Credit Check' UNION ALL
    SELECT 3, 'Validate Stock' UNION ALL
    SELECT 4, 'Confirm Shipment' UNION ALL
    SELECT 5, 'Ship Goods' UNION ALL
    SELECT 6, 'Issue Invoice' UNION ALL
    SELECT 7, 'Receive Payment'
),
case_activity_order AS (
    SELECT 
        case_id,
        activity,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS actual_step
    FROM order_event_log
)
SELECT 
    o.case_id,
    o.order_type,
    o.order_value,
    COUNT(DISTINCT c.activity) AS activities_performed,
    7 AS expected_activities,
    COUNT(DISTINCT CASE WHEN c.activity = e.activity AND c.actual_step = e.step THEN c.activity END) AS correctly_sequenced,
    ROUND((COUNT(DISTINCT CASE WHEN c.activity = e.activity AND c.actual_step = e.step THEN c.activity END)::numeric / 7) * 100, 2) AS compliance_percentage
FROM orders o
LEFT JOIN case_activity_order c ON o.case_id = c.case_id
CROSS JOIN expected_sequence e
GROUP BY o.case_id, o.order_type, o.order_value
ORDER BY compliance_percentage DESC;
```

## Recommendations

Based on the anomalies identified, I recommend:

1. Implement system controls to enforce the correct sequence of activities
2. Review and standardize process exceptions for priority orders
3. Conduct training for staff on proper process execution
4. Audit access controls to ensure only authorized personnel can perform specific activities
5. Implement data validation to prevent timestamp errors
6. Create automated alerts for unusual process patterns
7. Develop a dashboard to monitor process compliance in real-time

These SQL queries will help identify the extent of the issues and provide data to support process improvement initiatives.