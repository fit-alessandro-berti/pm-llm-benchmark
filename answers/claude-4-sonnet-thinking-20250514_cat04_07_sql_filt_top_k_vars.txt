Here's a comprehensive DuckDB SQL query that solves this step-by-step:

```sql
WITH case_sequences AS (
  -- Step 1: Extract ordered sequence of activities for each case
  SELECT 
    case_id,
    STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence
  FROM event_log
  GROUP BY case_id
),
variant_counts AS (
  -- Step 2: Group by activity sequence and count cases per variant
  SELECT 
    activity_sequence,
    COUNT(*) AS case_count
  FROM case_sequences
  GROUP BY activity_sequence
),
top_k_variants AS (
  -- Step 3: Identify top K variants by frequency
  SELECT 
    activity_sequence,
    case_count
  FROM variant_counts
  ORDER BY case_count DESC
  LIMIT 5  -- Replace 5 with your desired K value
)
-- Step 4: Return all events from cases belonging to top K variants
SELECT 
  el.case_id,
  el.activity,
  el.timestamp
FROM event_log el
INNER JOIN case_sequences cs ON el.case_id = cs.case_id
INNER JOIN top_k_variants tv ON cs.activity_sequence = tv.activity_sequence
ORDER BY el.case_id, el.timestamp;
```

**Enhanced version with additional insights:**

```sql
WITH case_sequences AS (
  -- Extract ordered activity sequences per case
  SELECT 
    case_id,
    STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence,
    COUNT(*) AS sequence_length
  FROM event_log
  GROUP BY case_id
),
variant_counts AS (
  -- Count cases per variant and collect metrics
  SELECT 
    activity_sequence,
    COUNT(*) AS case_count,
    AVG(sequence_length) AS avg_sequence_length,
    -- Calculate percentage of total cases
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) AS percentage
  FROM case_sequences
  GROUP BY activity_sequence
),
top_k_variants AS (
  -- Get top K most frequent variants
  SELECT 
    activity_sequence,
    case_count,
    percentage,
    ROW_NUMBER() OVER (ORDER BY case_count DESC) AS variant_rank
  FROM variant_counts
  ORDER BY case_count DESC
  LIMIT 5  -- Replace with desired K
)
-- Return events with variant information
SELECT 
  el.case_id,
  el.activity,
  el.timestamp,
  tv.activity_sequence AS variant,
  tv.case_count AS variant_frequency,
  tv.percentage AS variant_percentage,
  tv.variant_rank
FROM event_log el
INNER JOIN case_sequences cs ON el.case_id = cs.case_id
INNER JOIN top_k_variants tv ON cs.activity_sequence = tv.activity_sequence
ORDER BY tv.variant_rank, el.case_id, el.timestamp;
```

**Key features of this solution:**

1. **Sequence Extraction**: Uses `STRING_AGG` with `ORDER BY timestamp` to create deterministic activity sequences
2. **Variant Identification**: Groups cases by their complete activity sequence
3. **Frequency Analysis**: Counts and ranks variants by occurrence
4. **Filtering**: Returns only events from cases belonging to top K variants
5. **Proper Ordering**: Maintains chronological order within cases and logical grouping by variants

**To use this query:**
- Replace the `LIMIT 5` with your desired K value
- The enhanced version provides additional context like variant rankings and percentages
- Results include all original event data plus variant classification information

This approach efficiently handles large event logs and provides both the requested filtering and additional process mining insights.