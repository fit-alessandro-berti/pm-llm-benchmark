Here's a DuckDB SQL query that accomplishes all the requirements:

```sql
WITH ordered_activities AS (
  -- Step 1: Get ordered sequence of activities for each case
  SELECT 
    case_id,
    LIST_AGG(activity ORDER BY timestamp) AS activity_sequence
  FROM event_log
  GROUP BY case_id
),

variant_counts AS (
  -- Step 2 & 3: Group by sequence (variant) and count occurrences, get top K
  SELECT 
    activity_sequence,
    COUNT(*) as variant_frequency,
    ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as rank
  FROM ordered_activities
  GROUP BY activity_sequence
  ORDER BY variant_frequency DESC
  LIMIT K  -- Replace K with the desired number (e.g., 5, 10)
),

top_variant_cases AS (
  -- Get all case_ids that belong to top K variants
  SELECT oa.case_id
  FROM ordered_activities oa
  JOIN variant_counts vc ON oa.activity_sequence = vc.activity_sequence
  WHERE vc.rank <= K
)

-- Step 4: Return all events from cases in top K variants
SELECT el.*
FROM event_log el
INNER JOIN top_variant_cases tvc ON el.case_id = tvc.case_id
ORDER BY el.case_id, el.timestamp;
```

**How this query works:**

1. **First CTE (`ordered_activities`)**: 
   - Groups events by `case_id`
   - Uses `LIST_AGG(activity ORDER BY timestamp)` to create an ordered array of activities for each case, preserving the temporal sequence

2. **Second CTE (`variant_counts`)**:
   - Groups the activity sequences to identify unique process variants
   - Counts how many cases follow each variant using `COUNT(*)`
   - Uses `ROW_NUMBER()` to rank variants by frequency (descending)
   - Limits to top K variants using `LIMIT K`

3. **Third CTE (`top_variant_cases`)**:
   - Joins the ordered activities with the top K variants to identify all `case_id`s that belong to these variants

4. **Final SELECT**:
   - Joins the original `event_log` with the filtered case IDs
   - Returns all columns from the original events (`*`)
   - Orders by `case_id` and `timestamp` for readability

**Usage Notes:**
- Replace `K` in the `LIMIT K` clause with your desired number of top variants (e.g., `LIMIT 5` for top 5 variants)
- The query preserves all original event data (including timestamps) for the filtered cases
- The `INNER JOIN` ensures only cases from top K variants are included
- Cases with variants outside the top K are completely excluded from the result

**Example:** If you want the top 3 most frequent variants, replace `LIMIT K` with `LIMIT 3`. The result will contain all events from cases that follow any of those 3 most common process variants.