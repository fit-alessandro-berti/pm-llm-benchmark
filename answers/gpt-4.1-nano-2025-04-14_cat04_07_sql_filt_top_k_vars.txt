Certainly! Here's a step-by-step breakdown of the approach, followed by the full DuckDB SQL query:

### Step-by-step Breakdown:

1. **Generate activity sequences per case:**
   - Use `ROW_NUMBER()` over `case_id` ordered by `timestamp` to get an ordering within each case.
   - Use `STRING_AGG()` to concatenate the ordered `activity` values into a sequence string per case.

2. **Identify unique variants:**
   - Group by the activity sequence string to identify unique variants.
   
3. **Count cases per variant and select top K variants:**
   - Count how many cases correspond to each activity sequence.
   - Order by this count descending and pick the top `K`.

4. **Filter cases belonging only to these top variants:**
   - Use the variants identified in step 3 to filter the cases.
   - Join back to the original event log to retain individual events.

---

### Complete SQL Query:

Replace `K` with the desired number of top variants you want to keep.

```sql
WITH case_sequences AS (
    -- Step 1: Generate ordered sequence of activities per case
    SELECT 
        case_id,
        STRING_AGG(activity, '|' ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    -- Step 2 & 3: Count cases per variant and select top K
    SELECT 
        activity_sequence,
        COUNT(*) AS case_count
    FROM case_sequences
    GROUP BY activity_sequence
    ORDER BY case_count DESC
    LIMIT K
),
top_variants AS (
    -- List of activity sequences for top K variants
    SELECT activity_sequence FROM variant_counts
),
cases_in_top_variants AS (
    -- Step 4: Get case_ids belonging to top variants
    SELECT cs.case_id
    FROM case_sequences cs
    JOIN top_variants tv ON cs.activity_sequence = tv.activity_sequence
)

-- Final step: Filter original event log to only include events from cases in top K variants
SELECT el.*
FROM event_log el
JOIN cases_in_top_variants cist ON el.case_id = cist.case_id;
```

---

### Notes:
- The delimiter `'|'` in `STRING_AGG()` can be changed if needed; pick one that does not appear in activity names.
- Replace `K` with your concrete number (e.g., 5, 10) depending on how many top variants you need.
- This query assumes that `activity`, `timestamp`, and `case_id` are of compatible types and correctly indexed for performance.

Let me know if you'd like me to tailor the query further or clarify any steps!