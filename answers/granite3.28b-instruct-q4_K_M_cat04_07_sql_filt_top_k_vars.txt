```sql
WITH OrderedActivities AS (
  SELECT
    case_id,
    activity,
    timestamp,
    LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity
  FROM event_log
),
ActivitySequences AS (
  SELECT
    ca.case_id,
    STRING_AGG(ca.activity, '-' ORDER BY ca.timestamp) AS activity_sequence
  FROM OrderedActivities ca
  GROUP BY ca.case_id
),
VariantCounts AS (
  SELECT 
    activity_sequence,
    COUNT(case_id) AS variant_count
  FROM ActivitySequences
  GROUP BY activity_sequence
),
TopKVariants AS (
  SELECT * 
  FROM (
    SELECT *, ROW_NUMBER() OVER (ORDER BY variant_count DESC) AS rn 
    FROM VariantCounts
  ) t
  WHERE rn <= :K -- Replace :K with the desired value of K
)
SELECT ev.*
FROM event_log ev
JOIN ActivitySequences asseq ON ev.case_id = asseq.case_id AND ev.activity = asseq.activity AND ev.timestamp = asseq.timestamp
JOIN TopKVariants tkv ON asseq.activity_sequence = tkv.activity_sequence
WHERE tkv.rn <= :K; -- Replace :K with the desired value of K
```

**Explanation:**

1. **OrderedActivities CTE**: We use a window function `LAG()` to add a column `prev_activity`, which holds the previous activity in sequence for each case, ordered by timestamp. This is crucial for reconstructing the process flow.

2. **ActivitySequences CTE**: By grouping on `case_id` and aggregating activities using `STRING_AGG()`, we create a string of activities for each case, separated by '-'. This string represents the variant sequence for each case.

3. **VariantCounts CTE**: We count how many cases correspond to each unique activity sequence (variant).

4. **TopKVariants CTE**: We rank variants based on their frequency and select the top K most common ones using a subquery with `ROW_NUMBER()`.

5. **Final SELECT**: We join back to the original event log, filtering by the top K variants. Only events belonging to cases matching these top K variants are included in the final output.