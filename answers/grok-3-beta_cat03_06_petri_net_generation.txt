Let's construct an accepting Petri net for the insurance claim management process using `pm4py`. The Petri net will include places for states between activities, transitions for the activities themselves, and appropriate arcs to represent the flow, including loops for re-submission of documents (RDS) and in-depth investigation (II). The initial marking will have a token in the start place, and the final marking will have a token in the end place representing a closed claim.

Here's the complete Python code for constructing the Petri net:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a Petri net with a descriptive name
net = PetriNet(name="insurance_claim_process")

# Define places (states between activities)
start = PetriNet.Place(name="start")  # Initial state: new claim arrives
p_cr = PetriNet.Place(name="post_cr")  # After Claim Registration
p_dv = PetriNet.Place(name="post_dv")  # After Document Verification
p_fc = PetriNet.Place(name="post_fc")  # After Fraud Check
p_ca = PetriNet.Place(name="post_ca")  # After Claim Assessment
p_ap = PetriNet.Place(name="post_ap")  # After Approval
p_p = PetriNet.Place(name="post_p")    # After Payment
p_n = PetriNet.Place(name="post_n")    # After Notification
end = PetriNet.Place(name="end")       # Final state: claim closed
p_rds = PetriNet.Place(name="post_rds")  # After Re-Document Submission (loop)
p_ii = PetriNet.Place(name="post_ii")    # After In-depth Investigation (loop)

# Add places to the Petri net
net.places.add(start)
net.places.add(p_cr)
net.places.add(p_dv)
net.places.add(p_fc)
net.places.add(p_ca)
net.places.add(p_ap)
net.places.add(p_p)
net.places.add(p_n)
net.places.add(end)
net.places.add(p_rds)
net.places.add(p_ii)

# Define transitions (activities)
t_cr = PetriNet.Transition(name="claim_registration", label="Claim Registration (CR)")
t_dv = PetriNet.Transition(name="document_verification", label="Document Verification (DV)")
t_fc = PetriNet.Transition(name="fraud_check", label="Fraud Check (FC)")
t_ca = PetriNet.Transition(name="claim_assessment", label="Claim Assessment (CA)")
t_ap = PetriNet.Transition(name="approval", label="Approval (AP)")
t_p = PetriNet.Transition(name="payment", label="Payment (P)")
t_n = PetriNet.Transition(name="notification", label="Notification (N)")
t_cl = PetriNet.Transition(name="closure", label="Closure (CL)")
t_rds = PetriNet.Transition(name="re_document_submission", label="Re-Document Submission (RDS)")
t_ii = PetriNet.Transition(name="in_depth_investigation", label="In-depth Investigation (II)")

# Add transitions to the Petri net
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_fc)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)
net.transitions.add(t_rds)
net.transitions.add(t_ii)

# Define arcs (control flow)
# Start -> Claim Registration -> Post CR
petri_utils.add_arc_from_to(start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_cr, net)

# Post CR -> Document Verification -> Post DV
petri_utils.add_arc_from_to(p_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv, net)

# Post DV -> Fraud Check -> Post FC
petri_utils.add_arc_from_to(p_dv, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc, net)

# Post FC -> Claim Assessment -> Post CA
petri_utils.add_arc_from_to(p_fc, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_ca, net)

# Post CA -> Approval -> Post AP
petri_utils.add_arc_from_to(p_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ap, net)

# Post AP -> Payment -> Post P
petri_utils.add_arc_from_to(p_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, p_p, net)

# Post P -> Notification -> Post N
petri_utils.add_arc_from_to(p_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_n, net)

# Post N -> Closure -> End
petri_utils.add_arc_from_to(p_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, end, net)

# Loop for Re-Document Submission (RDS): Post DV -> RDS -> Post RDS -> Document Verification
petri_utils.add_arc_from_to(p_dv, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_rds, net)
petri_utils.add_arc_from_to(p_rds, t_dv, net)

# Loop for In-depth Investigation (II): Post FC -> II -> Post II -> Fraud Check
petri_utils.add_arc_from_to(p_fc, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_ii, net)
petri_utils.add_arc_from_to(p_ii, t_fc, net)

# Define initial marking (token in start place)
im = Marking()
im[start] = 1

# Define final marking (token in end place)
fm = Marking()
fm[end] = 1

# Print the Petri net structure (optional, for debugging)
print("Petri Net Places:", net.places)
print("Petri Net Transitions:", net.transitions)
print("Initial Marking:", im)
print("Final Marking:", fm)
```

### Explanation of the Petri Net Structure:

1. **Places:** Represent states in the process (e.g., `start`, `post_cr` for after Claim Registration, `end` for the closed claim). Additional places are added for loops (`post_rds` for Re-Document Submission and `post_ii` for In-depth Investigation).
2. **Transitions:** Represent activities in the process, labeled with descriptive names (e.g., "Claim Registration (CR)", "Document Verification (DV)").
3. **Arcs:** Define the control flow:
   - Sequential flow from `start` to `end` through activities like CR, DV, FC, CA, AP, P, N, and CL.
   - Loops:
     - After Document Verification (DV), if documents are incomplete, the process can loop to Re-Document Submission (RDS) and back to DV.
     - After Fraud Check (FC), if doubts arise, the process can loop to In-depth Investigation (II) and back to FC.
4. **Initial Marking (`im`):** A token is placed in the `start` place, indicating the beginning of a new claim.
5. **Final Marking (`fm`):** A token is placed in the `end` place, indicating the claim is closed.

### Key Features:
- The Petri net supports loops for re-submission of documents and multiple in-depth investigations.
- The structure ensures that all activities must be completed in a logical order, with the possibility of revisiting certain steps (DV and FC) as needed.
- The initial and final markings clearly define the start and end of the process.

This Petri net can be further used for process simulation, analysis, or visualization using `pm4py` tools. If you need visualization, you can use `pm4py.visualization.petri_net.visualizer` to generate a graphical representation of the net. Let me know if you'd like to extend this code for visualization or additional analysis!