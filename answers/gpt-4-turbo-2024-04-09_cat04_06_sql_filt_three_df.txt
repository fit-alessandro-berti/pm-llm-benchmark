To construct the query fulfilling the requirements stated in the prompt using DuckDB SQL, we'll carry out the following steps:

1. Identify the cases (`case_id`) that have the specific sequence of three activities in order ('Approve Purchase Requisition', 'Create Order', 'Confirm Order') directly in succession.
  
2. Check if the time interval between 'Create Order' and 'Confirm Order' exceeds 5 days.

3. Exclude cases that meet both conditions from the final result set.

Here is how you can structure your SQL query:

```sql
-- Start by identifying valid cases which should be excluded
WITH ExcludedCases AS (
    SELECT el1.case_id
    FROM event_log el1
    JOIN event_log el2 ON el1.case_id = el2.case_id AND el2.activity = 'Create Order' AND el1.timestamp < el2.timestamp
    JOIN event_log el3 ON el2.case_id = el3.case_id AND el3.activity = 'Confirm Order' AND el2.timestamp < el3.timestamp
    WHERE el1.activity = 'Approve Purchase Requisition'
      AND el2.timestamp = (
        SELECT MIN(el2_inner.timestamp) 
        FROM event_log AS el2_inner 
        WHERE el2_inner.case_id = el1.case_id 
          AND el2_inner.timestamp > el1.timestamp 
          AND el2_inner.activity = 'Create Order'
      )
      AND el3.timestamp = (
        SELECT MIN(el3_inner.timestamp) 
        FROM event_log AS el3_inner 
        WHERE el3_inner.case_id = el2.case_id 
          AND el3_inner.timestamp > el2.timestamp 
          AND el3_inner.activity = 'Confirm Order'
      )
      AND el3.timestamp - el2.timestamp > INTERVAL '5 DAY'
)

-- Now, select all records from `event_log` not in those cases.
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM ExcludedCases)
ORDER BY case_id, timestamp;
```

### Explanation:
- The `WITH` clause named `ExcludedCases` identifies cases containing the exact order of activities: 'Approve Purchase Requisition'  'Create Order'  'Confirm Order' where each subsequent record occurs immediately after the previous (with no intervening records in terms of their timestamp order within the same case).
- For each pair ('Create Order' and 'Confirm Order'), we ensure they are the immediate next steps after each respective predecessor using subqueries to find the `MIN` timestamps.
- We also ensure that the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.
- The final `SELECT` command fetches records from `event_log` excluding those cases identified as having the specified sequential event pattern and the time condition.

This ensures the final output contains all the valid event log entries, excluding those from cases that meet both sequence and timing conditions outlined.