I'll provide a comprehensive DuckDB SQL query that solves this process mining problem step by step.

```sql
WITH case_sequences AS (
    -- Step 1: Create ordered sequence of activities for each case
    SELECT 
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

variant_counts AS (
    -- Step 2: Group cases by their activity sequence and count occurrences
    SELECT 
        activity_sequence,
        COUNT(*) AS case_count,
        ARRAY_AGG(case_id) AS cases_in_variant
    FROM case_sequences
    GROUP BY activity_sequence
),

top_k_variants AS (
    -- Step 3: Identify top K variants by frequency
    SELECT 
        activity_sequence,
        case_count,
        cases_in_variant
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT ? -- Replace ? with your desired K value, e.g., LIMIT 5 for top 5
),

top_k_cases AS (
    -- Step 4: Extract all case_ids that belong to top K variants
    SELECT UNNEST(cases_in_variant) AS case_id
    FROM top_k_variants
)

-- Step 5: Return all events from cases that belong to top K variants
SELECT 
    el.case_id,
    el.activity,
    el.timestamp
FROM event_log el
INNER JOIN top_k_cases tkc ON el.case_id = tkc.case_id
ORDER BY el.case_id, el.timestamp;
```

**Alternative approach using window functions for better performance with large datasets:**

```sql
WITH case_sequences AS (
    -- Create ordered sequence of activities for each case
    SELECT 
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

variant_counts AS (
    -- Count cases per variant and rank by frequency
    SELECT 
        activity_sequence,
        COUNT(*) AS case_count,
        DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
    FROM case_sequences
    GROUP BY activity_sequence
),

top_k_cases AS (
    -- Get cases belonging to top K variants
    SELECT cs.case_id
    FROM case_sequences cs
    INNER JOIN variant_counts vc 
        ON cs.activity_sequence = vc.activity_sequence
    WHERE vc.variant_rank <= ? -- Replace ? with your K value
)

-- Return all events from top K variant cases
SELECT 
    el.case_id,
    el.activity,
    el.timestamp
FROM event_log el
INNER JOIN top_k_cases tkc ON el.case_id = tkc.case_id
ORDER BY el.case_id, el.timestamp;
```

**If you also want to see the variant statistics alongside the events:**

```sql
WITH case_sequences AS (
    SELECT 
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

variant_counts AS (
    SELECT 
        activity_sequence,
        COUNT(*) AS case_count,
        ARRAY_AGG(case_id) AS cases_in_variant,
        ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
    FROM case_sequences
    GROUP BY activity_sequence
),

top_k_variants AS (
    SELECT * FROM variant_counts WHERE variant_rank <= ? -- Your K value
),

top_k_cases AS (
    SELECT UNNEST(cases_in_variant) AS case_id
    FROM top_k_variants
)

-- Return events with variant information
SELECT 
    el.case_id,
    el.activity,
    el.timestamp,
    cs.activity_sequence,
    vc.case_count,
    vc.variant_rank
FROM event_log el
INNER JOIN top_k_cases tkc ON el.case_id = tkc.case_id
INNER JOIN case_sequences cs ON el.case_id = cs.case_id
INNER JOIN variant_counts vc ON cs.activity_sequence = vc.activity_sequence
ORDER BY vc.variant_rank, el.case_id, el.timestamp;
```

**Key features of this solution:**

1. **Sequence Construction**: Uses `STRING_AGG` with `ORDER BY timestamp` to create ordered activity sequences
2. **Variant Identification**: Groups by the complete activity sequence string
3. **Top-K Selection**: Uses `LIMIT` or window functions to get the most frequent variants
4. **Event Filtering**: Joins back to original event log to return only events from top-K variant cases
5. **Performance**: The window function approach avoids materializing large arrays when dealing with big datasets

**Usage**: Replace the `?` placeholder with your desired K value (e.g., `5` for top 5 variants).