Below is an example DuckDB SQL query that implements the requested logic. Adjust table names, column names, and the top K value as needed.

```sql
WITH case_variants AS (
    -- 1. For each case, build the ordered sequence of activities based on timestamp.
    SELECT 
        case_id,
        string_agg(activity, '->' ORDER BY timestamp) AS variant_sequence
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    -- 2. Group by the complete activity sequence to identify unique process variants and count how many cases share each variant.
    SELECT
        variant_sequence,
        COUNT(*) AS case_count
    FROM case_variants
    GROUP BY variant_sequence
),
top_variants AS (
    -- 3. Identify the top K variants by their frequency.
    SELECT 
        variant_sequence
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT K
)

-- 4. Return all events from the original log belonging only to the cases of the top K variants.
SELECT e.*
FROM event_log e
JOIN case_variants cv USING (case_id)
JOIN top_variants tv USING (variant_sequence);
```

**Explanation of the Steps:**

1. **Construct the sequence of activities per case**  
   The `case_variants` CTE aggregates events for each `case_id` into an ordered list of activities, sorted by `timestamp`. The result is a mapping of each `case_id` to a `variant_sequence` (e.g., `A->B->C`).

2. **Identify unique variants and count cases per variant**  
   In the `variant_counts` CTE, we group the generated sequences by `variant_sequence` to find out how many distinct cases correspond to each unique process variant.

3. **Select the top K most frequent variants**  
   We select the top K variants from `variant_counts` by sorting in descending order of `case_count`.

4. **Filter original events to only those cases belonging to top K variants**  
   We then re-join the original `event_log` with `case_variants` and `top_variants` to return only those events from cases that match one of the top K variants.

The final result will be a filtered version of the original `event_log`, containing only events from the top K most frequent process variants.