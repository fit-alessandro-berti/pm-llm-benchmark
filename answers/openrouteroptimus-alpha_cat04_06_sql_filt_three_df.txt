Certainly! Here is a DuckDB SQL query (standard SQL syntax) that filters out all events from cases matching your described pattern and timing:

```sql
WITH
-- Assign a row number to each event within its case by timestamp
ordered_events AS (
  SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
  FROM event_log
),

-- Find three consecutive events matching the exact sequence
seq_matches AS (
  SELECT
    e1.case_id,
    e1.rn AS rn_approve,
    e1.timestamp AS ts_approve,
    e2.timestamp AS ts_create,
    e3.timestamp AS ts_confirm
  FROM ordered_events e1
  JOIN ordered_events e2 
    ON e1.case_id = e2.case_id AND e2.rn = e1.rn + 1
  JOIN ordered_events e3
    ON e1.case_id = e3.case_id AND e3.rn = e1.rn + 2
  WHERE
    e1.activity = 'Approve Purchase Requisition' AND
    e2.activity = 'Create Order' AND
    e3.activity = 'Confirm Order'
),

-- Find cases where the sequence occurs and timing is over 5 days
cases_to_exclude AS (
  SELECT DISTINCT case_id
  FROM seq_matches
  WHERE ts_confirm - ts_create > INTERVAL '5 days'
)

-- Final selection: all events NOT in the filtered cases
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, timestamp;
```

**Explanation:**

1. **`ordered_events`** numbers the events for each case in order of timestamp.
2. **`seq_matches`** looks for any case where activities `('Approve Purchase Requisition', 'Create Order', 'Confirm Order')` occur in consecutive order.
3. **`cases_to_exclude`** finds cases where the time from `'Create Order'` to `'Confirm Order'` is **more than 5 days**.
4. The final query returns all events **not** in those cases.

**Ordering by `case_id`, `timestamp` ensures proper grouping and temporal order in the result.**