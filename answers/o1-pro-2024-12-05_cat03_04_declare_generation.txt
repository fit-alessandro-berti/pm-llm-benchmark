```python
declare_model = {
    # Single-activity constraints
    # These specify requirements on single activities, e.g., they must appear at least once.
    'existence': {
        'IG': {'support': 1.0, 'confidence': 1.0},
        'DD': {'support': 1.0, 'confidence': 1.0},
        'TFC': {'support': 1.0, 'confidence': 1.0},
        'CE': {'support': 1.0, 'confidence': 1.0},
        'PC': {'support': 1.0, 'confidence': 1.0},
        'LT': {'support': 1.0, 'confidence': 1.0},
        'UT': {'support': 1.0, 'confidence': 1.0},
        'AG': {'support': 1.0, 'confidence': 1.0},
        'MP': {'support': 1.0, 'confidence': 1.0},
        'FL': {'support': 1.0, 'confidence': 1.0}
    },

    # Specifies that the process must start with IG
    'init': {
        'IG': {'support': 1.0, 'confidence': 1.0}
    },

    # Single-activity constraints that are not used in this scenario
    'absence': {},
    'exactly_one': {},

    # Binary or relational constraints
    # responded_existence: If one activity occurs, the other must have occurred as well.
    'responded_existence': {},

    # coexistence: If one occurs, the other must also occur (and vice versa).
    'coexistence': {
        # For example, if 'IG' occurs, 'DD' must occur at some point; and if 'DD' occurs, 'IG' must also occur.
        'IG': {
            'DD': {'support': 1.0, 'confidence': 1.0}
        },
        'DD': {
            'IG': {'support': 1.0, 'confidence': 1.0}
        }
    },

    # response: If the first activity occurs, the second must occur after it.
    'response': {
        'IG': {
            'DD': {'support': 1.0, 'confidence': 1.0}
        },
        'DD': {
            'TFC': {'support': 1.0, 'confidence': 1.0}
        },
        'TFC': {
            'CE': {'support': 1.0, 'confidence': 1.0}
        },
        'CE': {
            'PC': {'support': 1.0, 'confidence': 1.0}
        },
        'PC': {
            'LT': {'support': 1.0, 'confidence': 1.0}
        },
        'LT': {
            'UT': {'support': 1.0, 'confidence': 1.0}
        },
        'UT': {
            'AG': {'support': 1.0, 'confidence': 1.0}
        },
        'AG': {
            'MP': {'support': 1.0, 'confidence': 1.0}
        },
        'MP': {
            'FL': {'support': 1.0, 'confidence': 1.0}
        }
    },

    # precedence: If the second activity occurs, the first must have occurred before it.
    'precedence': {
        'DD': {
            'IG': {'support': 1.0, 'confidence': 1.0}
        },
        'TFC': {
            'DD': {'support': 1.0, 'confidence': 1.0}
        },
        'CE': {
            'TFC': {'support': 1.0, 'confidence': 1.0}
        },
        'PC': {
            'CE': {'support': 1.0, 'confidence': 1.0}
        },
        'LT': {
            'PC': {'support': 1.0, 'confidence': 1.0}
        },
        'UT': {
            'LT': {'support': 1.0, 'confidence': 1.0}
        },
        'AG': {
            'UT': {'support': 1.0, 'confidence': 1.0}
        },
        'MP': {
            'AG': {'support': 1.0, 'confidence': 1.0}
        },
        'FL': {
            'MP': {'support': 1.0, 'confidence': 1.0}
        }
    },

    # succession: If the first activity occurs, the second must occur; and if the second occurs, the first must have occurred.
    'succession': {},

    # altresponse: If the first activity occurs multiple times, the second must alternate in responding.
    'altresponse': {},

    # altprecedence: If the second activity occurs multiple times, the first must occur alternately before each occurrence.
    'altprecedence': {},

    # altsuccession: A stricter form of succession with alternating occurrences.
    'altsuccession': {},

    # chainresponse: The responding activity must occur immediately after the first.
    'chainresponse': {},

    # chainprecedence: The preceding activity must occur immediately before the second.
    'chainprecedence': {},

    # chainsuccession: The two activities must occur consecutively.
    'chainsuccession': {},

    # noncoexistence: If one activity occurs, the other must not occur.
    'noncoexistence': {},

    # nonsuccession: Specifies that two activities cannot occur in succession.
    'nonsuccession': {},

    # nonchainsuccession: Specifies two activities cannot occur immediately one after the other.
    'nonchainsuccession': {}
}
```