To construct an accepting Petri net for the described insurance claim management process, we will represent each activity as a place in the Petri net and connect them with transitions labeled according to their names. Additionally, we'll include loops for re-submission of documents and additional investigations if required.

Here is the Python code using `pm4py` constructs:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance_Claim_Process")

# Define places (states)
source = PetriNet.Place(name="Source")
claim_arrival = PetriNet.Place(name="Claim_Arrival")
claim_registration = PetriNet.Place(name="Claim_Registration")
document_verification = PetriNet.Place(name="Document_Verification")
re_document_submission = PetriNet.Place(name="Re_Document_Submission")
fraud_check = PetriNet.Place(name="Fraud_Check")
indepth_investigation = PetriNet.Place(name="InDepth_Investigation")
claim_assessment = PetriNet.Place(name="Claim_Assessment")
approval_step = PetriNet.Place(name="Approval_Step")
payment = PetriNet.Place(name="Payment")
notification = PetriNet.Place(name="Notification")
claim_closure = PetriNet.Place(name="Claim_Closure")

# Define transitions (activities)
claim_registration_transition = PetriNet.Transition(name="Claim_Registration", label="Register Claim")
document_verification_transition = PetriNet.Transition(name="Document_Verification", label="Verify Documents")
re_submission_transition = PetriNet.Transition(name="Re_Document_Submission", label="Resubmit Documents")
fraud_check_transition = PetriNet.Transition(name="Fraud_Check", label="Conduct Fraud Check")
investigation_transition = PetriNet.Transition(name="InDepth_Investigation", label="Perform Investigation")
claim_assessment_transition = PetriNet.Transition(name="Claim_Assessment", label="Assess Claim")
approval_transition = PetriNet.Transition(name="Approval", label="Approve Claim")
payment_transition = PetriNet.Transition(name="Payment", label="Process Payment")
notification_transition = PetriNet.Transition(name="Notification", label="Notify Customer")
closure_transition = PetriNet.Transition(name="Closure", label="Close Claim")

# Connect places with transitions
petri_utils.add_arc_from_to(source, claim_arrival, net)
petri_utils.add_arc_from_to(claim_arrival, claim_registration_transition, net)
petri_utils.add_arc_from_to(claim_registration_transition, claim_registration, net)

petri_utils.add_arc_from_to(claim_registration, document_verification_transition, net)
petri_utils.add_arc_from_to(document_verification_transition, document_verification, net)

# Re-submission loop
petri_utils.add_arc_from_to(document_verification, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, document_verification_transition, net)

petri_utils.add_arc_from_to(document_verification, fraud_check_transition, net)

# In-depth investigation loop
petri_utils.add_arc_from_to(fraud_check, investigation_transition, net)
petri_utils.add_arc_from_to(investigation_transition, fraud_check_transition, net)

petri_utils.add_arc_from_to(fraud_check, claim_assessment_transition, net)

petri_utils.add_arc_from_to(claim_assessment, approval_step, net)

# Handling Approval
petri_utils.add_arc_from_to(approval_step, approval_transition, net)
petri_utils.add_arc_from_to(approval_transition, payment_transition, net)

# Payment and Notification
petri_utils.add_arc_from_to(payment_transition, notification_transition, net)
petri_utils.add_arc_from_to(notification_transition, claim_closure, net)

# Final closure of the process
petri_utils.add_arc_from_to(claim_closure, closure_transition, net)
petri_utils.add_arc_from_to(closure_transition, source, net)  # Loop back to source after closing

# Initial marking (source place)
im = Marking()
im[source] = 1

# Final marking (closing claim)
fm = Marking()
fm[claim_closure] = 1

# Applying initial and final markings
net.apply_markings(im=im, fm=fm)

```

### Explanation:

- **Places (`source`, `Claim_Arrival`, ..., `Claim_Closure`)**: Represent each state of the insurance claim process.
- **Transitions (`Claim_Registration`, ..., `Closure`)**: Correspond to activities in the process flow. Some transitions have loops back to previous states for re-submission or investigations.
- **Arcs**: Connect places to transitions, following the logical sequence and possible loops (e.g., document verification leading back if re-submission is needed).
- **Initial Marking (`im`)**: A single token at `source`, indicating a new claim arriving.
- **Final Marking (`fm`)**: A token placed in `claim_closure`, marking that the process has concluded with the closure of a claim.

This Petri net captures all the required steps and loops for handling an insurance claim within this scenario.