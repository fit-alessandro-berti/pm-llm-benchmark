<think>
Okay, let's break down this problem step by step.

First, I need to find all case_ids where the activities 'Approve Purchase Requisition', followed immediately by 'Create Order', then 'Confirm Order' occur in that exact sequence. But importantly, there can't be any other activity between these three events in a single case_id. 

So how do I check for consecutive activities? One approach is to use lead/lag functions to look at the next and previous rows within each case_id ordered by timestamp.

Next, for those cases where this exact sequence exists, I need to calculate the time difference between 'Create Order' and 'Confirm Order'. If that duration is more than 5 days (120 hours), we should exclude all events from such cases. 

To do this, I can first identify the case_ids with the problematic sequences using CTEs or subqueries. Then, in the main query, use a WHERE clause to exclude these case_ids.

Let's start by creating a CTE that finds the consecutive activities:

1. Use LAG() and LEAD() functions within each case_id ordered by timestamp.
2. Check if the current activity is 'Approve Purchase Requisition', next is 'Create Order', then the one after that is 'Confirm Order'.
3. Also ensure there are no other activities in between these.

Then, for those case_ids, calculate the time difference between 'Create Order' and 'Confirm Order' events. If more than 5 days, exclude them.

Finally, return all rows except those where case_id matches any of the excluded cases.
</think>

```sql
WITH problematic_cases AS (
    -- Identify cases with exact sequence but no other activities in between
    SELECT DISTINCT 
        e1.case_id,
        e2.activity as next_activity,
        e3.activity as third_activity
    FROM event_log e1
    LEFT JOIN event_log e2 ON 
        e1.case_id = e2.case_id AND 
        e2.timestamp > e1.timestamp AND 
        e2.timestamp <= COALESCE((SELECT min(timestamp) FROM event_log WHERE case_id = e1.case_id AND activity = 'Create Order'), '9999-01-01') -- Get next activity if exists
    LEFT JOIN event_log e3 ON 
        e2.case_id = e3.case_id AND 
        e3.timestamp > e2.timestamp AND 
        e3.timestamp <= COALESCE((SELECT min(timestamp) FROM event_log WHERE case_id = e2.case_id AND activity = 'Confirm Order'), '9999-01-01')
    WHERE 
        e1.activity = 'Approve Purchase Requisition' AND
        e2.activity = 'Create Order' AND
        e3.activity = 'Confirm Order'
),
long_duration_cases AS (
    -- Find cases where the time difference exceeds 5 days
    SELECT DISTINCT pc.case_id
    FROM problematic_cases pc
    JOIN event_log create_order ON 
        pc.case_id = create_order.case_id AND 
        create_order.activity = 'Create Order' 
    JOIN event_log confirm_order ON 
        pc.case_id = confirm_order.case_id AND 
        confirm_order.activity = 'Confirm Order'
    WHERE 
        create_order.timestamp <= confirm_order.timestamp
        AND (confirm_order.timestamp - create_order.timestamp) > INTERVAL '5 days'
)

-- Return all events except those from the filtered cases
SELECT *
FROM event_log
WHERE case_id NOT IN (
    SELECT case_id FROM long_duration_cases
)
ORDER BY case_id, timestamp;
```

This solution works in three main steps:

1. The first CTE (`problematic_cases`) identifies any cases where our exact sequence exists using self-joins to ensure consecutive activities.

2. The second CTE (`long_duration_cases`) filters these sequences to find only those with more than 5 days between 'Create Order' and 'Confirm Order'.

3. Finally, we select all events from the original table but exclude any rows where `case_id` appears in our filtered list of problematic cases.

The query uses self-joins to maintain the order of activities within each case while checking for consecutive events. The interval check ensures we're only considering cases with durations exceeding 5 days.