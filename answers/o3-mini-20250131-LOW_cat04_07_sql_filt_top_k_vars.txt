Below is one complete solution using Common Table Expressions (CTEs):

---------------------------------------------------------------------
-- Set the desired number of top variants (K)
WITH
  -- Step 1: Determine the ordered sequence of activities per case_id.
  case_variants AS (
    SELECT
      case_id,
      -- Construct the variant as a commaseparated ordered list of activities.
      LIST_AGG(activity, '->' ORDER BY "timestamp") AS variant
    FROM event_log
    GROUP BY case_id
  ),
  -- Step 2: Count cases per unique variant and select the top K variants.
  top_variants AS (
    SELECT
      variant
    FROM case_variants
    GROUP BY variant
    ORDER BY COUNT(*) DESC
    LIMIT 10  -- Replace 10 with any chosen K value
  ),
  -- Step 3: Filter the case_variants to only include cases that are part of the top variants.
  filtered_cases AS (
    SELECT cv.case_id
    FROM case_variants cv
    JOIN top_variants tv ON cv.variant = tv.variant
  )
  
-- Step 4: Return all events from these cases.
SELECT e.*
FROM event_log e
JOIN filtered_cases fc
  ON e.case_id = fc.case_id
ORDER BY e.case_id, e."timestamp";
---------------------------------------------------------------------

Explanation of the query:

1. In the CTE "case_variants", we aggregate events for each case_id using DuckDB’s LIST_AGG ordered by the "timestamp". This produces an ordered activity sequence (named variant) for every process instance.

2. In "top_variants", we group by the variant and order the groups by the number of cases descendingly. The LIMIT clause (here set to 10) selects the top K most frequent variants.

3. In "filtered_cases", we join the complete list of cases with the top variants, so only the case_ids from those popular variants are retained.

4. Finally, we join the original event log with the filtered_cases list. The results are ordered by case_id and timestamp, ensuring that only events from the cases that belong to one of the top K variants are returned.

You can adjust the value passed to LIMIT to control the number of top variants (K) as needed.