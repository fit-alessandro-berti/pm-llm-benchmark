To solve this problem, we need to identify cases that contain the specific sequence of activities ('Approve Purchase Requisition', 'Create Order', 'Confirm Order') and where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days. Then, we will exclude these cases from the final result.

Here's how you can achieve this using DuckDB SQL:

1. Identify cases with the required sequence.
2. Filter those cases where the time difference is more than 5 days.
3. Exclude these cases from the final result.

Below is the complete DuckDB SQL query:

```sql
WITH 
-- Identify cases with the required sequence of activities
sequence_cases AS (
    SELECT DISTINCT
        case_id
    FROM
        event_log el
    WHERE
        EXISTS (
            SELECT 1
            FROM event_log el2
            WHERE el.case_id = el2.case_id
              AND el2.activity = 'Approve Purchase Requisition'
        )
      AND EXISTS (
            SELECT 1
            FROM event_log el2
            WHERE el.case_id = el2.case_id
              AND el2.activity = 'Create Order'
              AND el2.timestamp < (
                  SELECT MAX(timestamp)
                  FROM event_log el3
                  WHERE el3.case_id = el2.case_id
                    AND el3.activity = 'Confirm Order'
              )
          )
      AND EXISTS (
            SELECT 1
            FROM event_log el2
            WHERE el.case_id = el2.case_id
              AND el2.activity = 'Confirm Order'
              AND el2.timestamp > (
                  SELECT MIN(timestamp)
                  FROM event_log el3
                  WHERE el3.case_id = el2.case_id
                    AND el3.activity = 'Create Order'
              )
          )
),
-- Filter cases based on the time difference condition
filtered_sequence_cases AS (
    SELECT
        case_id
    FROM
        sequence_cases sc
    WHERE
        EXISTS (
            SELECT 1
            FROM event_log el
            WHERE el.case_id = sc.case_id
              AND el.activity = 'Create Order'
        )
      AND EXISTS (
            SELECT 1
            FROM event_log el
            WHERE el.case_id = sc.case_id
              AND el.activity = 'Confirm Order'
          )
      AND (
            SELECT MAX(timestamp)
            FROM event_log el
            WHERE el.case_id = sc.case_id
              AND el.activity = 'Confirm Order'
          ) -
          (
            SELECT MIN(timestamp)
            FROM event_log el
            WHERE el.case_id = sc.case_id
              AND el.activity = 'Create Order'
          ) > INTERVAL '5 DAY'
)

-- Select all events excluding those from the filtered sequence cases
SELECT *
FROM event_log el
WHERE NOT EXISTS (
    SELECT 1
    FROM filtered_sequence_cases fsc
    WHERE el.case_id = fsc.case_id
);
```

### Explanation:
1. **sequence_cases**: This common table expression (CTE) identifies distinct `case_id`s that have the required sequence of activities in the correct order.
2. **filtered_sequence_cases**: This CTE further filters the identified cases to include only those where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.
3. The final `SELECT` statement returns all events from `event_log`, excluding those from the `case_id`s identified in `filtered_sequence_cases`.

This approach ensures that the resulting dataset includes only events from cases that do not match the specified sequence or timing condition.