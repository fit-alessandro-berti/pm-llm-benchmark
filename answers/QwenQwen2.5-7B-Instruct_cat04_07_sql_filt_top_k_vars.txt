Certainly! To achieve the described task, we can break down the problem into several steps and use DuckDB SQL to accomplish each step effectively. Here is a comprehensive SQL query that performs the required operations:

1. **Determine the sequence of activities for each `case_id`, maintaining the order by `timestamp`:**

   ```sql
   WITH ordered_activities AS (
       SELECT
           case_id,
           activity,
           timestamp,
           ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) as activity_order
       FROM event_log
   )
   ```

2. **Group cases by their complete activity sequence to identify unique process variants:**

   ```sql
   , activity_sequences AS (
       SELECT
           case_id,
           STRING_AGG(activity, '->') WITHIN GROUP (ORDER BY activity_order) AS variant
       FROM ordered_activities
       GROUP BY case_id
   )
   ```

3. **Count how many cases correspond to each variant and determine the top K variants by their frequency:**

   ```sql
   , variant_counts AS (
       SELECT
           variant,
           COUNT(*) AS case_count
       FROM activity_sequences
       GROUP BY variant
   )
   , top_k_variants AS (
       SELECT
           variant,
           case_count
       FROM variant_counts
       ORDER BY case_count DESC
       LIMIT K
   )
   ```

4. **Return all events from the original event log that belong only to cases which are part of these top K variants:**

   ```sql
   SELECT el.*
   FROM event_log el
   JOIN activity_sequences as seq ON el.case_id = seq.case_id
   JOIN top_k_variants kv ON seq.variant = kv.variant
   ```

Combining all these steps into one SQL query, we get:

```sql
WITH ordered_activities AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) as activity_order
    FROM event_log
),
activity_sequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, '->') WITHIN GROUP (ORDER BY activity_order) AS variant
    FROM ordered_activities
    GROUP BY case_id
),
variant_counts AS (
    SELECT
        variant,
        COUNT(*) AS case_count
    FROM activity_sequences
    GROUP BY variant
),
top_k_variants AS (
    SELECT
        variant,
        case_count
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT K
)
SELECT el.*
FROM event_log el
JOIN activity_sequences as seq ON el.case_id = seq.case_id
JOIN top_k_variants kv ON seq.variant = kv.variant;
```

### Explanation:
- **ordered_activities**: This CTE (Common Table Expression) ensures that activities for each `case_id` are ordered by `timestamp` using `ROW_NUMBER()`.
- **activity_sequences**: This CTE creates a string representation of the activity sequence for each `case_id`, which is used to identify unique process variants.
- **variant_counts**: This CTE counts the number of cases that follow each variant.
- **top_k_variants**: This CTE selects the top K variants based on their frequency.
- The final `SELECT` statement retrieves all events from the original `event_log` that belong to the top K variants.

Make sure to replace `K` with the actual number of top variants you are interested in.