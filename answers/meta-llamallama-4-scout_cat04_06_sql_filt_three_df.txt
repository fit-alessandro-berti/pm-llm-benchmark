### DuckDB SQL Query

To solve this problem, we need to write a DuckDB SQL query that performs the specified operations. The approach involves:

1. Identifying sequences of activities.
2. Filtering cases based on the sequence and timing condition.
3. Excluding those cases from the final result.

```sql
WITH 
    -- Number events within each case for easier sequence identification
    numbered_events AS (
        SELECT 
            case_id,
            activity,
            timestamp,
            ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_num
        FROM 
            event_log
    ),
    
    -- Identify sequences of interest
    target_sequences AS (
        SELECT 
            ne1.case_id,
            ne1.timestamp AS approve_timestamp,
            ne2.timestamp AS create_timestamp,
            ne3.timestamp AS confirm_timestamp
        FROM 
            numbered_events ne1
        JOIN 
            numbered_events ne2 ON ne1.case_id = ne2.case_id AND ne1.event_num = ne2.event_num - 1
        JOIN 
            numbered_events ne3 ON ne2.case_id = ne3.case_id AND ne2.event_num = ne3.event_num - 1
        WHERE 
            ne1.activity = 'Approve Purchase Requisition'
            AND ne2.activity = 'Create Order'
            AND ne3.activity = 'Confirm Order'
    ),
    
    -- Filter sequences by the timing condition
    filtered_sequences AS (
        SELECT 
            case_id,
            create_timestamp,
            confirm_timestamp
        FROM 
            target_sequences
        WHERE 
            confirm_timestamp - create_timestamp > INTERVAL '5 days'
    ),
    
    -- Cases to exclude
    excluded_cases AS (
        SELECT 
            case_id
        FROM 
            filtered_sequences
    )

-- Return all events except those from excluded cases
SELECT 
    *
FROM 
    event_log
WHERE 
    case_id NOT IN (SELECT case_id FROM excluded_cases);
```

### Explanation

The query uses Common Table Expressions (CTEs) to organize the logic:

1. **numbered_events**: Adds a row number to each event within a case, ordered by timestamp. This helps in identifying sequences of activities.

2. **target_sequences**: Finds sequences of 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' activities that occur in direct succession.

3. **filtered_sequences**: From the identified sequences, filters those where more than 5 days elapsed between 'Create Order' and 'Confirm Order'.

4. **excluded_cases**: Lists case IDs that match both the sequence and the timing condition.

5. **Final Query**: Selects all events from `event_log` except those belonging to cases in `excluded_cases`.

### Advice

- Ensure that the `event_log` table is properly indexed on `case_id` and `timestamp` for efficient performance.
- Verify that the timestamp column is of a datetime type compatible with DuckDB's interval operations.
- Adjust the interval syntax if necessary, based on the specific requirements and version of DuckDB being used.