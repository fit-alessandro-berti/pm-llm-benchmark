To model the insurance claim management process described, we need to construct a Petri net that captures the sequence of activities, including potential loops for re-document submission and in-depth investigations. The Petri net will have places representing the states between these activities and transitions labeled with the activity names. We will also define the initial and final markings.

Here’s the step-by-step construction of the Petri net using `pm4py.objects.petri_net.obj.PetriNet`, `pm4py.objects.petri_net.obj.Marking`, and `pm4py.objects.petri_net.utils.petri_utils`.

### Step-by-Step Construction

1. **Define the Petri Net:**
   - Create places for each step in the process.
   - Create transitions for each activity.
   - Add arcs between places and transitions to define the flow.

2. **Define the Initial and Final Markings:**
   - The initial marking will have a token in the start place.
   - The final marking will have a token in the final place.

3. **Handle Loops:**
   - For re-document submission (RDS) and in-depth investigation (II), create loops that can be traversed multiple times.

### Python Code

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Define the Petri Net
net = PetriNet(name="Insurance Claim Management Process")

# Define places
start = PetriNet.Place(name="start")
claim_registration = PetriNet.Place(name="claim_registration")
document_verification = PetriNet.Place(name="document_verification")
re_document_submission = PetriNet.Place(name="re_document_submission")
fraud_check = PetriNet.Place(name="fraud_check")
in_depth_investigation = PetriNet.Place(name="in_depth_investigation")
claim_assessment = PetriNet.Place(name="claim_assessment")
approval = PetriNet.Place(name="approval")
payment = PetriNet.Place(name="payment")
notification = PetriNet.Place(name="notification")
closure = PetriNet.Place(name="closure")

# Add places to the net
net.places.add(start)
net.places.add(claim_registration)
net.places.add(document_verification)
net.places.add(re_document_submission)
net.places.add(fraud_check)
net.places.add(in_depth_investigation)
net.places.add(claim_assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(closure)

# Define transitions
claim_registration_transition = PetriNet.Transition(name="claim_registration", label="Claim Registration (CR)")
document_verification_transition = PetriNet.Transition(name="document_verification", label="Document Verification (DV)")
re_document_submission_transition = PetriNet.Transition(name="re_document_submission", label="Re-Document Submission (RDS)")
fraud_check_transition = PetriNet.Transition(name="fraud_check", label="Fraud Check (FC)")
in_depth_investigation_transition = PetriNet.Transition(name="in_depth_investigation", label="In-Depth Investigation (II)")
claim_assessment_transition = PetriNet.Transition(name="claim_assessment", label="Claim Assessment (CA)")
approval_transition = PetriNet.Transition(name="approval", label="Approval (AP)")
payment_transition = PetriNet.Transition(name="payment", label="Payment (P)")
notification_transition = PetriNet.Transition(name="notification", label="Notification (N)")
closure_transition = PetriNet.Transition(name="closure", label="Closure (CL)")

# Add transitions to the net
net.transitions.add(claim_registration_transition)
net.transitions.add(document_verification_transition)
net.transitions.add(re_document_submission_transition)
net.transitions.add(fraud_check_transition)
net.transitions.add(in_depth_investigation_transition)
net.transitions.add(claim_assessment_transition)
net.transitions.add(approval_transition)
net.transitions.add(payment_transition)
net.transitions.add(notification_transition)
net.transitions.add(closure_transition)

# Add arcs between places and transitions
petri_utils.add_arc_from_to(start, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, claim_registration_transition, net)
petri_utils.add_arc_from_to(claim_registration_transition, document_verification, net)
petri_utils.add_arc_from_to(document_verification, document_verification_transition, net)
petri_utils.add_arc_from_to(document_verification_transition, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, re_document_submission_transition, net)
petri_utils.add_arc_from_to(re_document_submission_transition, document_verification, net)
petri_utils.add_arc_from_to(document_verification, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, fraud_check_transition, net)
petri_utils.add_arc_from_to(fraud_check_transition, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, in_depth_investigation_transition, net)
petri_utils.add_arc_from_to(in_depth_investigation_transition, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, claim_assessment_transition, net)
petri_utils.add_arc_from_to(claim_assessment_transition, approval, net)
petri_utils.add_arc_from_to(approval, approval_transition, net)
petri_utils.add_arc_from_to(approval_transition, payment, net)
petri_utils.add_arc_from_to(payment, payment_transition, net)
petri_utils.add_arc_from_to(payment_transition, notification, net)
petri_utils.add_arc_from_to(notification, notification_transition, net)
petri_utils.add_arc_from_to(notification_transition, closure, net)
petri_utils.add_arc_from_to(closure, closure_transition, net)

# Define initial marking
im = Marking()
im[start] = 1

# Define final marking
fm = Marking()
fm[closure] = 1

# Print the Petri net for verification (optional)
print("Petri Net for Insurance Claim Management Process:")
print("Places:", [place.name for place in net.places])
print("Transitions:", [transition.name for transition in net.transitions])
print("Initial Marking:", im)
print("Final Marking:", fm)
```

### Explanation

- **Places:**
  - `start`: Represents the start of the process.
  - `claim_registration`, `document_verification`, `re_document_submission`, `fraud_check`, `in_depth_investigation`, `claim_assessment`, `approval`, `payment`, `notification`, `closure`: Represent the different states in the process.

- **Transitions:**
  - Each transition corresponds to an activity in the process (e.g., `claim_registration`, `document_verification`, etc.).

- **Arcs:**
  - Define the sequence and flow of the process. For example, `claim_registration` leads to `document_verification`, and `document_verification` can lead to `re_document_submission` or `fraud_check` based on the outcome.

- **Loops:**
  - The loop between `document_verification` and `re_document_submission` allows for multiple re-submissions of documents.
  - The loop between `fraud_check` and `in_depth_investigation` allows for multiple in-depth investigations.

- **Initial and Final Markings:**
  - The initial marking places a token in the `start` place.
  - The final marking places a token in the `closure` place, indicating that the claim has been successfully processed and closed.

This Petri net accurately models the insurance claim management process, including potential loops for re-document submission and in-depth investigations.