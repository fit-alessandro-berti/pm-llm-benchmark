Here is a selfcontained Python snippet that builds an accepting Petri net for the insuranceclaim process you described.  You can copy–paste it into your code and it will produce a `PetriNet` with the desired loops (DVRDS, FCII), together with the initial and final markings.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# 1. Create the net
net = PetriNet("Insurance Claim Management")

# 2. Create places
p_start       = PetriNet.Place("p_start")        # before Claim Registration
p_after_cr    = PetriNet.Place("p_after_cr")     # after CR
p_after_dv    = PetriNet.Place("p_after_dv")     # after DV
p_after_fc    = PetriNet.Place("p_after_fc")     # after FC
p_after_ca    = PetriNet.Place("p_after_ca")     # after CA
p_after_ap    = PetriNet.Place("p_after_ap")     # after Approval
p_after_p     = PetriNet.Place("p_after_p")      # after Payment
p_after_n     = PetriNet.Place("p_after_n")      # after Notification
p_closed      = PetriNet.Place("p_closed")      # final

for p in [p_start, p_after_cr, p_after_dv, p_after_fc,
          p_after_ca, p_after_ap, p_after_p, p_after_n, p_closed]:
    net.places.add(p)

# 3. Create transitions
t_CR  = PetriNet.Transition("t_CR",  label="Claim Registration")
t_DV  = PetriNet.Transition("t_DV",  label="Document Verification")
t_RDS = PetriNet.Transition("t_RDS", label="Re-Document Submission")
t_FC  = PetriNet.Transition("t_FC",  label="Fraud Check")
t_II  = PetriNet.Transition("t_II",  label="In-depth Investigation")
t_CA  = PetriNet.Transition("t_CA",  label="Claim Assessment")
t_AP  = PetriNet.Transition("t_AP",  label="Approval")
t_P   = PetriNet.Transition("t_P",   label="Payment")
t_N   = PetriNet.Transition("t_N",   label="Notification")
t_CL  = PetriNet.Transition("t_CL",  label="Closure")

for t in [t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL]:
    net.transitions.add(t)

# 4. Add arcs
# Start  CR  after_cr
petri_utils.add_arc_from_to(p_start, t_CR,  net)
petri_utils.add_arc_from_to(t_CR,  p_after_cr, net)

# after_cr  DV  after_dv
petri_utils.add_arc_from_to(p_after_cr, t_DV,  net)
petri_utils.add_arc_from_to(t_DV,       p_after_dv, net)

# after_dv  RDS  back to DV
petri_utils.add_arc_from_to(p_after_dv, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS,      p_after_cr, net)  
# (we send it back to after_cr so it can go DV again; 
#  if you prefer to model a “pending” place before DV, just create it)

# after_dv  FC  after_fc
petri_utils.add_arc_from_to(p_after_dv, t_FC,  net)
petri_utils.add_arc_from_to(t_FC,       p_after_fc, net)

# after_fc  II  back to FC
petri_utils.add_arc_from_to(p_after_fc, t_II, net)
petri_utils.add_arc_from_to(t_II,      p_after_fc, net)

# after_fc  CA  after_ca
petri_utils.add_arc_from_to(p_after_fc, t_CA,  net)
petri_utils.add_arc_from_to(t_CA,       p_after_ca, net)

# after_ca  AP  after_ap
petri_utils.add_arc_from_to(p_after_ca, t_AP,      net)
petri_utils.add_arc_from_to(t_AP,        p_after_ap, net)

# after_ap  P  after_p
petri_utils.add_arc_from_to(p_after_ap, t_P,      net)
petri_utils.add_arc_from_to(t_P,        p_after_p, net)

# after_p  N  after_n
petri_utils.add_arc_from_to(p_after_p, t_N,      net)
petri_utils.add_arc_from_to(t_N,        p_after_n, net)

# after_n  CL  closed
petri_utils.add_arc_from_to(p_after_n, t_CL,    net)
petri_utils.add_arc_from_to(t_CL,       p_closed, net)

# 5. Define the initial and final markings
im = Marking()
im[p_start] = 1

fm = Marking()
fm[p_closed] = 1

# The net, together with im and fm, is now an accepting Petri net.
# You can inspect net.places, net.transitions, im, fm, or export it, 
# or use it for replay/mining in PM4Py.
```

Explanation of the loops:

- Document Verification (DV) always produces a token in `p_after_dv`.  
  From there, if documents are incomplete, transition `RDS` “resubmits” and returns the token to `p_after_cr` so you pass through DV again.  
- Fraud Check (FC) likewise can feed into an indepth investigation loop (`II`) before finally going on to Claim Assessment (`CA`).  

The initial marking puts the sole token in `p_start`; the final marking requires the single token to reach `p_closed`.