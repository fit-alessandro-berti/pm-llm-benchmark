Below is a concise POWL model that fits the log:

Textual structure
PO = (
  nodes = {
    OR, MS, QS,
    * ( AS, * ( IQC, tau_iqc ) ),
    * ( TST, RT ),
    PK,
    X ( LB, tau_lb ),
    DP, D
  },
  order = {
    OR-->MS,
    MS-->QS,
    QS-->*(AS, *(IQC, tau_iqc)),
    *(AS, *(IQC, tau_iqc))-->*(TST, RT),
    *(TST, RT)-->PK,
    PK-->X(LB, tau_lb),
    X(LB, tau_lb)-->DP,
    DP-->D
  }
)

pm4py-style construction
```python
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Activities
OR  = Transition(label="OR")
MS  = Transition(label="MS")
QS  = Transition(label="QS")
AS  = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT  = Transition(label="RT")
PK  = Transition(label="PK")
LB  = Transition(label="LB")
DP  = Transition(label="DP")
D   = Transition(label="D")

# Silent transitions
tau_iqc = SilentTransition()  # to allow multiple consecutive IQCs within an iteration
tau_lb  = SilentTransition()  # optional skip of labeling

# In-line quality check may repeat between assembly iterations:
# Outer loop: do AS, then either exit or do some IQC(s) and AS again.
iqc_repeat = OperatorPOWL(operator=Operator.LOOP, children=[IQC, tau_iqc])  # allows 1+ IQCs
assembly_loop = OperatorPOWL(operator=Operator.LOOP, children=[AS, iqc_repeat])

# Testing with possible re-testing until pass
test_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Labeling is optional (may be skipped)
label_opt = OperatorPOWL(operator=Operator.XOR, children=[LB, tau_lb])

# Partial order (overall sequence)
root = StrictPartialOrder(nodes=[OR, MS, QS, assembly_loop, test_loop, PK, label_opt, DP, D])
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, assembly_loop)
root.order.add_edge(assembly_loop, test_loop)
root.order.add_edge(test_loop, PK)
root.order.add_edge(PK, label_opt)
root.order.add_edge(label_opt, DP)
root.order.add_edge(DP, D)
```

Reading guide
- ORMSQS is a strict sequence.
- Assembly and in-line checks: *(AS, *(IQC, tau_iqc)) enforces at least one AS; if continued, one or more IQCs can occur before the next AS (matching AS될QC되S and AS될QC될QC되S variants). The loop may exit right after the first AS (case without IQC).
- Testing and re-testing: *(TST, RT) captures TST followed by zero or more (RT, TST) cycles.
- After successful testing: PK, then optional labeling via X(LB, tau_lb), then DPD. Labeling can be skipped.