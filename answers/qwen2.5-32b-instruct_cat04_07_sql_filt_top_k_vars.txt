To accomplish the given task, we need to:
1. Extract the ordered sequence of activities per `case_id`.
2. Aggregate these sequences to count how many cases correspond to each variant.
3. Identify the top K variants by their frequency.
4. Filter the events to return only those from cases that belong to the top K variants.

Below is the SQL query that accomplishes this:

```sql
WITH ordered_events AS (
  SELECT 
    case_id,
    activity,
    timestamp,
    ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_order
  FROM 
    event_log
),
activity_sequences AS (
  SELECT 
    case_id,
    STRING_AGG(activity, ',' ORDER BY event_order) AS activity_sequence
  FROM 
    ordered_events
  GROUP BY 
    case_id
),
variant_counts AS (
  SELECT 
    activity_sequence,
    COUNT(*) AS variant_count
  FROM 
    activity_sequences
  GROUP BY 
    activity_sequence
),
top_variants AS (
  SELECT 
    activity_sequence,
    ROW_NUMBER() OVER (ORDER BY variant_count DESC) AS rank
  FROM 
    variant_counts
)
SELECT 
  el.*
FROM 
  event_log el
JOIN 
  activity_sequences asq ON el.case_id = asq.case_id
JOIN 
  top_variants tv ON asq.activity_sequence = tv.activity_sequence
WHERE 
  tv.rank <= K -- Replace 'K' with the actual number of top variants you want to consider
ORDER BY 
  el.case_id, el.timestamp;
```

### Explanation:
- **ordered_events**: This CTE (Common Table Expression) assigns a sequential number to each event within a `case_id` based on the `timestamp`. This allows us to maintain the order of activities.
- **activity_sequences**: This CTE concatenates the activities for each `case_id` into a single string, in the order they occurred, using `STRING_AGG()` function.
- **variant_counts**: This CTE counts the number of cases that follow each unique activity sequence (variant).
- **top_variants**: This CTE ranks the variants by their frequency (how many cases they represent), using `ROW_NUMBER()` to assign a unique rank based on variant frequency.
- The final `SELECT` query joins the original `event_log` with the `activity_sequences` and `top_variants` to filter out only the events that belong to the top K variants, ordered by `case_id` and `timestamp`.

Replace `K` with the desired number to specify how many of the top variants you want to consider.