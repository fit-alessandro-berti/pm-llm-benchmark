## Anomaly Analysis

### Identified Anomalies in Temporal Profile

1. **Receive to Approve (RP)**: 25-hour average with extremely low 1-hour standard deviation suggests an artificially rigid approval timeline that lacks natural business variation.

2. **Assign to Close (AC)**: 2-hour average indicates claims are being closed shortly after assignment, potentially bypassing critical evaluation and approval steps.

3. **Evaluate to Notify (EN)**: 5-minute average suggests unrealistically rapid notification after evaluation, possibly indicating automated processing without proper review.

4. **Approve to Notify (PN)**: 7-day average with high 2-day standard deviation reveals significant delays and inconsistency in customer notification after approval.

## Hypotheses for Anomalies

### RP Rigid Approval Pattern
- **Automated approval system** with fixed 25-hour processing window regardless of claim complexity
- **Batch processing** where approvals are processed at predetermined daily intervals
- **System constraint** forcing artificial timing due to technical limitations

### AC Premature Closure
- **Auto-rejection system** for certain claim types immediately after assignment
- **Duplicate claim detection** causing immediate closure
- **Insufficient adjuster capacity** leading to quick dismissals rather than proper evaluation

### EN Rapid Notification
- **Automated notification system** triggered immediately upon evaluation completion
- **Pre-populated notification templates** requiring minimal customization
- **System integration** bypassing manual review processes

### PN Delayed Notification
- **Manual notification process** creating bottlenecks
- **Customer contact difficulties** causing retry delays
- **Resource constraints** in customer service departments
- **Complex notification requirements** for certain claim types

## Verification SQL Queries

### Query 1: Identify Claims with Rigid RP Timing
```sql
WITH claim_timings AS (
    SELECT 
        r.claim_id,
        r.timestamp as receive_time,
        p.timestamp as approve_time,
        EXTRACT(EPOCH FROM (p.timestamp - r.timestamp)) as seconds_diff
    FROM claim_events r
    JOIN claim_events p ON r.claim_id = p.claim_id
    WHERE r.activity = 'R' AND p.activity = 'P'
      AND p.timestamp > r.timestamp
)
SELECT 
    claim_id,
    seconds_diff,
    ABS(seconds_diff - 90000) as deviation_from_avg
FROM claim_timings
WHERE ABS(seconds_diff - 90000) < 3600  -- Within 1 hour of the 25-hour average
ORDER BY deviation_from_avg;
```

### Query 2: Detect Premature Closures (AC without E or P)
```sql
SELECT DISTINCT
    a.claim_id,
    c.claim_type,
    a.timestamp as assign_time,
    cl.timestamp as close_time,
    EXTRACT(EPOCH FROM (cl.timestamp - a.timestamp))/3600 as hours_to_close
FROM claim_events a
JOIN claim_events cl ON a.claim_id = cl.claim_id
JOIN claims c ON a.claim_id = c.claim_id
WHERE a.activity = 'A' AND cl.activity = 'C'
  AND NOT EXISTS (
      SELECT 1 FROM claim_events e 
      WHERE e.claim_id = a.claim_id 
        AND e.activity IN ('E', 'P')
        AND e.timestamp BETWEEN a.timestamp AND cl.timestamp
  )
  AND EXTRACT(EPOCH FROM (cl.timestamp - a.timestamp)) < 14400; -- Less than 4 hours
```

### Query 3: Analyze EN Speed by Adjuster and Claim Type
```sql
SELECT 
    ce.resource,
    c.claim_type,
    COUNT(*) as case_count,
    AVG(EXTRACT(EPOCH FROM (n.timestamp - e.timestamp))) as avg_seconds,
    STDDEV(EXTRACT(EPOCH FROM (n.timestamp - e.timestamp))) as stdev_seconds
FROM claim_events e
JOIN claim_events n ON e.claim_id = n.claim_id
JOIN claims c ON e.claim_id = c.claim_id
WHERE e.activity = 'E' AND n.activity = 'N'
  AND n.timestamp > e.timestamp
  AND EXTRACT(EPOCH FROM (n.timestamp - e.timestamp)) < 600  -- Less than 10 minutes
GROUP BY ce.resource, c.claim_type
HAVING COUNT(*) >= 5
ORDER BY avg_seconds;
```

### Query 4: Investigation of PN Delays by Region and Amount
```sql
WITH approval_notification_delays AS (
    SELECT 
        p.claim_id,
        c.claim_amount,
        c.claim_type,
        a.region,
        EXTRACT(EPOCH FROM (n.timestamp - p.timestamp))/86400 as days_delay
    FROM claim_events p
    JOIN claim_events n ON p.claim_id = n.claim_id
    JOIN claims c ON p.claim_id = c.claim_id
    JOIN claim_events assign ON assign.claim_id = p.claim_id
    JOIN adjusters a ON assign.resource = a.name
    WHERE p.activity = 'P' AND n.activity = 'N'
      AND assign.activity = 'A'
      AND n.timestamp > p.timestamp
)
SELECT 
    region,
    claim_type,
    COUNT(*) as cases,
    AVG(days_delay) as avg_days_delay,
    MAX(days_delay) as max_days_delay,
    COUNT(CASE WHEN days_delay > 10 THEN 1 END) as extreme_delays
FROM approval_notification_delays
GROUP BY region, claim_type
ORDER BY avg_days_delay DESC;
```

### Query 5: Claims Missing Expected Process Steps
```sql
SELECT 
    c.claim_id,
    c.claim_type,
    c.claim_amount,
    STRING_AGG(ce.activity ORDER BY ce.timestamp) as activity_sequence,
    COUNT(ce.activity) as step_count
FROM claims c
JOIN claim_events ce ON c.claim_id = ce.claim_id
GROUP BY c.claim_id, c.claim_type, c.claim_amount
HAVING NOT (STRING_AGG(ce.activity ORDER BY ce.timestamp) ~ 'R.*A.*E.*P.*N.*C')
   OR COUNT(ce.activity) < 6  -- Missing expected 6-step process
ORDER BY step_count, c.claim_amount DESC;
```