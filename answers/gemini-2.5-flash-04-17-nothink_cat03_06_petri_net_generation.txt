```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance Claim Process")

# Define places (states)
start = PetriNet.Place(name="start")
claim_registered = PetriNet.Place(name="claim_registered")
documents_verified = PetriNet.Place(name="documents_verified")
documents_resubmitted = PetriNet.Place(name="documents_resubmitted")
fraud_checked = PetriNet.Place(name="fraud_checked")
in_depth_investigated = PetriNet.Place(name="in_depth_investigated")
claim_assessed = PetriNet.Place(name="claim_assessed")
claim_approved = PetriNet.Place(name="claim_approved")
claim_paid = PetriNet.Place(name="claim_paid")
customer_notified = PetriNet.Place(name="customer_notified")
end = PetriNet.Place(name="end")

# Add places to the net
net.places.add(start)
net.places.add(claim_registered)
net.places.add(documents_verified)
net.places.add(documents_resubmitted)
net.places.add(fraud_checked)
net.places.add(in_depth_investigated)
net.places.add(claim_assessed)
net.places.add(claim_approved)
net.places.add(claim_paid)
net.places.add(customer_notified)
net.places.add(end)

# Define transitions (activities)
claim_registration_t = PetriNet.Transition(name="claim_registration_t", label="Claim Registration (CR)")
document_verification_t = PetriNet.Transition(name="document_verification_t", label="Document Verification (DV)")
re_document_submission_t = PetriNet.Transition(name="re_document_submission_t", label="Re-Document Submission (RDS)")
fraud_check_t = PetriNet.Transition(name="fraud_check_t", label="Fraud Check (FC)")
in_depth_investigation_t = PetriNet.Transition(name="in_depth_investigation_t", label="In-depth Investigation (II)")
claim_assessment_t = PetriNet.Transition(name="claim_assessment_t", label="Claim Assessment (CA)")
approval_t = PetriNet.Transition(name="approval_t", label="Approval (AP)")
payment_t = PetriNet.Transition(name="payment_t", label="Payment (P)")
notification_t = PetriNet.Transition(name="notification_t", label="Notification (N)")
closure_t = PetriNet.Transition(name="closure_t", label="Closure (CL)")

# Add transitions to the net
net.transitions.add(claim_registration_t)
net.transitions.add(document_verification_t)
net.transitions.add(re_document_submission_t)
net.transitions.add(fraud_check_t)
net.transitions.add(in_depth_investigation_t)
net.transitions.add(claim_assessment_t)
net.transitions.add(approval_t)
net.transitions.add(payment_t)
net.transitions.add(notification_t)
net.transitions.add(closure_t)

# Add arcs to connect places and transitions
# Start to Claim Registration
petri_utils.add_arc_from_to(start, claim_registration_t, net)
petri_utils.add_arc_from_to(claim_registration_t, claim_registered, net)

# Claim Registration to Document Verification
petri_utils.add_arc_from_to(claim_registered, document_verification_t, net)

# Document Verification to next steps
# Case 1: Documents complete
petri_utils.add_arc_from_to(document_verification_t, documents_verified, net)
# Case 2: Documents incomplete (needs re-submission)
petri_utils.add_arc_from_to(document_verification_t, re_document_submission_t, net)
petri_utils.add_arc_from_to(re_document_submission_t, documents_resubmitted, net)
# After re-submission, goes back to Document Verification
petri_utils.add_arc_from_to(documents_resubmitted, document_verification_t, net)

# After documents verified, proceed to Fraud Check
petri_utils.add_arc_from_to(documents_verified, fraud_check_t, net)

# Fraud Check to next steps
# Case 1: No fraud suspected
petri_utils.add_arc_from_to(fraud_check_t, fraud_checked, net)
# Case 2: Fraud suspected (needs in-depth investigation)
petri_utils.add_arc_from_to(fraud_check_t, in_depth_investigation_t, net)
petri_utils.add_arc_from_to(in_depth_investigation_t, in_depth_investigated, net)
# After in-depth investigation, can go back to Fraud Check (multiple investigations)
petri_utils.add_arc_from_to(in_depth_investigated, fraud_check_t, net)

# After fraud check, proceed to Claim Assessment
petri_utils.add_arc_from_to(fraud_checked, claim_assessment_t, net)

# Claim Assessment to Approval
petri_utils.add_arc_from_to(claim_assessment_t, claim_assessed, net)
petri_utils.add_arc_from_to(claim_assessed, approval_t, net)
petri_utils.add_arc_from_to(approval_t, claim_approved, net)

# Approval to Payment
petri_utils.add_arc_from_to(claim_approved, payment_t, net)
petri_utils.add_arc_from_to(payment_t, claim_paid, net)

# Payment to Notification
petri_utils.add_arc_from_to(claim_paid, notification_t, net)
petri_utils.add_arc_from_to(notification_t, customer_notified, net)

# Notification to Closure
petri_utils.add_arc_from_to(customer_notified, closure_t, net)
petri_utils.add_arc_from_to(closure_t, end, net)

# Define the initial marking
im = Marking()
im[start] = 1

# Define the final marking
fm = Marking()
fm[end] = 1

print("Accepting Petri Net for Insurance Claim Process constructed successfully.")
print("Initial Marking:", im)
print("Final Marking:", fm)

# Example of how you might visualize or analyze this net (requires additional libraries)
# from pm4py.visualization.petri_net import visualizer as pn_visualizer
# gviz = pn_visualizer.apply(net, im, fm)
# pn_visualizer.view(gviz)
```