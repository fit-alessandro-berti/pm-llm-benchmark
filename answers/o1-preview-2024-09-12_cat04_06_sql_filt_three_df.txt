To address your requirements, we can use window functions in DuckDB to analyze the event sequences within each case (`case_id`). Here's the SQL query that accomplishes the task:

```sql
WITH seq_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_lag1,
        LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_lag2,
        LAG(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS timestamp_lag1
    FROM
        event_log
),
cases_to_exclude AS (
    SELECT
        DISTINCT case_id
    FROM
        seq_events
    WHERE
        activity_lag2 = 'Approve Purchase Requisition'
        AND activity_lag1 = 'Create Order'
        AND activity = 'Confirm Order'
        AND (timestamp - timestamp_lag1) > INTERVAL '5' DAY
)
SELECT
    *
FROM
    event_log
WHERE
    case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY
    case_id, timestamp;
```

**Explanation:**

1. **Identify Sequences with Window Functions:**
   - The `seq_events` CTE (Common Table Expression) computes, for each event, the two previous activities (`activity_lag1`, `activity_lag2`) and the timestamp of the immediate previous activity (`timestamp_lag1`) within the same `case_id`, ordered by `timestamp`.
   
2. **Filter Cases with the Specific Sequence and Time Condition:**
   - The `cases_to_exclude` CTE selects distinct `case_id`s where:
     - The activities in succession are `'Approve Purchase Requisition'`, `'Create Order'`, and `'Confirm Order'` with no other activities in between.
     - The time elapsed between `'Create Order'` and `'Confirm Order'` is more than 5 days.

3. **Exclude the Identified Cases from the Final Result:**
   - The main query selects all events from `event_log` where the `case_id` is **not in** the list of `cases_to_exclude`.
   - The results are ordered by `case_id` and `timestamp` for clarity.

**Notes:**

- The use of `LAG` functions allows us to look back at previous events within the same case.
- The time difference `(timestamp - timestamp_lag1)` computes the interval between `'Create Order'` and `'Confirm Order'`.
- We compare this interval to `INTERVAL '5' DAY` to check if it's more than 5 days.
- By selecting cases **not in** the `cases_to_exclude` list, we ensure that only events from cases that do not meet both conditions are returned.

**Ensure Proper Date Arithmetic:**

- DuckDB allows direct subtraction of timestamps to get an interval.
- Make sure your `timestamp` column is of a timestamp or datetime data type for accurate calculations.

**Result:**

- The query returns all events from `event_log` except those belonging to cases where the specified sequence occurs with more than 5 days between `'Create Order'` and `'Confirm Order'`.