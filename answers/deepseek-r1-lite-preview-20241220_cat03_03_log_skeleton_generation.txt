To construct the Log Skeleton for the order fulfillment process, we need to define the declarative constraints as specified. Each constraint is mapped based on the process flow and the relationships between activities.

### Step-by-Step Explanation

1. **Equivalence Constraints:**
   - Activities that must have the same number of occurrences in a case.
   - Here, `D` (Dispatch), `IC` (Invoice Customer), and `RP` (Record Payment) should have the same occurrences.

2. **Always Before Constraints:**
   - Activities that must occur before another activity if both occur.
   - For example, `RO` (Receive Order) must occur before `CA` (Check Availability), and so on down the process chain.

3. **Always After Constraints:**
   - Activities that must occur after another activity if both occur.
   - For example, `CA` (Check Availability) must occur after `RO` (Receive Order).

4. **Never Together Constraints:**
   - Activities that cannot occur in the same case.
   - In this scenario, there are no such activities.

5. **Activity Occurrences:**
   - Specifies the allowed number of occurrences for each activity in a case.
   - Each activity occurs exactly once per order.

6. **Directly-Follows Constraints:**
   - Activities that must immediately follow one another.
   - For example, `RO` (Receive Order) is directly followed by `CA` (Check Availability).

### Final Log Skeleton Dictionary

```python
log_skeleton = {
    'equivalence': {('D', 'IC'), ('D', 'RP')},
    'always_before': {
        ('RO', 'CA'), ('RO', 'RI'), ('RO', 'PI'),
        ('RO', 'QC'), ('RO', 'PO'), ('RO', 'GSL'),
        ('RO', 'D'), ('RO', 'IC'), ('RO', 'RP'),
        ('CA', 'RI'), ('CA', 'PI'), ('CA', 'QC'),
        ('CA', 'PO'), ('CA', 'GSL'), ('CA', 'D'),
        ('CA', 'IC'), ('CA', 'RP'),
        ('RI', 'PI'), ('RI', 'QC'), ('RI', 'PO'),
        ('RI', 'GSL'), ('RI', 'D'), ('RI', 'IC'),
        ('RI', 'RP'),
        ('PI', 'QC'), ('PI', 'PO'), ('PI', 'GSL'),
        ('PI', 'D'), ('PI', 'IC'), ('PI', 'RP'),
        ('QC', 'PO'), ('QC', 'GSL'), ('QC', 'D'),
        ('QC', 'IC'), ('QC', 'RP'),
        ('PO', 'GSL'), ('PO', 'D'), ('PO', 'IC'),
        ('PO', 'RP'),
        ('GSL', 'D'), ('GSL', 'IC'), ('GSL', 'RP'),
        ('D', 'IC'), ('D', 'RP'),
        ('IC', 'RP')
    },
    'always_after': {
        ('CA', 'RO'), ('RI', 'CA'), ('PI', 'RI'),
        ('QC', 'PI'), ('PO', 'QC'), ('GSL', 'PO'),
        ('D', 'GSL'), ('IC', 'D'), ('RP', 'IC')
    },
    'never_together': set(),
    'activ_freq': {
        'RO': {1}, 'CA': {1}, 'RI': {1},
        'PI': {1}, 'QC': {1}, 'PO': {1},
        'GSL': {1}, 'D': {1}, 'IC': {1},
        'RP': {1}
    },
    'directly_follows': [
        ('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'),
        ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'),
        ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')
    ]
}
```

This dictionary represents the process constraints for the order fulfillment scenario, ensuring that the activities follow the defined workflow rules.