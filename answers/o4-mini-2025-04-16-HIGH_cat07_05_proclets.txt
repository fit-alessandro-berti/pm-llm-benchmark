The picture actually consists of three panels, (a), (b) and (c), but all three belong together and show how a “Labvisit” process and a “Labtest” process run in parallel and talk to each other.

1. Panel (a): Two “proclet” fragments side by side

   – On the left you have the Labvisit proclet.  It is drawn very much like a little workflow of rectangles (tasks), small triangles (start), circles (intermediate or end events), and arrows (controlflow):
     • A doctor or lab assistant executes “Order entry,” 
     • then “Take blood sample,” 
     • then waits at a Receiveresult event to get back the test outcome, 
     • then does “Judge results.”  If everything is fine the assistant moves on to “Send report” (the black circle at the bottom), otherwise they loop back to “Do tests again” and “Receive updated result” and eventually send a corrected report.

   – On the right is the Labtest proclet, driven by a chemical analyst.  Its flow is 
     • “Perform test,” 
     • “Make report,” 
     • then a synchronization (the small circle merge) with maybe a repeated test branch (“Perform test again”  “Provide updated report”), 
     • and finally “Finish lab test” (the black endmarker at the bottom).

   – Between the two proclets are two dashed messagechannels.  
     • One is labelled “Order system,” carrying the request for tests from Labvisit to Labtest.  Multiplicities [1..1] on both ends mean one request per visit, one receiver, etc.  
     • The other channel is “HIS” (Hospital Information System), carrying the test results and updated results back from Labtest to Labvisit; here the multiplicity on the Labvisit side is 1..* (you might get one or more result messages) while on the Labtest side it is 1..1 (each test run generates exactly one outgoing message).

2. Panel (b): A tiny UMLstyle class diagram

   – It shows two classes, Labvisit and Labtest, joined by a “requires” association.  
   – The multiplicities read “Labvisit (1..1) requires Labtest (1..*)” meaning each visit drives at least one test, etc.

3. Panel (c): An example of a single “performative” message

   – A little table with columns Time, Channel, Sender, Receivers, Action, Content, Scope, Direction.  
   – In the example at 11:00, over the Ordersystem channel, LabvisitJohn sends to LabtestHGBJohn a CREATE action whose content is “Can you perform a HGB test for John?” It’s a private, outgoing message.

Taken together, the figure illustrates
 • how two concurrent processes (visiting and testing) are modeled as separate “proclets,”
 • how they exchange messages asynchronously over named channels,
 • how you can capture the static relationship between the two with a little class diagram,
 • and how individual messages look in a performative table.