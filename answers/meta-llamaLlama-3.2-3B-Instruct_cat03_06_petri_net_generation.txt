Here is the Python code to construct the Petri net for the given insurance claim management process:
```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Define the places (states)
places = [
    PetriNet.Place(name="Claim"),
    PetriNet.Place(name="Document"),
    PetriNet.Place(name="In-depthInvestigation"),
    PetriNet.Place(name="FraudCheck"),
    PetriNet.Place(name="VerificationResult"),
    PetriNet.Place(name="SeniorManager"),
    PetriNet.Place(name="Claimant"),
    PetriNet.Place(name="ClaimStatus")
]

# Define the transitions (activities)
transitions = [
    PetriNet.Transition(name="InsuranceClaim", label="Insurance Claim"),
    PetriNet.Transition(name="RegisterClaim", label="Claim Registration"),
    PetriNet.Transition(name="DocumentVerification", label="Document Verification"),
    PetriNet.Transition(name="FraudCheck", label="Fraud Check"),
    PetriNet.Transition(name="In-depthInvestigation", label="In-depth Investigation"),
    PetriNet.Transition(name="ClaimAssessment", label="Claim Assessment"),
    PetriNet.Transition(name="SeniorManagerApprove", label="Approval"),
    PetriNet.Transition(name="Payment", label="Payment"),
    PetriNet.Transition(name="Notification", label="Notification"),
    PetriNet.Transition(name="Closure", label="Closure"),
    PetriNet.Transition(name="Re-DocumentSubmission", label="Re-Document Submission"),
    PetriNet.Transition(name="VerificationSuccess", label="Verification Success"),
    PetriNet.Transition(name="VerificationFailure", label="Verification Failure")
]

# Add places and transitions to the Petri net
net = PetriNet(name="InsuranceClaimProcess")
for place in places:
    net.places.add(place)

for transition in transitions:
    net.transitions.add(transition)

# Define the initial marking (im)
im = Marking()
im[PetriNet.Place(name="Claim")] = 1

# Define the final marking (fm)
fm = Marking()
fm[PetriNet.Place(name="ClaimStatus")] = 1

# Add arcs between places and transitions
petri_utils.add_arc_from_to(places[0], transitions[0], net)
petri_utils.add_arc_from_to(places[0], transitions[1], net)
petri_utils.add_arc_from_to(transitions[0], places[1], net)
petri_utils.add_arc_from_to(transitions[0], transitions[2], net)
petri_utils.add_arc_from_to(transitions[0], transitions[3], net)
petri_utils.add_arc_from_to(transitions[0], transitions[4], net)
petri_utils.add_arc_from_to(transitions[0], transitions[5], net)
petri_utils.add_arc_from_to(transitions[0], transitions[6], net)
petri_utils.add_arc_from_to(transitions[0], transitions[7], net)
petri_utils.add_arc_from_to(transitions[0], transitions[8], net)
petri_utils.add_arc_from_to(transitions[0], transitions[9], net)
petri_utils.add_arc_from_to(transitions[0], transitions[10], net)
petri_utils.add_arc_from_to(transitions[0], transitions[11], net)
petri_utils.add_arc_from_to(transitions[0], transitions[12], net)

petri_utils.add_arc_from_to(places[0], transitions[1], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[1], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[1], transitions[1], net, condition=lambda x: x[VerificationResult] == 1)
petri_utils.add_arc_from_to(transitions[1], places[2], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[1], transitions[2], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[1], transitions[3], net, condition=lambda: True)

petri_utils.add_arc_from_to(places[0], transitions[3], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[3], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[3], transitions[3], net, condition=lambda x: x[FraudCheck] == 1)
petri_utils.add_arc_from_to(transitions[3], places[4], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[3], transitions[4], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[3], transitions[5], net, condition=lambda: True)

petri_utils.add_arc_from_to(places[0], transitions[4], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[4], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[4], transitions[4], net, condition=lambda x: x[VerificationResult] == 1)
petri_utils.add_arc_from_to(transitions[4], places[5], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[4], transitions[6], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[4], transitions[7], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[4], transitions[8], net, condition=lambda: True)

petri_utils.add_arc_from_to(places[0], transitions[5], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[5], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[5], transitions[5], net, condition=lambda x: x[FraudCheck] == 1)
petri_utils.add_arc_from_to(transitions[5], places[6], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[5], transitions[6], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[5], transitions[7], net, condition=lambda: True)

petri_utils.add_arc_from_to(places[0], transitions[6], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[6], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[6], transitions[6], net, condition=lambda x: x[In-depthInvestigation] == 1)
petri_utils.add_arc_from_to(transitions[6], places[7], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[6], transitions[7], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[6], transitions[8], net, condition=lambda: True)

petri_utils.add_arc_from_to(places[0], transitions[7], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[7], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[7], transitions[7], net, condition=lambda x: x[SeniorManagerApprove] == 1)
petri_utils.add_arc_from_to(transitions[7], places[8], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[7], transitions[8], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[7], transitions[9], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[7], transitions[10], net, condition=lambda: True)

petri_utils.add_arc_from_to(places[0], transitions[8], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[8], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[8], transitions[8], net, condition=lambda x: x[Payment] == 1)
petri_utils.add_arc_from_to(transitions[8], places[9], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[8], transitions[10], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[8], transitions[11], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[8], transitions[12], net, condition=lambda: True)

petri_utils.add_arc_from_to(places[0], transitions[9], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[9], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[9], transitions[9], net, condition=lambda x: x[Notification] == 1)
petri_utils.add_arc_from_to(transitions[9], places[10], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[9], transitions[11], net, condition=lambda: True)

petri_utils.add_arc_from_to(places[0], transitions[10], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[0], places[10], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[10], transitions[10], net, condition=lambda x: x[Closure] == 1)
petri_utils.add_arc_from_to(transitions[10], places[11], net, condition=lambda: True)

# Add the RDS loop
petri_utils.add_arc_from_to(places[1], transitions[1], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[1], places[2], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[2], transitions[1], net, condition=lambda x: x[VerificationResult] == 1)

petri_utils.add_arc_from_to(places[1], transitions[3], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[3], places[4], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[4], transitions[3], net, condition=lambda x: x[VerificationResult] == 1)

petri_utils.add_arc_from_to(places[4], transitions[5], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[5], places[6], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[6], transitions[5], net, condition=lambda x: x[In-depthInvestigation] == 1)

petri_utils.add_arc_from_to(places[4], transitions[7], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[7], places[8], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[8], transitions[7], net, condition=lambda x: x[SeniorManagerApprove] == 1)

# Add the II loop
petri_utils.add_arc_from_to(places[5], transitions[5], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[5], places[6], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[6], transitions[5], net, condition=lambda x: x[In-depthInvestigation] == 1)

petri_utils.add_arc_from_to(places[6], transitions[7], net, condition=lambda: True)
petri_utils.add_arc_from_to(transitions[7], places[8], net, condition=lambda: True)
petri_utils.add_arc_from_to(places[8], transitions[7], net, condition=lambda x: x[SeniorManagerApprove] == 1)

net.add_initial_marking(im)
net.add_final_marking(fm)
```
This code constructs a Petri net for the given insurance claim management process. The net has 12 places and 12 transitions, representing the different activities involved in the process. The arcs between places and transitions are defined with conditions that allow for the process to be flexible and accommodate different scenarios. The initial marking places a token in the "Claim" place, and the final marking places a token in the "Closure" place.