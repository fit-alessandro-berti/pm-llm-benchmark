```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance Claim Management")

# Define places
p_start = PetriNet.Place(name="start")
p_claim_registered = PetriNet.Place(name="claim_registered")
p_docs_verified = PetriNet.Place(name="docs_verified")
p_docs_resubmitted = PetriNet.Place(name="docs_resubmitted") # For re-document submission loop
p_fraud_checked = PetriNet.Place(name="fraud_checked")
p_in_depth_investigated = PetriNet.Place(name="in_depth_investigated") # For in-depth investigation loop
p_claim_assessed = PetriNet.Place(name="claim_assessed")
p_claim_approved = PetriNet.Place(name="claim_approved")
p_payment_made = PetriNet.Place(name="payment_made")
p_notified = PetriNet.Place(name="notified")
p_closed = PetriNet.Place(name="closed")

# Add places to the net
net.places.add(p_start)
net.places.add(p_claim_registered)
net.places.add(p_docs_verified)
net.places.add(p_docs_resubmitted)
net.places.add(p_fraud_checked)
net.places.add(p_in_depth_investigated)
net.places.add(p_claim_assessed)
net.places.add(p_claim_approved)
net.places.add(p_payment_made)
net.places.add(p_notified)
net.places.add(p_closed)


# Define transitions (activities)
t_claim_filing = PetriNet.Transition(name="Claim Filing (C)", label="C")
t_claim_registration = PetriNet.Transition(name="Claim Registration (CR)", label="CR")
t_document_verification = PetriNet.Transition(name="Document Verification (DV)", label="DV")
t_re_document_submission = PetriNet.Transition(name="Re-Document Submission (RDS)", label="RDS")
t_fraud_check = PetriNet.Transition(name="Fraud Check (FC)", label="FC")
t_in_depth_investigation = PetriNet.Transition(name="In-depth Investigation (II)", label="II")
t_claim_assessment = PetriNet.Transition(name="Claim Assessment (CA)", label="CA")
t_approval = PetriNet.Transition(name="Approval (AP)", label="AP")
t_payment = PetriNet.Transition(name="Payment (P)", label="P")
t_notification = PetriNet.Transition(name="Notification (N)", label="N")
t_closure = PetriNet.Transition(name="Closure (CL)", label="CL")

# Add transitions to the net
net.transitions.add(t_claim_filing)
net.transitions.add(t_claim_registration)
net.transitions.add(t_document_verification)
net.transitions.add(t_re_document_submission)
net.transitions.add(t_fraud_check)
net.transitions.add(t_in_depth_investigation)
net.transitions.add(t_claim_assessment)
net.transitions.add(t_approval)
net.transitions.add(t_payment)
net.transitions.add(t_notification)
net.transitions.add(t_closure)

# Add arcs to connect places and transitions
# C -> CR
petri_utils.add_arc_from_to(p_start, t_claim_filing, net)
petri_utils.add_arc_from_to(t_claim_filing, p_claim_registered, net)

# CR -> DV
petri_utils.add_arc_from_to(p_claim_registered, t_document_verification, net)

# DV -> (Docs Verified Path) or (RDS Path)
# Path 1: DV -> p_docs_verified (documents are complete)
petri_utils.add_arc_from_to(t_document_verification, p_docs_verified, net)

# Path 2: DV -> RDS -> p_docs_resubmitted (documents are incomplete, re-submission needed)
# A split is needed for the choice. For simplicity, we can model this as DV leading to either p_docs_verified or directly to RDS.
# Let's assume t_document_verification can lead to either completion or re-submission.
# We'll use a silent transition or a direct arc back to a place if needed for re-submission logic.
# For simplicity, we'll model re-document submission as a loop:
# p_docs_verified can go to FC or (if docs are incomplete) activate RDS.
# Let's refine the DV output and RDS loop:
# t_document_verification outputs to p_docs_verified. From p_docs_verified, there's a choice:
#   - proceed to fraud check (if documents are good)
#   - go to re-document submission (if documents are incomplete)
# To implement this choice, we need two transitions from p_docs_verified, one for "docs complete" and one for "docs incomplete".
# However, the prompt implies "if documents are incomplete after DV, a re-submission of documents step occurs".
# This suggests DV itself has two outcomes or leads to a decision point.
# A common way is to have DV output to a place, then from that place, two transitions (one for 'complete', one for 'incomplete').
# Let's adjust: t_document_verification will output to p_docs_verified.
# From p_docs_verified, we can have t_proceed_to_fraud_check and t_needs_resubmission.

# Let's simplify the loop for re-submission and investigation.
# DV always leads to p_docs_verified. From p_docs_verified, the path splits:
# 1. Documents are OK: p_docs_verified -> t_fraud_check
# 2. Documents need re-submission: p_docs_verified -> t_re_document_submission -> p_claim_registered (loop back)
# This requires a silent transition or direct arc logic. A cleaner way for a loop back:
# t_document_verification output to p_docs_verified.
# If documents are incomplete: t_re_document_submission consumes from p_docs_verified and outputs to p_claim_registered,
# effectively forcing a re-run of DV.
# This means p_docs_verified also needs an arc to t_re_document_submission.
# And t_re_document_submission must lead back to where DV starts (p_claim_registered) or immediately before DV.
# Let's say RDS puts the token back at p_claim_registered for re-verification.

# Arcs for Document Verification and Re-Document Submission
petri_utils.add_arc_from_to(t_document_verification, p_docs_verified, net)
# Choice: If docs are incomplete, activate RDS.
# This implies that from p_docs_verified, we can either go to FC or to RDS.
# Let's assume two implicit outgoing paths from p_docs_verified.
# Path 1: Documents are complete (leading to FC)
petri_utils.add_arc_from_to(p_docs_verified, t_fraud_check, net)
# Path 2: Documents are incomplete (leading to RDS and loop back)
petri_utils.add_arc_from_to(p_docs_verified, t_re_document_submission, net)
petri_utils.add_arc_from_to(t_re_document_submission, p_claim_registered, net) # Loop back to re-verify documents


# FC -> (Fraud Checked Path) or (II Path)
# Similar loop logic for Fraud Check and In-depth Investigation
# t_fraud_check always outputs to p_fraud_checked.
petri_utils.add_arc_from_to(t_fraud_check, p_fraud_checked, net)
# Choice: If fraud check is clear, proceed to CA. If doubts, go to II.
# Path 1: Fraud check is clear (leading to CA)
petri_utils.add_arc_from_to(p_fraud_checked, t_claim_assessment, net)
# Path 2: Fraud check raises doubts (leading to II and loop back)
petri_utils.add_arc_from_to(p_fraud_checked, t_in_depth_investigation, net)
petri_utils.add_arc_from_to(t_in_depth_investigation, p_fraud_checked, net) # Loop back to re-check after investigation


# CA -> AP
petri_utils.add_arc_from_to(t_claim_assessment, p_claim_assessed, net)
petri_utils.add_arc_from_to(p_claim_assessed, t_approval, net)

# AP -> P
petri_utils.add_arc_from_to(t_approval, p_claim_approved, net)
petri_utils.add_arc_from_to(p_claim_approved, t_payment, net)

# P -> N
petri_utils.add_arc_from_to(t_payment, p_payment_made, net)
petri_utils.add_arc_from_to(p_payment_made, t_notification, net)

# N -> CL
petri_utils.add_arc_from_to(t_notification, p_notified, net)
petri_utils.add_arc_from_to(p_notified, t_closure, net)

# CL -> final_state (implied by final marking)
petri_utils.add_arc_from_to(t_closure, p_closed, net)


# Define initial marking (im)
im = Marking()
im[p_start] = 1 # A token in the start place signifies a new claim

# Define final marking (fm)
fm = Marking()
fm[p_closed] = 1 # A token in the closed place signifies the claim is closed

print("Petri Net constructed successfully.")
print(f"Initial marking: {im}")
print(f"Final marking: {fm}")

# Optional: Print net details for verification
# print("\nPlaces:")
# for p in net.places:
#     print(f"  {p.name}")
#
# print("\nTransitions:")
# for t in net.transitions:
#     print(f"  {t.name} (label: {t.label})")
#
# print("\nArcs:")
# for a in net.arcs:
#     print(f"  {a.source.name} -> {a.target.name}")
```