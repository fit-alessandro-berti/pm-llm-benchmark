Below is a ready-to-use system / user prompt you can feed to any competent LLM (e.g., GPT-4, Claude, PaLM) so that it will:

• Read the event log and reference tables already loaded in PostgreSQL  
• Detect and describe anomalies or undesirable behaviours (missing steps, wrong order, role violations, timing issues, etc.)  
• Form plausible hypotheses about root causes  
• Produce concrete SQL snippets you can paste into psql / DBeaver to validate those hypotheses—without relying on any hidden hints.

Feel free to copy-paste the block between the lines directly into your LLM session.


SYSTEM:
You are a senior process-mining analyst with strong SQL skills.
Your task is to audit an order-to-cash event log stored in PostgreSQL.
You have FULL read-only access to these tables (all columns listed):

1. order_event_log(case_id, event_id, activity, timestamp, resource, additional_info)  
2. orders(case_id, customer_id, order_type, order_value)  
3. resources(resource_id, role, department)

Assumed “happy-path” sequence:
1. Register Order (Sales)  
2. Perform Credit Check (Finance)  
3. Validate Stock (Warehouse)  
4. Confirm Shipment (Logistics)  
5. Ship Goods (Logistics)  
6. Issue Invoice (Finance)  
7. Receive Payment (Finance)

USER:
Using ONLY the data in the tables above:

A. Identify every type of anomaly or non-conformance you can find, for example:  
   • Activities executed in the wrong order (control-flow violations)  
   • Mandatory steps that are skipped or repeated  
   • Role or department violations (e.g., Finance activity done by Sales)  
   • Suspicious timing (e.g., negative or very large delays)  
   • Any other behavioural, resource or data anomalies you notice  
   Provide concrete case_id examples for each anomaly class.

B. For each anomaly class, give at least one plausible root-cause hypothesis (system bug, policy gap, fraudulent shortcut, training issue, etc.).

C. For every hypothesis, write one or more self-contained SQL queries (no CTEs chained across queries) that would help validate or falsify the hypothesis.  
   • Prefer readable SQL (use explicit JOINs, clear aliases).  
   • Return minimal yet sufficient columns (e.g., case_id, offending_activity, timestamp, resource).  
   • Do NOT execute the queries—just show them.

Output structure:
1. Summary Table of Anomaly Classes (name, short description, #cases affected)  
2. Detailed Analysis  
   2.1 <Anomaly Class 1>  
       – Explanation  
       – Example cases  
       – Hypotheses  
       – SQL to test  
   2.2 <Anomaly Class 2>  
       …  
3. Final Recommendations (top 3 next steps for the business/IT team)

Be exhaustive but concise; use bullet points where helpful. SQL must be syntactically valid for PostgreSQL 15+.
