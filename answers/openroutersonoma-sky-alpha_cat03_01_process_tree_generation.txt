```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Leaf nodes for activities
A = ProcessTree(label='A')
RG = ProcessTree(label='RG')
IA = ProcessTree(label='IA')
TI = ProcessTree(label='TI')
TC = ProcessTree(label='TC')
CE = ProcessTree(label='CE')
FBP = ProcessTree(label='FBP')
tau = ProcessTree(label='tau')  # Silent step for implicit checks
SC = ProcessTree(label='SC')
TM = ProcessTree(label='TM')
SPT = ProcessTree(label='SPT')
FCE = ProcessTree(label='FCE')
FBA = ProcessTree(label='FBA')
AI = ProcessTree(label='AI')
NC = ProcessTree(label='NC')
FAS = ProcessTree(label='FAS')
DDI = ProcessTree(label='DDI')
BL = ProcessTree(label='BL')
ICP = ProcessTree(label='ICP')
MRF = ProcessTree(label='MRF')

# Initial sequence: A -> RG -> IA -> TI -> TC
seq_initial_triage = ProcessTree(operator=Operator.SEQUENCE)
IA.parent = seq_initial_triage
TI.parent = seq_initial_triage
TC.parent = seq_initial_triage
seq_ti_tc = ProcessTree(operator=Operator.SEQUENCE)
TI.parent = seq_ti_tc
TC.parent = seq_ti_tc
seq_initial_triage.children = [A, RG, IA, seq_ti_tc]
A.parent = seq_initial_triage
RG.parent = seq_initial_triage
IA.parent = seq_initial_triage  # Re-set after list
seq_ti_tc.parent = seq_initial_triage

# Initial Diagnostic: X(CE, FBP)
initial_diag = ProcessTree(operator=Operator.XOR)
CE.parent = initial_diag
FBP.parent = initial_diag
initial_diag.children = [CE, FBP]

# Attach initial_diag to the end of initial sequence
seq_initial_triage.children.append(initial_diag)
initial_diag.parent = seq_initial_triage

# Loop body: SC -> X(TM, SPT) -> X(FCE, FBA)
xor_tm_spt = ProcessTree(operator=Operator.XOR)
TM.parent = xor_tm_spt
SPT.parent = xor_tm_spt
xor_tm_spt.children = [TM, SPT]

rdt = ProcessTree(operator=Operator.XOR)
FCE.parent = rdt
FBA.parent = rdt
rdt.children = [FCE, FBA]

seq_loopbody = ProcessTree(operator=Operator.SEQUENCE)
SC.parent = seq_loopbody
xor_tm_spt.parent = seq_loopbody
rdt.parent = seq_loopbody
seq_loopbody.children = [SC, xor_tm_spt, rdt]

# Loop: * (tau, loopbody)
loop = ProcessTree(operator=Operator.LOOP)
tau.parent = loop  # Note: tau is reused, but in construction, it's a new instance; here we use the same for simplicity
seq_loopbody.parent = loop
loop.children = [tau, seq_loopbody]

# Attach loop after initial sequence
seq_initial_triage.children.append(loop)
loop.parent = seq_initial_triage

# Advanced diagnostics parallel: + (AI, NC)
parallel_advanced = ProcessTree(operator=Operator.PARALLEL)
AI.parent = parallel_advanced
NC.parent = parallel_advanced
parallel_advanced.children = [AI, NC]

# Final sequence: FAS -> DDI
seq_final = ProcessTree(operator=Operator.SEQUENCE)
FAS.parent = seq_final
DDI.parent = seq_final
seq_final.children = [FAS, DDI]

# Final parallel: + (BL, + (ICP, MRF))
parallel_icp_mrf = ProcessTree(operator=Operator.PARALLEL)
ICP.parent = parallel_icp_mrf
MRF.parent = parallel_icp_mrf
parallel_icp_mrf.children = [ICP, MRF]

parallel_final = ProcessTree(operator=Operator.PARALLEL)
BL.parent = parallel_final
parallel_icp_mrf.parent = parallel_final
parallel_final.children = [BL, parallel_icp_mrf]

# Overall sequence: initial_triage -> parallel_advanced -> seq_final -> parallel_final
root = ProcessTree(operator=Operator.SEQUENCE)
seq_initial_triage.parent = root
parallel_advanced.parent = root
seq_final.parent = root
parallel_final.parent = root
root.children = [seq_initial_triage, parallel_advanced, seq_final, parallel_final]
```