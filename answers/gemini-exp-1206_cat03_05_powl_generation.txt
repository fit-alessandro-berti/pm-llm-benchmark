```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities (transitions) in the Purchase-to-Pay process
create_requisition = Transition(label="Create Requisition")
approve_requisition = Transition(label="Approve Requisition")
reject_requisition = Transition(label="Reject Requisition")
create_po = Transition(label="Create Purchase Order")
approve_po = Transition(label="Approve Purchase Order")
reject_po = Transition(label="Reject Purchase Order")
send_po = Transition(label="Send Purchase Order to Supplier")
receive_goods = Transition(label="Receive Goods")
receive_invoice = Transition(label="Receive Invoice")
match_invoice = Transition(label="Match Invoice with PO and Goods Receipt")
pay_invoice = Transition(label="Pay Invoice")
archive_documents = Transition(label="Archive Documents")

# Define silent transitions
skip_re_approval = SilentTransition()

# 1. Create and approve/reject requisition
requisition_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[
        create_requisition,
        OperatorPOWL(
            operator=Operator.XOR,
            children=[approve_requisition, reject_requisition]
        ),
    ],
)

# 2. Create and approve/reject purchase order
po_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[
        create_po,
        OperatorPOWL(
            operator=Operator.XOR,
            children=[approve_po, reject_po],
        ),
    ],
)

# 3. Concurrent Receiving of Goods and Invoice
receive_goods_and_invoice = StrictPartialOrder(nodes=[receive_goods, receive_invoice])

# 4. Match Invoice (needs to wait for PO and goods receipt)

# 5. Payment and Archiving
payment_and_archiving = StrictPartialOrder(nodes=[pay_invoice, archive_documents])
payment_and_archiving.order.add_edge(pay_invoice, archive_documents)

# 6. Main Process (Strict Partial Order)
main_process = StrictPartialOrder(
    nodes=[
        requisition_loop,
        po_loop,
        send_po,
        receive_goods_and_invoice,
        match_invoice,
        payment_and_archiving,
    ]
)

# Define the order between the nodes
main_process.order.add_edge(requisition_loop, po_loop)
main_process.order.add_edge(po_loop, send_po)
main_process.order.add_edge(send_po, receive_goods_and_invoice)
main_process.order.add_edge(po_loop, match_invoice)
main_process.order.add_edge(receive_goods_and_invoice, match_invoice)
main_process.order.add_edge(match_invoice, payment_and_archiving)

# The 'main_process' variable now holds the complete POWL model for the Purchase-to-Pay process.
# You can further analyze or visualize this model using pm4py functionalities. For example:
from pm4py.visualization.powl import visualizer

gviz = visualizer.apply(main_process)
visualizer.view(gviz)
```
