```sql
-- ------------------------------------------------------------
-- DuckDB :  Top-K process variants and the events that realize
--           those variants.
--
--  :top_k  – replace with any positive integer (e.g. 5, 10 …)
-- ------------------------------------------------------------
WITH

/* 1. Build the ordered activity trace (= variant) for every case */
case_variants AS (               -- one row per case_id
    SELECT
        case_id,
        /* build a single, timestamp-ordered string like  A->B->C */
        string_agg(activity, '->' ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
),

/* 2. Count how many cases share the same variant                */
variant_frequency AS (           -- one row per distinct variant
    SELECT
        variant,
        COUNT(*) AS n_cases
    FROM case_variants
    GROUP BY variant
),

/* 3. Keep only the Top-K most frequent variants                  */
top_variants AS (
    SELECT variant
    FROM   variant_frequency
    ORDER  BY n_cases DESC
    LIMIT  :top_k                 --    set the desired K here
),

/* 4. The cases that belong to one of those Top-K variants        */
qualified_cases AS (
    SELECT cv.case_id
    FROM   case_variants  cv
    JOIN   top_variants   tv  USING (variant)
)

-- 5. Return every original event that occurs in the retained cases
SELECT      e.*
FROM        event_log AS e
JOIN        qualified_cases qc  ON e.case_id = qc.case_id
ORDER BY    e.case_id,
            e.timestamp;         -- keeps the natural event order
```

What each step does
1. `case_variants`  
   • Sorts the events inside every `case_id` by `timestamp`.  
   • Concatenates the activities with `string_agg` to yield the complete ordered trace (= process variant).

2. `variant_frequency`  
   • Counts how many cases share each distinct variant.

3. `top_variants`  
   • Orders those variants by their case count and keeps the top **K** most frequent ones (parameter `:top_k`).

4. `qualified_cases`  
   • Lists every `case_id` whose variant is one of the Top-K.

5. Final SELECT  
   • Joins the original `event_log` with the qualified cases, thereby returning every event that belongs _only_ to cases following one of the Top-K variants.  
   • The result is ordered by `case_id` and `timestamp` to preserve the natural event order.