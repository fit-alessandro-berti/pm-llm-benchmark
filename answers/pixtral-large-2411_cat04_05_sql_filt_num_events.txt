To achieve the desired filtering and return the appropriate events from the `event_log` table, you can follow these steps in your DuckDB SQL query:

1. Count the number of events per `case_id`.
2. Filter out the `case_id`s with more than six events.
3. Retrieve the full set of events for the remaining `case_id`s.

Here is the SQL query that accomplishes this:

```sql
WITH case_counts AS (
    SELECT
        case_id,
        COUNT(*) AS event_count
    FROM
        event_log
    GROUP BY
        case_id
)
SELECT
    e.*
FROM
    event_log e
JOIN
    case_counts c
ON
    e.case_id = c.case_id
WHERE
    c.event_count <= 6;
```

### Explanation:

1. **Common Table Expression (CTE) `case_counts`:**
   - We create a CTE named `case_counts` to first calculate the number of events for each `case_id`.
   - The `SELECT` statement in the CTE groups the `event_log` by `case_id` and counts the number of events in each group.

2. **Main Query:**
   - We select all columns (`e.*`) from the `event_log` table.
   - We perform an inner join between the `event_log` table (aliased as `e`) and the `case_counts` CTE (aliased as `c`) on the `case_id`.
   - The `WHERE` clause filters the results to include only those `case_id`s where the `event_count` is six or fewer.

This query ensures that only the events belonging to cases with six or fewer events are returned.