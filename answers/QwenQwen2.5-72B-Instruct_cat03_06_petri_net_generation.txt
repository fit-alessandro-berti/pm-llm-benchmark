Certainly! Below is the Python code for constructing the accepting Petri net for the insurance claim management process using the `pm4py` library. The Petri net includes all the steps you described, with the necessary loops and connections between places and transitions.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance Claim Management")

# Define places
source = PetriNet.Place(name="source")
claim_registered = PetriNet.Place(name="claim_registered")
documents_verified = PetriNet.Place(name="documents_verified")
documents_submitted = PetriNet.Place(name="documents_submitted")
fraud_checked = PetriNet.Place(name="fraud_checked")
investigated = PetriNet.Place(name="investigated")
claim_assessed = PetriNet.Place(name="claim_assessed")
approved = PetriNet.Place(name="approved")
paid = PetriNet.Place(name="paid")
notified = PetriNet.Place(name="notified")
claim_closed = PetriNet.Place(name="claim_closed")
sink = PetriNet.Place(name="sink")

# Add places to the net
net.places.add(source)
net.places.add(claim_registered)
net.places.add(documents_verified)
net.places.add(documents_submitted)
net.places.add(fraud_checked)
net.places.add(investigated)
net.places.add(claim_assessed)
net.places.add(approved)
net.places.add(paid)
net.places.add(notified)
net.places.add(claim_closed)
net.places.add(sink)

# Define transitions
claim_registration = PetriNet.Transition(name="claim_registration", label="Claim Registration (CR)")
document_verification = PetriNet.Transition(name="document_verification", label="Document Verification (DV)")
re_document_submission = PetriNet.Transition(name="re_document_submission", label="Re-Document Submission (RDS)")
fraud_check = PetriNet.Transition(name="fraud_check", label="Fraud Check (FC)")
in_depth_investigation = PetriNet.Transition(name="in_depth_investigation", label="In-depth Investigation (II)")
claim_assessment = PetriNet.Transition(name="claim_assessment", label="Claim Assessment (CA)")
approval = PetriNet.Transition(name="approval", label="Approval (AP)")
payment = PetriNet.Transition(name="payment", label="Payment (P)")
notification = PetriNet.Transition(name="notification", label="Notification (N)")
closure = PetriNet.Transition(name="closure", label="Closure (CL)")

# Add transitions to the net
net.transitions.add(claim_registration)
net.transitions.add(document_verification)
net.transitions.add(re_document_submission)
net.transitions.add(fraud_check)
net.transitions.add(in_depth_investigation)
net.transitions.add(claim_assessment)
net.transitions.add(approval)
net.transitions.add(payment)
net.transitions.add(notification)
net.transitions.add(closure)

# Add arcs to the net
petri_utils.add_arc_from_to(source, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, claim_registered, net)
petri_utils.add_arc_from_to(claim_registered, document_verification, net)
petri_utils.add_arc_from_to(document_verification, documents_verified, net)
petri_utils.add_arc_from_to(documents_verified, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, fraud_checked, net)
petri_utils.add_arc_from_to(fraud_checked, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, claim_assessed, net)
petri_utils.add_arc_from_to(claim_assessed, approval, net)
petri_utils.add_arc_from_to(approval, approved, net)
petri_utils.add_arc_from_to(approved, payment, net)
petri_utils.add_arc_from_to(payment, paid, net)
petri_utils.add_arc_from_to(paid, notification, net)
petri_utils.add_arc_from_to(notification, notified, net)
petri_utils.add_arc_from_to(notified, closure, net)
petri_utils.add_arc_from_to(closure, claim_closed, net)
petri_utils.add_arc_from_to(claim_closed, sink, net)

# Define the loop arcs for re-document submission and in-depth investigation
petri_utils.add_arc_from_to(documents_verified, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, documents_submitted, net)
petri_utils.add_arc_from_to(documents_submitted, document_verification, net)
petri_utils.add_arc_from_to(fraud_checked, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, investigated, net)
petri_utils.add_arc_from_to(investigated, fraud_check, net)

# Define the initial and final markings
im = Marking()
im[source] = 1
fm = Marking()
fm[sink] = 1

# Print the constructed Petri net
print(net)
print("Initial Marking:", im)
print("Final Marking:", fm)
```

### Explanation:

1. **Places:**
   - `source`: Represents the start of the process.
   - `claim_registered`, `documents_verified`, `documents_submitted`, `fraud_checked`, `investigated`, `claim_assessed`, `approved`, `paid`, `notified`, `claim_closed`, `sink`: Represent the various stages of the insurance claim process.

2. **Transitions:**
   - `claim_registration`, `document_verification`, `re_document_submission`, `fraud_check`, `in_depth_investigation`, `claim_assessment`, `approval`, `payment`, `notification`, `closure`: Represent the activities in the process.

3. **Arcs:**
   - Arcs connect places to transitions and transitions to places to form the logical sequence of the process.
   - Loop arcs are added to handle re-document submission and in-depth investigation.

4. **Initial and Final Markings:**
   - `im[source] = 1`: The initial marking places one token in the `source` place, representing a new claim arriving.
   - `fm[sink] = 1`: The final marking places one token in the `sink` place, representing the closure of the claim.

This Petri net model captures the complex insurance claim management process with the necessary loops and transitions.