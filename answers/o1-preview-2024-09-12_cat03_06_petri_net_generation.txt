```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance Claim Management Process")

# Create Places
p_start = PetriNet.Place("p_start")  # Start place
p_cr = PetriNet.Place("p_cr")        # After Claim Registration
p_dv_decide = PetriNet.Place("p_dv_decide")    # Decision after Document Verification
p_dv_pending = PetriNet.Place("p_dv_pending")  # Waiting for Re-Document Submission
p_rds_back_to_dv = PetriNet.Place("p_rds_back_to_dv")  # Loop back to DV after RDS
p_fc_decide = PetriNet.Place("p_fc_decide")    # Decision after Fraud Check
p_fc_pending = PetriNet.Place("p_fc_pending")  # Waiting for In-depth Investigation
p_ca = PetriNet.Place("p_ca")        # After Claim Assessment
p_p = PetriNet.Place("p_p")          # After Payment
p_n = PetriNet.Place("p_n")          # After Notification
p_after_n = PetriNet.Place("p_after_n")  # Before Closure
p_end = PetriNet.Place("p_end")      # End place

# Add Places to the Petri net
net.places.add(p_start)
net.places.add(p_cr)
net.places.add(p_dv_decide)
net.places.add(p_dv_pending)
net.places.add(p_rds_back_to_dv)
net.places.add(p_fc_decide)
net.places.add(p_fc_pending)
net.places.add(p_ca)
net.places.add(p_p)
net.places.add(p_n)
net.places.add(p_after_n)
net.places.add(p_end)

# Create Transitions
t_cr = PetriNet.Transition("t_cr", "Claim Registration")
t_dv = PetriNet.Transition("t_dv", "Document Verification")
t_accept_dv = PetriNet.Transition("t_accept_dv", None)     # Silent transition
t_reject_dv = PetriNet.Transition("t_reject_dv", None)     # Silent transition
t_rds = PetriNet.Transition("t_rds", "Re-Document Submission")
t_fc = PetriNet.Transition("t_fc", "Fraud Check")
t_accept_fc = PetriNet.Transition("t_accept_fc", None)     # Silent transition
t_reject_fc = PetriNet.Transition("t_reject_fc", None)     # Silent transition
t_ii = PetriNet.Transition("t_ii", "In-depth Investigation")
t_ca = PetriNet.Transition("t_ca", "Claim Assessment")
t_ap = PetriNet.Transition("t_ap", "Approval")
t_bypass_ap = PetriNet.Transition("t_bypass_ap", None)     # Silent transition
t_p = PetriNet.Transition("t_p", "Payment")
t_n = PetriNet.Transition("t_n", "Notification")
t_cl = PetriNet.Transition("t_cl", "Closure")

# Add Transitions to the Petri net
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_accept_dv)
net.transitions.add(t_reject_dv)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_accept_fc)
net.transitions.add(t_reject_fc)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_bypass_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)

# Add Arcs between Places and Transitions

# Start -> Claim Registration
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_cr, net)

# Claim Registration -> Document Verification
petri_utils.add_arc_from_to(p_cr, t_dv, net)
petri_utils.add_arc_from_to(p_dv_pending, t_dv, net)  # From re-submission loop
petri_utils.add_arc_from_to(p_rds_back_to_dv, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv_decide, net)

# Decision after Document Verification
petri_utils.add_arc_from_to(p_dv_decide, t_accept_dv, net)
petri_utils.add_arc_from_to(t_accept_dv, t_fc, net)
petri_utils.add_arc_from_to(p_dv_decide, t_reject_dv, net)
petri_utils.add_arc_from_to(t_reject_dv, p_dv_pending, net)

# Re-Document Submission
petri_utils.add_arc_from_to(p_dv_pending, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_rds_back_to_dv, net)

# Fraud Check
petri_utils.add_arc_from_to(t_fc, p_fc_decide, net)

# Decision after Fraud Check
petri_utils.add_arc_from_to(p_fc_decide, t_accept_fc, net)
petri_utils.add_arc_from_to(t_accept_fc, t_ca, net)
petri_utils.add_arc_from_to(p_fc_decide, t_reject_fc, net)
petri_utils.add_arc_from_to(t_reject_fc, p_fc_pending, net)

# In-depth Investigation
petri_utils.add_arc_from_to(p_fc_pending, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_fc_decide, net)  # Loop back to Fraud Check decision

# Claim Assessment
petri_utils.add_arc_from_to(t_ca, p_ca, net)

# Approval decision
petri_utils.add_arc_from_to(p_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_p, net)
petri_utils.add_arc_from_to(p_ca, t_bypass_ap, net)
petri_utils.add_arc_from_to(t_bypass_ap, p_p, net)

# Payment
petri_utils.add_arc_from_to(p_p, t_p, net)
petri_utils.add_arc_from_to(t_p, p_n, net)

# Notification
petri_utils.add_arc_from_to(p_n, t_n, net)
petri_utils.add_arc_from_to(t_n, p_after_n, net)

# Closure
petri_utils.add_arc_from_to(p_after_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# Initial and Final Markings
im = Marking()
im[p_start] = 1  # Initial token in start place

fm = Marking()
fm[p_end] = 1    # Final token in end place

# The Petri net is now fully defined with initial and final markings
```