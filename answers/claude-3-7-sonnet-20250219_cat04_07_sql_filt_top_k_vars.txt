# DuckDB SQL Query for Process Variant Analysis

I'll construct a DuckDB SQL query that identifies the top K process variants and returns all events belonging to cases that follow these variants. The solution involves several steps:

1. Determining the sequence of activities for each case
2. Grouping cases by their activity sequences to identify variants
3. Counting cases per variant and finding the top K variants
4. Returning all events from cases that follow these top K variants

Here's the complete query:

```sql
WITH 
-- Step 1: Extract ordered activity sequences for each case
case_sequences AS (
  SELECT
    case_id,
    STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS variant_sequence
  FROM event_log
  GROUP BY case_id
),

-- Step 2 & 3: Group by variant sequence, count cases per variant, and get top K variants
top_variants AS (
  SELECT
    variant_sequence,
    COUNT(*) AS case_count,
    RANK() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
  FROM case_sequences
  GROUP BY variant_sequence
  -- Replace K with the desired number of top variants (e.g., 5)
  QUALIFY variant_rank <= K
),

-- Get case_ids that belong to top variants
filtered_cases AS (
  SELECT cs.case_id
  FROM case_sequences cs
  JOIN top_variants tv ON cs.variant_sequence = tv.variant_sequence
)

-- Step 4: Return all events from cases that follow top K variants
SELECT el.*
FROM event_log el
JOIN filtered_cases fc ON el.case_id = fc.case_id
ORDER BY el.case_id, el.timestamp;
```

## Notes on the Solution:

1. **Sequence Extraction**: The `case_sequences` CTE uses `STRING_AGG` with `ORDER BY timestamp` to create an ordered sequence of activities for each case, joining them with an arrow separator for readability.

2. **Variant Identification**: By grouping on the `variant_sequence`, we identify unique process variants.

3. **Top K Selection**: The `RANK()` window function ranks variants by their frequency, and the `QUALIFY` clause filters to keep only the top K variants. Replace `K` with the actual number you want (e.g., 3, 5, 10).

4. **Result Filtering**: The final query joins the original event log with the filtered cases to return only events from cases that follow the top K variants.

5. **Ordering**: The final results are ordered by `case_id` and `timestamp` to maintain the chronological sequence of activities within each case.

This query efficiently handles the process mining task of identifying and analyzing the most common process variants in your event log.