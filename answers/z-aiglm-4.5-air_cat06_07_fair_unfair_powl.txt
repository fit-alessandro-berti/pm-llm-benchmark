### POWL Model with Potential Unfairness  
This model includes the XOR branch that introduces bias through preferential treatment for community-affiliated applicants. The unfairness arises in the `CulturalFitCheck` step where applicants are routed to either a standard evaluation or a biased `CommunityAffiliationCheck`.

```python
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# Define activities
receive_app = Transition(label="ReceiveApplication")
resume_parse = Transition(label="ResumeParsingAndDataCheck")
request_info = Transition(label="RequestMoreInfo")
skill_assess = Transition(label="SkillAssessment")
cultural_fit = Transition(label="CulturalFitCheck")
comm_affiliation_check = Transition(label="CommunityAffiliationCheck")
manager_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# Loop for data completeness (ResumeParsingAndDataCheck  RequestMoreInfo  ResumeParsingAndDataCheck)
data_completeness_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[resume_parse, request_info]
)

# XOR choice between standard cultural fit and biased community check
xor_branch = OperatorPOWL(
    operator=Operator.XOR,
    children=[cultural_fit, comm_affiliation_check]
)

# Construct model with partial order
model = StrictPartialOrder(nodes=[
    receive_app,
    data_completeness_loop,
    skill_assess,
    xor_branch,
    manager_review,
    final_decision
])

# Define sequential order
model.order.add_edge(receive_app, data_completeness_loop)
model.order.add_edge(data_completeness_loop, skill_assess)
model.order.add_edge(skill_assess, xor_branch)
model.order.add_edge(xor_branch, manager_review)
model.order.add_edge(manager_review, final_decision)
```

### POWL Model Without Unfairness  
This model removes the XOR branch, ensuring all applicants undergo the **same** standardized `CulturalFitCheck` process. This eliminates preferential treatment based on community affiliations.

```python
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# Define activities (same as unfair model except no community check)
receive_app = Transition(label="ReceiveApplication")
resume_parse = Transition(label="ResumeParsingAndDataCheck")
request_info = Transition(label="RequestMoreInfo")
skill_assess = Transition(label="SkillAssessment")
cultural_fit = Transition(label="CulturalFitCheck")  # Unified evaluation for all
manager_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# Loop for data completeness (identical to unfair model)
data_completeness_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[resume_parse, request_info]
)

# Construct model with partial order
model = StrictPartialOrder(nodes=[
    receive_app,
    data_completeness_loop,
    skill_assess,
    cultural_fit,  # No XOR branch - all applicants take this path
    manager_review,
    final_decision
])

# Define sequential order
model.order.add_edge(receive_app, data_completeness_loop)
model.order.add_edge(data_completeness_loop, skill_assess)
model.order.add_edge(skill_assess, cultural_fit)  # Direct path without branching
model.order.add_edge(cultural_fit, manager_review)
model.order.add_edge(manager_review, final_decision)
```

### Key Differences  
| **Aspect**               | **Unfair Model**                                  | **Fair Model**                                      |
|---------------------------|---------------------------------------------------|----------------------------------------------------|
| **Cultural Fit Step**     | XOR choice between `CulturalFitCheck` and `CommunityAffiliationCheck` | Single `CulturalFitCheck` for all applicants |
| **Bias Source**           | `CommunityAffiliationCheck` gives preferential treatment to affiliated applicants | No preferential treatment; standardized evaluation |
| **Complexity**            | Higher (branching logic)                         | Simpler (linear path after skill assessment)       |
| **Equity**                | Vulnerable to bias from community affiliation    | Equitable treatment of all applicants              |

Both models include the essential steps (`ResumeParsing`, `SkillAssessment`, `ManagerialReview`, `FinalDecision`) and the data-completeness loop, but the fair model eliminates the XOR branch that introduces subtle unfairness.