```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# --- 1. Initial mandatory steps ---------------------------------------------
SR  = Transition(label="Service Request (SR)")
CS  = Transition(label="Contract Setup (CS)")

# --- 2. Concurrent environment preparation ----------------------------------
DA  = Transition(label="Datacenter Allocation (DA)")
ACI = Transition(label="Access Control Initialization (ACI)")

# wrap the two concurrent tasks in their own partial-order container
prep_env = StrictPartialOrder(nodes=[DA, ACI])   # no edges => concurrency

# --- 3. Looped configuration phase ------------------------------------------
BNC = Transition(label="Base Network Configuration (BNC)")
DR  = Transition(label="Debug & Reconfigure (D&R)")

config_loop = OperatorPOWL(operator=Operator.LOOP, children=[BNC, DR])

# --- 4. Exclusive deployment choice -----------------------------------------
CD = Transition(label="Containerized Deployment (CD)")
MD = Transition(label="Monolithic Deployment (MD)")

deploy_choice = OperatorPOWL(operator=Operator.XOR, children=[CD, MD])

# --- 5. Final concurrent checks ---------------------------------------------
QA = Transition(label="Quality Assurance (QA)")
SA = Transition(label="Security Audit (SA)")

final_checks = StrictPartialOrder(nodes=[QA, SA])  # no edges => concurrency

# --- 6. Final approval --------------------------------------------------------
GLA = Transition(label="Go-Live Approval (GLA)")

# --- Build the global partial order ------------------------------------------
root = StrictPartialOrder(
    nodes=[SR, CS, prep_env, config_loop, deploy_choice, final_checks, GLA]
)

# 1  2
root.order.add_edge(SR, CS)

# 2  concurrent prep
root.order.add_edge(CS, prep_env)

# prep completion  configuration loop
root.order.add_edge(prep_env, config_loop)

# config completion  deployment choice
root.order.add_edge(config_loop, deploy_choice)

# deployment completion  final checks
root.order.add_edge(deploy_choice, final_checks)

# final checks completion  go-live
root.order.add_edge(final_checks, GLA)
```