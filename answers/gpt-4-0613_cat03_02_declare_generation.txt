Sure, here is a simple declare model for a Purchase-to-Pay process expressed in Python using a dictionary following PM4PY framework:

```python
declare_model = {
    'existence': {
        'purchase_order': {'support': 1.0, 'confidence': 1.0},
        'invoice_receipt': {'support': 1.0, 'confidence': 1.0},
        'payment': {'support': 1.0, 'confidence': 1.0}
    },
    'exactly_one': {
        'purchase_order': {'support': 1.0, 'confidence': 1.0}
    },
    'init': {
        'purchase_order': {'support': 1.0, 'confidence': 1.0}
    },
    'response': {
        ('purchase_order', 'invoice_receipt'): {'support': 1.0, 'confidence': 1.0},
        ('invoice_receipt', 'payment'): {'support': 1.0, 'confidence': 1.0}
    },
    'precedence': {
        ('purchase_order', 'payment'): {'support': 1.0, 'confidence': 1.0}
    },
    'succession': {
        ('purchase_order', 'payment'): {'support': 1.0, 'confidence': 1.0}
    },
    'chainsuccession': {
        ('invoice_receipt', 'payment'): {'support': 1.0, 'confidence': 1.0}
    },
    'absence': {
        'payment_reversal': {'support': 1.0, 'confidence': 1.0}
    },
    'noncoexistence': {
        ('purchase_order', 'payment_reversal'): {'support': 1.0, 'confidence': 1.0}
    },
    'nonsuccession': {
        ('invoice_receipt', 'purchase_order'): {'support': 1.0, 'confidence': 1.0}
    }
}
```
In this model, a purchase order can only be initiated once, and it must precede invoice receipt and payment. At the same time, invoice receipt must be followed by payment directly without any activity in between. Also, a payment reversal should not exist in the process. If a purchase order exists, there can't be a payment reversal. And invoice receipt should not be followed by a purchase order.