**SQL Query for Filtered Event Log**
```sql
-- First, identify cases with the specified sequence
WITH sequence_cases AS (
  SELECT DISTINCT case_id
  FROM event_log
  WHERE (
    -- Approve Purchase Requisition
    activity = 'Approve Purchase Requisition'
    -- Create Order
    AND (
      -- Immediately followed by Create Order
      LAG (activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Create Order'
      -- Immediately followed by Confirm Order
      AND LAG (activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Confirm Order'
    )
  )
),

-- Then, select those with more than 5 days between Create and Confirm Order
slow_cases AS (
  SELECT DISTINCT case_id
  FROM sequence_cases sc
  JOIN event_log el1 ON sc.case_id = el1.case_id AND el1.activity = 'Create Order'
  JOIN event_log el2 ON sc.case_id = el2.case_id AND el2.activity = 'Confirm Order'
  WHERE TIMESTAMPDIFF(DAY, el1.timestamp, el2.timestamp) > 5
),

-- Finally, exclude these cases from the original event log
filtered_event_log AS (
  SELECT *
  FROM event_log
  WHERE case_id NOT IN (SELECT case_id FROM slow_cases)
)

-- Return all remaining events
SELECT *
FROM filtered_event_log
ORDER BY case_id, timestamp
```
**How it works:**

1.  We start by creating a CTE (`sequence_cases`) that identifies cases where the specified sequence (`Approve Purchase Requisition`, `Create Order`, `Confirm Order`) appears directly in succession.
2.  We then create another CTE (`slow_cases`) that selects only those cases from `sequence_cases` where there's more than 5 days elapsed between the `Create Order` and `Confirm Order` events within the same case.
3.  Finally, we create a CTE (`filtered_event_log`) that excludes cases from `event_log` where their `case_id` matches any result from `slow_cases`.
4.  The final query selects all rows from `filtered_event_log` (filtered event log) to obtain the desired result: all events from cases that don't have the sequence with the specified timing requirement.

This DuckDB SQL query performs the specified filtering efficiently, thanks to the use of Common Table Expressions (CTEs) and window functions (`LAG`).