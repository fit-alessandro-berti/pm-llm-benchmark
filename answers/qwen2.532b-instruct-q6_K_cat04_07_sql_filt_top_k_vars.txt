To solve this task using DuckDB SQL, we need to execute several steps:

1. **Extract Ordered Activity Sequence**: We will first determine the ordered sequence of activities per `case_id` by ordering them based on their `timestamp`.
2. **Aggregate and Count Variants**: Next, aggregate these sequences to count how many cases follow each variant.
3. **Filter Top K Variants**: Identify and retain only those variants that are part of the top K most frequent ones.
4. **Extract Corresponding Events**: Finally, retrieve all events from `event_log` that belong to the filtered cases.

Here is a step-by-step SQL query solution:

```sql
WITH ordered_activities AS (
    SELECT 
        case_id,
        LISTAGG(activity, '->') WITHIN GROUP (ORDER BY timestamp) OVER (PARTITION BY case_id) AS activity_sequence
    FROM event_log
),
activity_counts AS (
    SELECT 
        activity_sequence,
        COUNT(*) as frequency
    FROM ordered_activities
    GROUP BY activity_sequence
),
top_k_variants AS (
    SELECT 
        activity_sequence, 
        ROW_NUMBER() OVER (ORDER BY frequency DESC) as rank
    FROM activity_counts
)
SELECT el.*
FROM event_log el
JOIN ordered_activities oa ON el.case_id = oa.case_id
JOIN top_k_variants tkv ON oa.activity_sequence = tkv.activity_sequence
WHERE tkv.rank <= K; -- Replace 'K' with the desired number of variants to include
```

### Explanation:

1. **ordered_activities CTE**: This common table expression (CTE) generates a list of activity sequences for each `case_id`, ordered by their timestamps.
2. **activity_counts CTE**: This CTE counts how many times each unique sequence appears, essentially counting the frequency of each variant.
3. **top_k_variants CTE**: This ranks the variants based on their frequency in descending order and assigns a rank to each variant. Variants with higher frequencies will have lower ranks (1 being the most frequent).
4. **Final Query**: The final query joins the original `event_log` with the ordered activities and top K variants, filtering out any cases that do not belong to the top K variants.

This solution assumes you are running a DuckDB version where window functions like `ROW_NUMBER()` and aggregate string functions like `LISTAGG()` are available. Replace `K` in the final WHERE clause with the actual number of top variants you wish to include.