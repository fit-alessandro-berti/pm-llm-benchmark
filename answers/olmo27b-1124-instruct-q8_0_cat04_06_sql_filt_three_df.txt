```sql
WITH OrderEvents AS (
    SELECT 
        e.case_id,
        e.activity,
        e.timestamp,
        ROW_NUMBER() OVER (PARTITION BY e.case_id ORDER BY e.timestamp) as rn
    FROM event_log e
),
SequentialCases AS (
    SELECT 
        case_id,
        activity_sequence = COALESCE(activity, 'None') as activity,
        MIN(timestamp) as start_time,
        MAX(timestamp) as end_time
    FROM OrderEvents
    GROUP BY case_id, activity
)
SELECT 
    e.* 
FROM event_log e
JOIN SequentialCases sc ON e.case_id = sc.case_id AND e.timestamp BETWEEN sc.start_time AND sc.end_time
WHERE NOT (sc.activity_sequence LIKE '%Approve Purchase Requisition%' 
        AND sc.activity_sequence LIKE '%Create Order%'
        AND sc.activity_sequence LIKE '%Confirm Order%')
    AND DATEDIFF(DAY, sc.end_time, e.timestamp) > 5;
```

This query works as follows:

1. **Creating a `Row Number` over events within each case (`OrderEvents` CTE):** This allows us to identify the position of each event within its case sequence.

2. **Identifying sequences of activities and their start/end times in each case (`SequentialCases` CTE):** We determine the chronological range for each activity sequence using the `ROW_NUMBER()` window function ordered by timestamp.

3. **Joining back to the `event_log` table:** We filter events based on whether they fit into the specific sequence defined in `SequentialCases` and if the time interval between the 'Create Order' and 'Confirm Order' is more than 5 days.

4. **Excluding cases with the specific sequence and the exact timing condition:** The WHERE clause of the main SELECT statement excludes events that belong to cases where the specified activities appear in the given order and with exactly 5 days or more between 'Create Order' and 'Confirm Order'.

The resulting query will return all events from the `event_log` table except for those where the exact sequence of activities occurs within 5 days, effectively answering the question posed.