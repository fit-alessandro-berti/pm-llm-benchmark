Below is an example DuckDB SQL query that implements the requested logic. It uses common table expressions (CTEs) to structure the solution into clear steps, and assumes the existence of functions like `string_agg` to produce the sequence of activities. If your version of DuckDB requires different syntax for string aggregation, you may need to adjust accordingly.

```sql
WITH ordered_variants AS (
    -- 1. Construct the sequence of activities per case
    SELECT
        case_id,
        string_agg(activity, '->' ORDER BY timestamp) AS variant_sequence
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    -- 2. Group cases by their complete activity sequence to identify unique variants
    SELECT
        variant_sequence,
        COUNT(*) AS case_count
    FROM ordered_variants
    GROUP BY variant_sequence
    ORDER BY case_count DESC
    LIMIT K
),
top_cases AS (
    -- 3. Identify all cases belonging to the top K variants
    SELECT ov.case_id
    FROM ordered_variants ov
    JOIN variant_counts vc ON ov.variant_sequence = vc.variant_sequence
)

-- 4. Return events only for cases that are part of these top K variants
SELECT e.*
FROM event_log e
WHERE e.case_id IN (SELECT case_id FROM top_cases)
ORDER BY e.case_id, e.timestamp;
```

**Explanation of the Query:**

- **`WITH ordered_variants AS (...)`**:  
  First, we generate a table where each `case_id` is associated with its ordered sequence of activities. We use `string_agg(activity, '->' ORDER BY timestamp)` to produce a string representing the sequence of activities for each case.

- **`WITH variant_counts AS (...)`**:  
  Next, we group these sequences to count how many cases follow each unique sequence (i.e., each unique process variant). We then order by this count and limit to the top K variants.

- **`WITH top_cases AS (...)`**:  
  From the top variants, we retrieve the `case_id` values that belong to them, creating a list of cases of interest.

- **Final SELECT**:  
  Finally, we filter the original `event_log` table to only include rows (events) belonging to the cases identified in `top_cases`. We preserve the ordering by `case_id` and `timestamp` so the output events remain in chronological order.

This approach ensures that only the events from the cases that match the top K variants are returned, while excluding all others.