Great, let’s dive straight into anomaly detection and process analysis.

---

##  Observed Anomalies in the Event Logs

### **Case 1001 (Normal Case)**
- Follows the assumed standard flow:
  - `Register Order  Credit Check  Stock Validation  Confirm Shipment  Ship Goods  Invoice  Payment`
- **No anomaly**

---

### **Case 1002**
- **Anomaly 1 – Shipment confirmed BEFORE credit check**  
  - `Confirm Shipment` (08:25) occurs before `Perform Credit Check` (09:10).  
  - This undermines the risk control of credit verification before committing logistics.
- **Anomaly 2 – Ship Goods BEFORE Validate Stock**  
  - `Ship Goods` (08:40) occurs prior to `Validate Stock` (09:15).  
  - This is backwards; stock validation should occur *before* goods leave the warehouse.  
- **Potential causes**:  
  - Lack of process enforcement in the system (no blocking of early steps).  
  - Manual override by Logistics Manager anticipating shipment (perhaps due to "priority order").  
  - Training issue (resources not respecting correct sequence).  

---

### **Case 1003**
- **Anomaly 1 – Shipment BEFORE stock validation**
  - `Ship Goods` (09:10) occurs but no `Validate Stock` beforehand (it's skipped).  
- **Anomaly 2 – Late Confirm Shipment**  
  - `Confirm Shipment` happens *after* goods are shipped.  
- **Potential causes**:  
  - Operational rush in warehouse/logistics causing shipment before confirmation.  
  - Weak integration between logistics system and finance/sales system.  

---

### **Case 1004**
- **Anomaly 1 – Payment received BEFORE Invoice**
  - `Receive Payment` (09:05) happens before `Issue Invoice` (09:20).  
  - Normal flow is: invoice generated, then payment collected.  
- **Anomaly 2 – No Credit Check performed**
  - Entire credit risk assessment step skipped.  
- **Anomaly 3 – Shipment confirmed as `shipment_scheduled=N`**
  - Explicitly indicates shipment was not properly scheduled, yet goods were shipped.  
- **Potential causes**:  
  - Manual advance payment accepted by Finance before invoice.  
  - Policy allowing pre-payment in rare cases but violating the normal flow.  
  - Logistics override despite missing scheduling.  

---

##  Hypotheses on Why These Anomalies Occur

1. **System Control Gaps**  
   - Workflow enforcement may not be strict, allowing out-of-sequence activities.  

2. **Resource Behavior / Training Issues**  
   - Logistics managers and warehouse clerks may bypass checks due to business pressure.  
   - Finance staff may allow early/advance payments.  

3. **Business Exceptions**  
   - Priority orders (e.g., Case 1002) may intentionally bypass certain steps to expedite.  
   - Advance payments (Case 1004) may occur in special contracts.  

4. **Data Quality Issues**  
   - Incorrect timestamps or delayed system logging leading to misordered events.  

---

##  SQL Queries to Investigate

### 1. Find all cases where shipment happens **before credit check**
```sql
SELECT oel1.case_id
FROM order_event_log oel1
JOIN order_event_log oel2 ON oel1.case_id = oel2.case_id
WHERE oel1.activity = 'Ship Goods'
  AND oel2.activity = 'Perform Credit Check'
  AND oel1.timestamp < oel2.timestamp;
```

---

### 2. Find all cases where **ship goods occurs before stock validation**
```sql
SELECT oel1.case_id
FROM order_event_log oel1
JOIN order_event_log oel2 ON oel1.case_id = oel2.case_id
WHERE oel1.activity = 'Ship Goods'
  AND oel2.activity = 'Validate Stock'
  AND oel1.timestamp < oel2.timestamp;
```

---

### 3. Find payments made **before invoice issuance**
```sql
SELECT oel1.case_id
FROM order_event_log oel1
JOIN order_event_log oel2 ON oel1.case_id = oel2.case_id
WHERE oel1.activity = 'Receive Payment'
  AND oel2.activity = 'Issue Invoice'
  AND oel1.timestamp < oel2.timestamp;
```

---

### 4. Identify cases with **missing mandatory steps** (Credit Check, Stock Validation)
```sql
SELECT case_id
FROM orders o
WHERE NOT EXISTS (SELECT 1 FROM order_event_log e WHERE e.case_id=o.case_id AND e.activity='Perform Credit Check')
   OR NOT EXISTS (SELECT 1 FROM order_event_log e WHERE e.case_id=o.case_id AND e.activity='Validate Stock');
```

---

### 5. Check whether anomalies correlate with **priority orders**
```sql
SELECT o.case_id, o.order_type, e.activity, e.timestamp
FROM orders o
JOIN order_event_log e ON o.case_id = e.case_id
WHERE o.order_type = 'priority';
```

---

### 6. Analyze responsible **roles/departments** in anomalies
```sql
SELECT DISTINCT a.case_id, r.role, r.department, e.activity
FROM (
    SELECT oel1.case_id, oel1.event_id
    FROM order_event_log oel1
    JOIN order_event_log oel2 ON oel1.case_id=oel2.case_id
    WHERE (oel1.activity='Ship Goods' AND oel2.activity='Validate Stock' AND oel1.timestamp < oel2.timestamp)
       OR (oel1.activity='Receive Payment' AND oel2.activity='Issue Invoice' AND oel1.timestamp < oel2.timestamp)
) a
JOIN order_event_log e ON a.case_id=e.case_id AND a.event_id=e.event_id
JOIN resources r ON e.resource=r.resource_id;
```

---

 **Summary**:  
- **Case 1001** is compliant, while **Cases 1002–1004** show multiple anomalies (early shipment, skipped validations, premature payment).  
- **Reasons** could be intentional business exceptions, human errors, system/log policy gaps, or timestamp issues.  
- Suggested SQL queries can uncover patterns across the entire dataset, link anomalies to order types, and attribute anomalies to specific roles or departments.  

---

Would you like me to design a **dashboard-style summary SQL script** (e.g., anomaly counts, percentage of orders affected per anomaly type) so you can quickly monitor process conformance across many cases?