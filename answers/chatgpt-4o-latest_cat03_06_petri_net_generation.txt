Here's the complete Python code that constructs an **Accepting Petri Net** for the described **Insurance Claim Management Process**, including:

- Appropriate places and transitions reflecting every step.
- Loops for re-submission of documents and repeated in-depth investigations.
- Initial marking with a token in the starting place.
- Final marking when the claim is closed.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri Net
net = PetriNet(name="Insurance Claim Management Process")

# Define Places
p_start = PetriNet.Place("p_start")
p_cr_done = PetriNet.Place("p_cr_done")
p_dv = PetriNet.Place("p_dv")
p_rds = PetriNet.Place("p_rds")
p_docs_verified = PetriNet.Place("p_docs_verified")
p_fc = PetriNet.Place("p_fc")
p_fc_check = PetriNet.Place("p_fc_check")
p_ii = PetriNet.Place("p_ii")
p_fc_cleared = PetriNet.Place("p_fc_cleared")
p_ca = PetriNet.Place("p_ca")
p_assessed = PetriNet.Place("p_assessed")
p_ap = PetriNet.Place("p_ap")
p_approved = PetriNet.Place("p_approved")
p_p = PetriNet.Place("p_p")
p_paid = PetriNet.Place("p_paid")
p_n = PetriNet.Place("p_n")
p_notified = PetriNet.Place("p_notified")
p_cl = PetriNet.Place("p_cl")
p_end = PetriNet.Place("p_end")

# Add Places to the net
net.places.add(p_start)
net.places.add(p_cr_done)
net.places.add(p_dv)
net.places.add(p_rds)
net.places.add(p_docs_verified)
net.places.add(p_fc)
net.places.add(p_fc_check)
net.places.add(p_ii)
net.places.add(p_fc_cleared)
net.places.add(p_ca)
net.places.add(p_assessed)
net.places.add(p_ap)
net.places.add(p_approved)
net.places.add(p_p)
net.places.add(p_paid)
net.places.add(p_n)
net.places.add(p_notified)
net.places.add(p_cl)
net.places.add(p_end)

# Define Transitions with their labels
t_cr = PetriNet.Transition("t_cr", "Claim Registration")
t_dv = PetriNet.Transition("t_dv", "Document Verification")
t_rds = PetriNet.Transition("t_rds", "Re-Document Submission")
t_fc = PetriNet.Transition("t_fc", "Fraud Check")
t_ii = PetriNet.Transition("t_ii", "In-depth Investigation")
t_ca = PetriNet.Transition("t_ca", "Claim Assessment")
t_ap = PetriNet.Transition("t_ap", "Approval")
t_p = PetriNet.Transition("t_p", "Payment")
t_n = PetriNet.Transition("t_n", "Notification")
t_cl = PetriNet.Transition("t_cl", "Closure")

# Add Transitions to the net
transitions = [t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_p, t_n, t_cl]
net.transitions.update(transitions)

# Add arcs to define the process flow
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_cr_done, net)

petri_utils.add_arc_from_to(p_cr_done, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_docs_verified, net)

# Loop: if documents incomplete, re-do DV after RDS
petri_utils.add_arc_from_to(p_docs_verified, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_cr_done, net)  # Back to CR done to restart DV

# Continue if documents verified
petri_utils.add_arc_from_to(p_docs_verified, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc_check, net)

# Loop: if fraud suspected, do in-depth investigation
petri_utils.add_arc_from_to(p_fc_check, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_fc_check, net)  # May repeat

# Proceed to claim assessment if fraud cleared
petri_utils.add_arc_from_to(p_fc_check, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_assessed, net)

# Proceed to approval
petri_utils.add_arc_from_to(p_assessed, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_approved, net)

# Proceed to payment
petri_utils.add_arc_from_to(p_approved, t_p, net)
petri_utils.add_arc_from_to(t_p, p_paid, net)

# Notify customer
petri_utils.add_arc_from_to(p_paid, t_n, net)
petri_utils.add_arc_from_to(t_n, p_notified, net)

# Closure
petri_utils.add_arc_from_to(p_notified, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# Define Initial and Final Markings
im = Marking()
im[p_start] = 1  # Starting with a new claim

fm = Marking()
fm[p_end] = 1  # Claim is closed

# Output to verify structure (optional)
print("Number of places:", len(net.places))
print("Number of transitions:", len(net.transitions))
print("Initial marking:", im)
print("Final marking:", fm)
```

---

###  **Summary Structure:**
- **Start  Claim Registration  Document Verification**
  -  If incomplete  Re-Document Submission  Document Verification (loop)
- **After DV  Fraud Check**
  -  If suspicious  In-Depth Investigation  Fraud Check (loop)
- ** Claim Assessment  Approval  Payment  Notification  Closure**

---

###  Note:
- You can optionally omit the loops by not adding those arcs if your specific implementation doesn’t require them.
- The loops from DV  RDS and FC  II are essential to model the real-world process where iterations are possible.

Let me know if you want a visualization as well!