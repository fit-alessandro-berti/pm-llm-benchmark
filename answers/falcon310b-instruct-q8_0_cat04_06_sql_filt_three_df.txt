
To solve this problem, we'll use a combination of window functions and subqueries in DuckDB SQL. Here's how we can achieve this:

```sql
WITH sequences AS (
    -- Identify cases with the required sequence
    SELECT case_id, 
           ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn,
           timestamp
    FROM event_log
    WHERE activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
),

filtered_cases AS (
    -- Check for the exact sequence in direct succession
    SELECT case_id
    FROM sequences
    WHERE rn IN (1, 2, 3) 
      AND LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Approve Purchase Requisition'
      AND activity = 'Create Order'
      AND LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Confirm Order'
),

long_delay_cases AS (
    -- Filter cases where the time delay between 'Create Order' and 'Confirm Order' is more than 5 days
    SELECT case_id
    FROM sequences
    WHERE rn IN (2, 3) 
      AND activity = 'Create Order'
      AND LEAD(timestamp) OVER (PARTITION BY case_id ORDER BY timestamp) = 'Confirm Order'
      AND TIMESTAMPDIFF(DAY, timestamp, LEAD(timestamp) OVER (PARTITION BY case_id ORDER BY timestamp)) > 5
),

final_result AS (
    -- Exclude cases from the result that have the specified sequence and long delay
    SELECT *
    FROM event_log
    WHERE case_id NOT IN (SELECT case_id FROM filtered_cases) 
      AND case_id NOT IN (SELECT case_id FROM long_delay_cases)
)

-- Return the final result
SELECT * FROM final_result;
```

### Explanation:

1. **sequences**: This CTE (Common Table Expression) identifies all events that are part of the sequence ('Approve Purchase Requisition', 'Create Order', 'Confirm Order') and assigns a row number to each event within its case_id.

2. **filtered_cases**: This CTE checks for cases where the required sequence appears in direct succession. It uses the `LAG` function to look back at the previous activity and the `LEAD` function to look forward to the next activity within the same `case_id`.

3. **long_delay_cases**: This CTE identifies cases where there's a delay of more than 5 days between the 'Create Order' and 'Confirm Order' activities. It also uses `LEAD` to compare timestamps.

4. **final_result**: This CTE excludes events from cases that match both the exact sequence criteria and the long delay criteria.

5. **Final SELECT**: The query returns all events from `event_log` that are not part of the filtered out cases.

This approach ensures that we accurately identify and exclude the required cases based on both the sequence and timing conditions.