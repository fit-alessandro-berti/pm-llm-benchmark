# **Integrated Event Log: Merged & Enriched Order Fulfillment Events**

---

## **Overview of the Task**

We are merging two event logs from different systems (Log A from System A, Log B from System B) related to the fulfillment of **Order#1234**. The goal is to create a single, enriched, chronologically ordered event log by:

- Aligning events based on `order_id` and **temporal proximity** (within ±2 seconds).
- Resolving naming differences (e.g., "Order Received" vs. "OrderReceived").
- Merging attributes from both logs where events are matched.
- Preserving unmatched events (from either log) with origin markers.
- Choosing a **primary timestamp** for ordering (using Log A's timestamp when available, otherwise Log B's).

We use a **tolerance window of 2 seconds** for matching, and treat events as the same if:
- They share the same `order_id`.
- Their timestamps differ by  2 seconds.
- They describe logically equivalent actions (based on event semantics).

---

## **Step 1: Normalize Event Names for Comparison**

We map event names from both logs to a common semantic category:

| Log A (System A) | Log B (System B) | Mapped Semantic Event |
|------------------|------------------|------------------------|
| Order Received   | OrderReceived    | Order Received         |
| Order Validated  | OrderValidation  | Order Validated        |
| Payment Processed| PaymentCheck     | Payment Processed      |
| Item Shipped     | Shipping         | Item Shipped           |
| Item Delivered   | (no match)       | Item Delivered (only in A) |

Note:  
- `Quality Check` in Log B has no counterpart in Log A  will be included as-is.
- `Item Delivered` in Log A has no match in Log B  will be included as-is.

---

## **Step 2: Match Events Using Timestamp Tolerance (±2 seconds)**

We compare each event from Log A with events in Log B (same `order_id`) and check if timestamps are within 2 seconds.

---

### **Event Matching Analysis**

#### 1. **Order Received**  
- Log A: `2023-10-10T10:00:00Z`  "Order Received"  
- Log B: `2023-10-10T09:59:58Z`  "OrderReceived"  
- **Difference**: 2 seconds (Log B is 2 seconds earlier)  **within tolerance**  
 **Matched**

> **Reasoning**: The 2-second gap is exactly the tolerance threshold. The event is logically the same (order arrival), and the timing is plausible (Log B records the event slightly before Log A receives it). We merge.

---

#### 2. **Order Validated**  
- Log A: `2023-10-10T10:01:30Z`  "Order Validated"  
- Log B: `2023-10-10T10:01:29Z`  "OrderValidation"  
- **Difference**: 1 second   **Matched**

> **Reasoning**: Very close in time and same semantic meaning. Log B records it one second earlier, likely due to system timing. Merge.

---

#### 3. **Payment Processed**  
- Log A: `2023-10-10T10:02:00Z`  "Payment Processed"  
- Log B: `2023-10-10T10:02:05Z`  "PaymentCheck"  
- **Difference**: 5 seconds   **Not matched**

> **Reasoning**: 5 seconds exceeds the 2-second tolerance. Although both relate to payment, the timing difference suggests they are **not the same event**.  
- Log A: "Payment Processed" — likely final confirmation.
- Log B: "PaymentCheck" — possibly a validation step, not the final process.

> **Conclusion**: These are **distinct** events. **Do NOT merge**. Both will be included separately.

---

#### 4. **Item Shipped**  
- Log A: `2023-10-10T10:05:00Z`  "Item Shipped"  
- Log B: `2023-10-10T10:05:02Z`  "Shipping"  
- **Difference**: 2 seconds   **Matched**

> **Reasoning**: Exactly 2 seconds apart. "Shipping" in Log B is likely the same as "Item Shipped" in Log A. Log B records the physical handover to courier, which aligns with shipping. Merge.

---

#### 5. **Item Delivered**  
- Log A: `2023-10-10T10:20:00Z`  "Item Delivered"  
- Log B: No matching event   **No match**

> **Reasoning**: Log B ends at `10:05:02Z`. No event in Log B corresponds to delivery. Likely, Log B does not track delivery events. Include as-is.

---

#### 6. **Unmatched Event in Log B: Quality Check**  
- Log B: `2023-10-10T10:03:00Z`, "Quality Check", `u45`, `r11`, notes  
- Log A: No corresponding event   **No match**

> **Reasoning**: This is a system-specific quality check not captured in Log A. It’s a valid event in the process and should be preserved.

---

## **Step 3: Merge Matched Events**

For each matched pair, we combine attributes. We use **Log A’s timestamp as the primary timestamp** for ordering, but **include both** for traceability.

### **Merged Events**

| Timestamp (Primary) | Event Type | Order ID | Attributes (from both logs) |
|---------------------|------------|----------|------------------------------|
| 2023-10-10T10:00:00Z | Order Received | Order#1234 | - **Log A**: `Order Received`<br>- **Log B**: `OrderReceived`, `user_id=u45`, `resource_id=r10`, `notes="Event captured at warehouse system"` |
| 2023-10-10T10:01:30Z | Order Validated | Order#1234 | - **Log A**: `Order Validated`<br>- **Log B**: `OrderValidation`, `user_id=u12`, `resource_id=r10`, `notes="Cross-check inventory"` |
| 2023-10-10T10:05:00Z | Item Shipped | Order#1234 | - **Log A**: `Item Shipped`<br>- **Log B**: `Shipping`, `user_id=u45`, `resource_id=r10`, `notes="Package handed to courier"` |

> **Note**: For merged events, we use Log A’s timestamp as the primary for chronological ordering. Log B’s timestamp is retained for context.

---

## **Step 4: Include Unmatched Events**

### From Log A (no match in Log B):
- `2023-10-10T10:20:00Z`, `Item Delivered`, `Order#1234`  
   No corresponding event in Log B  include as-is.

### From Log B (no match in Log A):
- `2023-10-10T10:03:00Z`, `Quality Check`, `Order#1234`, `user_id=u45`, `resource_id=r11`, `notes="Random inspection"`  
   Not in Log A  include as-is.

---

## **Step 5: Final Chronological Order**

We now sort all events by the **primary timestamp** (Log A’s timestamp when available, otherwise Log B’s).

| Timestamp | Event Type | Order ID | Source | Attributes |
|----------|------------|----------|--------|------------|
| 2023-10-10T09:59:58Z | OrderReceived | Order#1234 | Log B | `user_id=u45`, `resource_id=r10`, `notes="Event captured at warehouse system"` |
| 2023-10-10T10:00:00Z | Order Received (merged) | Order#1234 | Log A + Log B | `user_id=u45`, `resource_id=r10`, `notes="Event captured at warehouse system"` |
| 2023-10-10T10:01:29Z | OrderValidation | Order#1234 | Log B | `user_id=u12`, `resource_id=r10`, `notes="Cross-check inventory"` |
| 2023-10-10T10:01:30Z | Order Validated (merged) | Order#1234 | Log A + Log B | `user_id=u12`, `resource_id=r10`, `notes="Cross-check inventory"` |
| 2023-10-10T10:02:00Z | Payment Processed | Order#1234 | Log A | (no additional attributes) |
| 2023-10-10T10:02:05Z | PaymentCheck | Order#1234 | Log B | `user_id=u12`, `resource_id=r99`, `notes="Payment gateway delay"` |
| 2023-10-10T10:03:00Z | Quality Check | Order#1234 | Log B | `user_id=u45`, `resource_id=r11`, `notes="Random inspection"` |
| 2023-10-10T10:05:00Z | Item Shipped (merged) | Order#1234 | Log A + Log B | `user_id=u45`, `resource_id=r10`, `notes="Package handed to courier"` |
| 2023-10-10T10:20:00Z | Item Delivered | Order#1234 | Log A | (no additional attributes) |

>  **All events are now chronologically ordered.**

>  **Note**: Even though Log B’s `OrderReceived` (09:59:58Z) is earlier than Log A’s `Order Received` (10:00:00Z), it’s included in the final list **before** the merged event, because it’s a real event from the past.

---

## **Final Merged Event Log (Cleaned & Enriched)**

```
2023-10-10T09:59:58Z,OrderReceived,Order#1234,source=LogB,user_id=u45,resource_id=r10,notes="Event captured at warehouse system"
2023-10-10T10:00:00Z,Order Received,Order#1234,source=LogA+LogB,user_id=u45,resource_id=r10,notes="Event captured at warehouse system"
2023-10-10T10:01:29Z,OrderValidation,Order#1234,source=LogB,user_id=u12,resource_id=r10,notes="Cross-check inventory"
2023-10-10T10:01:30Z,Order Validated,Order#1234,source=LogA+LogB,user_id=u12,resource_id=r10,notes="Cross-check inventory"
2023-10-10T10:02:00Z,Payment Processed,Order#1234,source=LogA
2023-10-10T10:02:05Z,PaymentCheck,Order#1234,source=LogB,user_id=u12,resource_id=r99,notes="Payment gateway delay"
2023-10-10T10:03:00Z,Quality Check,Order#1234,source=LogB,user_id=u45,resource_id=r11,notes="Random inspection"
2023-10-10T10:05:00Z,Item Shipped,Order#1234,source=LogA+LogB,user_id=u45,resource_id=r10,notes="Package handed to courier"
2023-10-10T10:20:00Z,Item Delivered,Order#1234,source=LogA
```

---

## **Summary of Key Decisions & Reasoning**

| Decision | Reasoning |
|--------|-----------|
| **Matched Order Received** (09:59:58Z vs 10:00:00Z) | 2-second difference is within tolerance. Log B likely records event earlier. Both describe same phase. |
| **Matched Order Validated** (10:01:29Z vs 10:01:30Z) | 1-second gap — very close. Same semantic meaning. |
| **Did NOT merge Payment Processed & PaymentCheck** | 5-second gap  exceeds 2-second tolerance. Likely different stages (check vs final process). |
| **Matched Item Shipped** (10:05:00Z vs 10:05:02Z) | 2-second gap — at tolerance limit. "Shipping" in Log B is physical handover; matches "Item Shipped" in Log A. |
| **Included Quality Check (Log B only)** | No counterpart in Log A. System-specific process step. Must be preserved. |
| **Included Item Delivered (Log A only)** | No corresponding event in Log B. Possibly not tracked in that system. |
| **Used Log A’s timestamp for merged events** | Log A is considered primary timeline. Used for chronological ordering. |
| **Retained Log B’s timestamps and attributes** | For audit trail and completeness. |
| **Used 2-second tolerance** | Standard for system timing variance. Balances precision and flexibility. |

---

## **Conclusion**

The merged log provides a **rich, chronological, and accurate view** of the order fulfillment process, combining the **primary timeline (Log A)** with **detailed attributes from Log B**. It preserves all relevant events, handles timing differences appropriately, and resolves naming inconsistencies through semantic alignment.

This integrated log can now be used for analytics, audit trails, or process monitoring with confidence in both completeness and temporal accuracy.