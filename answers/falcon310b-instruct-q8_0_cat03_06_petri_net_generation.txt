<1>
```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Constructing the Petri Net
net = PetriNet(name="Insurance Claim Management")

# Define places
start = PetriNet.Place(name="Start")
claim_registered = PetriNet.Place(name="Claim Registered")
doc_verified = PetriNet.Place(name="Documents Verified")
fraud_checked = PetriNet.Place(name="Fraud Checked")
claim_assessed = PetriNet.Place(name="Claim Assessed")
approved = PetriNet.Place(name="Approved")
payment_made = PetriNet.Place(name="Payment Made")
notification_sent = PetriNet.Place(name="Notification Sent")
claim_closed = PetriNet.Place(name="Claim Closed")

# Define transitions
claim_registration = PetriNet.Transition(name="Claim Registration", label="CR")
document_verification = PetriNet.Transition(name="Document Verification", label="DV")
fraud_check = PetriNet.Transition(name="Fraud Check", label="FC")
claim_assessment = PetriNet.Transition(name="Claim Assessment", label="CA")
approval = PetriNet.Transition(name="Approval", label="AP")
payment = PetriNet.Transition(name="Payment", label="P")
notification = PetriNet.Transition(name="Notification", label="N")
closure = PetriNet.Transition(name="Closure", label="CL")

# Add places and transitions to the Petri Net
net.places.add(start)
net.places.add(claim_registered)
net.places.add(doc_verified)
net.places.add(fraud_checked)
net.places.add(claim_assessed)
net.places.add(approved)
net.places.add(payment_made)
net.places.add(notification_sent)
net.places.add(claim_closed)

net.transitions.add(claim_registration)
net.transitions.add(document_verification)
net.transitions.add(fraud_check)
net.transitions.add(claim_assessment)
net.transitions.add(approval)
net.transitions.add(payment)
net.transitions.add(notification)
net.transitions.add(closure)

# Add arcs
petri_utils.add_arc_from_to(start, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, claim_registered, net)
petri_utils.add_arc_from_to(claim_registered, document_verification, net)
petri_utils.add_arc_from_to(document_verification, doc_verified, net)
petri_utils.add_arc_from_to(doc_verified, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, fraud_checked, net)
petri_utils.add_arc_from_to(fraud_checked, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, claim_assessed, net)
petri_utils.add_arc_from_to(claim_assessed, approval, net)
petri_utils.add_arc_from_to(approval, approved, net)
petri_utils.add_arc_from_to(approved, payment, net)
petri_utils.add_arc_from_to(payment, payment_made, net)
petri_utils.add_arc_from_to(payment_made, notification, net)
petri_utils.add_arc_from_to(notification, notification_sent, net)
petri_utils.add_arc_from_to(notification_sent, closure, net)
petri_utils.add_arc_from_to(closure, claim_closed, net)

# Define initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[claim_closed] = 1

# Display the Petri Net and initial/final markings (optional for visualization, not required)
# print(net)
# print("Initial Marking:", im)
# print("Final Marking:", fm)
```
