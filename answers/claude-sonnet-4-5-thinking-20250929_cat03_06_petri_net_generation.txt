```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net for insurance claim management process
net = PetriNet(name="insurance_claim_management")

# ===== CREATE PLACES =====
# Places represent states in the process
p_start = PetriNet.Place(name="p_start")
p_registered = PetriNet.Place(name="p_registered")
p_dv_result = PetriNet.Place(name="p_dv_result")
p_needs_resubmission = PetriNet.Place(name="p_needs_resubmission")
p_ready_for_fc = PetriNet.Place(name="p_ready_for_fc")
p_fc_result = PetriNet.Place(name="p_fc_result")
p_needs_investigation = PetriNet.Place(name="p_needs_investigation")
p_ready_for_ca = PetriNet.Place(name="p_ready_for_ca")
p_assessed = PetriNet.Place(name="p_assessed")
p_approved = PetriNet.Place(name="p_approved")
p_paid = PetriNet.Place(name="p_paid")
p_notified = PetriNet.Place(name="p_notified")
p_end = PetriNet.Place(name="p_end")

# Add all places to the net
net.places.add(p_start)
net.places.add(p_registered)
net.places.add(p_dv_result)
net.places.add(p_needs_resubmission)
net.places.add(p_ready_for_fc)
net.places.add(p_fc_result)
net.places.add(p_needs_investigation)
net.places.add(p_ready_for_ca)
net.places.add(p_assessed)
net.places.add(p_approved)
net.places.add(p_paid)
net.places.add(p_notified)
net.places.add(p_end)

# ===== CREATE TRANSITIONS =====
# Transitions represent activities
t_cr = PetriNet.Transition(name="t_cr", label="Claim Registration (CR)")
t_dv = PetriNet.Transition(name="t_dv", label="Document Verification (DV)")
t_dv_ok = PetriNet.Transition(name="t_dv_ok", label=None)  # Silent: documents OK decision
t_need_rds = PetriNet.Transition(name="t_need_rds", label=None)  # Silent: documents incomplete decision
t_rds = PetriNet.Transition(name="t_rds", label="Re-Document Submission (RDS)")
t_fc = PetriNet.Transition(name="t_fc", label="Fraud Check (FC)")
t_fc_ok = PetriNet.Transition(name="t_fc_ok", label=None)  # Silent: fraud check clear decision
t_need_ii = PetriNet.Transition(name="t_need_ii", label=None)  # Silent: fraud doubts decision
t_ii = PetriNet.Transition(name="t_ii", label="In-depth Investigation (II)")
t_ca = PetriNet.Transition(name="t_ca", label="Claim Assessment (CA)")
t_ap = PetriNet.Transition(name="t_ap", label="Approval (AP)")
t_p = PetriNet.Transition(name="t_p", label="Payment (P)")
t_n = PetriNet.Transition(name="t_n", label="Notification (N)")
t_cl = PetriNet.Transition(name="t_cl", label="Closure (CL)")

# Add all transitions to the net
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_dv_ok)
net.transitions.add(t_need_rds)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_fc_ok)
net.transitions.add(t_need_ii)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)

# ===== CREATE ARCS =====
# Arcs connect places and transitions to define the flow

# 1. Claim Registration
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_registered, net)

# 2. Document Verification with possible re-submission loop
petri_utils.add_arc_from_to(p_registered, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv_result, net)
# If documents are OK, proceed to fraud check
petri_utils.add_arc_from_to(p_dv_result, t_dv_ok, net)
petri_utils.add_arc_from_to(t_dv_ok, p_ready_for_fc, net)
# If documents are incomplete, request re-submission and loop back
petri_utils.add_arc_from_to(p_dv_result, t_need_rds, net)
petri_utils.add_arc_from_to(t_need_rds, p_needs_resubmission, net)
petri_utils.add_arc_from_to(p_needs_resubmission, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_registered, net)  # Loop back to before DV

# 3. Fraud Check with possible investigation loop
petri_utils.add_arc_from_to(p_ready_for_fc, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc_result, net)
# If fraud check is clear, proceed to claim assessment
petri_utils.add_arc_from_to(p_fc_result, t_fc_ok, net)
petri_utils.add_arc_from_to(t_fc_ok, p_ready_for_ca, net)
# If fraud check raises doubts, perform in-depth investigation and loop back
petri_utils.add_arc_from_to(p_fc_result, t_need_ii, net)
petri_utils.add_arc_from_to(t_need_ii, p_needs_investigation, net)
petri_utils.add_arc_from_to(p_needs_investigation, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_ready_for_fc, net)  # Loop back to before FC

# 4. Claim Assessment
petri_utils.add_arc_from_to(p_ready_for_ca, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_assessed, net)

# 5. Approval
petri_utils.add_arc_from_to(p_assessed, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_approved, net)

# 6. Payment
petri_utils.add_arc_from_to(p_approved, t_p, net)
petri_utils.add_arc_from_to(t_p, p_paid, net)

# 7. Notification
petri_utils.add_arc_from_to(p_paid, t_n, net)
petri_utils.add_arc_from_to(t_n, p_notified, net)

# 8. Closure
petri_utils.add_arc_from_to(p_notified, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# ===== DEFINE MARKINGS =====
# Initial marking: one token in the start place (new claim filed)
im = Marking()
im[p_start] = 1

# Final marking: one token in the end place (claim closed)
fm = Marking()
fm[p_end] = 1
```

**Explanation of the Petri Net Structure:**

1. **Linear Main Flow**: CR  DV  FC  CA  AP  P  N  CL

2. **Document Verification Loop**: 
   - After DV, there's a choice point (`p_dv_result`)
   - Either documents are OK (silent transition `t_dv_ok`)  proceed to FC
   - Or documents are incomplete (silent transition `t_need_rds`)  RDS activity  loop back to `p_registered` for re-verification

3. **Fraud Check Loop**:
   - After FC, there's a choice point (`p_fc_result`)
   - Either fraud check is clear (silent transition `t_fc_ok`)  proceed to CA
   - Or doubts exist (silent transition `t_need_ii`)  II activity  loop back to `p_ready_for_fc` for re-checking

4. **Silent Transitions**: Used for routing decisions (label=None) to model non-deterministic choices without representing observable activities

5. **Markings**: Initial marking has one token at `p_start` (claim filed), final marking has one token at `p_end` (claim closed and archived)