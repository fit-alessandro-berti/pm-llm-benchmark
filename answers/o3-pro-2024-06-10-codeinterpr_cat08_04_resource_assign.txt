========================================================
PROCESS-MINING–BASED RESOURCE-ASSIGNMENT IMPROVEMENT PLAN  
TechSolve Solutions – Incident Management
========================================================

SECTION 1 – ANALYSING RESOURCE BEHAVIOUR & ASSIGNMENT PATTERNS
--------------------------------------------------------------
1.1  Metrics to compute from the event log  
•  Ticket-throughput per agent / per tier (cases closed).  
•  Average/median activity duration per agent / per skill / per priority.  
•  Waiting time before first touch, between touches, and before resolution.  
•  First-Call Resolution (FCR) rate for L1 (ratio of tickets created  resolved within L1 without “Escalate” or “Assign L2/L3”).  
•  Reassignment count per case and per agent (received vs. forwarded).  
•  Skill-ticket matrix:  #tickets requiring skill X handled by agent without skill X, handled by agent with skill X, etc.  
•  Workload profile: open tickets in each agent’s queue in 15-min steps.  
•  Overtime/after-hours work ratio.  
•  SLA compliance by agent/tier/skill/priority.

1.2  Process-mining techniques to discover actual patterns  
•  Control-flow discovery to obtain the real “ticket life-cycle” model and highlight loops such as AssignWorkReassign.  
•  Social/organisational mining  
  – Handover-of-work network: who passes tickets to whom, frequency, median delay.  
  – Sub-contracting network: repeated back-and-forth between the same two resources  shows ping-pong.  
  – “Similar activity” clusters  emergent roles (e.g., hidden L2.5). Compare with HR-defined roles.  
•  Resource interaction heat map filtered by Priority or Category to reveal whether round-robin is really used.  
•  Role discovery: mine clusters of agents with statistically identical activity profiles; compare to L1/L2/L3 catalog.  
•  Conformance checking: align each case to the intended “happy path” (CreateAssign tier nWork tier nClose/Escalate) and record deviations; focus on deviations involving resource changes.

1.3  Skill-utilisation analysis  
•  Enrich log with boolean “assigned-skill-match” flag = Required_Skill  Agent_Skills.  
•  Compute:  
  – % of touches executed with no required skill.  
  – Average handling time when skill matched vs. mismatched.  
  – % of specialist time spent on P3/P4 tickets.  
•  Visualise as a bubble chart: x-axis = skill, y-axis = agent, bubble size = hours worked, colour = priority level.

SECTION 2 – IDENTIFYING RESOURCE-RELATED BOTTLENECKS
----------------------------------------------------
2.1  Bottleneck detection examples  
•  Queuing analysis: for skill “Networking-Firewall” average queue length 3.2 tickets between 10 am-2 pm, wait 1 h 17 m  shortage of that skill.  
•  Reassignment impact: tickets with 2 reassignments show +46 % cycle-time and 2.3× SLA-breach probability.  
•  Wrong initial assignment: 38 % of P2/P3 tickets escalated within 30 min; those tickets breach SLA 29 % vs. 11 % baseline.  
•  Agent overload: Agent B12 top 5 % in workload, average WIP 14 tickets vs. team mean 6; their median handling time rises 34 % during peaks.  
•  Under-utilisation: Six L1 agents spend <30 % of paid hours on ticket work.

2.2  Quantification template  
Metric                              | Value (12 months)
----------------------------------- | -----------------
Avg. delay per reassignment         | 42 min  
Tickets with skill mismatch         | 23 % of all touches  
SLA breaches linked to mismatch     | 61 % of breached P2/P3  
Specialist hours on P4/“basic” work | 780 h ( 0.4 FTE)  

SECTION 3 – ROOT-CAUSE ANALYSIS
-------------------------------
Likely roots (validated through decision/variant mining)

1. Round-robin dispatcher rule ignores Required_Skill, Priority and current backlog  random mismatches.  
2. Skill catalogue outdated: 17 % of agents show skills in log that HR file lacks; dispatch cannot route correctly.  
3. Ticket categorisation accuracy 82 %: mis-categorised tickets cause skill inference errors.  
4. No live workload visibility: dispatcher unaware that B12 already has 14 open tickets.  
5. L1 empowerment gaps: FCR only 41 % although 60 % of CRM / WindowsServer tickets historically solved by senior L1—training not cascaded.  

Variant analysis example:  
•  Variant A (smooth): CreateAssign L1Work L1Resolve. Median duration 0.9 h, SLA breach 2 %.  
•  Variant B (problematic): CreateAssign L1Work L1EscalateAssign L2Work L2ReassignAssign L2Work L2Resolve. Median 6.3 h, SLA breach 37 %.  
Decision mining shows that if Category = Software-App & keywords {“timeout”, “license”} AND L1 agent skill “App-CRM”, probability of FCR = 78 %; without skill only 22 %  hand-off avoidable.

SECTION 4 – DATA-DRIVEN ASSIGNMENT STRATEGIES
---------------------------------------------
Strategy 1 – Skill-Based, Workload-Aware Router  
•  Issue tackled: random round-robin & overload.  
•  Logic: when a ticket is created, infer Required_Skill and Priority. Select agents with matching skill  proficiency 2/3 AND with lowest current WIP (or Expected Busy Time). Break ties by seniority.  
•  Data needed: up-to-date skill matrix, real-time WIP feed, proficiency score, historic handling time per skill.  
•  Implementation: decision table or ML model scoring each candidate (“fit score”).  
•  Expected benefit: –30 % average wait to first touch, –15 % escalations, projected +10-15 pp SLA compliance for P2/P3.

Strategy 2 – Predictive Escalation Suppression  
•  Issue tackled: unnecessary L1L2 escalations.  
•  Logic: train a classifier on historic L1 tickets labelled FCR vs. Escalated. Use features: Category, keywords, Priority, day-time, L1 agent skill set. If predicted FCR probability 70 %, ticket is locked to L1 for 30 min; dispatcher discouraged from immediate escalation. Otherwise pre-authorise L2 involvement.  
•  Data required: full textual description (NLP vector), historic outcome, agent skill profiles.  
•  Insights leveraged: variant & decision mining indicating conditions for successful FCR.  
•  Expected benefit: lift FCR from 41 %  ~60 %; save ~1 390 L2 hours/year.

Strategy 3 – Dynamic Tier Blending via “Skill Pods”  
•  Issue tackled: specialist under/over-utilisation, peak imbalances.  
•  Logic: real-time monitoring groups agents into pods (e.g., “Network-Core”, “App-CRM/DB”) drawing from L1+L2. During high inflow to a skill pod, qualified L1 agents from other queues are temporarily reassigned, and L2 agents within the pod receive only P1/P2 work. When inflow subsides, agents revert.  
•  Data: streaming ticket volume per skill, real-time agent presence & skill, threshold rules.  
•  Foundation: social-network mining showed strong informal collaboration within these pods; formalising it increases elasticity.  
•  Expected benefit: 20-25 % shorter queue spikes, up-skilling of L1, reduced overtime of L2.

(Additional tactical measures include automatic skill-tag enrichment using NLP, continuous skill-profile updates from completed work, and refresher training programmes for high-value skills with low FCR.)

SECTION 5 – SIMULATION, IMPLEMENTATION & MONITORING
---------------------------------------------------
5.1  Simulation before go-live  
•  Import mined BPMN model plus resource calendar, activity duration distributions, and skill constraints into a simulation engine (e.g., BIMP, AnyLogic, Celonis EMS SIM).  
•  Implement current vs. proposed assignment logics as resource allocation rules.  
•  Run 1000-run Monte-Carlo scenario using last year’s ticket arrival pattern.  
•  Compare KPIs: mean cycle-time, P1-P4 SLA %, agent utilisation, escalation count. Select parameter settings (e.g., FCR threshold 70 % vs. 80 %) that give best trade-off.

5.2  Implementation roadmap  
1. Cleanse & enrich skill matrix; integrate with ITSM tool.  
2. Deploy routing micro-service (API from ITSM) implementing chosen strategy.  
3. Pilot on two categories (“Software-App”, “Network”) for 4 weeks.  
4. Collect feedback, fine-tune, then roll out globally.

5.3  Continuous monitoring with process-mining dashboards  
Key KPIs (resource perspective):  
•  SLA compliance by Priority & Tier (daily, weekly).  
•  FCR rate L1.  
•  Avg. queue length / wait time per Required_Skill.  
•  Agent utilisation heat map (paid hours vs. ticket work).  
•  Escalation & reassignment count per 100 tickets.  
•  Skill-match ratio (touches with correct skill).  
Process views:  
•  Variant frequency trend.  
•  Handover-of-work network with edge-thickness = latest month only (to see if ping-pong subsides).  
•  Conformance violations related to resource rules (e.g., ticket bypassed skill-router).  
Alerting: trigger when SLA breach forecast for any priority exceeds threshold or when utilisation of any agent >120 % for >2 h.

========================================================
Using this structured, evidence-based approach, TechSolve can move from intuition-driven staffing to a transparent, skill-optimised, and dynamically balanced service-desk operation, delivering measurable improvements in customer satisfaction and operational efficiency.