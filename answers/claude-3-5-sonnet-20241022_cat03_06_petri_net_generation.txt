Here's the Python code to construct the accepting Petri net for the insurance claim management process:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet("Insurance_Claim_Process")

# Create places
places = {}
place_names = [
    "start", "p_cr", "p_dv", "p_fc", "p_ca", 
    "p_ap", "p_p", "p_n", "end",
    "p_rds",  # place for re-document submission
    "p_ii"    # place for in-depth investigation
]

for place_name in place_names:
    places[place_name] = PetriNet.Place(name=place_name)
    net.places.add(places[place_name])

# Create transitions
transitions = {}
transition_labels = {
    "c": "Insurance Claim",
    "cr": "Claim Registration",
    "dv": "Document Verification",
    "fc": "Fraud Check",
    "ca": "Claim Assessment",
    "ap": "Approval",
    "p": "Payment",
    "n": "Notification",
    "cl": "Closure",
    "rds": "Re-Document Submission",
    "ii": "In-depth Investigation"
}

for t_id, label in transition_labels.items():
    transitions[t_id] = PetriNet.Transition(name=t_id, label=label)
    net.transitions.add(transitions[t_id])

# Create arcs for main flow
petri_utils.add_arc_from_to(places["start"], transitions["c"], net)
petri_utils.add_arc_from_to(transitions["c"], places["p_cr"], net)
petri_utils.add_arc_from_to(places["p_cr"], transitions["cr"], net)
petri_utils.add_arc_from_to(transitions["cr"], places["p_dv"], net)
petri_utils.add_arc_from_to(places["p_dv"], transitions["dv"], net)
petri_utils.add_arc_from_to(transitions["dv"], places["p_fc"], net)
petri_utils.add_arc_from_to(places["p_fc"], transitions["fc"], net)
petri_utils.add_arc_from_to(transitions["fc"], places["p_ca"], net)
petri_utils.add_arc_from_to(places["p_ca"], transitions["ca"], net)
petri_utils.add_arc_from_to(transitions["ca"], places["p_ap"], net)
petri_utils.add_arc_from_to(places["p_ap"], transitions["ap"], net)
petri_utils.add_arc_from_to(transitions["ap"], places["p_p"], net)
petri_utils.add_arc_from_to(places["p_p"], transitions["p"], net)
petri_utils.add_arc_from_to(transitions["p"], places["p_n"], net)
petri_utils.add_arc_from_to(places["p_n"], transitions["n"], net)
petri_utils.add_arc_from_to(transitions["n"], places["end"], net)
petri_utils.add_arc_from_to(places["end"], transitions["cl"], net)

# Create arcs for document re-submission loop
petri_utils.add_arc_from_to(transitions["dv"], places["p_rds"], net)
petri_utils.add_arc_from_to(places["p_rds"], transitions["rds"], net)
petri_utils.add_arc_from_to(transitions["rds"], places["p_dv"], net)

# Create arcs for in-depth investigation loop
petri_utils.add_arc_from_to(transitions["fc"], places["p_ii"], net)
petri_utils.add_arc_from_to(places["p_ii"], transitions["ii"], net)
petri_utils.add_arc_from_to(transitions["ii"], places["p_fc"], net)

# Define initial and final markings
initial_marking = Marking()
initial_marking[places["start"]] = 1

final_marking = Marking()
final_marking[places["end"]] = 1

# The Petri net is now complete with:
# - Places representing states between activities
# - Transitions representing activities
# - Arcs connecting places and transitions
# - Initial marking with one token in start place
# - Final marking with one token in end place
# - Loops for document re-submission and in-depth investigation
```

This code creates an accepting Petri net that:

1. Models the main flow of the insurance claim process from claim submission to closure
2. Includes loops for:
   - Document re-submission (DV  RDS  DV)
   - In-depth investigation (FC  II  FC)
3. Has proper initial marking (token in start place)
4. Has proper final marking (token in end place)

The Petri net allows for:
- Multiple iterations of document re-submission if needed
- Multiple rounds of in-depth investigation
- Sequential execution of the main claim processing steps
- Proper completion of the process when the claim is closed

Each place represents a state between activities, and each transition represents an activity in the process. The arcs ensure that activities happen in the correct order and that loops are possible where needed.