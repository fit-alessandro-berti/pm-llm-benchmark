```python
declare_model = {
    'existence': {},
    'absence': {},
    'exactly_one': {},
    'init': {},
    'responded_existence': {},
    'coexistence': {},
    'response': {},
    'precedence': {},
    'succession': {},
    'altresponse': {},
    'altprecedence': {},
    'altsuccession': {},
    'chainresponse': {},
    'chainprecedence': {},
    'chainsuccession': {},
    'noncoexistence': {},
    'nonsuccession': {},
    'nonchainsuccession': {}
}

# Define all activities
activities = [
    "Idea Generation", "Design Draft", "Technical Feasibility Check",
    "Cost Evaluation", "Prototype Creation", "Laboratory Testing",
    "User Testing", "Approval Gate", "Marketing Plan", "Final Launch"
]

# Helper function to add rules with default support (1.0) and confidence (1.0)
def add_rule(constraint_type, activity_or_pair):
    if isinstance(activity_or_pair, tuple):
        declare_model[constraint_type][activity_or_pair] = {'support': 1.0, 'confidence': 1.0}
    else:
        declare_model[constraint_type][activity_or_pair] = {'support': 1.0, 'confidence': 1.0}

# 1. Existence: All activities must occur at least once for a complete product launch.
for activity in activities:
    add_rule('existence', activity)

# 2. Exactly One: For a single product launch, each major step should ideally occur exactly once.
for activity in activities:
    add_rule('exactly_one', activity)

# 3. Init: Idea Generation must be the very first activity.
add_rule('init', "Idea Generation")

# 4. Succession: Defines strict sequential dependencies (A must be followed by B, and B must be preceded by A).
add_rule('succession', ("Idea Generation", "Design Draft"))
add_rule('succession', ("Approval Gate", "Marketing Plan"))
add_rule('succession', ("Marketing Plan", "Final Launch"))

# 5. Coexistence: Activities that must both occur if either occurs (often parallel tracks).
#    - TFC and CE: Both technical and cost evaluations are crucial after design.
#    - LT and UT: Both lab and user testing are required for prototyping.
add_rule('coexistence', ("Technical Feasibility Check", "Cost Evaluation"))
add_rule('coexistence', ("Laboratory Testing", "User Testing"))

# 6. Response: If A occurs, B must eventually follow.
add_rule('response', ("Design Draft", "Technical Feasibility Check"))
add_rule('response', ("Design Draft", "Cost Evaluation"))
add_rule('response', ("Technical Feasibility Check", "Prototype Creation"))
add_rule('response', ("Cost Evaluation", "Prototype Creation"))
add_rule('response', ("Prototype Creation", "Laboratory Testing"))
add_rule('response', ("Prototype Creation", "User Testing"))
add_rule('response', ("Laboratory Testing", "Approval Gate"))
add_rule('response', ("User Testing", "Approval Gate"))

# 7. Precedence: If B occurs, A must have occurred before B.
add_rule('precedence', ("Design Draft", "Technical Feasibility Check"))
add_rule('precedence', ("Design Draft", "Cost Evaluation"))
add_rule('precedence', ("Technical Feasibility Check", "Prototype Creation"))
add_rule('precedence', ("Cost Evaluation", "Prototype Creation"))
add_rule('precedence', ("Prototype Creation", "Laboratory Testing"))
add_rule('precedence', ("Prototype Creation", "User Testing"))
add_rule('precedence', ("Laboratory Testing", "Approval Gate"))
add_rule('precedence', ("User Testing", "Approval Gate"))

# 8. Non-Succession: If A occurs, B cannot occur *after* A in the same process instance.
#    - Prevents illogical loops or skipping major phases.
add_rule('nonsuccession', ("Final Launch", "Idea Generation")) # A product launched cannot restart idea generation for *that same product instance*.
add_rule('nonsuccession', ("Design Draft", "Final Launch")) # Cannot skip directly from design to launch.
add_rule('nonsuccession', ("Prototype Creation", "Idea Generation")) # Cannot go back to idea phase from prototype.

# 9. Non-Chain-Succession: A is not directly followed by B.
#    - Ensures intermediate steps are not skipped for direct progression.
add_rule('nonchainsuccession', ("Idea Generation", "Final Launch"))
add_rule('nonchainsuccession', ("Design Draft", "Prototype Creation")) # Requires TFC/CE in between
add_rule('nonchainsuccession', ("Prototype Creation", "Approval Gate")) # Requires LT/UT in between
add_rule('nonchainsuccession', ("Prototype Creation", "Marketing Plan")) # Requires testing/approval
add_rule('nonchainsuccession', ("Approval Gate", "Final Launch")) # Requires Marketing Plan

# Note: 'responded_existence', 'altresponse', 'altprecedence', 'altsuccession',
# 'chainresponse', 'chainprecedence', 'chainsuccession', 'noncoexistence'
# are left empty as their functionalities are covered by the more general or
# specifically chosen constraints for this scenario, or are not directly applicable.
# For example, `succession` implies `responded_existence`, `response`, and `precedence`.
# We use `response` and `precedence` for fan-out/fan-in structures where direct `succession` isn't feasible.

print(declare_model)
```