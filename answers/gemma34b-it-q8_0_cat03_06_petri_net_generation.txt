```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Construct the Petri net
net = PetriNet(name="InsuranceClaimManagement")

# Define places
start = PetriNet.Place(name="Start")
claim_registration = PetriNet.Place(name="ClaimRegistration")
document_verification = PetriNet.Place(name="DocumentVerification")
fraud_check = PetriNet.Place(name="FraudCheck")
claim_assessment = PetriNet.Place(name="ClaimAssessment")
approval = PetriNet.Place(name="Approval")
payment = PetriNet.Place(name="Payment")
notification = PetriNet.Place(name="Notification")
closure = PetriNet.Place(name="Closure")
re_document_submission = PetriNet.Place(name="ReDocumentSubmission")
in_depth_investigation = PetriNet.Place(name="InDepthInvestigation")

# Define transitions
claim_registration_transition = PetriNet.Transition(name="ClaimRegistration", label="Claim Registration")
document_verification_transition = PetriNet.Transition(name="DocumentVerification", label="Document Verification")
fraud_check_transition = PetriNet.Transition(name="FraudCheck", label="Fraud Check")
claim_assessment_transition = PetriNet.Transition(name="ClaimAssessment", label="Claim Assessment")
approval_transition = PetriNet.Transition(name="Approval", label="Approval")
payment_transition = PetriNet.Transition(name="Payment", label="Payment")
notification_transition = PetriNet.Transition(name="Notification", label="Notification")
closure_transition = PetriNet.Transition(name="Closure", label="Closure")
re_document_submission_transition = PetriNet.Transition(name="ReDocumentSubmission", label="Re-Document Submission")
in_depth_investigation_transition = PetriNet.Transition(name="InDepthInvestigation", label="In-Depth Investigation")


# Add places to the net
net.places.add(start)
net.places.add(claim_registration)
net.places.add(document_verification)
net.places.add(fraud_check)
net.places.add(claim_assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(closure)
net.places.add(re_document_submission)
net.places.add(in_depth_investigation)

# Add transitions to the net
net.transitions.add(claim_registration_transition)
net.transitions.add(document_verification_transition)
net.transitions.add(fraud_check_transition)
net.transitions.add(claim_assessment_transition)
net.transitions.add(approval_transition)
net.transitions.add(payment_transition)
net.transitions.add(notification_transition)
net.transitions.add(closure_transition)
net.transitions.add(re_document_submission_transition)
net.transitions.add(in_depth_investigation_transition)

# Add arcs
petri_utils.add_arc_from_to(start, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, document_verification, net)
petri_utils.add_arc_from_to(document_verification, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, document_verification, net)
petri_utils.add_arc_from_to(document_verification, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, approval, net)
petri_utils.add_arc_from_to(approval, payment, net)
petri_utils.add_arc_from_to(payment, notification, net)
petri_utils.add_arc_from_to(notification, closure, net)
petri_utils.add_arc_from_to(closure, start, net)


# Define initial marking
im = Marking()
im[start] = 1

# Define final marking
fm = Marking()
fm[closure] = 1

print(net)
print(im)
print(fm)
```