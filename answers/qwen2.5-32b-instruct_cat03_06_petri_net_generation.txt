To construct the accepting Petri net for the insurance claim management process, we'll follow the given steps and activities. This Petri net will include places, transitions, and arcs to represent the flow of the process with the mentioned loops for document re-submission and in-depth investigation. Here's the Python code to create this Petri net:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a Petri net
net = PetriNet(name="Insurance_Claim_Process")

# Define the places
source = PetriNet.Place(name="source")
claim_registration = PetriNet.Place(name="claim_registration")
doc_verification = PetriNet.Place(name="doc_verification")
fraud_check = PetriNet.Place(name="fraud_check")
claim_assessment = PetriNet.Place(name="claim_assessment")
approval = PetriNet.Place(name="approval")
payment = PetriNet.Place(name="payment")
notification = PetriNet.Place(name="notification")
closure = PetriNet.Place(name="closure")
re_submission = PetriNet.Place(name="re_submission")
in_depth_investigation = PetriNet.Place(name="in_depth_investigation")

# Add places to the net
net.places.add(source)
net.places.add(claim_registration)
net.places.add(doc_verification)
net.places.add(fraud_check)
net.places.add(claim_assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(closure)
net.places.add(re_submission)
net.places.add(in_depth_investigation)

# Define the transitions
claim = PetriNet.Transition(name="claim", label="C")
register_claim = PetriNet.Transition(name="register_claim", label="Claim Registration")
verify_documents = PetriNet.Transition(name="verify_documents", label="Document Verification")
check_fraud = PetriNet.Transition(name="check_fraud", label="Fraud Check")
assess_claim = PetriNet.Transition(name="assess_claim", label="Claim Assessment")
approve_claim = PetriNet.Transition(name="approve_claim", label="Approval")
make_payment = PetriNet.Transition(name="make_payment", label="Payment")
notify_customer = PetriNet.Transition(name="notify_customer", label="Notification")
close_claim = PetriNet.Transition(name="close_claim", label="Closure")
re_submit_docs = PetriNet.Transition(name="re_submit_docs", label="Re-Document Submission")
investigate_fraud = PetriNet.Transition(name="investigate_fraud", label="In-depth Investigation")

# Add transitions to the net
net.transitions.add(claim)
net.transitions.add(register_claim)
net.transitions.add(verify_documents)
net.transitions.add(check_fraud)
net.transitions.add(assess_claim)
net.transitions.add(approve_claim)
net.transitions.add(make_payment)
net.transitions.add(notify_customer)
net.transitions.add(close_claim)
net.transitions.add(re_submit_docs)
net.transitions.add(investigate_fraud)

# Define arcs
petri_utils.add_arc_from_to(source, claim, net)
petri_utils.add_arc_from_to(claim, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, register_claim, net)
petri_utils.add_arc_from_to(register_claim, doc_verification, net)
petri_utils.add_arc_from_to(doc_verification, verify_documents, net)
petri_utils.add_arc_from_to(verify_documents, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, check_fraud, net)
petri_utils.add_arc_from_to(check_fraud, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, assess_claim, net)
petri_utils.add_arc_from_to(assess_claim, approval, net)
petri_utils.add_arc_from_to(approval, approve_claim, net)
petri_utils.add_arc_from_to(approve_claim, payment, net)
petri_utils.add_arc_from_to(payment, make_payment, net)
petri_utils.add_arc_from_to(make_payment, notification, net)
petri_utils.add_arc_from_to(notification, notify_customer, net)
petri_utils.add_arc_from_to(notify_customer, closure, net)
petri_utils.add_arc_from_to(closure, close_claim, net)

# Loops for re-submission of documents and in-depth investigation
petri_utils.add_arc_from_to(doc_verification, re_submission, net)
petri_utils.add_arc_from_to(re_submission, re_submit_docs, net)
petri_utils.add_arc_from_to(re_submit_docs, doc_verification, net)

petri_utils.add_arc_from_to(claim_assessment, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, investigate_fraud, net)
petri_utils.add_arc_from_to(investigate_fraud, fraud_check, net)

# Define initial and final markings
im = Marking()
im[source] = 1

fm = Marking()
fm[closure] = 1

# Print the constructed Petri net (optional)
print(net)
print(f"Initial Marking: {im}")
print(f"Final Marking: {fm}")
```

This code describes the flow of the insurance claim process, including the loops for document re-submission and in-depth investigation. The initial marking starts at the source place, and the final marking indicates the closure of the claim.