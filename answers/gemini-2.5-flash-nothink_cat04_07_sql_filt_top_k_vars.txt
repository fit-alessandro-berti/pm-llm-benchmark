```sql
-- Assuming a CTE or a temporary table for `event_log` for demonstration purposes.
-- In a real scenario, `event_log` would be your actual table.
WITH event_log AS (
    -- Sample Data (replace with your actual table or `READ_CSV`, etc.)
    SELECT * FROM (VALUES
        ('case_A', 'start', '2023-01-01 10:00:00'::TIMESTAMP),
        ('case_A', 'activity_X', '2023-01-01 10:15:00'::TIMESTAMP),
        ('case_A', 'activity_Y', '2023-01-01 10:30:00'::TIMESTAMP),
        ('case_A', 'end', '2023-01-01 10:45:00'::TIMESTAMP),

        ('case_B', 'start', '2023-01-02 11:00:00'::TIMESTAMP),
        ('case_B', 'activity_X', '2023-01-02 11:10:00'::TIMESTAMP),
        ('case_B', 'activity_Y', '2023-01-02 11:20:00'::TIMESTAMP),
        ('case_B', 'end', '2023-01-02 11:30:00'::TIMESTAMP),

        ('case_C', 'start', '2023-01-03 12:00:00'::TIMESTAMP),
        ('case_C', 'activity_P', '2023-01-03 12:15:00'::TIMESTAMP),
        ('case_C', 'activity_Q', '2023-01-03 12:30:00'::TIMESTAMP),
        ('case_C', 'end', '2023-01-03 12:45:00'::TIMESTAMP),

        ('case_D', 'start', '2023-01-04 13:00:00'::TIMESTAMP),
        ('case_D', 'activity_X', '2023-01-04 13:10:00'::TIMESTAMP),
        ('case_D', 'activity_Z', '2023-01-04 13:20:00'::TIMESTAMP),
        ('case_D', 'end', '2023-01-04 13:30:00'::TIMESTAMP),

        ('case_E', 'start', '2023-01-05 14:00:00'::TIMESTAMP),
        ('case_E', 'activity_X', '2023-01-05 14:15:00'::TIMESTAMP),
        ('case_E', 'activity_Y', '2023-01-05 14:30:00'::TIMESTAMP),
        ('case_E', 'end', '2023-01-05 14:45:00'::TIMESTAMP)
    ) AS t(case_id, activity, timestamp)
),
-- 1. Determine the ordered sequence of activities for each case_id
CaseSequences AS (
    SELECT
        case_id,
        LIST(activity ORDER BY timestamp) AS activity_sequence -- DuckDB's LIST aggregate creates an ordered list
    FROM
        event_log
    GROUP BY
        case_id
),
-- 2. Group cases by their complete activity sequence to identify unique process variants
-- 3. Count how many cases correspond to each variant
VariantCounts AS (
    SELECT
        activity_sequence,
        COUNT(case_id) AS variant_frequency,
        -- Assign a rank to each variant based on its frequency (higher frequency gets a lower rank)
        ROW_NUMBER() OVER (ORDER BY COUNT(case_id) DESC) AS variant_rank
    FROM
        CaseSequences
    GROUP BY
        activity_sequence
),
-- Define K (e.g., top 2 variants)
-- You can change the value of K here
TopKVariants AS (
    SELECT
        activity_sequence,
        variant_frequency
    FROM
        VariantCounts
    WHERE
        variant_rank <= 2 -- Set K here (e.g., K=2 for top 2 variants)
)
-- 4. Return all events from the original event log that belong only to cases
--    which are part of these top K variants.
SELECT
    el.case_id,
    el.activity,
    el.timestamp
FROM
    event_log AS el
JOIN
    CaseSequences AS cs ON el.case_id = cs.case_id
JOIN
    TopKVariants AS tkv ON cs.activity_sequence = tkv.activity_sequence
ORDER BY
    el.case_id,
    el.timestamp;
```