Here are two POWL models reflecting the described GlobalTeq Solutions hiring process. 

---

### 1. POWL Model **With Potential Unfairness**

- Loop on data completeness between:  
  - **DataCompletenessCheck** (check if info complete)  
  - **RequestMoreInfo** (ask applicant for info if incomplete)  
- After that, **SkillAssessment** sequentially  
- Then an XOR branch between **CulturalFitCheck** (standard evaluation)  
  and **CommunityAffiliationCheck** (biased evaluation giving advantage)  
- Finally, **ManagerialReview** then **FinalDecision**

This shows the XOR choice introducing potential bias.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Activities
receive_application = Transition(label="ReceiveApplication")
data_completeness_check = Transition(label="DataCompletenessCheck")
request_more_info = Transition(label="RequestMoreInfo")
skill_assessment = Transition(label="SkillAssessment")
cultural_fit_check = Transition(label="CulturalFitCheck")
community_affiliation_check = Transition(label="CommunityAffiliationCheck")
managerial_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# Loop between DataCompletenessCheck and RequestMoreInfo
loop_data_check = OperatorPOWL(operator=Operator.LOOP, children=[data_completeness_check, request_more_info])

# XOR branch after skill assessment: cultural_fit_check or community_affiliation_check
xor_cultural = OperatorPOWL(operator=Operator.XOR, children=[cultural_fit_check, community_affiliation_check])

# Partial order model:
# Sequence is:
# ReceiveApplication -> loop_data_check -> SkillAssessment -> xor_cultural -> ManagerialReview -> FinalDecision

root_with_unfairness = StrictPartialOrder(
    nodes=[receive_application, loop_data_check, skill_assessment, xor_cultural, managerial_review, final_decision]
)

root_with_unfairness.order.add_edge(receive_application, loop_data_check)
root_with_unfairness.order.add_edge(loop_data_check, skill_assessment)
root_with_unfairness.order.add_edge(skill_assessment, xor_cultural)
root_with_unfairness.order.add_edge(xor_cultural, managerial_review)
root_with_unfairness.order.add_edge(managerial_review, final_decision)
```

---

### 2. POWL Model **Without Unfairness**

- Same data completeness loop  
- Followed by **SkillAssessment**  
- Then **all applicants** undergo the **same CulturalFitCheck** (no XOR branching)  
- Then final managerial review and decision  

No special branch for community affiliation or local advantage.

```python
# Reuse the same activity nodes (except no community_affiliation_check)

root_without_unfairness = StrictPartialOrder(
    nodes=[receive_application, loop_data_check, skill_assessment, cultural_fit_check, managerial_review, final_decision]
)

root_without_unfairness.order.add_edge(receive_application, loop_data_check)
root_without_unfairness.order.add_edge(loop_data_check, skill_assessment)
root_without_unfairness.order.add_edge(skill_assessment, cultural_fit_check)
root_without_unfairness.order.add_edge(cultural_fit_check, managerial_review)
root_without_unfairness.order.add_edge(managerial_review, final_decision)
```

---

**Summary:**

- The first model explicitly models the XOR choice where community affiliation causes unfair advantage (`xor_cultural` node with two branches).  
- The second model removes this branch and processes all applicants identically in cultural fit.

These reflect the textual description closely and highlight where bias is introduced and how it can be removed.