Below are two POWL models built with pm4py. The first model (“BiasedWorkflow”) contains an XORbranch that gives a hidden advantage to locallyaffiliated applicants. The second model (“FairWorkflow”) removes that branch so everyone goes through the exact same culturalfit check.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# 1. POWL Model with Potential Unfairness
# ------------------------------------------------
# Activities/transitions
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo      = Transition(label="RequestMoreInfo")
SkillAssessment      = Transition(label="SkillAssessment")
CulturalFitCheck     = Transition(label="CulturalFitCheck")
CommunityAffCheck    = Transition(label="CommunityAffiliationCheck")
ManagerialReview     = Transition(label="ManagerialReview")
FinalDecision        = Transition(label="FinalDecision")

# Loop: ensure data completeness by repeating DataCompletenessCheck <-> RequestMoreInfo
loop_completeness = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

# XOR between the standard culturalfit path and the communityaffiliation path
xor_biased = OperatorPOWL(
    operator=Operator.XOR,
    children=[CulturalFitCheck, CommunityAffCheck]
)

# Assemble the partial order
BiasedWorkflow = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        loop_completeness,
        SkillAssessment,
        xor_biased,
        ManagerialReview,
        FinalDecision
    ]
)
# Define the controlflow edges
BiasedWorkflow.order.add_edge(ReceiveApplication,    loop_completeness)
BiasedWorkflow.order.add_edge(loop_completeness,     SkillAssessment)
BiasedWorkflow.order.add_edge(SkillAssessment,       xor_biased)
BiasedWorkflow.order.add_edge(xor_biased,            ManagerialReview)
BiasedWorkflow.order.add_edge(ManagerialReview,      FinalDecision)


# 2. POWL Model Without Unfairness
# ------------------------------------------------
# Same initial steps, but only one culturalfit check, no XOR

# Reuse:
# ReceiveApplication, DataCompletenessCheck, RequestMoreInfo, SkillAssessment,
# CulturalFitCheck, ManagerialReview, FinalDecision

loop_completeness_fair = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

# No XOR here, everyone takes CulturalFitCheck
FairWorkflow = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        loop_completeness_fair,
        SkillAssessment,
        CulturalFitCheck,
        ManagerialReview,
        FinalDecision
    ]
)
FairWorkflow.order.add_edge(ReceiveApplication,    loop_completeness_fair)
FairWorkflow.order.add_edge(loop_completeness_fair, SkillAssessment)
FairWorkflow.order.add_edge(SkillAssessment,        CulturalFitCheck)
FairWorkflow.order.add_edge(CulturalFitCheck,       ManagerialReview)
FairWorkflow.order.add_edge(ManagerialReview,       FinalDecision)
```

Explanation of the two models:

1. **BiasedWorkflow**  
   - Loop between “DataCompletenessCheck” and “RequestMoreInfo” until all fields are filled.  
   - “SkillAssessment” always follows.  
   - An XOR choice then routes the candidate either to a pure “CulturalFitCheck” or into a “CommunityAffiliationCheck” branch that subtly boosts local/clubaffiliated applicants.  
   - Finally, “ManagerialReview” and “FinalDecision.”

2. **FairWorkflow**  
   - Identical up through the skill test, but there is no XOR branch.  
   - All applicants go through the exact same “CulturalFitCheck.”  
   - Then “ManagerialReview” and “FinalDecision.”