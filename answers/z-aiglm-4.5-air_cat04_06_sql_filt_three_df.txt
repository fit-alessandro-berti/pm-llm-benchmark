To solve this problem, we need to identify cases in an event log that contain a specific sequence of three activities in direct succession, with an additional time-based condition. The goal is to exclude all events from these qualifying cases and return the remaining events from the log.

### Approach
1. **Identify Cases with the Specific Sequence**: 
   - Use window functions to compare each event with the next two consecutive events in the same case, ordered by timestamp. This helps in finding cases where the sequence 'Approve Purchase Requisition'  'Create Order'  'Confirm Order' occurs consecutively.

2. **Check Time Condition**:
   - For cases that meet the sequence condition, verify if the time difference between 'Create Order' and 'Confirm Order' exceeds 5 days. This is done by comparing the timestamps of the second and third events in the sequence.

3. **Exclude Qualifying Cases**:
   - Collect all case IDs that satisfy both the sequence and time conditions. Then, filter out all events from these cases in the final result.

### Solution Code
```sql
WITH consecutive_events AS (
    SELECT 
        case_id,
        activity,
        timestamp,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_timestamp
    FROM event_log
),
excluded_cases AS (
    SELECT DISTINCT case_id
    FROM consecutive_events
    WHERE activity = 'Approve Purchase Requisition'
      AND next_activity = 'Create Order'
      AND next_next_activity = 'Confirm Order'
      AND (next_next_timestamp - next_timestamp) > INTERVAL '5 days'
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM excluded_cases);
```

### Explanation
1. **consecutive_events CTE**:
   - This CTE uses `LEAD` window functions to retrieve the next one and two activities along with their timestamps for each event within each case, ordered by timestamp. This helps in identifying consecutive sequences of three events.

2. **excluded_cases CTE**:
   - Filters the `consecutive_events` to find cases where the sequence 'Approve Purchase Requisition'  'Create Order'  'Confirm Order' occurs consecutively. It further checks if the time between 'Create Order' and 'Confirm Order' is more than 5 days. The `DISTINCT` keyword ensures each qualifying case is listed only once.

3. **Final Query**:
   - Selects all events from `event_log` except those whose `case_id` appears in `excluded_cases`. This effectively excludes all events from cases that meet both the sequence and time conditions.

This approach efficiently identifies and excludes the target cases, ensuring the result contains only events from cases that do not meet the specified criteria. The use of window functions ensures optimal performance by leveraging DuckDB's capabilities for processing ordered data within partitions.