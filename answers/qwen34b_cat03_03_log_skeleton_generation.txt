<think>
Okay, let's try to tackle this problem. So, the task is to create a Python dictionary that represents the Log Skeleton for the order fulfillment process described. The Log Skeleton has several constraints, and I need to make sure all of them are properly applied based on the scenario.

First, I need to understand each of the constraints and how they apply to the activities. Let me go through each constraint one by one and think about how they relate to the activities.

Starting with the Equivalence constraint. The prompt says that if the first activity occurs, then it has the same occurrences as the second one. So, for example, if RO is equivalent to CA, then whenever RO is executed, CA must occur the same number of times. But wait, in the scenario, RO is the first activity. But how does that work? Maybe there's a pair of activities that must have the same occurrence count. For example, maybe RO and CA are always together in some way. But maybe there's a specific pair here. Wait, the scenario doesn'restate any equivalence, so I need to think about which activities are equivalent. Maybe RO is the first activity, so maybe it's equivalent to another activity. But I'm not sure. Maybe the equivalence is between some activities. For example, maybe the "Receive Order" and "Invoice Customer" are not equivalent. Hmm, but the problem says to construct the Log Skeleton based on the scenario, so I need to figure out which constraints are applicable here.

Wait, the scenario is a process where orders go through a series of steps. So maybe some activities must occur in a certain order, or have certain constraints. Let me think about the process flow.

Let me list the activities again:

RO (Receive Order)
CA (Check Availability)
RI (Reserve Items)
PI (Pick Items)
QC (Quality Check)
PO (Pack Order)
GSL (Generate Shipping Label)
D (Dispatch)
IC (Invoice Customer)
RP (Record Payment)

Now, the process is that when an order arrives, it goes through these steps. So, RO is the first step, then CA, then RI, then PI, then QC, then PO, then GSL, then D, then IC, then RP. But maybe some of these steps can be optional or have constraints.

For example, the "Check Availability" (CA) must happen before "Reserve Items" (RI), because you can't reserve items unless you check availability. So that's an "Always Before" constraint: CA must be before RI.

Similarly, RI must be before PI, because you can't pick items unless they are reserved. So that's another Always Before: RI before PI.

Then, PI must be before QC, since you check the quality of the picked items. So PI before QC.

QC before PO, because you need to check quality before packing. Then PO before GSL, since you generate a label after packing. Then GSL before D, as you dispatch after the label is generated. Then D is before IC and RP? Or maybe IC and RP are separate steps. But maybe after the order is dispatched, you invoice the customer and record the payment. So maybe IC and RP are after D. But maybe they are separate. Also, maybe IC and RP are done in sequence. But perhaps they are not directly related. However, maybe after the order is processed, you need to invoice and record payment. So maybe IC is after D, and RP is after IC? Or maybe they are done in parallel. But since the problem is about the Log Skeleton, which is a process model, perhaps these are sequential steps.

But the problem is that the user hasn't given any specific constraints, so I need to infer based on the scenario. So I need to think about the logical flow of the process and apply the constraints accordingly.

Let me think about the constraints again:

Equivalence: if activity A occurs, then the same number of times as activity B. So for example, if RO is equivalent to CA, then whenever RO occurs, CA must occur the same number of times. But that's not clear. Alternatively, maybe some pairs of activities must have the same occurrence count. For example, maybe the "Invoice Customer" and "Record Payment" are done in the same case, but that's not clear. Alternatively, perhaps RO is equivalent to something else. But maybe there's no equivalence in this scenario. Wait, the problem says that the Log Skeleton is constructed based on the scenario. But the scenario is a process, so maybe the constraints are inferred from the process.

Alternatively, maybe the equivalence is between activities that are part of the same process. For example, maybe the "Record Payment" is equivalent to "Invoice Customer" in some way. But that's not clear. Alternatively, maybe the "Receive Order" and "Invoice Customer" are not equivalent. I'm not sure. Maybe the equivalence constraint is not applicable here, but perhaps there's a pair that must be equivalent. For example, maybe "Check Availability" and "Reserve Items" are not equivalent, but maybe "Receive Order" and "Invoice Customer" are not. Alternatively, perhaps the equivalence is between activities that are part of the same sequence. But I'm not sure. Maybe the equivalence is between activities that are in a certain relationship. For example, maybe "Receive Order" is equivalent to "Record Payment" in some way, but that's not logical. So perhaps I need to think about the constraints again.

Alternatively, maybe the "Always Before" constraints are the most straightforward. Let's try to think of the order. RO is first. Then CA. Then RI. Then PI. Then QC. Then PO. Then GSL. Then D. Then IC and RP. But maybe IC and RP are done in sequence. So, for example, IC must be before RP, but that's not clear. But maybe the process is that after the order is dispatched, the customer is invoiced and then the payment is recorded. So IC is before RP.

But maybe there's a possibility that some activities can be optional. For example, maybe the Quality Check is not always done, but that's not stated. Alternatively, maybe the Quality Check is mandatory. So the constraints would be that CA is always before RI, RI before PI, PI before QC, QC before PO, PO before GSL, GSL before D, D before IC and RP. But maybe IC and RP are done in sequence. So D is before IC, and IC is before RP.

Now, for the "Always After" constraint: if the first activity occurs, the second must be executed in one of the following events. So that's a bit different. For example, if RO occurs, then CA must be executed in one of the following events. But that's not possible, because RO is the first activity. So maybe that's a different constraint. Wait, the "Always After" constraint is that if the first activity occurs, then the second activity is executed in one of the following events. So that would mean that the second activity must happen after the first activity. But that's similar to the "Always Before" constraint. Wait, no. "Always Before" is that if the first occurs, the second must have been executed previously. So if A is always before B, then B must occur after A. But "Always After" is that if A occurs, then B must be executed in one of the following events. So that would mean that B must occur after A. Wait, maybe that's a different way of phrasing. Maybe "Always After" is that if A occurs, then B must be executed in the next event, but that's not clear. Alternatively, maybe "Always After" is that B must occur after A, but not necessarily immediately. So maybe "Always After" is similar to "Always Before", but in reverse. For example, if A is always before B, then B must be after A. If A is always after B, then B must be before A. But perhaps that's not the case. Let me check the definitions again.

The problem says:

- Always Before: If the first activity occurs, then the second activity should have been executed previously. So, if A is always before B, then B must occur after A.

- Always After: If the first activity occurs, then the second activity is executed in one of the following events. So, if A is always after B, then B must occur before A. Wait, maybe that's the same as the Always Before, but reversed. For example, if A is always after B, then B must occur before A.

But perhaps the wording is confusing. Alternatively, maybe "Always After" is that if A occurs, then B must occur in the next event. But that's not clear. Alternatively, "Always After" could mean that B must occur after A. But that's the same as the Always Before.

Wait, perhaps the "Always After" constraint is that if A occurs, then B must be executed in one of the following events. So, for example, if A occurs, then B must occur in the next event. That would be a directly-follows constraint. But that's not the case. Because directly-follows is that if A occurs, then B must occur immediately after. So, "Always After" is different. Maybe it's that if A occurs, then B must occur after A. So, that's equivalent to the "Always Before" constraint. But that's not possible. Maybe the problem is that the "Always After" is that the second activity must occur after the first activity. So, for example, if A is always after B, then B must occur before A. So, that's the same as the "Always Before" constraint. Wait, but the problem says that the "Always Before" is that if the first activity occurs, then the second must have been executed previously. So, if A is always before B, then B must be after A. So, "Always After" would be that if A occurs, then B must be executed in one of the following events. So, that would be that B must occur after A. So, that's the same as "Always Before" but with the order reversed. So, maybe the "Always After" is redundant. But perhaps the problem is that the "Always After" is that the second activity must be executed after the first. So, for example, if A is always after B, then B must be before A. So, that's equivalent to B always before A. But that's not the case. So, perhaps the "Always After" is a different constraint, but maybe in this case, the problem is that the "Always After" is not used in the scenario. So maybe I need to think of which activities must be in a certain order.

Alternatively, maybe the "Always After" is that if the first activity occurs, then the second activity must be executed in the next event. For example, if A occurs, then B must occur immediately after. But that's the same as the directly-follows constraint. So, maybe there's confusion here. Let me check the problem again.

The problem says:

- **Always Before:** If the first activity occurs, then the second activity should have been executed previously. So, A always before B: B must be before A. Wait, no. If A occurs, then B must have been executed previously. So that would mean that B must occur before A. Wait, no. Let me think. If A occurs, then B must have been executed previously. So, if A occurs, then B has already been executed. So, A must occur after B. So, B is always before A. So for example, if A is always before B, then B must be executed before A. Wait, no. Wait, the wording is: If the first activity occurs, then the second activity should have been executed previously. So, if the first activity is A, and the second is B, then whenever A occurs, B must have been executed before. So, A occurs after B. So, B is always before A. Therefore, the "Always Before" constraint is that B must be before A. So, for example, if A is always before B, then B must be executed before A. Wait, that's not correct. Let me rephrase the constraint:

If the first activity occurs (A), then the second activity (B) should have been executed previously. So, whenever A occurs, B must have already occurred. Therefore, B must occur before A. So, the constraint is that B must be executed before A. Therefore, the "Always Before" constraint is that B is always before A. So, for example, if A is always before B, then B must be executed before A. Wait, that's not possible. Because if A is always before B, then A must be executed before B. But according to the wording, if A occurs, then B must have been executed previously. So that would mean that B has to be executed before A. Which would imply that A is after B. So, the constraint is that B must be executed before A. Therefore, the "Always Before" constraint is that the second activity (B) must be executed before the first activity (A). Wait, but the wording says "if the first activity occurs, then the second activity should have been executed previously." So the first activity is A, and the second is B. Therefore, when A occurs, B must have already occurred. Therefore, B must be executed before A. Therefore, the constraint is that B is always before A. Therefore, the "Always Before" is that B is executed before A. So for example, if there's an "Always Before" between A and B, then B must be executed before A. Therefore, the constraint is that B is always before A.

But that's a bit counterintuitive. So, for example, if we have an "Always Before" constraint between CA and RI, then that would mean that CA must be executed before RI. Which is correct, because you check availability before reserving items.

So, in this case, the "Always Before" constraints would be between CA and RI, RI and PI, PI and QC, QC and PO, PO and GSL, GSL and D, D and IC, IC and RP. But that's a lot of constraints, but maybe that's correct.

Now, the "Always After" constraint is: if the first activity occurs, then the second activity is executed in one of the following events. Wait, that's a bit ambiguous. Maybe it's that if the first activity occurs, then the second activity must occur after it. But that would be the same as the Always Before constraint. Alternatively, perhaps it's that if the first activity occurs, then the second activity must occur in the next event. But that's a directly-follows constraint. So perhaps "Always After" is not needed here, but maybe there are some constraints that require that.

Alternatively, maybe "Always After" is that if the first activity occurs, then the second must occur after it, but not necessarily immediately. So, that's the same as the Always Before constraint, but in reverse. Wait, no. If the Always After constraint is between A and B, then if A occurs, then B must be executed in one of the following events. So, that would mean that B must occur after A. So, the Always After constraint is that B is after A. Which is the same as the Always Before constraint between B and A. So, maybe the "Always After" is redundant. So perhaps the problem is that the user has a typo, but I need to proceed.

Alternatively, maybe the "Always After" is that if A occurs, then B must occur in the next event. But that's the directly-follows constraint. So perhaps the "Always After" is not used here. So maybe in the scenario, there are no "Always After" constraints.

Now, the "Never Together" constraint is that the two activities cannot co-exist inside the same case. So, that means that they cannot be executed in the same case. So, for example, if two activities are never together, then they cannot be in the same case. But in the scenario, is there any such constraint? For example, maybe some activities are not allowed to be in the same case. For example, maybe "Invoice Customer" and "Record Payment" are not allowed to be in the same case. But that's not clear. Alternatively, maybe there's a constraint that "Receive Order" and "Record Payment" cannot be in the same case. But that's not logical. So perhaps the "Never Together" is not applicable here, but maybe in the scenario, there is a pair that cannot be in the same case. For example, maybe "Quality Check" and "Pack Order" can't be in the same case. But that's not logical. Alternatively, maybe the "Never Together" is not used in this scenario. So perhaps there are no "Never Together" constraints here.

The "Activity Occurrences" is the number of times each activity can occur in a case. For example, maybe some activities can be executed 0 or 1 times, others 1 or 2 times. But in the scenario, maybe some activities are required to be executed once. For example, RO is the first activity, so it must occur once. But perhaps some activities are optional. For example, maybe the Quality Check is optional. So, maybe the "Activ_freq" is something like RO: {1}, CA: {1}, etc. But the problem says that the example is {'A': {0,1}, 'B': {1,2}}. So, for example, A can occur 0 or 1 times, B 1 or 2.

But in the scenario, the process is a series of steps. So maybe each activity must occur exactly once. So, the Activ_freq would have each activity with {1} as the allowed occurrence. But maybe some activities are optional. For example, maybe after the order is processed, there's an option to not invoice the customer, but that's not logical. Alternatively, maybe some steps are not required. For example, maybe the "Record Payment" is not required. But that's not clear. So perhaps the Activ_freq is that each activity occurs exactly once. However, the problem says that the example has activities with 0 or 1, etc. So maybe in this scenario, some activities can be optional.

Wait, but in the scenario, the process is a series of steps. So, for example, the "Receive Order" is the first step, so it must happen once. Similarly, "Check Availability" is required, so it must be executed once. But maybe some steps are not required. For example, maybe the Quality Check is not always done, but that's not logical. So maybe the Activ_freq for each activity is {1}.

But the problem says that the example has some activities with 0 or 1. So maybe in this scenario, some activities can be optional. For example, maybe "Invoice Customer" is not always done. But that's not logical. Alternatively, maybe the "Record Payment" is optional. But again, that's not logical. Alternatively, perhaps the "Quality Check" is optional. But that's not the case. So perhaps the Activ_freq is that each activity is executed exactly once.

But maybe there's a scenario where some activities can be executed multiple times. For example, if there are multiple orders, but the problem says that each case is a single order. So perhaps each case (order) has each activity once. Therefore, the Activ_freq for each activity is {1}.

But the problem says that the example has some activities with 0 or 1. So maybe in this scenario, some activities are optional. For example, perhaps "Quality Check" is optional, so it can be 0 or 1 times. But that's not logical. Alternatively, maybe the "Record Payment" is optional. But that's not logical. So maybe the Activ_freq is not needed, but the problem requires that we include it. So perhaps the answer includes each activity with {1} as the allowed occurrence counts.

But I need to think about this again. The problem says that the Log Skeleton is a Python dictionary with keys: equivalence, always_before, always_after, never_together, activ_freq, directly_follows.

So I need to fill in these keys with the appropriate constraints.

Now, the directly-follows constraints are that if the first activity occurs, the second must occur immediately after. For example, if RO directly follows CA, then CA must be immediately followed by RO. But that's not logical. Wait, the directly-follows constraint is that if the first activity occurs, then the second activity shall occur immediately after. So, for example, if CA directly follows RO, then whenever RO occurs, CA must occur immediately after. But that's not logical, since RO is the first activity. So perhaps the directly-follows constraints are between the activities that are in sequence. For example, after RO comes CA, so RO directly follows CA? No, that's not correct. Wait, if the first activity is RO, and the second is CA, then the directly-follows constraint would be that if RO occurs, then CA must occur immediately after. But that's not correct, because RO is the first activity, and CA is the next. So in the process, after RO, CA is executed. So the directly-follows constraint would be that RO directly follows CA? No, that's not right. Wait, the directly-follows constraint is that if the first activity occurs, then the second activity must occur immediately after. So, for example, if CA is directly followed by RI, then whenever CA occurs, RI must occur immediately after. But that's correct. So in the scenario, the order is RO -> CA -> RI -> PI -> QC -> PO -> GSL -> D -> IC -> RP. So, each activity is followed by the next one. Therefore, the directly-follows constraints would be between each pair of consecutive activities. So, for example, RO directly follows nothing, but CA directly follows RO, RI directly follows CA, and so on. Therefore, the directly-follows constraints would be:

RO directly follows nothing? No, because the directly-follows is that if the first activity occurs, then the second must occur immediately after. So, for example, if RO occurs, then CA must occur immediately after. So the directly-follows constraint is RO -> CA. Similarly, CA -> RI, RI -> PI, etc. So the directly_follows would be a set of tuples where the first is the activity that must be immediately followed by the second. So, the directly_follows would have entries like (RO, CA), (CA, RI), (RI, PI), etc.

But wait, the directly-follows constraint is that if the first activity occurs, then the second activity must occur immediately after. So, for example, if RO occurs, then CA must occur immediately after RO. Therefore, the directly-follows would be RO: CA, CA: RI, etc.

So the directly_follows would be a set of tuples (A, B) where A is directly followed by B.

Now, the "Always Before" constraints are that if A occurs, then B has been executed previously. So, for example, CA must be before RI. So, the Always Before constraint is that CA is always before RI. So the pair (CA, RI) is in the always_before set.

Similarly, RI is always before PI, and so on.

Now, the "Never Together" constraint is that two activities cannot be in the same case. So, for example, if two activities are in a case, they can't be in the same case. But in this scenario, all activities are in the same case (each case is an order). So, perhaps there are no "Never Together" constraints.

Now, the "Activ_freq" is the allowed occurrence counts. For example, maybe each activity must occur exactly once, so the activ_freq is {'RO': {1}, 'CA': {1}, ..., 'RP': {1}}. But perhaps some activities can be optional. For example, maybe "Quality Check" is optional. But that's not logical. So, maybe the activ_freq is that each activity is executed exactly once.

But the problem says that the example has some activities with 0 or 1. So maybe in this scenario, some activities can be optional. For example, maybe the "Record Payment" is not always done. But that's not logical. Alternatively, maybe the "Invoice Customer" is optional. But that's not logical either. So, perhaps the activ_freq is that each activity occurs exactly once.

But the problem says that the example has some activities with 0 or 1. So maybe in this scenario, some activities are optional. For example, maybe the "Quality Check" is optional. But I'm not sure. Since the scenario is about a process, perhaps each activity is required to be executed exactly once. Therefore, the activ_freq is {1} for each activity.

But maybe the problem allows for some activities to be optional. For example, maybe after the order is dispatched, the customer might not be invoiced. But that's not logical. So perhaps the activ_freq is that all activities are executed once.

Now, the "Equivalence" constraint is that if the first activity occurs, then it has the same occurrences as the second. So, for example, if RO is equivalent to CA, then whenever RO occurs, CA occurs the same number of times. But since RO is the first activity, and CA is the second, that's not logical. So maybe there are no equivalence constraints here. But the problem says that the Log Skeleton has these constraints. So maybe there's an equivalence between two activities. For example, maybe "Receive Order" and "Invoice Customer" are equivalent, but that's not clear. Alternatively, maybe there's an equivalence between "Check Availability" and "Reserve Items", but that's not logical. So, perhaps there are no equivalence constraints in this scenario.

But the problem requires that the Log Skeleton has all these constraints. So I need to include them. So maybe there are no equivalence constraints. So the 'equivalence' key would have an empty set.

Putting it all together:

The Log Skeleton will have the following keys:

- equivalence: set of pairs (A, B) where A and B have same occurrences.

- always_before: set of pairs (A, B) where A must be before B.

- always_after: set of pairs (A, B) where if A occurs, then B is executed in one of the following events. But I'm not sure how to interpret this. Maybe it's that if A occurs, then B must occur after A. So, that's the same as the Always Before constraint. So perhaps the always_after is not used here. Or maybe it's that B must occur after A. So, if A is always after B, then B is before A. So, the always_after would be pairs (B, A) where B is before A. But maybe the problem has some constraints here. For example, maybe the "Generate Shipping Label" is always after "Pack Order", which is already covered by the Always Before constraint. So maybe the 'always_after' is empty in this case.

But the problem says that the Log Skeleton must include all these constraints. So perhaps the 'always_after' is not used here, so it's an empty set.

Now, the 'never_together' is a set of pairs (A, B) that cannot be in the same case. So, for example, if two activities are never together, they can't be in the same case. But in the scenario, all activities are in the same case, so maybe there are no such pairs.

Now, the 'activ_freq' is a dictionary where each activity is mapped to a set of allowed occurrence counts. For example, each activity occurs exactly once. So, {'RO': {1}, 'CA': {1}, 'RI': {1}, ..., 'RP': {1}}.

But the problem says that in the example, some activities have 0 or 1. So maybe in this scenario, some activities can be optional. But I'm not sure. For example, maybe the "Quality Check" is optional. But that's not logical. So perhaps the activ_freq is that each activity is executed exactly once.

Now, the 'directly_follows' is a set of pairs (A, B) where if A occurs, then B must occur immediately after. So, in the scenario, the activities are in sequence, so the directly_follows would be:

(RO, CA), (CA, RI), (RI, PI), (PI, QC), (QC, PO), (PO, GSL), (GSL, D), (D, IC), (IC, RP).

So these are the pairs where each activity is directly followed by the next one.

So putting it all together, the Log Skeleton would be:

{
    'equivalence': set(),
    'always_before': { (CA, RI), (RI, PI), (PI, QC), (QC, PO), (PO, GSL), (GSL, D), (D, IC), (IC, RP) },
    'always_after': set(),  # or maybe some pairs here?
    'never_together': set(),
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {1}
    },
    'directly_follows': {
        (RO, CA), (CA, RI), (RI, PI), (PI, QC), (QC, PO), (PO, GSL), (GSL, D), (D, IC), (IC, RP)
    }
}

But I need to check if the 'always_after' is needed. For example, maybe there are some constraints where if an activity occurs, then another must occur in the next event. But in the scenario, the directly_follows is already covered. So maybe the 'always_after' is not used here, so it's an empty set.

But wait, the 'always_after' is a constraint that if the first activity occurs, then the second activity is executed in one of the following events. So, for example, if A occurs, then B must be executed in one of the following events. But that's not clear. So perhaps it's that B must occur after A. But that's the same as the Always Before constraint. Therefore, perhaps the 'always_after' is redundant here, so it's empty.

But the problem says that the Log Skeleton must include these constraints. So, perhaps the 'always_after' is not used here, so it's an empty set.

So the final answer would be the Python dictionary as described above.

But I need to make sure that all the constraints are correctly applied.

Another thing to check is the 'never_together' constraint. For example, are there any pairs of activities that cannot be in the same case? For example, maybe after the order is dispatched, you can't have the invoice customer and record payment. But that's not logical. So perhaps there are no such pairs.

Therefore, the 'never_together' is an empty set.

Now, for the 'equivalence' constraint, perhaps there are no pairs, so it's an empty set.

But what if there's an equivalence between two activities? For example, maybe the 'Receive Order' and 'Invoice Customer' are equivalent. But that's not logical. So, perhaps there are no equivalence constraints.

Therefore, the final dictionary would have the keys as described above.

But I need to check if the 'always_before' is correctly represented. For example, the 'always_before' is a set of pairs where the first activity must be executed before the second. So, in the scenario, the order is RO -> CA -> RI -> PI -> QC -> PO -> GSL -> D -> IC -> RP. So, the Always Before constraints are:

CA must be before RI.

RI before PI.

PI before QC.

QC before PO.

PO before GSL.

GSL before D.

D before IC.

IC before RP.

So, these are the pairs (CA, RI), (RI, PI), (PI, QC), (QC, PO), (PO, GSL), (GSL, D), (D, IC), (IC, RP).

Therefore, the 'always_before' is a set containing these pairs.

Now, the 'directly_follows' is the set of pairs where the first activity is immediately followed by the second. So, for example, RO is followed by CA, so (RO, CA) is in the directly_follows. Similarly for the rest.

So, the directly_follows would be the same as the list of consecutive pairs in the process flow.

Now, the 'activ_freq' is each activity occurs once. So, each activity has {1} as the allowed occurrences.

Thus, the Log Skeleton is as described.
</think>

```python
{
    'equivalence': set(),
    'always_before': {
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    },
    'always_after': set(),
    'never_together': set(),
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {1}
    },
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    }
}
```