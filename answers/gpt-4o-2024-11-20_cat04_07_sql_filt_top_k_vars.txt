Below is the DuckDB SQL query to meet your requirements:

```sql
WITH
-- Step 1: Create the ordered sequence of activities for each case
ordered_sequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, '->') WITHIN GROUP (ORDER BY timestamp) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
),

-- Step 2: Count the number of cases for each unique activity sequence (process variant)
variants_with_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM
        ordered_sequences
    GROUP BY
        activity_sequence
    ORDER BY
        case_count DESC
),

-- Step 3: Identify the top K variants by frequency
top_k_variants AS (
    SELECT
        activity_sequence
    FROM
        variants_with_counts
    LIMIT K
),

-- Step 4: Filter cases that match the top K variants
cases_in_top_k AS (
    SELECT
        o.case_id
    FROM
        ordered_sequences o
    JOIN
        top_k_variants tk
    ON
        o.activity_sequence = tk.activity_sequence
),

-- Step 5: Retrieve all events for cases belonging to the top K variants
filtered_events AS (
    SELECT
        e.*
    FROM
        event_log e
    JOIN
        cases_in_top_k c
    ON
        e.case_id = c.case_id
)

-- Final result: Return events for cases matched with top K variants
SELECT *
FROM filtered_events;
```

### Explanation of the Query:

1. **Step 1: `ordered_sequences` CTE**
   - For each `case_id`, the activities are concatenated into a single string (`activity_sequence`) using `STRING_AGG` while ensuring the activities are ordered by their `timestamp`.

2. **Step 2: `variants_with_counts` CTE**
   - Counts the frequency of each unique `activity_sequence` (i.e., how many cases follow the same process variant) and orders the sequences by their frequency in descending order.

3. **Step 3: `top_k_variants` CTE**
   - Filters the top K process variants by selecting the top K rows from `variants_with_counts`.

4. **Step 4: `cases_in_top_k` CTE**
   - Identifies the `case_id`s that belong to one of the top K process variants by joining `ordered_sequences` with `top_k_variants` on the `activity_sequence`.

5. **Step 5: `filtered_events` CTE**
   - Filters the original `event_log` table to keep only the events for the `case_id`s identified in the previous step.

### Note:
- Replace `K` with the desired number of top variants you want to consider.
- The resulting table will include all columns from the original `event_log`, but only for cases matching the top K variants.

Let me know if you have any additional requirements or refinements!