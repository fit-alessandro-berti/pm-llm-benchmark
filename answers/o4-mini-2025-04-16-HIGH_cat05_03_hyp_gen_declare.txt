Anomalies in the DECLARE model

1. Non-coexistence(E, C) vs. Existence(C)  
   • “C” must occur in every trace, but “E” and “C” cannot coexist.  
    This effectively forbids any evaluation (“E”) once closure (“C”) is required.

2. Mis-specified Responded_Existence(E, A)  
   • If “E” occurs then “A” must occur somewhere (no ordering).  
    Doesn’t guarantee that assignment precedes evaluation; it might even force assignments after evaluations.

3. Redundant/Inadequate Precedence(C, R)  
   • “C” must be preceded by “R”, but no constraints enforce the intermediate steps (AEPN).  
    Claims can jump directly from receive to close, skipping essential activities.

4. Missing constraints on P and N  
   • No rules to ensure that “P” follows “E” or that “N” follows “P”.  
    Approvals or notifications can be omitted without violating the model.

5. Over-permissive Init/Existence  
   • Only “R” is forced first and “C” forced sometime. All other activities are unconstrained.  
    One could receive a claim, then close it, never assign, evaluate, approve or notify.

Hypotheses for why these anomalies appeared

• Misinterpretation of business requirements  
  – Responded_existence used instead of a proper precedence constraint for evaluation after assignment.

• Incremental policy updates not synced  
  – A non-coexistence rule was added later (e.g. to prevent late evaluations) but never reconciled with the mandatory closure rule.

• Incomplete or noisy event data  
  – Analysts saw few evaluations recorded and drafted rules that effectively ban them.

• Pressure to accelerate throughput  
  – Some steps were left unconstrained to allow fast-track closures, unintentionally breaking the intended flow.

• Template or tooling misuse  
  – Default confidence/support thresholds triggered irrelevant constraints that weren’t manually reviewed.

SQL-Based Investigation Strategies

1. Find claims closed without any evaluation  
SELECT DISTINCT ce.claim_id  
FROM claim_events ce  
WHERE ce.activity = 'C'  
  AND NOT EXISTS (  
    SELECT 1 FROM claim_events ce2  
    WHERE ce2.claim_id = ce.claim_id  
      AND ce2.activity = 'E'  
  );

2. Find claims where evaluation and closure both occur (violates non-coexistence)  
SELECT ce.claim_id  
FROM claim_events ce  
WHERE ce.activity IN ('E','C')  
GROUP BY ce.claim_id  
HAVING COUNT(DISTINCT ce.activity) = 2;

3. Find evaluations without any preceding assignment  
SELECT e.claim_id, e.timestamp  
FROM claim_events e  
WHERE e.activity = 'E'  
  AND NOT EXISTS (  
    SELECT 1 FROM claim_events a  
    WHERE a.claim_id = e.claim_id  
      AND a.activity = 'A'  
      AND a.timestamp < e.timestamp  
  );

4. Find closures that jump directly from receive to close (no A, E, P, N in between)  
SELECT c.claim_id, r.timestamp AS receive_ts, c.timestamp AS close_ts  
FROM claim_events c  
JOIN claim_events r  
  ON r.claim_id = c.claim_id AND r.activity = 'R'  
WHERE c.activity = 'C'  
  AND NOT EXISTS (  
    SELECT 1 FROM claim_events inter  
    WHERE inter.claim_id = c.claim_id  
      AND inter.timestamp > r.timestamp  
      AND inter.timestamp < c.timestamp  
      AND inter.activity IN ('A','E','P','N')  
  );

5. Find approvals not preceded by evaluation  
SELECT p.claim_id, p.timestamp  
FROM claim_events p  
WHERE p.activity = 'P'  
  AND NOT EXISTS (  
    SELECT 1 FROM claim_events e  
    WHERE e.claim_id = p.claim_id  
      AND e.activity = 'E'  
      AND e.timestamp < p.timestamp  
  );

6. Find notifications sent without prior approval  
SELECT n.claim_id, n.timestamp  
FROM claim_events n  
WHERE n.activity = 'N'  
  AND NOT EXISTS (  
    SELECT 1 FROM claim_events p  
    WHERE p.claim_id = n.claim_id  
      AND p.activity = 'P'  
      AND p.timestamp < n.timestamp  
  );

7. Find assignments that never lead to any evaluation  
SELECT a.claim_id, MIN(a.timestamp) AS assign_ts  
FROM claim_events a  
WHERE a.activity = 'A'  
GROUP BY a.claim_id  
HAVING NOT EXISTS (  
  SELECT 1 FROM claim_events e  
  WHERE e.claim_id = a.claim_id  
    AND e.activity = 'E'  
    AND e.timestamp > MIN(a.timestamp)  
);

8. Find claims with no assignment at all  
SELECT c.claim_id  
FROM claims c  
WHERE NOT EXISTS (  
  SELECT 1 FROM claim_events ce  
  WHERE ce.claim_id = c.claim_id  
    AND ce.activity = 'A'  
);

9. Identify traces where close precedes receive  
SELECT ce.claim_id  
FROM claim_events ce  
WHERE ce.activity = 'C'  
  AND ce.timestamp < (  
    SELECT MIN(r.timestamp)  
    FROM claim_events r  
    WHERE r.claim_id = ce.claim_id  
      AND r.activity = 'R'  
  );
