```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance_Claim_Process")

# Create places
p_start = PetriNet.Place("p_start")
p_after_C = PetriNet.Place("p_after_C")
p_after_CR = PetriNet.Place("p_after_CR")
p_after_DV = PetriNet.Place("p_after_DV")
p_docs_incomplete = PetriNet.Place("p_docs_incomplete")  # after we detect incomplete docs
p_after_RDS = PetriNet.Place("p_after_RDS")              # after re-document submission
p_after_FC = PetriNet.Place("p_after_FC")
p_fraud_suspicious = PetriNet.Place("p_fraud_suspicious") # after we detect suspicion in FC
p_after_II = PetriNet.Place("p_after_II")                 # after in-depth investigation
p_after_CA = PetriNet.Place("p_after_CA")
p_needs_AP = PetriNet.Place("p_needs_AP")                 # if approval is needed
p_no_AP = PetriNet.Place("p_no_AP")                       # if approval is not needed
p_after_AP = PetriNet.Place("p_after_AP")
p_after_P = PetriNet.Place("p_after_P")
p_after_N = PetriNet.Place("p_after_N")
p_after_CL = PetriNet.Place("p_after_CL")  # final place

net.places.update({
    p_start,
    p_after_C,
    p_after_CR,
    p_after_DV,
    p_docs_incomplete,
    p_after_RDS,
    p_after_FC,
    p_fraud_suspicious,
    p_after_II,
    p_after_CA,
    p_needs_AP,
    p_no_AP,
    p_after_AP,
    p_after_P,
    p_after_N,
    p_after_CL
})

# Create transitions (activities)
t_C = PetriNet.Transition("t_C", label="Insurance Claim (C)")
t_CR = PetriNet.Transition("t_CR", label="Claim Registration (CR)")
t_DV = PetriNet.Transition("t_DV", label="Document Verification (DV)")
t_RDS = PetriNet.Transition("t_RDS", label="Re-Document Submission (RDS)")
t_FC = PetriNet.Transition("t_FC", label="Fraud Check (FC)")
t_II = PetriNet.Transition("t_II", label="In-depth Investigation (II)")
t_CA = PetriNet.Transition("t_CA", label="Claim Assessment (CA)")
t_AP = PetriNet.Transition("t_AP", label="Approval (AP)")
t_P = PetriNet.Transition("t_P", label="Payment (P)")
t_N = PetriNet.Transition("t_N", label="Notification (N)")
t_CL = PetriNet.Transition("t_CL", label="Closure (CL)")

# Create invisible (unlabeled) transitions for branching logic
t_docs_complete = PetriNet.Transition("t_docs_complete", None)
t_docs_incomplete_decision = PetriNet.Transition("t_docs_incomplete_decision", None)

t_fraud_clear = PetriNet.Transition("t_fraud_clear", None)
t_fraud_suspicious_decision = PetriNet.Transition("t_fraud_suspicious_decision", None)

t_needs_AP_decision = PetriNet.Transition("t_needs_AP_decision", None)
t_no_AP_decision = PetriNet.Transition("t_no_AP_decision", None)

net.transitions.update({
    t_C,
    t_CR,
    t_DV,
    t_RDS,
    t_FC,
    t_II,
    t_CA,
    t_AP,
    t_P,
    t_N,
    t_CL,
    t_docs_complete,
    t_docs_incomplete_decision,
    t_fraud_clear,
    t_fraud_suspicious_decision,
    t_needs_AP_decision,
    t_no_AP_decision
})

# Add arcs
# Initial step: A new claim arrives (C)
petri_utils.add_arc_from_to(p_start, t_C, net)
petri_utils.add_arc_from_to(t_C, p_after_C, net)

# Claim Registration (CR)
petri_utils.add_arc_from_to(p_after_C, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p_after_CR, net)

# Document Verification (DV)
petri_utils.add_arc_from_to(p_after_CR, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p_after_DV, net)

# After DV, decision on documents completeness
petri_utils.add_arc_from_to(p_after_DV, t_docs_incomplete_decision, net)
petri_utils.add_arc_from_to(p_after_DV, t_docs_complete, net)

# If documents incomplete -> go to RDS
petri_utils.add_arc_from_to(t_docs_incomplete_decision, p_docs_incomplete, net)
petri_utils.add_arc_from_to(p_docs_incomplete, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_after_RDS, net)

# After RDS, we must do DV again
petri_utils.add_arc_from_to(p_after_RDS, t_DV, net)

# If documents complete -> proceed to Fraud Check (FC)
petri_utils.add_arc_from_to(t_docs_complete, p_after_FC, net)
petri_utils.add_arc_from_to(p_after_FC, t_FC, net)
petri_utils.add_arc_from_to(t_FC, p_fraud_suspicious, net)

# After FC, decision on fraud suspicion
petri_utils.add_arc_from_to(p_fraud_suspicious, t_fraud_suspicious_decision, net)
petri_utils.add_arc_from_to(p_fraud_suspicious, t_fraud_clear, net)

# If suspicious -> In-depth Investigation (II)
petri_utils.add_arc_from_to(t_fraud_suspicious_decision, p_after_II, net)
petri_utils.add_arc_from_to(p_after_II, t_II, net)
# After II, go back to FC
petri_utils.add_arc_from_to(t_II, p_after_FC, net)

# If fraud clear -> move to Claim Assessment (CA)
petri_utils.add_arc_from_to(t_fraud_clear, p_after_CA, net)
petri_utils.add_arc_from_to(p_after_CA, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p_needs_AP, net)

# After CA, decision on whether approval is needed
petri_utils.add_arc_from_to(p_needs_AP, t_needs_AP_decision, net)
petri_utils.add_arc_from_to(p_needs_AP, t_no_AP_decision, net)

# If approval needed
petri_utils.add_arc_from_to(t_needs_AP_decision, p_after_AP, net)
petri_utils.add_arc_from_to(p_after_AP, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p_no_AP, net)  # After AP, join the same path as no AP needed

# If no approval needed, directly proceed towards Payment
petri_utils.add_arc_from_to(t_no_AP_decision, p_after_P, net)
# If approval was done, we join at p_no_AP place and then move to payment
petri_utils.add_arc_from_to(p_no_AP, t_P, net)
petri_utils.add_arc_from_to(t_P, p_after_P, net)

# Notification (N)
petri_utils.add_arc_from_to(p_after_P, t_N, net)
petri_utils.add_arc_from_to(t_N, p_after_N, net)

# Closure (CL)
petri_utils.add_arc_from_to(p_after_N, t_CL, net)
petri_utils.add_arc_from_to(t_CL, p_after_CL, net)

# Define initial marking
im = Marking()
im[p_start] = 1

# Define final marking
fm = Marking()
fm[p_after_CL] = 1
```

**Explanation:**

- We start with a token in `p_start`.
- `Insurance Claim (C)` moves the token to `p_after_C`.
- `Claim Registration (CR)`, `Document Verification (DV)`, `Fraud Check (FC)`, `Claim Assessment (CA)`, `Approval (AP)`, `Payment (P)`, `Notification (N)`, and `Closure (CL)` are represented as transitions with corresponding places in between.
- Invisible transitions (`t_docs_incomplete_decision`, `t_docs_complete`, `t_fraud_suspicious_decision`, `t_fraud_clear`, `t_needs_AP_decision`, `t_no_AP_decision`) handle branching logic:
  - After DV: either re-document submission (RDS) if docs are incomplete (loop back to DV) or proceed to FC if documents are complete.
  - After FC: either in-depth investigation (II) if suspicious (loop back to FC) or proceed to CA if clear.
  - After CA: either approval (AP) if required or directly to payment (P) if not.
- Finally, after notification (N) and closure (CL), the process reaches `p_after_CL`, which is the final marking.

This Petri net, along with the initial and final markings, forms an accepting Petri net for the described insurance claim process scenario.