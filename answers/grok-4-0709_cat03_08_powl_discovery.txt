```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define atomic transitions
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
tau = SilentTransition()

# Define sub-model for one or more IQC: * (IQC, tau)
iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, tau])

# Define sub-model for assembly phase: * (AS, iqc_loop)
assembly_loop = OperatorPOWL(operator=Operator.LOOP, children=[AS, iqc_loop])

# Define sub-model for testing phase: * (TST, RT)
testing_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Define sub-model for optional labeling: X (LB, tau)
labeling_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, tau])

# Define the root as a strict partial order with all main parts in sequence (no concurrency)
root = StrictPartialOrder(nodes=[OR, MS, QS, assembly_loop, testing_loop, PK, labeling_choice, DP, D])

# Add edges to enforce the sequence
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, assembly_loop)
root.order.add_edge(assembly_loop, testing_loop)
root.order.add_edge(testing_loop, PK)
root.order.add_edge(PK, labeling_choice)
root.order.add_edge(labeling_choice, DP)
root.order.add_edge(DP, D)
```