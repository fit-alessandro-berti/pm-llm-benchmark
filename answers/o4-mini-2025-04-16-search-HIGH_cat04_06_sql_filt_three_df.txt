Here’s one way to do it in DuckDB using window-functions and a CTE to pull out all “flagged” cases, then exclude them in the outer query:

```sql
-- 1) find all case_ids that have the exact 3-step sequence
--    'Approve Purchase Requisition'  'Create Order'  'Confirm Order'
--    in direct succession, _and_ where Confirm Order occurs
--    more than 5 days after Create Order
WITH flagged_cases AS (
  SELECT DISTINCT case_id
  FROM (
    SELECT
      case_id,
      activity,
      timestamp,
      LEAD(activity)   OVER (PARTITION BY case_id ORDER BY timestamp)      AS next_activity,
      LEAD(timestamp)  OVER (PARTITION BY case_id ORDER BY timestamp)      AS next_ts,
      LEAD(activity,2) OVER (PARTITION BY case_id ORDER BY timestamp)      AS next2_activity,
      LEAD(timestamp,2)OVER (PARTITION BY case_id ORDER BY timestamp)      AS next2_ts
    FROM event_log
  ) seq
  WHERE
    activity      = 'Approve Purchase Requisition'
    AND next_activity  = 'Create Order'
    AND next2_activity = 'Confirm Order'
    AND date_diff('day', next_ts, next2_ts) > 5
)

-- 2) return all events except those belonging to any flagged case
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM flagged_cases)
ORDER BY case_id, timestamp;
```

Explanation of the steps:

1. **Inner windowed subquery**  
   We use two `LEAD()` calls to peek at the very next activity & timestamp (`next_activity`, `next_ts`) and the one after that (`next2_activity`, `next2_ts`) within each `case_id` ordered by `timestamp`.  
   This guarantees “direct succession” (i.e. no other intervening row).  

2. **Filtering the 3-step + 5-day condition**  
   In the outer part of the CTE, we `WHERE`  
   - the current activity = ‘Approve Purchase Requisition’  
   - `next_activity` = ‘Create Order’  
   - `next2_activity` = ‘Confirm Order’  
   - the timedifference between the Create and Confirm steps is more than 5 days  
     (`date_diff('day', next_ts, next2_ts) > 5`).  
   Any `case_id` matching that gets collected (deduped by `DISTINCT`).

3. **Exclude flagged cases**  
   Finally, we select everything from `event_log` except rows whose `case_id` appears in `flagged_cases`.  

This returns all events for cases that do **not** contain that exact slow (-5+day) 3-step pattern.