Here's the SQL query that meets the requirements:

```sql
WITH case_sequences AS (
  SELECT case_id, LIST(activity ORDER BY timestamp) AS sequence
  FROM event_log
  GROUP BY case_id
),

variant_counts AS (
  SELECT sequence, COUNT(case_id) AS count
  FROM case_sequences
  GROUP BY sequence
),

top_k_variants AS (
  SELECT sequence
  FROM variant_counts
  ORDER BY count DESC
  LIMIT K
),

filtered_cases AS (
  SELECT T1.case_id, T1.activity, T1.timestamp
  FROM event_log AS T1
  JOIN top_k_variants AS T2
  ON LIST(T1.activity ORDER BY T1.timestamp) OVER (PARTITION BY T1.case_id) = T2.sequence
)

SELECT *
FROM filtered_cases;
```

This SQL query performs the following steps:

### Step 1: Construct a query to determine the sequence of activities for each case_id, maintaining the order imposed by timestamp

```sql
WITH case_sequences AS (
  SELECT case_id, LIST(activity ORDER BY timestamp) AS sequence
  FROM event_log
  GROUP BY case_id
)
```

This part of the query creates a temporary result set (CTE) named `case_sequences` that groups the event log by `case_id`, and for each case, it constructs an ordered sequence of activities by sorting them by their `timestamp`.

### Step 2: Group cases by their complete activity sequence to identify unique process variants

```sql
variant_counts AS (
  SELECT sequence, COUNT(case_id) AS count
  FROM case_sequences
  GROUP BY sequence
)
```

In this step, we count the number of occurrences of each process variant and group them by their sequence.

### Step 3: Count the number of cases for each variant and determine the top K variants by their frequency

```sql
top_k_variants AS (
  SELECT sequence
  FROM variant_counts
  ORDER BY count DESC
  LIMIT K
)
```

Now, we select the top K variants with the highest frequency (i.e., the highest count of cases) and store their sequences in the `top_k_variants` CTE.

### Step 4: Return all events from the original event log that belong only to cases which are part of these top K variants

```sql
filtered_cases AS (
  SELECT T1.case_id, T1.activity, T1.timestamp
  FROM event_log AS T1
  JOIN top_k_variants AS T2
  ON LIST(T1.activity ORDER BY T1.timestamp) OVER (PARTITION BY T1.case_id) = T2.sequence
)
```

Finally, we join the original event log with the `top_k_variants` CTE on the condition that the activity sequence of each case matches one of the top K variants, and we return the events from the original event log that belong to cases of these variants.

Note that this query assumes that the `K` value is defined elsewhere in the code, as a variable for example.