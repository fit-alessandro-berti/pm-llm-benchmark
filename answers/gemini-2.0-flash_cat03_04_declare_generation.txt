```python
declare_model = {
    'existence': {
        'IG': {'support': 1.0, 'confidence': 1.0},
        'DD': {'support': 1.0, 'confidence': 1.0},
        'TFC': {'support': 1.0, 'confidence': 1.0},
        'CE': {'support': 1.0, 'confidence': 1.0},
        'PC': {'support': 1.0, 'confidence': 1.0},
        'LT': {'support': 1.0, 'confidence': 1.0},
        'UT': {'support': 1.0, 'confidence': 1.0},
        'AG': {'support': 1.0, 'confidence': 1.0},
        'MP': {'support': 1.0, 'confidence': 1.0},
        'FL': {'support': 1.0, 'confidence': 1.0}
    },
    'absence': {},  # No absence constraints specified in the scenario
    'exactly_one': {}, # No exactly-one constraints specified
    'init': {
        'IG': {'support': 1.0, 'confidence': 1.0} # Idea Generation is the initial activity
    },
    'responded_existence': {
        'DD': {'support': 1.0, 'confidence': 1.0}, # Responded existence of Design Draft (after Idea Generation)
        'TFC': {'support': 1.0, 'confidence': 1.0}, # Responded existence of Technical Feasibility Check
        'CE': {'support': 1.0, 'confidence': 1.0}, # Responded existence of Cost Evaluation
        'PC': {'support': 1.0, 'confidence': 1.0}, # Responded existence of Prototype Creation
        'LT': {'support': 1.0, 'confidence': 1.0}, # Responded existence of Laboratory Testing
        'UT': {'support': 1.0, 'confidence': 1.0}, # Responded existence of User Testing
        'AG': {'support': 1.0, 'confidence': 1.0}, # Responded existence of Approval Gate
        'MP': {'support': 1.0, 'confidence': 1.0}, # Responded existence of Marketing Plan
        'FL': {'support': 1.0, 'confidence': 1.0}  # Responded existence of Final Launch
    },
    'coexistence': {
        'TFC': {'support': 1.0, 'confidence': 1.0}, # TFC and DD should coexist (TFC after DD)
        'CE': {'support': 1.0, 'confidence': 1.0}  # CE and DD should coexist (CE after DD)
    },
    'response': {
        'DD': {'support': 1.0, 'confidence': 1.0}, # Design Draft responds to Idea Generation
        'TFC': {'support': 1.0, 'confidence': 1.0}, # TFC responds to DD
        'CE': {'support': 1.0, 'confidence': 1.0}, # CE responds to DD
        'PC': {'support': 1.0, 'confidence': 1.0}, # PC responds to TFC and CE and AG
        'LT': {'support': 1.0, 'confidence': 1.0}, # LT responds to PC
        'UT': {'support': 1.0, 'confidence': 1.0}, # UT responds to PC
        'AG': {'support': 1.0, 'confidence': 1.0}, # AG responds to LT and UT
        'MP': {'support': 1.0, 'confidence': 1.0}, # MP responds to AG
        'FL': {'support': 1.0, 'confidence': 1.0}  # FL responds to MP
    },
    'precedence': {
        'TFC': {'support': 1.0, 'confidence': 1.0}, # TFC precedes PC
        'CE': {'support': 1.0, 'confidence': 1.0},  # CE precedes PC
        'LT': {'support': 1.0, 'confidence': 1.0}, # LT precedes AG
        'UT': {'support': 1.0, 'confidence': 1.0}, # UT precedes AG
        'MP': {'support': 1.0, 'confidence': 1.0}, # MP precedes FL
    },
    'succession': {
        'IG': {'support': 1.0, 'confidence': 1.0}, # IG succeeds (is followed by) DD
        'DD': {'support': 1.0, 'confidence': 1.0}, # DD succeeds IG, TFC, CE
        'TFC': {'support': 1.0, 'confidence': 1.0}, # TFC succeeds DD
        'CE': {'support': 1.0, 'confidence': 1.0}, # CE succeeds DD
        'PC': {'support': 1.0, 'confidence': 1.0}, # PC succeeds TFC, CE
        'LT': {'support': 1.0, 'confidence': 1.0}, # LT succeeds PC
        'UT': {'support': 1.0, 'confidence': 1.0}, # UT succeeds PC
        'AG': {'support': 1.0, 'confidence': 1.0}, # AG succeeds LT, UT
        'MP': {'support': 1.0, 'confidence': 1.0}, # MP succeeds AG
        'FL': {'support': 1.0, 'confidence': 1.0}  # FL succeeds MP
    },
    'altresponse': {}, # No alternative response constraints specified
    'altprecedence': {}, # No alternative precedence constraints specified
    'altsuccession': {}, # No alternative succession constraints specified
    'chainresponse': {}, # No chain response constraints specified
    'chainprecedence': {}, # No chain precedence constraints specified
    'chainsuccession': {}, # No chain succession constraints specified
    'noncoexistence': {}, # No non-coexistence constraints specified
    'nonsuccession': {}, # No non-succession constraints specified
    'nonchainsuccession': {} # No non-chain succession constraints specified
}
```
