```python
from pm4py.objects.petri_net.obj import PetriNet, Marking

# Define places for each activity in the process
start_place = PetriNet.Place(name="Start")
document_verification_place = PetriNet.Place(name="Document Verification")
fraud_check_place = PetriNet.Place(name="Fraud Check")
claim_assessment_place = PetriNet.Place(name="Claim Assessment")
approval_place = PetriNet.Place(name="Approval")
payment_place = PetriNet.Place(name="Payment")
notification_place = PetriNet.Place(name="Notification")
closure_place = PetriNet.Place(name="Closure")

# Define transitions labeled with the activity names
transition_cr = PetriNet.Transition(name="Claim Registration", label="CR")
transition_dv = PetriNet.Transition(name="Document Verification", label="DV")
transition_fc = PetriNet.Transition(name="Fraud Check", label="FC")
transition_ca = PetriNet.Transition(name="Claim Assessment", label="CA")
transition_ap = PetriNet.Transition(name="Approval", label="AP")
transition_payment = PetriNet.Transition(name="Payment", label="P")
transition_notification = PetriNet.Transition(name="Notification", label="N")
transition_closure = PetriNet.Transition(name="Closure", label="CL")

# Create arcs between places and transitions
petri_utils.add_arc_from_to(start_place, transition_cr, net)
petri_utils.add_arc_from_to(transition_cr, document_verification_place, net)
petri_utils.add_arc_from_to(document_verification_place, fraud_check_place, net)
petri_utils.add_arc_from_to(fraud_check_place, claim_assessment_place, net)
petri_utils.add_arc_from_to(claim_assessment_place, approval_place, net)
petri_utils.add_arc_from_to(approval_place, payment_place, net)
petri_utils.add_arc_from_to(payment_place, notification_place, net)
petri_utils.add_arc_from_to(notification_place, closure_place, net)

# Remove the Closure Place since it's part of the final marking
net.places.remove(closure_place)

# Initial Marking: Start with a token in the Start place
im = Marking()
im[start_place] = 1

# Final Marking: Token in all other places when the claim is closed
fm = Marking()

# Remove Closure Place from fm to represent that it doesn't have any tokens after closure
for p in net.places:
    if p != closure_place:
        del fm[p]
```

In this Petri net construction, each place represents a state in the process, and transitions connect these places based on the logical sequence of activities. The initial marking places one token at the start (Claim Registration), ensuring that we can simulate a new claim arriving. The final marking will have tokens placed in all other states representing that the claim is fully processed and closed.