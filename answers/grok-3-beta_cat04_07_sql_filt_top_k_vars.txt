Let's create a DuckDB SQL query that solves this problem step by step. I'll break it down into clear parts with comments for better understanding.

```sql
-- Define a CTE to create ordered activity sequences per case_id
WITH OrderedActivities AS (
    SELECT 
        case_id,
        activity,
        timestamp,
        -- Assign a row number to each activity within a case, ordered by timestamp
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_order
    FROM event_log
),
-- Concatenate activities into a single string representing the sequence (variant) per case
CaseVariants AS (
    SELECT 
        case_id,
        -- Use STRING_AGG to combine activities into a sequence, ordered by activity_order
        STRING_AGG(activity, ' -> ') OVER (PARTITION BY case_id ORDER BY activity_order) AS variant
    FROM OrderedActivities
    GROUP BY case_id
),
-- Count the frequency of each unique variant
VariantFrequencies AS (
    SELECT 
        variant,
        COUNT(DISTINCT case_id) AS frequency
    FROM CaseVariants
    GROUP BY variant
),
-- Select the top K variants by frequency
TopKVariants AS (
    SELECT 
        variant,
        frequency
    FROM VariantFrequencies
    ORDER BY frequency DESC
    LIMIT :K  -- Replace :K with the desired number of top variants (e.g., 5)
),
-- Get the case_ids that belong to the top K variants
TopKCases AS (
    SELECT DISTINCT 
        cv.case_id
    FROM CaseVariants cv
    JOIN TopKVariants tkv
        ON cv.variant = tkv.variant
)
-- Return the original events from the event log for only the top K cases
SELECT 
    el.case_id,
    el.activity,
    el.timestamp
FROM event_log el
JOIN TopKCases tkc
    ON el.case_id = tkc.case_id
ORDER BY el.case_id, el.timestamp;
```

### Explanation of the Query:

1. **OrderedActivities CTE**:
   - Uses `ROW_NUMBER()` to assign an order to each activity within a `case_id` based on the `timestamp`. This ensures the sequence of activities respects the temporal order.

2. **CaseVariants CTE**:
   - Aggregates the activities for each `case_id` into a single string (variant) using `STRING_AGG`, which concatenates the activities in the order defined by `activity_order`. The separator ` -> ` is used for clarity, but any delimiter can be chosen.
   - This step creates a representation of the process variant for each case.

3. **VariantFrequencies CTE**:
   - Groups cases by their variant (sequence of activities) and counts how many distinct `case_id`s correspond to each variant, giving the frequency of each variant.

4. **TopKVariants CTE**:
   - Orders the variants by their frequency in descending order and limits the result to the top K variants using `LIMIT :K`. (Note: Replace `:K` with the desired number, e.g., 5, or parameterize it as needed.)

5. **TopKCases CTE**:
   - Identifies the `case_id`s that belong to the top K variants by joining `CaseVariants` with `TopKVariants`.

6. **Final SELECT**:
   - Joins the original `event_log` with `TopKCases` to return only the events corresponding to cases in the top K variants.
   - Orders the result by `case_id` and `timestamp` for clarity.

### Key Features:
- Maintains temporal ordering of activities within each case using `ROW_NUMBER()` and `timestamp`.
- Groups cases into variants based on their complete activity sequence.
- Filters down to the top K variants by frequency.
- Returns the original event data for only the relevant cases.

### Notes:
- Replace `:K` with the desired number of top variants (e.g., `LIMIT 5`).
- The `STRING_AGG` function is used to create a readable variant string. If your DuckDB version doesn't support it, you can use `GROUP_CONCAT` or a similar function if available.
- The query assumes no ties in frequency for simplicity. If handling ties is necessary (e.g., including all variants tied for the Kth frequency), you can modify the `TopKVariants` CTE to use `DENSE_RANK()` or similar ranking functions.

This query should efficiently handle the task of identifying top process variants and filtering the event log accordingly. Let me know if you need adjustments for specific DuckDB versions or additional requirements!