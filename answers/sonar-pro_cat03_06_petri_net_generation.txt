Here's the Python code to construct an accepting Petri net for the complex insurance claim management process using pm4py:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet("Insurance Claim Process")

# Create places
places = {
    "start": PetriNet.Place("start"),
    "p_CR": PetriNet.Place("p_CR"),
    "p_DV": PetriNet.Place("p_DV"),
    "p_FC": PetriNet.Place("p_FC"),
    "p_CA": PetriNet.Place("p_CA"),
    "p_AP": PetriNet.Place("p_AP"),
    "p_P": PetriNet.Place("p_P"),
    "p_N": PetriNet.Place("p_N"),
    "end": PetriNet.Place("end")
}

# Add places to the net
for place in places.values():
    net.places.add(place)

# Create transitions
transitions = {
    "C": PetriNet.Transition("C", "Insurance Claim"),
    "CR": PetriNet.Transition("CR", "Claim Registration"),
    "DV": PetriNet.Transition("DV", "Document Verification"),
    "RDS": PetriNet.Transition("RDS", "Re-Document Submission"),
    "FC": PetriNet.Transition("FC", "Fraud Check"),
    "II": PetriNet.Transition("II", "In-depth Investigation"),
    "CA": PetriNet.Transition("CA", "Claim Assessment"),
    "AP": PetriNet.Transition("AP", "Approval"),
    "P": PetriNet.Transition("P", "Payment"),
    "N": PetriNet.Transition("N", "Notification"),
    "CL": PetriNet.Transition("CL", "Closure")
}

# Add transitions to the net
for transition in transitions.values():
    net.transitions.add(transition)

# Connect places and transitions with arcs
petri_utils.add_arc_from_to(places["start"], transitions["C"], net)
petri_utils.add_arc_from_to(transitions["C"], places["p_CR"], net)
petri_utils.add_arc_from_to(places["p_CR"], transitions["CR"], net)
petri_utils.add_arc_from_to(transitions["CR"], places["p_DV"], net)
petri_utils.add_arc_from_to(places["p_DV"], transitions["DV"], net)
petri_utils.add_arc_from_to(transitions["DV"], places["p_FC"], net)
petri_utils.add_arc_from_to(places["p_FC"], transitions["FC"], net)
petri_utils.add_arc_from_to(transitions["FC"], places["p_CA"], net)
petri_utils.add_arc_from_to(places["p_CA"], transitions["CA"], net)
petri_utils.add_arc_from_to(transitions["CA"], places["p_AP"], net)
petri_utils.add_arc_from_to(places["p_AP"], transitions["AP"], net)
petri_utils.add_arc_from_to(transitions["AP"], places["p_P"], net)
petri_utils.add_arc_from_to(places["p_P"], transitions["P"], net)
petri_utils.add_arc_from_to(transitions["P"], places["p_N"], net)
petri_utils.add_arc_from_to(places["p_N"], transitions["N"], net)
petri_utils.add_arc_from_to(transitions["N"], places["end"], net)
petri_utils.add_arc_from_to(places["end"], transitions["CL"], net)

# Add loops for re-document submission and in-depth investigation
petri_utils.add_arc_from_to(transitions["DV"], places["p_DV"], net)
petri_utils.add_arc_from_to(places["p_DV"], transitions["RDS"], net)
petri_utils.add_arc_from_to(transitions["RDS"], places["p_DV"], net)

petri_utils.add_arc_from_to(transitions["FC"], places["p_FC"], net)
petri_utils.add_arc_from_to(places["p_FC"], transitions["II"], net)
petri_utils.add_arc_from_to(transitions["II"], places["p_FC"], net)

# Define initial and final markings
im = Marking()
im[places["start"]] = 1

fm = Marking()
fm[places["end"]] = 1

# The accepting Petri net is now (net, im, fm)
```

This code constructs an accepting Petri net for the insurance claim management process. Here's a breakdown of what the code does:

1. It creates a new PetriNet object named "Insurance Claim Process".

2. It defines places for the start and end of the process, as well as intermediate states between activities.

3. It creates transitions for each activity in the process, including the main flow and the additional steps for re-document submission and in-depth investigation.

4. It connects the places and transitions with arcs to represent the flow of the process.

5. It adds loops for the re-document submission (between Document Verification and Re-Document Submission) and in-depth investigation (between Fraud Check and In-depth Investigation).

6. Finally, it defines the initial marking (im) with one token in the start place, and the final marking (fm) with one token in the end place.

This accepting Petri net (net, im, fm) represents the complex insurance claim management process, including the possibility of repeated document submissions and fraud investigations. The process starts when a token is placed in the "start" place (representing a new claim), and it successfully completes when a token reaches the "end" place (representing a closed claim).