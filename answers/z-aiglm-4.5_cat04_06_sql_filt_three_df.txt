
To solve this problem, we need to identify cases that contain a specific sequence of activities in direct succession with a significant time delay between two of the activities, and then exclude all events from those cases. The solution involves using DuckDB SQL with window functions to detect the sequence and time condition efficiently.

### Approach
1. **Sequence Detection**: Use the `LEAD` window function to check for consecutive activities in the specified order ('Approve Purchase Requisition'  'Create Order'  'Confirm Order') within each case. This involves:
   - Ordering events within each case by timestamp and activity (to handle ties).
   - Checking if the current activity is 'Approve Purchase Requisition', the next activity is 'Create Order', and the next next activity is 'Confirm Order'.
   
2. **Time Delay Check**: For cases identified in the sequence detection, calculate the time difference between 'Create Order' and 'Confirm Order'. Retain only cases where this difference exceeds 5 days.
   
3. **Exclusion of Cases**: Exclude all events from cases that meet both the sequence and time delay conditions. This is done by joining the event log with the excluded cases list and filtering out matching cases.

### Solution Code
```sql
WITH sequence_check AS (
    SELECT 
        case_id,
        activity AS current_activity,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp, activity) AS next_activity1,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp, activity) AS next_activity2,
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp, activity) AS next_timestamp1,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp, activity) AS next_timestamp2
    FROM event_log
),
excluded_cases AS (
    SELECT DISTINCT case_id
    FROM sequence_check
    WHERE 
        current_activity = 'Approve Purchase Requisition'
        AND next_activity1 = 'Create Order'
        AND next_activity2 = 'Confirm Order'
        AND (next_timestamp2 - next_timestamp1) > INTERVAL '5 days'
)
SELECT e.*
FROM event_log e
LEFT JOIN excluded_cases ex ON e.case_id = ex.case_id
WHERE ex.case_id IS NULL;
```

### Explanation
1. **sequence_check CTE**: 
   - This common table expression (CTE) processes each event to determine if it is part of the target sequence. Using `LEAD`, it looks ahead one and two positions in the sorted event sequence (ordered by timestamp and activity) to identify consecutive activities.
   
2. **excluded_cases CTE**:
   - Filters the `sequence_check` results to find cases where:
     - The current activity is 'Approve Purchase Requisition'.
     - The next activity is 'Create Order'.
     - The next next activity is 'Confirm Order'.
     - The time difference between 'Create Order' and 'Confirm Order' is more than 5 days.
   - `DISTINCT` ensures each case is listed only once, regardless of multiple sequence occurrences.

3. **Final Query**:
   - Joins the original event log with the `excluded_cases` list using a `LEFT JOIN`.
   - Filters out events from excluded cases by checking for `NULL` in the `excluded_cases.case_id` column, effectively including only events from cases that do not meet the exclusion criteria.

This approach efficiently identifies and excludes cases with the specified sequence and time delay, ensuring the result contains only events from non-excluded cases. The use of window functions and CTEs ensures clarity and performance.