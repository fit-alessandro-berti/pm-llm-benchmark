To solve this problem, we need to identify the cases that meet the sequence of activities and the timing condition, then exclude these cases from our final result set. Here's a step-by-step approach to constructing the SQL query:

1. **Identify Cases with the Specific Sequence**:
   - We need to find cases where the activities 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' appear in this exact order and are consecutive without any other activities in between.
   - We can achieve this using window functions and conditional aggregation. 

2. **Filter by Time Condition**:
   - Once we have identified the cases with the specific sequence, we need to filter further to include only those where the time between 'Create Order' and 'Confirm Order' is more than 5 days.

3. **Exclude These Cases**:
   - After identifying the cases that need to be excluded, we will fetch all events from the `event_log` except those from the excluded cases.

Below is the SQL query that accomplishes this:

```sql
WITH sequential_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        LAG(activity, 1) OVER(PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
        LAG(activity, 2) OVER(PARTITION BY case_id ORDER BY timestamp) AS prev_prev_activity,
        LAG(timestamp, 1) OVER(PARTITION BY case_id ORDER BY timestamp) AS prev_timestamp,
        TIMESTAMPDIFF(DAY, LAG(timestamp, 1) OVER(PARTITION BY case_id ORDER BY timestamp), timestamp) AS time_diff
    FROM
        event_log
),
filtered_cases AS (
    SELECT DISTINCT
        case_id
    FROM
        sequential_events
    WHERE
        activity = 'Confirm Order'
        AND prev_activity = 'Create Order'
        AND prev_prev_activity = 'Approve Purchase Requisition'
        AND time_diff > 5
)
SELECT
    e.*
FROM
    event_log e
LEFT JOIN
    filtered_cases f ON e.case_id = f.case_id
WHERE
    f.case_id IS NULL
ORDER BY
    e.case_id, e.timestamp;
```

Let's break down the query:

1. **sequential_events CTE**:
   - This common table expression creates a view enriched with `LAG` window functions to look at the previous two activities and their timestamps. This helps identify the sequence of activities and the time difference between the 'Create Order' and 'Confirm Order' events.
   - `TIMESTAMPDIFF` is used to calculate the number of days between 'Create Order' and 'Confirm Order'.

2. **filtered_cases CTE**:
   - This identifies cases that have the specified sequence of activities and where the timing condition (more than 5 days between 'Create Order' and 'Confirm Order') is met.
   - It contains only distinct `case_id`s that meet the criteria.

3. **Final SELECT**:
   - The main part of the query retrieves all events from the `event_log`.
   - It performs a `LEFT JOIN` with `filtered_cases` to identify which cases need to be excluded.
   - `WHERE f.case_id IS NULL` ensures only events from cases that do not meet the filtering criteria are included.
   - The result is ordered by `case_id` and `timestamp` for proper output.

This query ensures that all events, except those belonging to cases that have the specific sequence and timing condition, are returned.