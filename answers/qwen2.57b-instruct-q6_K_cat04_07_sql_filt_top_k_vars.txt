To solve this problem in DuckDB, we can follow these steps:

1. **Construct a Query to Extract Ordered Activity Sequences for Each Case:**
   We need to select each `case_id`, along with its ordered sequence of activities based on timestamps.

2. **Aggregate and Count Cases per Variant:**
   After extracting the sequences, we group by the sequences (which can be represented as strings) and count how many cases match each sequence.

3. **Filter Down to Top K Variants by Frequency:**
   We then sort these counts in descending order and select only the top `K` variants.

4. **Return Corresponding Events for These Top K Variants:**
   Finally, we filter the original event log table based on case IDs that belong to the top `K` activity sequences.

Here is how you can achieve this with DuckDB SQL:

```sql
-- Step 1: Extract ordered sequence of activities per case and group by case_id
WITH ranked_activities AS (
    SELECT 
        case_id,
        STRING_AGG(activity, '->' ORDER BY timestamp) WITHIN GROUP (ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

-- Step 2: Aggregate and count cases per variant
variant_counts AS (
    SELECT 
        activity_sequence,
        COUNT(*) AS case_count
    FROM ranked_activities
    GROUP BY activity_sequence
),

-- Step 3: Get the top K variants by frequency
top_variants AS (
    SELECT 
        activity_sequence,
        case_count
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT :K -- Replace :K with your desired value for top K
)

-- Step 4: Return corresponding events from those filtered cases
SELECT e.*
FROM event_log e
JOIN ranked_activities ra ON e.case_id = ra.case_id
WHERE ra.activity_sequence IN (SELECT activity_sequence FROM top_variants)
```

### Explanation:
1. **ranked_activities CTE**: This Common Table Expression (CTE) calculates the ordered sequence of activities for each `case_id` by using `STRING_AGG` with a specified order based on `timestamp`.

2. **variant_counts CTE**: This CTE groups the sequences and counts how many cases correspond to each unique activity sequence.

3. **top_variants CTE**: This CTE selects the top K variants from the variant counts, ordered by their frequency (case_count).

4. **Final SELECT Statement**: Joins the original `event_log` with `ranked_activities` on `case_id`, and filters the results to include only those cases that belong to one of the top K activity sequences.

Replace `:K` in the query with your desired value for `K`, which represents how many top variants you want to consider.