# DuckDB SQL Query for Process Variant Analysis

Here's a comprehensive DuckDB SQL query that accomplishes all the tasks in the prompt:

```sql
WITH
-- Step 1: Get ordered sequences of activities for each case
case_sequences AS (
    SELECT
        case_id,
        -- Create an ordered sequence of activities by concatenating them in timestamp order
        LIST(activity, ',') AS activity_sequence
    FROM (
        SELECT
            case_id,
            activity,
            timestamp,
            -- Create a row number per case ordered by timestamp
            ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_order
        FROM event_log
    )
    GROUP BY case_id
    ORDER BY case_id
),

-- Step 2: Group cases by their complete activity sequence and count occurrences
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count,
        -- Get the case_ids for each variant (needed later)
        LIST(case_id) AS case_ids
    FROM case_sequences
    GROUP BY activity_sequence
    ORDER BY case_count DESC
),

-- Step 3: Identify the top K variants
top_variants AS (
    SELECT
        activity_sequence,
        case_count,
        case_ids
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT K  -- Replace K with your desired number of top variants
),

-- Step 4: Get all case_ids that belong to top variants
top_case_ids AS (
    SELECT UNNEST(CASE WHEN case_ids IS NULL THEN [] ELSE case_ids END) AS case_id
    FROM top_variants
)

-- Step 5: Return all events from cases that are in the top variants
SELECT e.*
FROM event_log e
WHERE e.case_id IN (SELECT case_id FROM top_case_ids)
ORDER BY e.case_id, e.timestamp;
```

## Implementation Notes:

1. The query first creates ordered activity sequences for each case by:
   - Sorting events by timestamp within each case
   - Concatenating the activities in order using DuckDB's `LIST` aggregate function

2. It then counts how many cases follow each unique sequence (process variant)

3. The top K variants are selected based on their frequency (case count)

4. Finally, all events from cases that belong to these top variants are returned

5. The parameter `K` should be replaced with your desired number of top variants to display

## Customization Options:

- To change the delimiter in the activity sequence, modify the `','` in the `LIST` function call
- To include additional columns in the final output, add them to the final SELECT statement
- For very large datasets, you might want to add appropriate indexes on `case_id` and `timestamp`

## Example Usage:

For K=5 (top 5 most frequent variants):

```sql
WITH K AS 5
-- Rest of the query remains the same
```

This query efficiently handles the process variant analysis while preserving the original event data structure for the selected cases.