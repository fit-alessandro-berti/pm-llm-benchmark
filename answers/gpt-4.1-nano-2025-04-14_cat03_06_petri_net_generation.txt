Certainly! Here's a detailed construction of an accepting Petri net for the described insurance claim process scenario. We'll model the process with places (states), transitions (activities), and incorporate loops for re-submission and re-investigation as specified.

**Key points:**

- Start with an initial place where the claim arrives.
- Model sequential steps with possible loops:
  - Document Verification (DV) can loop to Re-Document Submission (RDS) if documents are incomplete or invalid.
  - Fraud Check (FC) can loop to In-depth Investigation (II) multiple times if needed.
- The process at some points has decision points, e.g., approval for claims above a threshold.
- At the end, the claim is paid, notified, and closed, reaching the final marking.

---

### Python code for the accepting Petri net:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the PetriNet object
net = PetriNet("Insurance Claim Process")

# Define places (states)
start = PetriNet.Place("Start")
registered = PetriNet.Place("Claim Registered")
docs_verification = PetriNet.Place("Documents Verification")
docs_incomplete = PetriNet.Place("Documents Incomplete")
docs_verified = PetriNet.Place("Documents Verified")
fraud_check = PetriNet.Place("Fraud Check")
fraud_suspected = PetriNet.Place("Fraud Suspected")
fraud_clear = PetriNet.Place("Fraud Clear")
deep_investigation = PetriNet.Place("In-depth Investigation")
assessment = PetriNet.Place("Claim Assessment")
approved = PetriNet.Place("Claim Approved")
needs_approval = PetriNet.Place("Needs Senior Approval")
final_approval = PetriNet.Place("Final Approval")
payment = PetriNet.Place("Payment")
notification = PetriNet.Place("Notification")
closed = PetriNet.Place("Claim Closed")
# Additional places for decision aspects
above_threshold = PetriNet.Place("Above Threshold")
below_threshold = PetriNet.Place("Below Threshold")

# Add places to the net
places = [
    start, registered, docs_verification, docs_incomplete,
    docs_verified, fraud_check, fraud_suspected, fraud_clear,
    deep_investigation, assessment, approved, needs_approval,
    final_approval, above_threshold, below_threshold,
    payment, notification, closed
]
net.places.update(places)

# Define transitions (activities)
file_claim = PetriNet.Transition("File Claim", label="File Claim")
register = PetriNet.Transition("Register Claim", label="Claim Registration")
verify_docs = PetriNet.Transition("Verify Documents", label="Document Verification")
submit_docs = PetriNet.Transition("Re-Submit Documents", label="Re-Document Submission")
check_docs = PetriNet.Transition("Check Documents", label="Check Documents")
detect_missing_docs = PetriNet.Transition("Detect Missing Docs", label="Detect Missing Docs")
detect_incorrect_docs = PetriNet.Transition("Detect Incorrect Docs", label="Detect Incorrect Docs")
detect_complete_docs = PetriNet.Transition("Detect Complete Docs", label="Detect Complete Docs")
perform_fraud_check = PetriNet.Transition("Fraud Check", label="Fraud Check")
raise_suspicions = PetriNet.Transition("Fraud Suspected", label="Fraud Suspicion")
clear_fraud = PetriNet.Transition("Fraud Clear", label="Fraud Clear")
perform_in_depth_investigation = PetriNet.Transition("In-depth Investigation", label="In-depth Investigation")
complete_investigation = PetriNet.Transition("Complete Investigation", label="Complete Investigation")
assess_claim = PetriNet.Transition("Assess Claim", label="Claim Assessment")
decide_approval = PetriNet.Transition("Decide Approval", label="Decide Approval")
request_final_approval = PetriNet.Transition("Request Final Approval", label="Request Final Approval")
approve_final = PetriNet.Transition("Final Approval", label="Final Approval")
decide_threshold = PetriNet.Transition("Threshold Decision", label="Threshold Decision")
pay_claim = PetriNet.Transition("Pay Claim", label="Payment")
notify_customer = PetriNet.Transition("Notify Customer", label="Notification")
close_claim = PetriNet.Transition("Close Claim", label="Close Claim")
# Add transitions to the net
transitions = [
    file_claim, register,
    verify_docs, submit_docs, check_docs,
    detect_missing_docs, detect_incorrect_docs, detect_complete_docs,
    perform_fraud_check, raise_suspicions, clear_fraud,
    perform_in_depth_investigation, complete_investigation,
    assess_claim, decide_approval, request_final_approval,
    approve_final, decide_threshold,
    pay_claim, notify_customer, close_claim
]
net.transitions.update(transitions)

# Helper function to add arcs
def add_arc(from_node, to_node):
    petri_utils.add_arc_from_to(from_node, to_node, net)

# Build the flow

# Start the process
add_arc(start, file_claim)
add_arc(file_claim, register)
add_arc(register, verify_docs)

# Document verification loop
# From verify_docs to check_docs
add_arc(verify_docs, check_docs)

# Depending on document check, go to respective places
# Missing documents
add_arc(check_docs, detect_missing_docs)
add_arc(detect_missing_docs, docs_incomplete)
add_arc(docs_incomplete, submit_docs)
add_arc(submit_docs, verify_docs)

# Incorrect documents
add_arc(check_docs, detect_incorrect_docs)
add_arc(detect_incorrect_docs, docs_incomplete)
add_arc(docs_incomplete, submit_docs)

# Correct/complete documents
add_arc(check_docs, detect_complete_docs)
add_arc(detect_complete_docs, docs_verified)
add_arc(docs_verified, fraud_check)

# Fraud check process
add_arc(fraud_check, perform_fraud_check)

# Fraud suspected
add_arc(perform_fraud_check, raise_suspicions)
add_arc(raise_suspicions, fraud_suspected)
add_arc(fraud_suspected, perform_in_depth_investigation)
add_arc(perform_in_depth_investigation, complete_investigation)
# Loop back if suspicion remains
add_arc(complete_investigation, perform_fraud_check)

# Fraud clear
add_arc(fraud_check, clear_fraud)
add_arc(clear_fraud, assessment)

# Claim assessment
add_arc(assessment, decide_approval)

# Decision based on amount
add_arc(decide_approval, above_threshold)
add_arc(decide_approval, below_threshold)

# Above threshold: special approval
add_arc(above_threshold, request_final_approval)
add_arc(request_final_approval, final_approval)
# For below threshold, direct approval
add_arc(below_threshold, final_approval)

# Final approval
add_arc(final_approval, assess_claim)

# Decision to approve or reject (not explicitly modeled, assuming approval proceeds)
# Proceed to payment
add_arc(assess_claim, pay_claim)

# Payment, notification, closure
add_arc(pay_claim, notification)
add_arc(notification, close_claim)
add_arc(close_claim, final_approval)  # Final mark indicating end

# Initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[closed] = 1
# The marking indicates the claim has been processed and closed

# -- Optional: If you wish to remove explicit final "end" places and simulate process end,
# you can remove the 'closed' place as per the example.

# Example: Removing the 'closed' place from final marking (not necessary here)
# del fm[closed]

# The above code constructs a detailed Petri net for the insurance claim process
```

---

### **Summary:**

- **Places:** Represent process states, including decision points and loops.
- **Transitions:** Model activities and decision actions.
- **Loops:** Enable re-submission of documents, repeated fraud investigation.
- **Initial Marking:** Starts with a token in the "Start" place.
- **Final Marking:** Places one token in "Claim Closed" to indicate process completion.

You can execute this code to generate the Petri net structure, allowing reasoning or analysis of the process flow.

---

**Note:** To visualize or simulate this Petri net, use tools compatible with PM4Py or export it accordingly.