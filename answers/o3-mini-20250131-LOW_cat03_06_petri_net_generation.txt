Below is an example Python code that constructs an accepting Petri net for the described insurance claim management process. In this net, we create places representing states between major activities and transitions labeled with the activity names. We also add arcs to model the normal flow, the loop for re-document submission if the documents are incomplete after Document Verification (DV), and the loop for multiple In-depth Investigations (II) after Fraud Check (FC).

Assume that you have installed and imported pm4py’s Petri net classes and utility functions. (Make sure pm4py is installed in your environment.) In the code below, the initial marking holds a token in the “start” place (representing a newly filed claim), and the final marking is represented by a token in the “closed” place after closure.

Below is the complete Python code:

------------------------------------------------------------
# Import the required classes and utility functions
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance_Claim_Process")

# Create places (states)
start = PetriNet.Place("start")               # A new claim just filed (Insurance Claim (C))
p1 = PetriNet.Place("registered")             # after Claim Registration (CR)
p2 = PetriNet.Place("documents_verified")     # after Document Verification (DV)
p3 = PetriNet.Place("ready_for_fraud")          # before Fraud Check (FC)
p4 = PetriNet.Place("fraud_checked")            # after Fraud Check (FC)
p5 = PetriNet.Place("assessment_ready")         # after necessary investigations
p6 = PetriNet.Place("assessed")                 # after Claim Assessment (CA)
p7 = PetriNet.Place("approved")                 # after Approval (AP)
p8 = PetriNet.Place("paid")                     # after Payment (P)
p9 = PetriNet.Place("notified")                 # after Notification (N)
closed = PetriNet.Place("closed")               # final state after Closure (CL)

# Additional places for loop transitions:
# Place that indicates that documents need re-submission (back from DV)
p_rds = PetriNet.Place("awaiting_resubmission")
# Place after an in-depth investigation loop (after FC -> II loop)
p_ii = PetriNet.Place("investigated")

# Create transitions (activities):
# From Insurance Claim to Claim Registration
t_CR = PetriNet.Transition("t_CR", "Claim Registration")
# Document Verification
t_DV = PetriNet.Transition("t_DV", "Document Verification")
# Incomplete Documents triggers Re-Document Submission
t_RDS = PetriNet.Transition("t_RDS", "Re-Document Submission")
# Transition from successful submission back to Document Verification
t_RDS_return = PetriNet.Transition("t_RDS_return", "Documents Re-verified")
# Fraud Check
t_FC = PetriNet.Transition("t_FC", "Fraud Check")
# In-depth Investigation if required – note: this loop can occur multiple times
t_II = PetriNet.Transition("t_II", "In-depth Investigation")
# Transition to continue after investigation – back to Fraud Check outcome
t_II_return = PetriNet.Transition("t_II_return", "Investigation Cleared")
# Claim Assessment (CA)
t_CA = PetriNet.Transition("t_CA", "Claim Assessment")
# Approval (AP)
t_AP = PetriNet.Transition("t_AP", "Approval")
# Payment (P)
t_P = PetriNet.Transition("t_P", "Payment")
# Notification (N)
t_N = PetriNet.Transition("t_N", "Notification")
# Closure (CL)
t_CL = PetriNet.Transition("t_CL", "Closure")

# Add places and transitions to the petri net
net.places.update({start, p1, p2, p3, p4, p5, p6, p7, p8, p9, closed, p_rds, p_ii})
net.transitions.update({t_CR, t_DV, t_RDS, t_RDS_return, t_FC, t_II, t_II_return, t_CA, t_AP, t_P, t_N, t_CL})

# Add arcs to reflect the process flow:
# 1. Start -> Claim Registration
petri_utils.add_arc_from_to(start, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p1, net)

# 2. Claim Registration -> Document Verification
petri_utils.add_arc_from_to(p1, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p2, net)

# 3. Document Verification  Either continue or require Re-Document Submission:
#    a) If documents are complete: p2 -> move to ready for fraud check
petri_utils.add_arc_from_to(p2, t_FC, net)  # Directly proceeding to Fraud Check if OK 
#    b) If documents are incomplete: p2 -> Re-Document Submission loop
petri_utils.add_arc_from_to(p2, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_rds, net)
petri_utils.add_arc_from_to(p_rds, t_RDS_return, net)
petri_utils.add_arc_from_to(t_RDS_return, p2, net)  # back to document verified place

# 4. From Document Verification place (p2) to Fraud Check preparation:
# Let's route the process: p2 -> t_FC already defined. Assume t_FC fires leading to p4.

petri_utils.add_arc_from_to(t_FC, p4, net)
# 5. After Fraud Check (p4) we can have two paths:
#    a) If fraud check is satisfactory, move directly to assessment ready (p5)
petri_utils.add_arc_from_to(p4, t_II_return, net)  # treat this as a positive clearance path
petri_utils.add_arc_from_to(t_II_return, p5, net)
#    b) If doubt arises, trigger In-depth Investigation loop:
petri_utils.add_arc_from_to(p4, t_II, net)
petri_utils.add_arc_from_to(t_II, p_ii, net)
# And from investigation result, continue back:
petri_utils.add_arc_from_to(p_ii, t_II_return, net)
# (Note: the arc from p4 to t_II_return was already added above for the clearance path.)

# 6. From p5 to Claim Assessment
petri_utils.add_arc_from_to(p5, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p6, net)

# 7. From Claim Assessment to Approval
petri_utils.add_arc_from_to(p6, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p7, net)

# 8. From Approval to Payment
petri_utils.add_arc_from_to(p7, t_P, net)
petri_utils.add_arc_from_to(t_P, p8, net)

# 9. From Payment to Notification
petri_utils.add_arc_from_to(p8, t_N, net)
petri_utils.add_arc_from_to(t_N, p9, net)

# 10. From Notification to Closure
petri_utils.add_arc_from_to(p9, t_CL, net)
petri_utils.add_arc_from_to(t_CL, closed, net)

# Define the initial and final markings:
im = Marking()
im[start] = 1      # The process starts with a new claim at "start"

fm = Marking()
fm[closed] = 1     # The process is finished when the claim is closed

# (Optional) Print the created net details
print("Petri net constructed for Insurance Claim Process:")
print("Places:", [p.name for p in net.places])
print("Transitions:", [t.label for t in net.transitions])
print("Initial Marking:", {p.name: im[p] for p in im})
print("Final Marking:", {p.name: fm[p] for p in fm})

# The net is now ready for further analysis, simulation, or export.
------------------------------------------------------------

Explanation of the design:
• The net begins at place "start".  
• A transition labeled "Claim Registration" moves the token to the "registered" place.
• From "registered", the process enters "Document Verification" through transition DV.
• At "documents_verified" (p2), the process may either proceed directly to Fraud Check (t_FC) or loop back if documents are incomplete via the Re-Document Submission process (t_RDS and t_RDS_return).
• The Fraud Check (t_FC) brings the token to "fraud_checked" (p4). From here, if the fraud check is conclusive, an immediate clearance is modeled by t_II_return to "assessment_ready" (p5); if not, an In-depth Investigation loop (t_II and then t_II_return) is triggered.
• Once ready (p5), Claim Assessment, Approval, Payment, Notification, and Closure transitions occur sequentially.
• The final marking places the token in the "closed" place, indicating that the claim process has been completed.

This code uses the pm4py framework to set up an accepting Petri net that you can further analyze or use for simulation purposes in your process mining projects.