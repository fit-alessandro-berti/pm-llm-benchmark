# DuckDB SQL Query: Filter Cases with  6 Events

Here are several correct approaches to solve this problem, from most recommended to alternative methods:

## **Solution 1: Window Function (Recommended)**

```sql
SELECT case_id, activity, timestamp
FROM (
    SELECT *,
           COUNT(*) OVER (PARTITION BY case_id) AS events_per_case
    FROM event_log
) AS enriched
WHERE events_per_case <= 6;
```

**Advantages:** Single pass through data, efficient, easy to debug, and you can easily adjust the column selection.

---

## **Solution 2: Subquery with HAVING**

```sql
SELECT *
FROM event_log
WHERE case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
);
```

**Advantages:** Clear logic, widely understood SQL pattern.

---

## **Solution 3: CTE with JOIN**

```sql
WITH valid_cases AS (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
SELECT e.*
FROM event_log e
INNER JOIN valid_cases v ON e.case_id = v.case_id;
```

**Advantages:** Very readable, good for complex queries where you might add more logic.

---

## **Solution 4: Semi-Join with QUALIFY (DuckDB-specific)**

```sql
SELECT *
FROM event_log
QUALIFY COUNT(*) OVER (PARTITION BY case_id) <= 6;
```

**Advantages:** Most concise, DuckDB's `QUALIFY` clause filters based on window functions directly.

---

## **Comparison & Recommendations:**

| Solution | Readability | Performance | Portability |
|----------|-------------|-------------|-------------|
| Window Function |  |  |  |
| Subquery |  |  |  |
| CTE + JOIN |  |  |  |
| QUALIFY |  |  |  (DuckDB-specific) |

**For DuckDB specifically, Solution 4 (QUALIFY)** is the most elegant and performant. **For general use, Solution 1 or 3** provides the best balance.