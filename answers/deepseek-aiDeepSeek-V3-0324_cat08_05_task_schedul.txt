# **Data-Driven Scheduling Optimization for Precision Parts Inc. Using Process Mining**

## **1. Analyzing Historical Scheduling Performance and Dynamics**

### **Reconstructing Job Flows Using Process Mining**
Process mining will be used to analyze MES event logs and reconstruct the actual flow of jobs through the shop floor. Key techniques include:

- **Process Discovery**:  
  - Use algorithms (e.g., Alpha++, Inductive Miner) to extract process models from event logs, identifying common job routings and deviations.  
  - Compare theoretical vs. actual process models to detect inefficiencies (e.g., unnecessary loops, skipped steps, rework).  

- **Conformance Checking**:  
  - Align real-world execution traces with expected workflows to detect violations.  
  - Identify deviations such as unplanned re-routes, prolonged idle times, or premature task terminations.  

### **Quantifying Key Performance Metrics**
1. **Job Flow Times & Lead Times:**  
   - Calculate **end-to-end lead time** (job release  completion) and **process time vs. waiting time** per job.  
   - Use Gantt chart visualizations to map job progression and identify delays.  

2. **Waiting Times (Queue Times):**  
   - Measure **average queue time per workstation** (time between "Queue Entry" and "Task Start").  
   - Identify bottlenecks via long queues (e.g., if jobs consistently wait hours at "CNC Milling").  

3. **Resource Utilization Analysis:**  
   - Compute:  
     - **Machine Utilization** = (Processing Time + Setup Time) / Total Available Time  
     - **Idle Time** = Periods with no jobs assigned.  
   - Identify under- or over-utilized machines (e.g., high **Heat Treatment** utilization vs. idle **Grinding** machines).  
   - **Setup Time Analysis**:  
     - Analyze logs to extract **sequence-dependent setup times** (e.g., transitions JOB-A  JOB-B vs. JOB-A  JOB-C).  
     - Cluster setups by similarity to identify patterns (e.g., certain material changes increase setup by 30%).  

4. **Schedule Adherence & Tardiness:**  
   - **Tardiness** = max(0, Actual Completion Time – Due Date).  
   - Compute:  
     - **% of Jobs Delayed**  
     - **Average Tardiness (hours)**  
   - Correlate delays with bottlenecks or frequent disruptions.  

5. **Impact of Disruptions:**  
   - Use **event log filtering** to compare KPIs before/after breakdowns and priority changes.  
   - Quantify **recovery time** (how long until schedule stabilizes after a disruption).  

---

## **2. Diagnosing Scheduling Pathologies**

### **Key Inefficiencies Identified**
1. **Bottleneck Machines**  
   - **Evidence**: Long queues at **CNC Milling** / **Heat Treatment**, high utilization (>90%), frequent downstream starvation.  

2. **Poor Prioritization Logic**  
   - **Evidence**: High-priority jobs stuck in queues due to static "First-Come-First-Served" (FCFS) rules.  

3. **Suboptimal Job Sequencing**  
   - **Evidence**: Frequent long setups (e.g., switching from aluminum to titanium jobs requires 2x setup time).  

4. **WIP Imbalance**  
   - **Evidence**: Overloaded workstations upstream (e.g., Cutting) cause WIP buildup downstream.  

5. **Bullwhip Effect**  
   - **Evidence**: Rush orders creating cascading delays due to lack of adaptive rescheduling.  

### **Process Mining Support for Diagnosis**
- **Bottleneck Analysis**:  
  - Identify machines with longest average queue times (e.g., **MILL-03**).  
- **Variant Analysis**:  
  - Compare job flows of **on-time vs. tardy jobs** to detect patterns (e.g., tardy jobs often stuck behind long-setup jobs).  
- **Resource Contention Heatmaps**:  
  - Visualize overlapping job allocations causing delays.  

---

## **3. Root Cause Analysis of Scheduling Ineffectiveness**

### **Underlying Causes**
1. **Static Dispatching Rules**  
   - Current FCFS/EDD rules ignore dynamic factors (setup changes, machine load).  
2. **Lack of Real-Time Visibility**  
   - No live tracking of WIP, machine status, or job progress.  
3. **Inaccurate Time Estimates**  
   - Planned durations mismatch actuals (e.g., setup times underestimated by 20%).  
4. **Poor Setup Management**  
   - No optimization for sequence-dependent setups.  

### **Process Mining Differentiation**
- **Scheduling Logic Issues** vs. **Capacity Issues**:  
  - If **tardiness persists despite low utilization**, rules are flawed.  
  - If **high utilization + queues**, capacity expansion may be needed.  

---

## **4. Advanced Data-Driven Scheduling Strategies**

### **Strategy 1: Enhanced Dynamic Dispatching Rules**  
- **Logic**: Hybrid priority rules considering:  
  - **Due date urgency** (slack time).  
  - **Downstream load** (avoid overwhelming bottlenecks).  
  - **Sequence-dependent setup time** (minimize transitions).  
- **Process Mining Inputs**:  
  - Historical setup matrices, lead time distributions.  

### **Strategy 2: Predictive Scheduling with Machine Learning**  
- **Logic**:  
  - Forecast task durations using regression models (factors: operator, material).  
  - Simulate schedules under disruptions (e.g., breakdowns).  
- **Process Mining Inputs**:  
  - Task duration distributions, failure rates.  

### **Strategy 3: Setup-Optimized Batching**  
- **Logic**:  
  - Group jobs with similar setups at bottleneck machines.  
  - Use clustering algorithms to identify setup families.  
- **Process Mining Inputs**:  
  - Setup time correlation matrices.  

**Impact**:  
-  Tardiness by 30%,  WIP by 25%,  Utilization by 15%.  

---

## **5. Simulation, Evaluation, and Continuous Improvement**

### **Simulation Testing**  
- **Setup**:  
  - Use historical log data (task times, failure rates) in discrete-event simulation.  
- **Scenarios**:  
  - High load, breakdowns, rush orders.  

### **Continuous Improvement**  
- **Live Monitoring Dashboard**:  
  - Track KPIs (tardiness, WIP, utilization).  
- **Automated Drift Detection**:  
  - Trigger alerts if performance degrades.  

---

## **Conclusion**
Process mining reveals inefficiencies in Precision Parts Inc.’s scheduling, enabling **data-driven strategies** that **reduce tardiness, lower WIP, and improve utilization** while adapting dynamically to disruptions.