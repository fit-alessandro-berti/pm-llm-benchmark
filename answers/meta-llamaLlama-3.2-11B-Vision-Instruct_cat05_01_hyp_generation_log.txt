I can guide you through the reasoning and SQL query process to identify anomalies and propose investigation methods.

### Hypothesis for Anomalies and Un desirable Behaviors

Looking at the event logs, some potential issues could be:

1.  **Late Confirmations**: Cases 1002 and 1003, have mentioned late confirmations of shipment. This could indicate that the logistics team or the system might be falling behind schedule.
2.  **Early Attempted Shipment**: For case 1002, it's mentioned that the shipment was attempted early. This could also point towards the opposite, where the logistics team or the system is getting orders processed early which might be unnecessary.
3.  **Unclear Problem with Invoicing**: In case 1004, there is a shipping confirmation with a status of 'shipment\_scheduled=N'. However, there is an invoice issued previously. This seems like there might be a delay in processing payments or perhaps a mass credit back occurred.
4.  **Improper Handling of Orders**: There seems to be some differences in the sequences of actions performed in cases 1001 and 1003. This might point to external factors possibly delaying order completion times for some customers.

### Proposed SQL Queries for Investigation

Let's formulate some SQL queries to explore these anomalies:

**Step 1: Reconstruct Order Flow and Late Confirmations**

```sql
SELECT 
    e.case_id,
    e.event_id,
    e.activity,
    e.timestamp,
    r.role as resource_role
FROM 
    order_event_log e
JOIN 
    resources r ON e.resource = r.resource_id
WHERE 
    e.case_id IN (1002, 1003) AND r.department = 'Logistics'
ORDER BY 
    e.case_id, timestamp;
```

**Step 2: Investigate Policies around Early Attempted Shipment**

```sql
SELECT 
    e.case_id,
    e.event_id,
    e.activity,
    e.timestamp,
    r.role as resource_role
FROM 
    order_event_log e
JOIN 
    resources r ON e.resource = r.resource_id
WHERE 
    e.case_id = 1002 AND 
    (e.activity LIKE '%attempted%' OR e.activity LIKE '%scheduled%');
```

**Step 3: Auditing Incorrect Invoice Timing**

```sql
SELECT 
    o.case_id,
    o.order_value,
    e innost
FROM 
    orders o
JOIN 
    order_event_log e ON o.case_id = e.case_id AND o.order_value > 1000
WHERE 
    e.activity LIKE 'Confirm Shipment%' AND e.resource LIKE 'LogisticsMgr sonra-logistics'
ORDER BY 
    o.case_id, o.order_value;
```

**Step 4: System Cluster Determination**

```sql
WITH orders_log_flow AS (
    SELECT 
        case_id, 
        array_agg(DISTINCT event_id ORDER BY timestamp) as event_order
    FROM 
        (SELECT 
             case_id, 
             event_id,
             PERCENT_RANK() OVER (PARTITION BY case_id ORDER BY timestamp) as order_rank
         FROM 
             order_event_log) as temp
    GROUP BY 
        case_id
),
/resource_access AS (
    SELECT 
        case_id, 
        resource_id,
        COUNT(DISTINCT CASE WHEN activity LIKE 'Attempt%' THEN event_id ELSE NULL END) as attempted_cnt,
        COUNT(DISTINCT CASE WHEN activity LIKE 'Scheduled%' THEN event_id ELSE NULL END) as scheduled_cnt
    FROM 
        order_event_log
    WHERE 
        activity LIKE '%attempted%' OR activity LIKE '%scheduled%'
    GROUP BY 
        case_id, resource_id
)
SELECT 
    olf.case_id, 
    olf.event_order, 
    ra.resource_id, 
    ra.attempted_cnt, 
    ra.scheduled_cnt
FROM 
    orders_log_flow olf
JOIN 
    resource_access ra ON olf.case_id = ra.case_id
WHERE 
    (attempted_cnt > scheduled_cnt) OR (attempted_cnt < scheduled_cnt);
```

These queries can be modified according to the findings.