The following POWL models are constructed based on the process description, using the required control-flow operators (Loop, XOR, and Sequential Partial Order).

### 1. POWL Model with Potential Unfairness

This model includes an XOR split after the skill assessment (T4). One path leads to the standard cultural evaluation (T5), and the other leads to the potentially biased community affiliation check (T6), reflecting the source of subtle unfairness.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# --- 1. Define Atomic Activities (Transitions) ---
T1 = Transition(label="ReceiveApplication")
T2 = Transition(label="DataCompletenessCheck")
T3 = Transition(label="RequestMoreInfo")
T4 = Transition(label="PreliminarySkillAssessment")
T5 = Transition(label="StandardCulturalFitEvaluation")
T6 = Transition(label="CommunityAffiliationCheck") # Biased Activity
T7 = Transition(label="ManagerialReview")
T8 = Transition(label="FinalDecision")

# --- 2. Define Control Structures ---

# Loop: T2 (Check) -> T3 (Request More Info) -> T2 (Repeat)
DataLoop = OperatorPOWL(operator=Operator.LOOP, children=[T2, T3])

# XOR Choice: Either T5 (Standard Fit) OR T6 (Biased Affiliation Check)
# This XOR branching represents the potential source of unfairness.
BiasXOR = OperatorPOWL(operator=Operator.XOR, children=[T5, T6])

# --- 3. Define the Root Process (Sequential Partial Order) ---
# T1 -> DataLoop -> T4 -> BiasXOR -> T7 -> T8
# The entire process is sequential.
Model_Unfair = StrictPartialOrder(nodes=[T1, DataLoop, T4, BiasXOR, T7, T8])

# Define the sequential flow using edges
Model_Unfair.order.add_edge(T1, DataLoop)
Model_Unfair.order.add_edge(DataLoop, T4)
Model_Unfair.order.add_edge(T4, BiasXOR)
Model_Unfair.order.add_edge(BiasXOR, T7)
Model_Unfair.order.add_edge(T7, T8)

powl_unfair_representation = Model_Unfair

print("POWL Model 1: Potential Unfairness")
# Outputting the structure representation
print(f"Activities: {T1.label}, {T4.label}, {T7.label}, {T8.label}")
print(f"Loop Structure: *({T2.label}, {T3.label})")
print(f"Bias Branch (XOR): X({T5.label}, {T6.label})")
print("Total Flow: ReceiveApplication -> DataLoop -> PreliminarySkillAssessment -> BiasXOR -> ManagerialReview -> FinalDecision")
```

### 2. POWL Model Without Unfairness

This model removes the `CommunityAffiliationCheck` (T6) and ensures that all candidates follow a standardized, sequential path that includes the `StandardCulturalFitEvaluation` (T5), eliminating the source of bias inherent in the XOR branch.

```python
# --- 1. Define Atomic Activities (Transitions) ---
# Reuse T1, T2, T3, T4, T5, T7, T8 defined previously.

# T1 = Transition(label="ReceiveApplication")
# T2 = Transition(label="DataCompletenessCheck")
# T3 = Transition(label="RequestMoreInfo")
# T4 = Transition(label="PreliminarySkillAssessment")
# T5 = Transition(label="StandardCulturalFitEvaluation") # Now mandatory for all
# T7 = Transition(label="ManagerialReview")
# T8 = Transition(label="FinalDecision")

# --- 2. Define Control Structures ---

# Loop: Same data completeness loop as before
DataLoop_Fair = OperatorPOWL(operator=Operator.LOOP, children=[T2, T3])

# Note: No XOR structure is needed in this fair model. T5 is simply sequenced.

# --- 3. Define the Root Process (Sequential Partial Order) ---
# T1 -> DataLoop -> T4 -> T5 -> T7 -> T8
Model_Fair = StrictPartialOrder(nodes=[T1, DataLoop_Fair, T4, T5, T7, T8])

# Define the sequential flow using edges
Model_Fair.order.add_edge(T1, DataLoop_Fair)
Model_Fair.order.add_edge(DataLoop_Fair, T4)
Model_Fair.order.add_edge(T4, T5) # Direct sequence to standard cultural fit
Model_Fair.order.add_edge(T5, T7)
Model_Fair.order.add_edge(T7, T8)

powl_fair_representation = Model_Fair

print("\n---")
print("POWL Model 2: Without Unfairness (Standardized Process)")
# Outputting the structure representation
print(f"Activities: {T1.label}, {T4.label}, {T5.label}, {T7.label}, {T8.label}")
print(f"Loop Structure: *({T2.label}, {T3.label})")
print("Total Flow: ReceiveApplication -> DataLoop -> PreliminarySkillAssessment -> StandardCulturalFitEvaluation -> ManagerialReview -> FinalDecision")
```