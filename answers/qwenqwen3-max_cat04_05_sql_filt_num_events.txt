Here's a DuckDB SQL query that accomplishes the task:

```sql
SELECT case_id, activity, timestamp
FROM event_log
WHERE case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
ORDER BY case_id, timestamp;
```

**Explanation:**

1. **Subquery**: The inner query groups all events by `case_id` and uses `HAVING COUNT(*) <= 6` to identify only those cases that have 6 or fewer events total.

2. **Main Query**: The outer query selects all events from the original `event_log` table where the `case_id` is in the set of valid case IDs returned by the subquery.

3. **Ordering**: The results are ordered by `case_id` and then by `timestamp` to maintain logical process instance ordering (though the ordering clause is optional based on requirements).

This approach efficiently filters out entire cases that exceed the six-event threshold while preserving all events from the remaining valid cases. The `HAVING` clause is used instead of `WHERE` in the subquery because we need to filter on an aggregate function (`COUNT(*)`).