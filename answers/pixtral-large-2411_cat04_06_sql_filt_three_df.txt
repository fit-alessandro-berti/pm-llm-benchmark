To address the requirements outlined in the prompt, we need to perform several steps in DuckDB SQL:

1. Identify cases with the specified sequence of activities in direct succession.
2. Filter these cases to those where the time between 'Create Order' and 'Confirm Order' is more than 5 days.
3. Exclude events from these identified cases in the final result.

Here's how you can achieve this in DuckDB:

```sql
WITH SequencedCases AS (
    SELECT
        case_id
    FROM
        event_log e1
    JOIN
        event_log e2 ON e1.case_id = e2.case_id AND e2.activity = 'Create Order' AND e2.timestamp > e1.timestamp
    JOIN
        event_log e3 ON e2.case_id = e3.case_id AND e3.activity = 'Confirm Order' AND e3.timestamp > e2.timestamp
    WHERE
        e1.activity = 'Approve Purchase Requisition'
        AND NOT EXISTS (
            SELECT 1
            FROM event_log e_between
            WHERE e_between.case_id = e1.case_id
            AND e_between.timestamp > e1.timestamp
            AND e_between.timestamp < e2.timestamp
        )
        AND NOT EXISTS (
            SELECT 1
            FROM event_log e_between
            WHERE e_between.case_id = e2.case_id
            AND e_between.timestamp > e2.timestamp
            AND e_between.timestamp < e3.timestamp
        )
        AND e3.timestamp > (e2.timestamp + INTERVAL 5 DAY)
)
SELECT
    e.*
FROM
    event_log e
WHERE
    e.case_id NOT IN (SELECT case_id FROM SequencedCases)
ORDER BY
    e.case_id, e.timestamp;
```

### Explanation:

1. **Identify Sequenced Cases**:
    - The `SequencedCases` CTE (Common Table Expression) identifies cases (`case_id`) that contain the sequence of 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' in direct succession without any other events in between.
    - We use self-joins (`e1`, `e2`, `e3`) to ensure the specified sequence and verify that no other events interfere between these activities.
    - We also check that the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.

2. **Filter Out Matched Cases**:
    - In the main query, we select all events from `event_log` except those belonging to `case_id` values identified in the `SequencedCases` CTE.
    - This ensures we exclude all events from cases that have the specified sequence and timing condition.

3. **Ordering the Results**:
    - Finally, we order the results by `case_id` and `timestamp` for better readability and potential further processing.

This query ensures that only events from cases that do not meet the specified sequence and timing criteria are returned in the final result set.