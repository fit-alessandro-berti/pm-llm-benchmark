```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Constructing the Petri net
net = PetriNet(name="Insurance Claim Management")

# Places
source = PetriNet.Place(name="Source")
claim_registration = PetriNet.Place(name="Claim Registration")
document_verification = PetriNet.Place(name="Document Verification")
fraud_check = PetriNet.Place(name="Fraud Check")
in_depth_investigation = PetriNet.Place(name="In-depth Investigation")
claim_assessment = PetriNet.Place(name="Claim Assessment")
approval = PetriNet.Place(name="Approval")
payment = PetriNet.Place(name="Payment")
notification = PetriNet.Place(name="Notification")
closure = PetriNet.Place(name="Closure")
sink = PetriNet.Place(name="Sink")

# Transitions
cr_transition = PetriNet.Transition(name="Claim Registration", label="Claim Registration")
dv_transition = PetriNet.Transition(name="Document Verification", label="Document Verification")
fc_transition = PetriNet.Transition(name="Fraud Check", label="Fraud Check")
ii_transition = PetriNet.Transition(name="In-depth Investigation", label="In-depth Investigation")
ca_transition = PetriNet.Transition(name="Claim Assessment", label="Claim Assessment")
a_transition = PetriNet.Transition(name="Approval", label="Approval")
p_transition = PetriNet.Transition(name="Payment", label="Payment")
n_transition = PetriNet.Transition(name="Notification", label="Notification")
cl_transition = PetriNet.Transition(name="Closure", label="Closure")

# Adding places and transitions to the net
net.places.add(source)
net.places.add(claim_registration)
net.places.add(document_verification)
net.places.add(fraud_check)
net.places.add(in_depth_investigation)
net.places.add(claim_assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(closure)
net.places.add(sink)

net.transitions.add(cr_transition)
net.transitions.add(dv_transition)
net.transitions.add(fc_transition)
net.transitions.add(ii_transition)
net.transitions.add(ca_transition)
net.transitions.add(a_transition)
net.transitions.add(p_transition)
net.transitions.add(n_transition)
net.transitions.add(cl_transition)

# Adding arcs
petri_utils.add_arc_from_to(source, cr_transition, net)
petri_utils.add_arc_from_to(cr_transition, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, dv_transition, net)
petri_utils.add_arc_from_to(dv_transition, document_verification, net)
petri_utils.add_arc_from_to(document_verification, dv_transition, net)  # For re-submission
petri_utils.add_arc_from_to(document_verification, fc_transition, net)
petri_utils.add_arc_from_to(fc_transition, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, fc_transition, net)  # For in-depth investigation
petri_utils.add_arc_from_to(fraud_check, ii_transition, net)
petri_utils.add_arc_from_to(ii_transition, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, ii_transition, net)  # For multiple investigations
petri_utils.add_arc_from_to(ii_transition, ca_transition, net)
petri_utils.add_arc_from_to(ca_transition, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, a_transition, net)
petri_utils.add_arc_from_to(a_transition, approval, net)
petri_utils.add_arc_from_to(approval, p_transition, net)
petri_utils.add_arc_from_to(p_transition, payment, net)
petri_utils.add_arc_from_to(payment, n_transition, net)
petri_utils.add_arc_from_to(n_transition, closure, net)
petri_utils.add_arc_from_to(closure, cl_transition, net)
petri_utils.add_arc_from_to(cl_transition, sink, net)

# Initial marking
im = Marking()
im[source] = 1  # A token representing a new claim

# Final marking
fm = Marking()
fm[sink] = 1  # A token in the sink place indicating the claim is closed

# Example of a claim journey:
# source -> Claim Registration -> Document Verification -> Fraud Check -> (multiple iterations of In-depth Investigation) -> Claim Assessment -> Approval -> Payment -> Notification -> Closure -> Sink

print("Petri net constructed for Insurance Claim Management process.")
```

This code snippet constructs a Petri net that models the insurance claim management process, including loops for re-submission of documents and multiple in-depth investigations. The initial marking and final marking define the starting and ending states of a claim's lifecycle in the system.