# Accepting Petri Net for Insurance Claim Management Process

Here's the Python code to construct the accepting Petri net for the insurance claim management process:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance Claim Management Process")

# Create places (states between activities)
start = PetriNet.Place(name="Start")
after_registration = PetriNet.Place(name="After Registration")
after_dv = PetriNet.Place(name="After Document Verification")
after_fc = PetriNet.Place(name="After Fraud Check")
after_ca = PetriNet.Place(name="After Claim Assessment")
after_approval = PetriNet.Place(name="After Approval")
after_payment = PetriNet.Place(name="After Payment")
after_notification = PetriNet.Place(name="After Notification")
end = PetriNet.Place(name="End")

# Create transitions (activities)
claim_registration = PetriNet.Transition(name="Claim Registration", label="Claim Registration (CR)")
document_verification = PetriNet.Transition(name="Document Verification", label="Document Verification (DV)")
re_document_submission = PetriNet.Transition(name="Re-Document Submission", label="Re-Document Submission (RDS)")
fraud_check = PetriNet.Transition(name="Fraud Check", label="Fraud Check (FC)")
in_depth_investigation = PetriNet.Transition(name="In-Depth Investigation", label="In-Depth Investigation (II)")
claim_assessment = PetriNet.Transition(name="Claim Assessment", label="Claim Assessment (CA)")
approval = PetriNet.Transition(name="Approval", label="Approval (AP)")
payment = PetriNet.Transition(name="Payment", label="Payment (P)")
notification = PetriNet.Transition(name="Notification", label="Notification (N)")
closure = PetriNet.Transition(name="Closure", label="Closure (CL)")

# Add places and transitions to the net
net.places.update({
    start, after_registration, after_dv, after_fc,
    after_ca, after_approval, after_payment,
    after_notification, end
})
net.transitions.update({
    claim_registration, document_verification, re_document_submission,
    fraud_check, in_depth_investigation, claim_assessment,
    approval, payment, notification, closure
})

# Add arcs to create the flow
# Main flow
petri_utils.add_arc_from_to(start, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, after_registration, net)
petri_utils.add_arc_from_to(after_registration, document_verification, net)
petri_utils.add_arc_from_to(document_verification, after_dv, net)
petri_utils.add_arc_from_to(after_dv, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, after_fc, net)
petri_utils.add_arc_from_to(after_fc, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, after_ca, net)
petri_utils.add_arc_from_to(after_ca, approval, net)
petri_utils.add_arc_from_to(approval, after_approval, net)
petri_utils.add_arc_from_to(after_approval, payment, net)
petri_utils.add_arc_from_to(payment, after_payment, net)
petri_utils.add_arc_from_to(after_payment, notification, net)
petri_utils.add_arc_from_to(notification, after_notification, net)
petri_utils.add_arc_from_to(after_notification, closure, net)
petri_utils.add_arc_from_to(closure, end, net)

# Loops for re-submission and investigation
petri_utils.add_arc_from_to(after_dv, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, after_registration, net)

petri_utils.add_arc_from_to(after_fc, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, after_fc, net)

# Define initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[end] = 1

# The Petri net is now constructed with the specified behavior
```

### Explanation:

1. **Places (States)**:
   - Represent the states between activities (e.g., "After Registration", "After Document Verification")
   - Include a start and end place for the initial and final markings

2. **Transitions (Activities)**:
   - Each activity in the process is represented as a transition
   - Transitions are labeled with the activity names (e.g., "Claim Registration (CR)")

3. **Flow**:
   - The main flow follows the sequence: Start  CR  DV  FC  CA  AP  P  N  CL  End
   - Loops are created for:
     - Document re-submission (DV  RDS  After Registration)
     - In-depth investigation (FC  II  After FC)

4. **Markings**:
   - Initial marking (im) places a token in the "Start" place
   - Final marking (fm) places a token in the "End" place

This Petri net accurately models the insurance claim management process with all specified activities and possible loops for document re-submission and in-depth investigation.