I'll construct a DuckDB SQL query that accomplishes all the requirements. Let me break this down step by step:

```sql
WITH case_sequences AS (
  -- Step 1: Create ordered sequences of activities for each case
  SELECT 
    case_id,
    STRING_AGG(activity, '->' ORDER BY timestamp) AS variant
  FROM event_log
  GROUP BY case_id
),
variant_counts AS (
  -- Step 2: Count cases per variant
  SELECT 
    variant,
    COUNT(*) AS case_count
  FROM case_sequences
  GROUP BY variant
),
top_k_variants AS (
  -- Step 3: Get top K variants by frequency
  -- Replace K with desired number (e.g., 5 for top 5 variants)
  SELECT 
    variant,
    case_count
  FROM variant_counts
  ORDER BY case_count DESC
  LIMIT 5  -- Change this to your desired K value
),
cases_in_top_variants AS (
  -- Step 4: Get all case_ids that belong to top K variants
  SELECT cs.case_id
  FROM case_sequences cs
  INNER JOIN top_k_variants tkv ON cs.variant = tkv.variant
)
-- Step 5: Return all events from cases in top K variants
SELECT 
  el.case_id,
  el.activity,
  el.timestamp
FROM event_log el
INNER JOIN cases_in_top_variants citv ON el.case_id = citv.case_id
ORDER BY el.case_id, el.timestamp;
```

Here's an alternative version that includes more information about the variants in the result:

```sql
WITH case_sequences AS (
  -- Step 1: Create ordered sequences of activities for each case
  SELECT 
    case_id,
    STRING_AGG(activity, '->' ORDER BY timestamp) AS variant
  FROM event_log
  GROUP BY case_id
),
variant_counts AS (
  -- Step 2: Count cases per variant and rank them
  SELECT 
    variant,
    COUNT(*) AS case_count,
    ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
  FROM case_sequences
  GROUP BY variant
),
top_k_variants AS (
  -- Step 3: Get top K variants by frequency
  SELECT 
    variant,
    case_count,
    variant_rank
  FROM variant_counts
  WHERE variant_rank <= 5  -- Change this to your desired K value
),
cases_with_variant_info AS (
  -- Step 4: Join cases with their variant information
  SELECT 
    cs.case_id,
    cs.variant,
    tkv.case_count,
    tkv.variant_rank
  FROM case_sequences cs
  INNER JOIN top_k_variants tkv ON cs.variant = tkv.variant
)
-- Step 5: Return all events from cases in top K variants with variant info
SELECT 
  el.case_id,
  el.activity,
  el.timestamp,
  cwvi.variant,
  cwvi.case_count AS variant_frequency,
  cwvi.variant_rank
FROM event_log el
INNER JOIN cases_with_variant_info cwvi ON el.case_id = cwvi.case_id
ORDER BY cwvi.variant_rank, el.case_id, el.timestamp;
```

**Key features of the solution:**

1. **Sequence Extraction**: Uses `STRING_AGG` with `ORDER BY` to create ordered activity sequences
2. **Variant Grouping**: Groups cases by their complete activity sequence
3. **Frequency Counting**: Counts how many cases follow each variant pattern
4. **Top K Selection**: Uses `LIMIT` or `ROW_NUMBER()` to select top K variants
5. **Event Filtering**: Returns only events from cases that match the top K variants

**To use this query:**
- Replace the `LIMIT 5` or `WHERE variant_rank <= 5` with your desired K value
- The first query returns just the filtered events
- The second query additionally includes variant information for analysis

**Example usage with K=3:**
```sql
-- To get top 3 variants, change:
LIMIT 3  -- in the first query
-- or
WHERE variant_rank <= 3  -- in the second query
```