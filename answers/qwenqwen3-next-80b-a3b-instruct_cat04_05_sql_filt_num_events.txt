Here is a DuckDB SQL query that fulfills the requirements:

```sql
SELECT el.*
FROM event_log el
INNER JOIN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
) filtered_cases ON el.case_id = filtered_cases.case_id;
```

### Explanation:

1. **Subquery (`filtered_cases`)**:
   - Groups the `event_log` table by `case_id`.
   - Uses `COUNT(*)` to count the number of events per case.
   - Filters groups using `HAVING COUNT(*) <= 6` to retain only those cases with 6 or fewer events.

2. **Main Query**:
   - Joins the original `event_log` table (`el`) with the filtered set of `case_id`s.
   - Returns **all columns** from `event_log` for only those cases that passed the filter.

### Why this works:
- The `GROUP BY` + `HAVING` ensures we correctly compute per-case event counts.
- The `INNER JOIN` ensures we only keep rows from `event_log` whose `case_id` is in the allowed set.
- This approach preserves all original event data (including `activity` and `timestamp`) for the filtered cases.

This query is efficient, readable, and fully compatible with DuckDB’s SQL dialect.