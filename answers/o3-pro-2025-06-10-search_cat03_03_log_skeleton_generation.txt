Below is a complete Log Skeleton for the “order fulfillment” scenario, expressed exactly as a Python dictionary.

```python
log_skeleton = {
    # 1.  Equivalence  the two activities always occur the same number of times
    'equivalence': {
        ('PI', 'QC'), ('QC', 'PI'),          # Every picking is quality-checked and vice-versa
        ('PO', 'GSL'), ('GSL', 'PO'),        # Every packing has a matching label and vice-versa
        ('D',  'IC'), ('IC',  'D')           # Each dispatch produces (exactly) one invoice, and an invoice implies dispatch
    },

    # 2.  Always-Before  if the first happens, the second must have happened *earlier* in the same case
    'always_before': {
        ('RI', 'CA'),   # Items can only be reserved after availability has been checked
        ('PI', 'RI'),   # Items are picked only after reservation
        ('QC', 'PI'),   # Quality check needs picked items
        ('PO', 'QC'),   # Packing only after quality check
        ('GSL', 'PO'),  # Label is generated after the order is packed
        ('D',  'GSL'),  # Dispatch after the label is ready
        ('IC', 'D'),    # Invoicing after dispatch
        ('RP', 'IC')    # Payment recorded only after an invoice exists
    },

    # 3.  Always-After  if the first happens, the second must happen *later* in the same case
    'always_after': {
        ('CA', 'RI'),   # After availability check we must reserve
        ('RI', 'PI'),   # After reservation we must pick
        ('PI', 'QC'),   # After picking we must quality-check
        ('QC', 'PO'),   # After QC we must pack
        ('PO', 'GSL'),  # After packing we must label
        ('GSL', 'D'),   # After labeling we must dispatch
        ('D',  'IC'),   # After dispatch we must invoice
        ('IC', 'RP')    # After invoicing we may (and usually will) record payment
    },

    # 4.  Never-Together  mutually exclusive activities (none in this normal flow)
    'never_together': set(),

    # 5.  Activity-Occurrence constraints (cardinality per case)
    'activ_freq': {
        'RO': {1},       # Receive Order  – exactly once
        'CA': {1},       # Check Availability – exactly once
        'RI': {1},       # Reserve Items – exactly once
        'PI': {1},       # Pick Items – exactly once
        'QC': {1},       # Quality Check – exactly once
        'PO': {1},       # Pack Order – exactly once
        'GSL': {1},      # Generate Shipping Label – exactly once
        'D':  {1},       # Dispatch – exactly once
        'IC': {1},       # Invoice Customer – exactly once
        'RP': {0, 1}     # Record Payment – optional (0 or 1 time)
    },

    # 6.  Directly-Follows constraints — the “happy-path” sequence
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D',  'IC'),
        ('IC', 'RP')
    }
}
```

This dictionary encodes:

•A single linear “happy-path” (Receive Order  …  Record Payment) via `directly_follows`,  
•Causal/temporal obligations before and after activities (`always_before`, `always_after`),  
•Pairs that must appear the same number of times in a case (`equivalence`),  
•Per-case cardinalities (`activ_freq`), and  
•No mutually exclusive steps for this simplified success scenario (`never_together`).