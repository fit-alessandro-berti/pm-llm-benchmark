Section 1 — Identify instancespanning constraints and quantify their impact

How we will use the log
- Normalize the log:
  - Map Packing stations into pools: Standard_Packing = {S1…Sn}, Cold_Packing = {C1…C5}.
  - Derive case-level attributes: express vs standard, region, hazardous, cold flag.
  - Build activity-level start/complete records with resource calendars.
- Derive readiness and waits:
  - For each case i and activity a, compute:
    - Activity duration (service time) = complete(a,i)  start(a,i).
    - Inter-activity wait = start(a,i)  complete(prev_activity,i).
  - Create “queue join” time for each activity as the time the case is first eligible to start that activity (usually previous complete time; for Shipping Label, that is QC complete).
- Reconstruct system state over time:
  - For each resource pool, compute time series of busy/idle servers and queue lengths from start/complete stamps.
  - For hazardous limit: compute the concurrent count of hazardous cases in Packing OR QC at each time t using interval overlaps.
  - For batching: from “System (Batch Bx)” resource, reconstruct batches (membership, open time, close time).
- Classify the cause of waiting per activity for each case (between- vs within-instance):
  - Within-instance: time spent executing (service time).
  - Between-instance: time waiting due to system constraints. Attribute waits by scanning the readiness-to-start interval and finding the earliest time when all constraints are simultaneously satisfied:
    1) Resource contention: all required servers busy or setup in progress.
    2) Batch gating: batch not yet closed for the order’s region/segment.
    3) Hazard cap gating: hazardous_count(PackingQC)  10 during the interval.
    4) Priority/preemption: the order is paused or its start is deferred because an express job is admitted; infer via preemption events or counterfactual replay (see below).
  - If multiple constraints overlap, allocate waiting time to the “first active blocker” until it clears, then to the next, to avoid double counting.

Metrics by constraint

A) Shared ColdPacking (limited to 5 stations)
- Coldpacking queue time: mean/median/95th percentile of wait before ColdPacking start for cold orders.
- Resource utilization: per-station and pooled utilization, with hourofday and dayofweek profiles.
- Blocking attribution: fraction of cold wait time caused by:
  - All cold stations busy (pure contention).
  - Hazard cap (if order is hazardous).
  - Priority preemptions (if any).
- Throughput vs arrivals: lagged correlation of arrivals of cold jobs with queue length.
- Cross-effect on standard stations (if conversion occurs in practice): utilization and queue time shift when operators switch standardcold.

B) Shipping batches (Label Generation)
- Batch wait time: for each order, ShippingLabel.start  QC.complete.
- Batch cycle time per region: batch_close_time  batch_open_time.
- Fill rate: orders/batch; average and variance by region/time-of-day.
- Stranded time: per order, batch_close_time  order_ready_for_batch; its distribution by region.
- Wasted expedition (express): proportion of express orders where batch wait > X minutes; indicates priority inversion due to batch gating.
- Counterfactual savings: route-cost vs time-cost—estimate hold cost of waiting vs consolidation savings.

C) Priority handling (Express preempts Standard)
- Preemption frequency: number and rate of suspensions; if not explicitly logged, infer by:
  - Start of standard at a station followed by unexpected idle gap or resource switch before complete, overlapping with an express start; or
  - Use a schedule replayer to compute a counterfactual sequence “no priority” and measure start-time deltas.
- Interruption cost: average lost time per preemption (setups/cleaning, rework).
- Impact on standard orders: incremental wait = observed wait  counterfactual wait under FIFO (from replayer).
- Express lead time gain vs standard lead time loss; ensure net SLA impact is positive.

D) Hazardous material concurrency cap (10 across Packing and QC)
- Time series of hazardous_count(t) in PackingQC; proportion of time at cap; bottleneck index.
- Hazardous gating time: total time hazardous cases ready to start Packing or QC but cannot due to cap (not resource).
- Spillover effect: additional wait for non-hazardous caused by resources occupied by hazardous that were admitted under the cap (queue competition).
- Throughput reduction estimate: compare realized hazardous starts vs arrivals; compute cap-induced throttling.

Separating within- vs between-instance causes
- For each wait interval, use the resource/batch/cap state:
  - If a free required server exists and cap is not binding and batch is open, then waiting is likely due to within-instance causes (e.g., paperwork, missing item) or operator idle; flag as “internal/other.”
  - Otherwise, classify as between-instance and attribute to the specific active constraint(s).
- Validate by sensitivity:
  - Re-simulate the same arrivals with unlimited resources/no cap/no batches to establish a “service-time-only” baseline; the delta quantifies between-instance contributions.


Section 2 — Analyze interactions between constraints

Key interactions to look for (and how to detect them)

1) Express × ColdPacking
- When an express cold order arrives, it may preempt a standard cold job. Expect:
  - Spike in preemptions and changeovers on cold stations.
  - Increase in mean residual wait for standard cold orders during high express arrival periods.
- Measure: regression of standard cold wait on concurrent express cold arrival rate and cold utilization; quantify marginal effect.

2) Batching × Hazard cap
- Regions with many hazardous orders may see longer time-to-batch-close because hazardous QC/Packing is throttled by the cap.
- Measure: rank regions by share of hazardous; compare batch cycle time and stranded time; correlate hazardous_count(t) near cap with batch close delays.

3) Priority × Batching (priority inversion)
- Expedited upstream processing can be neutralized if express orders wait at batch gate.
- Measure: for express orders, proportion of total lead time spent waiting for batch; if > threshold, consider bypass policies.

4) Hazard cap × Cold/Standard capacity
- Although the cap limits only hazardous orders, it indirectly affects non-hazardous via resource occupancy. If hazardous consumes a large share of QC/Packing capacity while at cap, standard queues grow.
- Measure: queue lengths for non-hazardous vs hazardous occupancy share.

5) Cross-shift effects
- Cap pressure and batch deadlines near shift changes can create end-of-shift spikes.
- Measure: time-of-day profiles of cap saturation and batch closings.

Understanding these interactions is crucial because single-constraint fixes (e.g., more cold stations) can fail if another constraint (e.g., hazardous cap) is dominant, or because a fix can amplify another bottleneck (e.g., more express preemptions increasing changeover losses).


Section 3 — Constraintaware optimization strategies

Strategy 1: Constraint-aware dispatching at ColdPacking with smart preemption
- Addresses: Shared ColdPacking, Priority handling, indirectly Hazard cap.
- Changes:
  - Implement a queue policy at ColdPacking: preemptive-resume allowed only if the running job’s predicted remaining time > T (e.g., 2–3 min) and the incoming job is Express. Otherwise, finish current job (“finish window”) before switching.
  - Reserve capacity dynamically: maintain one “express lane” slot only when express backlog > E (e.g., 1) or predicted arrival within W minutes; otherwise, all stations serve pooled queue.
  - Use SJF-with-priority: within each priority class, dispatch by shortest predicted processing time to minimize mean wait.
- Data/analysis leverage:
  - Predict processing time from historical features (SKU mix, lines, packaging type).
  - Predict near-term express arrivals from interarrival profiles.
  - Quantify changeover/suspension cost from past preemptions to set T.
- Expected outcomes:
  - 20–40% reduction in standard cold wait during express spikes (less thrashing).
  - Maintain express SLA with minimal additional delay.
  - Lower changeover overheads and more stable cold station utilization.

Strategy 2: SLAaware dynamic batching for Shipping Label Generation
- Addresses: Batching delays, Priority inversion.
- Changes:
  - Introduce time-based release thresholds by region: close batch when either (a) size  N or (b) max wait of any ready order  _region (shorter  for express; optionally bypass batching for express and print labels immediately).
  - Rolling/virtual batches: allow label generation and parcel induction independent of final route consolidation; let carrier manifesting happen later to preserve some routing benefits without holding labels.
  - Predictive batch sizing: choose N,  based on current arrival forecasts for that region and the time-value of delivery promises (cost of delay vs transportation savings).
- Data/analysis leverage:
  - Estimate arrival rates by region/hour; compute expected time-to-fill vs marginal routing savings.
  - Identify “wasted expedition” for express to calibrate _express (e.g., 5–10 min).
- Expected outcomes:
  - 50–80% reduction in express post-QC waits; improved OTD for express.
  - Similar or improved average lead time for standard in low-volume regions via shorter _region during off-peak.
  - Minimal transport cost increase if thresholds optimized against savings curves.

Strategy 3: Centralized Hazardous CONWIP controller across Packing and QC
- Addresses: Hazardous concurrency cap, system-wide flow coupling.
- Changes:
  - Treat the cap (10) as a global “slot” system shared by Packing and QC. A hazardous order may start Packing or QC only when a slot is available; on completion it releases the slot.
  - Prioritize slot assignment to the stage closest to shipping (e.g., QC > Packing) to reduce WIP aging and batch delays, with starvation protection for Packing.
  - Smooth releases: throttle hazardous induction when hazardous_count is near 10 and non-hazardous queues are long to prevent resource lock-out.
- Data/analysis leverage:
  - Real-time hazardous_count tracking; predictive horizon for hazardous arrivals to pre-allocate slots.
  - Evaluate different slot allocation rules in simulation (e.g., proportionally split between Packing and QC).
- Expected outcomes:
  - Compliance guaranteed with fewer cap-induced starts/stops.
  - 10–25% reduction in hazardous lead time variance; less spillover delay for non-hazardous at shared resources.
  - More predictable batch completion in hazardous-heavy regions.

Strategy 4: Flexible capacity and micro-conversions
- Addresses: ColdPacking contention; indirectly batching via faster upstream clearance.
- Changes:
  - Cross-train and equip 1–2 standard stations with quick-swap cold kits; convert during predicted cold surges (e.g., 10:00–13:00, 18:00–20:00).
  - Add a portable cold cart as overflow with slightly lower throughput but high responsiveness.
- Data/analysis leverage:
  - Peak detection from arrival patterns; conversion break-even analysis using observed cold queue curves.
- Expected outcomes:
  - 15–30% reduction in cold queue during peaks; small impact on standard packing if conversions are confined to surge windows.

Strategy 5: Release control before Packing (WIP caps by class)
- Addresses: Priority fairness, congestion spillover.
- Changes:
  - Maintain small, class-specific WIP limits in the Packing ready-queue (e.g., limit of concurrent non-express cold jobs) so queues do not balloon and cause long tails; release orders from Picking to Packing only when downstream can absorb them.
- Data/analysis leverage:
  - Use Little’s Law from baseline to set WIP caps that align with sustainable throughput.
- Expected outcomes:
  - Reduced wait variability and improved predictability; fewer preemption cascades.

Note: Strategies 1–3 together directly target all four instance-spanning constraints with minimal capital expenditure; 4–5 are complementary levers used when analysis shows capacity or WIP effects dominate.


Section 4 — Simulation and validation before rollout

Approach
- Build a discrete-event simulation (DES) model calibrated from the event log:
  - Arrivals: fit nonstationary arrival processes by hour-of-day and day-of-week per segment (express/standard, region, cold, hazardous).
  - Service times: fit distributions per activity/resource pool conditioned on features (SKU count, cold/hazard flags).
  - Resources: define pools for Standard_Packing, Cold_Packing; QC capacity; include calendars and breaks.
  - Preemption: implement preemptive-resume at Packing with setup penalties observed in the log.
  - Batching: represent batches with dual triggers (size and max-wait), membership from regions; allow express bypass if testing Strategy 2.
  - Hazard cap: enforce a global token bucket of size 10 across Packing and QC.
  - Shift/operational calendars: include end-of-shift cutoffs and changeover times.
- Validation
  - Replay baseline policy and compare KPIs to the last 3 months:
    - End-to-end lead time distribution (mean/median/95th).
    - Activity wait times by pool (especially ColdPacking).
    - Batch wait distributions by region.
    - Express vs standard OTD.
    - Hazardous_count(t) occupancy profile and percent time at cap.
  - Targets: distributions within ±10% of baseline; KS test p>0.1 for key time distributions; utilization within ±5 pp.
- Experimentation
  - Factorial design over policies:
    - Preemption threshold T  {0, 2, 4} min; express lane reservation on/off.
    - Batch _region  grid; express bypass on/off.
    - Hazard slot allocation rule: QC-priority vs equal-split; slot count (stress test).
    - Flexible capacity: 0–2 convertible cold stations during peaks.
  - Replicate runs and analyze:
    - KPIs: average and 95th percentile end-to-end time, express OTD, cold queue length, hazardous gating time, batch stranded time, transport cost proxy.
    - Constraint compliance: zero violations of hazardous cap; preemption counts; resource utilizations.
  - Choose policies that minimize express tardiness and overall cycle time subject to: (a) zero cap violations, (b) transport cost delta within budget, (c) no more than X% degradation for non-express.


Section 5 — Postimplementation monitoring with process mining

Dashboards and alerts (near real-time where possible)
- Constraint health
  - ColdPacking monitor: queue length, wait percentiles, utilization per station; preemption count and average interruption cost; alert if queue length > threshold or preemptions/hour > control limit.
  - Hazard cap monitor: live hazardous_count across PackingQC; time-at-cap; number of hazardous waiting due to cap; hard alarm at 9–10 with projected exceedance risk.
  - Batching monitor: per region—batch cycle time, fill rate, max wait in open batches, count of express in batch with wait > _express; alert on slow-to-close batches.
  - Priority fairness: standard slowdown index near express spikes (ratio of observed vs expected wait); alert if exceeds threshold.
- Flow KPIs
  - End-to-end lead time by segment (express/standard, cold/hazard); OTD; WIP.
  - Activity wait decomposition: stacked bars for between-instance causes (resource, batch, hazard cap, priority) vs within-instance (service).
  - Resource calendars: utilization and idle by hour; changeover time trend.
- Conformance checks
  - Instance-spanning rules in declarative form (e.g., MPDeclare):
    - AtMost(5) concurrent ColdPacking executions across cases.
    - AtMost(10) concurrent hazardous in {Packing, QC}.
    - If order.type = Express then (Packing.start precedes any Standard admission to ColdPacking unless preemption thresholds apply) — monitored as policy conformance KPI.
    - For batches: all members share region; batch closed by sizeN or wait. Flag violations.
- Continuous improvement hooks
  - Quarterly recalibration of _region, express bypass rules, and preemption threshold using observed distributions.
  - A/B tests surfaced in dashboards with uplift metrics (e.g., reduction of express batch wait).

Data enhancements for better attribution (recommended)
- Log queue events (QUEUE_ENTER/QUEUE_LEAVE) per activity.
- Explicit SUSPEND/RESUME events with reason (preemption, cap, batch, other).
- Batch lifecycle events (BATCH_OPEN, BATCH_CLOSE, MEMBER_ADD).
- Setup/changeover tags at packing to measure interruption costs.

Expected results (typical from similar environments)
- 20–35% reduction in cold-packing wait for standard orders during peaks; maintained express OTD  98%.
- 50–80% reduction in express waiting at shipping batches with negligible transport cost increase when thresholds are tuned.
- Zero hazardous cap violations with 10–25% lower hazardous lead-time variance.
- Overall end-to-end lead time down 10–20% and 95th percentile down more through variability reduction.

This plan combines discovery, conformance, and performance analysis to isolate between-instance causes, then uses policy, batching, and capacity levers validated via DES. The monitoring layer ensures the instance-spanning constraints remain satisfied while the system continuously adapts to demand.