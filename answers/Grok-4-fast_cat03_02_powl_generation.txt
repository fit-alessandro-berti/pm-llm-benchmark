```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define all transitions
SR = Transition(label="SR")
CS = Transition(label="CS")
DA = Transition(label="DA")
ACI = Transition(label="ACI")
BNC = Transition(label="BNC")
DR = Transition(label="D&R")
CD = Transition(label="CD")
MD = Transition(label="MD")
QA = Transition(label="QA")
SA = Transition(label="SA")
GLA = Transition(label="GLA")

# Parallel DA and ACI (no ordering edge)
po_parallel_initial = StrictPartialOrder(nodes=[DA, ACI])

# Loop: BNC followed by optional D&R
loop_config = OperatorPOWL(operator=Operator.LOOP, children=[BNC, DR])

# Exclusive choice: CD or MD
xor_deploy = OperatorPOWL(operator=Operator.XOR, children=[CD, MD])

# Partial order for QA, SA (concurrent), both before GLA
po_final = StrictPartialOrder(nodes=[QA, SA, GLA])
po_final.order.add_edge(QA, GLA)
po_final.order.add_edge(SA, GLA)

# Root partial order encompassing the entire process
root = StrictPartialOrder(nodes=[SR, CS, po_parallel_initial, loop_config, xor_deploy, po_final])

# Add ordering edges for the main flow
root.order.add_edge(SR, CS)
root.order.add_edge(CS, po_parallel_initial)
root.order.add_edge(po_parallel_initial, loop_config)
root.order.add_edge(loop_config, xor_deploy)
root.order.add_edge(xor_deploy, po_final)
```