# DuckDB SQL Query to Filter Cases with 6 Events

Here's a DuckDB SQL query that filters out cases with more than six events and returns only events from cases with six or fewer events:

```sql
WITH case_counts AS (
    -- Count events per case_id
    SELECT
        case_id,
        COUNT(*) AS event_count
    FROM
        event_log
    GROUP BY
        case_id
    HAVING
        COUNT(*) <= 6
)

-- Return all events for cases with 6 events
SELECT
    e.*
FROM
    event_log e
JOIN
    case_counts c ON e.case_id = c.case_id
ORDER BY
    e.case_id,
    e.timestamp;
```

## Alternative Version (Using Window Functions)

Here's another approach using window functions that might be more efficient for large datasets:

```sql
WITH case_event_counts AS (
    -- Calculate event count per case_id for each row
    SELECT
        *,
        COUNT(*) OVER (PARTITION BY case_id) AS case_event_count
    FROM
        event_log
)

-- Filter to only include rows from cases with 6 events
SELECT
    case_id,
    activity,
    timestamp
    -- Include any other columns from event_log here
FROM
    case_event_counts
WHERE
    case_event_count <= 6
ORDER BY
    case_id,
    timestamp;
```

Both queries will:
1. Identify cases with 6 or fewer events
2. Return all events from those cases
3. Preserve the original event order within each case (by timestamp)

The first approach uses a CTE with GROUP BY, while the second uses window functions. The window function approach might be more efficient as it only scans the table once.