Here’s a simple DuckDB SQL pattern that does exactly what you asked – it first finds all `case_id`s with at most 6 events, and then returns every row from those “small” cases:

```sql
WITH case_counts AS (
  SELECT
    case_id,
    COUNT(*) AS event_cnt
  FROM event_log
  GROUP BY case_id
  HAVING COUNT(*) <= 6
)
SELECT
  e.case_id,
  e.activity,
  e.timestamp
FROM event_log AS e
JOIN case_counts AS c
  ON e.case_id = c.case_id
ORDER BY
  e.case_id,
  e.timestamp;
```

Explanation:
1. **CTE (`case_counts`)**  
   - Groups by `case_id` and counts events.  
   - Keeps only those groups with `COUNT(*) <= 6`.  
2. **Main query**  
   - Joins the original `event_log` back to the filtered `case_counts` on `case_id`.  
   - Returns all columns (or a subset—you can add/remove columns as needed) for cases with six or fewer events.  
3. **Ordering** (optional)  
   - Sorts by `case_id`, then `timestamp`, so you see each case’s events in chronological order.

---

Alternatively, you can do it in one shot with a windowfunction approach:

```sql
SELECT
  case_id,
  activity,
  timestamp
FROM (
  SELECT
    *,
    COUNT(*) OVER (PARTITION BY case_id) AS event_cnt
  FROM event_log
) sub
WHERE event_cnt <= 6
ORDER BY case_id, timestamp;
```

Both will give you exactly the set of events belonging only to cases of size six or smaller.