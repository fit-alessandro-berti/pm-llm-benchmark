<think>
Okay, let's tackle this problem. So, the user wants a Python dictionary representing a DECLARE model based on the product design and launch process described. The DECLARE model has specific keys like existence, absence, exactly_one, etc., and each of those keys has a dictionary of activities with support and confidence values. 

First, I need to recall what each DECLARE constraint means. The keys are divided into two groups. The first group includes existence, absence, exactly_one, and init. These probably relate to individual activities. For example, existence might mean that an activity must occur at least once. The second group has relations between activities, like response (if A occurs, then B must occur after), precedence (if A occurs, B must occur before), etc.

So, the task is to model the given process steps into these constraints. Let's list the activities again:

IG, DD, TFC, CE, PC, LT, UT, AG, MP, FL.

Now, I need to think about the logical flow of these steps to determine which constraints apply. Let's go step by step.

Starting with Idea Generation (IG). Since it's the first step, maybe it must exist (existence) and be the initial activity (init). So, in 'existence', IG would have 1.0 support and high confidence, same for 'init'.

Then, after IG comes DD. So, maybe DD must exist after IG. Wait, but DECLARE constraints are about relationships. For example, response: if IG happens, then DD must happen. But maybe not. Or maybe precedence: DD must precede IG? No, wait, precedence is that if B occurs, then A must have occurred before. Hmm, maybe need to think of the order.

The process steps are sequential. So, IG is followed by DD, then TFC, CE, PC, then LT and UT (maybe in parallel?), then AG, then MP, then FL.

But DECLARE constraints are more about the constraints that must hold in the process. Let's consider each constraint type.

Starting with the first group keys:

existence: Each activity must exist in the trace. But in reality, maybe some steps might not be required? Or perhaps in the scenario, all activities must be present. But the problem says "construct a DECLARE model", so we need to model the correct constraints.

But the example might assume that all activities must exist except maybe some conditional steps. However, in the scenario description, each product idea goes through all steps. So perhaps each activity must exist once. So 'existence' for all activities with confidence 1.0? Or maybe 'exactly_one' since they should occur exactly once?

Wait, the 'existence' key's value is the number of times the activity must occur. But according to the user's description, the value for 'existence' is the support and confidence. Wait, the user says:

"For the keys {'existence', 'absence', 'exactly_one', 'init'}, the value is a dictionary containing as keys the activities and as corresponding value the support (1.0) and confidence of the declarative rule."

Wait, that's confusing. So for example, 'existence' would have a dictionary where each activity has a support and confidence. But what does existence mean here? In DECLARE, existence constraints specify that an activity must occur at least a certain number of times. But according to the user's explanation, perhaps each of these keys (like existence) has a dictionary where each activity has support and confidence. So perhaps 'existence' here is a constraint that the activity must exist, with the support and confidence values. But how do we model the process steps into these constraints?

Alternatively, perhaps the model is generated from event logs using PM4Py, and these support and confidence values are statistical measures. However, in this scenario, since we don't have event logs, we need to assume that all steps are mandatory and follow a specific order, leading to all support and confidence values being 1.0.

So maybe for each activity, we have:

existence: all activities must exist (support and confidence 1.0)
absence: none, unless some activities must not exist. Probably not.
exactly_one: each activity occurs exactly once (so existence and exactly_one for each)
init: the first activity IG must be the initial one.

Similarly, for the relations:

responded_existence between IG and DD: if IG occurs, then DD must occur. But since all are required, this would be 1.0. But in DECLARE, responded existence is a bidirectional relationship? Or unidirectional?

Wait, perhaps I need to recall DECLARE templates. Let me think:

- existence: activity must occur at least once.
- absence: activity must not occur.
- exactly_one: exactly one occurrence.
- init: activity must be the first in the trace.
- responded existence: if A occurs, then B occurs (and vice versa?), or one way?
Actually, according to DECLARE documentation:
- Responded Existence: if A occurs, then B must occur (and vice versa? Or not). Wait, no, I think Responded Existence (A  B), meaning that if A occurs, eventually B occurs. But the other way around? Or is it a mutual constraint? Maybe not. For example, responded existence could be uni-directional. But in some references, it's a bidirectional relation (if A occurs, then B must also occur, and vice versa). Hmm, this might complicate things. Alternatively, perhaps in this scenario, since the process is structured, we can model precedence and response constraints.

For example, DD must be preceded by IG, which would be a precedence constraint (DD -> IG must occur before). Or response: if IG occurs, then DD must occur after.

But given the scenario is a structured process, perhaps all activities are sequential. But some steps could be parallel. For example, after PC (prototype creation), there might be both Laboratory Testing and User Testing. So LT and UT could be done in parallel, which would be modeled with coexistence or other constraints.

But the DECLARE model requires specifying constraints that must hold, not the entire process. So for example:

- IG must be followed by DD (chain precedence or response)
- After IG, DD must happen (response)
- DD must be preceded by IG (precedence)
- TFC must follow DD (response or precedence)
- CE might be done in parallel with TFC? Or sequentially? The scenario says "the series of steps", implying sequential. So after DD, both TFC and CE? Or DD leads to TFC and CE? The description says "Engineers verify... Finance teams estimate...", perhaps in parallel. Hmm, the original scenario says "series of steps", but maybe some parallelism. The problem statement might not specify, so perhaps assume sequential.

Alternatively, the process is structured as:

IG  DD  TFC  CE  PC  (LT and UT)  AG  MP  FL

But LT and UT could be done in parallel. Then, coexistence would apply (if one occurs, the other must also occur). Also, AG must wait until both LT and UT are done, so AG would require both LT and UT to have occurred. That would involve response constraints from LT and UT to AG, and perhaps precedence.

But this is getting complicated. Let's try to model the DECLARE constraints step by step.

First, for the first group:

existence: All activities must exist. So each activity has a support and confidence of 1.0.

exactly_one: Each activity occurs exactly once, so same.

init: IG is the first activity.

absence: Probably no absence constraints unless some activities must not occur, which doesn't seem the case here.

Now, the second group. Let's consider the relationships:

Response: If A occurs, then B must occur after. So for sequential steps:

IG  DD: Response (if IG happens, DD must happen after)

DD  TFC: Response

TFC  CE: Wait, no. Maybe after DD, comes both TFC and CE. Or is it DD followed by TFC and CE in sequence? The problem says "series of steps", so maybe:

IG  DD  TFC  CE  PC  ... etc. But perhaps DD leads to both TFC and CE in parallel. The problem statement isn't explicit. Hmm.

Assuming that after DD, comes TFC and CE in sequence: DD  TFC  CE  PC. Then:

Response constraints between IG to DD, DD to TFC, TFC to CE, CE to PC, PC to LT, LT to UT, UT to AG, AG to MP, MP to FL. But that might not capture the actual flow. Alternatively, perhaps LT and UT are parallel after PC. Then:

After PC, both LT and UT must happen, so:

PC  LT and PC  UT. Then, AG must come after both LT and UT.

In that case:

Response from PC to LT and UT.

Then, precedence from AG to LT and UT (AG can't happen until LT and UT happen). Or succession constraints.

But DECLARE has 'succession' which combines precedence and response: A must be followed by B, and B must come after A, with no occurrences of A after B.

Alternatively, 'altsuccession' which allows multiple instances but maintains the order.

But since each activity occurs exactly once, perhaps 'succession' would be appropriate.

But this is getting quite involved. Let's try to outline:

- IG must be followed by DD (response, chainresponse, etc.)
- DD must be preceded by IG (precedence)
- TFC must be preceded by DD (precedence)
- CE must be preceded by TFC (if sequential) or maybe parallel with CE?

Alternatively, after DD, both TFC and CE occur. So:

DD must be followed by both TFC and CE, which could be in any order or parallel. If they can be in any order, then coexistence constraints. For example, TFC and CE must both exist (covered by existence), and responded existence between TFC and CE.

But coexistence means that if one occurs, the other must also occur.

Assuming TFC and CE are both required after DD, then responded existence between DD and TFC, DD and CE, but that might not be the right constraint.

Alternatively, response: if DD occurs, then TFC must occur, and similarly for CE. But how do they get ordered?

Alternatively, precedence constraints: TFC must be preceded by DD, CE must be preceded by DD.

So each of TFC and CE would have a precedence constraint with DD.

Similarly, PC must be preceded by both TFC and CE. So, AG must be preceded by LT and UT.

This approach would require multiple constraints for each dependency.

This could take a while. Let's try to list all required constraints:

1. IG must be the first activity (init: IG)
2. All activities must occur exactly once (existence and exactly_one)
3. DD must follow IG (response IG  DD, precedence DD  IG)
4. TFC must follow DD (response DD  TFC, precedence TFC  DD)
5. CE must follow DD (if done in parallel with TFC, then response DD  CE, precedence CE  DD)
6. PC must follow both TFC and CE. So TFC must precede PC, CE must precede PC.
7. After PC, LT and UT happen. So response PC  LT, PC  UT. Also, LT and UT must coexist (if one occurs, the other does)
8. AG must follow both LT and UT. So response LT  AG, response UT  AG. Also, LT and UT must precede AG.
9. MP must follow AG (response AG  MP)
10. FL follows MP (response MP  FL)
11. Also, succession constraints may apply where each step must be followed by the next.

Additionally, absence of certain relations, but since all activities exist, maybe not.

But considering DECLARE templates:

For each pair A and B:

- response: if A happens, then eventually B happens
- precedence: if B happens, then A must have happened before
- succession: A must be followed by B and B must be preceded by A (so whenever A happens, B must happen after, and whenever B happens, A must have happened before)

So succession combines both response and precedence.

In a structured process, succession constraints might be better to model the order.

But in this case, assuming all activities must happen exactly once in order, except possible parallel steps.

But perhaps LT and UT are done in parallel after PC. So:

After DD, both CE and TFC are required. But which comes first? If they can be in any order, then perhaps:

- CE and TFC must coexist (if one happens, the other does)
- CE must be preceded by DD and DD must precede CE
- TFC must be preceded by DD and DD must precede TFC
- But CE and TFC can be in any order. So precedence constraints for CE and TFC would be DD, but they can come in any order.

In DECLARE, this could be modeled with succession between DD and CE, DD and TFC, and then succession between CE and TFC (but not sure).

This is getting quite complex. Maybe to simplify, given that this is a hypothetical scenario and we're to model it as a DECLARE model, we can assume that:

- All activities must exist exactly once (existence and exactly_one constraints)
- IG is the first activity (init)
- Each subsequent activity must follow its predecessor in sequence. So, for example:
   - IG must be followed by DD (response, precedence, or succession)
   - DD must be followed by TFC (but wait, earlier assumption might be DD followed by TFC and CE)

Alternatively, maybe the steps are strictly sequential: IG  DD  TFC  CE  PC  LT  UT  AG  MP  FL. In that case, each activity is followed by the next in the chain. Then:

- Response constraints between each consecutive pair
- Chainresponse (immediate next) if needed
- Succession constraints

But the problem states "series of steps", which could be sequential. Let's proceed under this assumption to simplify.

So:

IG  DD  TFC  CE  PC  LT  UT  AG  MP  FL

Then:

For each consecutive pair (A, B), we can have a response constraint (A responds to existence of B?), wait, response is if A occurs, then B must occur after. Or wait, DECLARE's response constraint between A and B means that after A happens, eventually B must happen.

In the sequential process, whenever A happens, B must happen after. So for each consecutive pair:

response: IG  DD

response: DD  TFC

and so on.

But in DECLARE, to model a strict sequence, chainresponse (immediate successor) would be needed. However, the question might accept just response constraints.

But the problem says to create a DECLARE model, which could include multiple types of constraints.

Alternatively, using succession constraints (A must be followed by B and vice versa) for consecutive steps. For example, IG and DD must succeed each other, meaning whenever IG happens, DD must happen after, and whenever DD happens, IG must happen before.

This would enforce the sequence IG followed by DD.

But since each activity occurs exactly once, perhaps succession constraints between consecutive activities.

But how to model this.

Alternatively, chainprecedence constraints between each consecutive pair. Chain precedence would imply that if B occurs, then A must directly precede it.

But I'm not certain. Let's think of the DECLARE templates:

- Chain Precedence: If activity B exists, then activity A must be directly before B in the trace.
- Chain Response: If activity A exists, then B must be directly after A.

To enforce a strict sequence IG  DD, we'd need both chainresponse (IG requires DD to come immediately after) and chainprecedence (DD must be immediately preceded by IG). But since there could be multiple traces, but in our scenario all traces follow the same path, this would make sense.

But this approach would require many constraints. However, given that the support and confidence are all 1.0, it's acceptable.

But considering the complexity, perhaps the problem expects a basic model where:

- All activities must exist (existence with 1.0)
- Each exactly once (exactly_one)
- IG is init
- Response constraints between each consecutive activity pair
- Coexistence between some pairs if there's parallelism, but assuming sequential, no.

Assuming the process is strictly sequential:

DECLARE model keys:

existence: all activities have {'support': 1.0, 'confidence': 1.0}

exactly_one: same

init: IG has the same.

For the other constraints:

response between each consecutive pair.

For example:

'response': {
    'IG': {'support': 1.0, 'confidence': 1.0},
    'DD': ...,
    ... and so on? No, wait.

Wait, no. The keys for the second group are the relations. Each such key maps to a dictionary where the keys are the activity pairs. Wait, the user's description may have a mistake here.

Wait, the user wrote:

"For the keys {'responded_existence', ...}, the value is a dictionary containing as keys the activities and as corresponding value the support (1.0) and confidence of the declarative rule."

Wait, this seems odd. For example, the 'response' constraint relates two activities. So how is this represented? The key in the 'response' dictionary should be a tuple or a combination of two activities. However, according to the user's explanation, the keys are the activities. This suggests that perhaps the user made a mistake, or maybe the structure is different.

Wait, this is a critical point. The user says:

For the first group keys, the value is a dict with activities as keys.

For the second group keys, the value is a dict with activities as keys. That doesn't make sense for binary constraints like response or precedence. Unless each entry in the dict for a binary constraint is like 'A+B' or something.

But according to the initial prompt:

"A DECLARE model in pm4py is expressed as a Python dictionary containing the following keys: existence, absence, ... nonchainsuccession.

For the keys {'existence', 'absence', 'exactly_one', 'init'}, the value is a dictionary containing as keys the activities and as corresponding value the support (1.0) and confidence of the declarative rule.

For the keys {'responded_existence', ... }, the value is a dictionary containing as keys the activities and as corresponding value the support (1.0) and confidence of the declarative rule."

This suggests that for binary constraints, the keys in their respective dictionaries are individual activities. This seems incorrect. For example, a 'response' constraint between A and B would be represented by having some entry under 'response' with key A or B?

This is confusing. Perhaps there's a misunderstanding in the prompt. Maybe for the second group, the keys in their dictionaries are tuples of two activities. But the user's prompt says "the activities" as keys. Maybe this is an error.

But given the prompt's explicit instruction, I must follow it. So each key in the DECLARE dictionary has as its value a dictionary where the keys are activities, and each value is a dict with 'support' and 'confidence'. So for binary constraints like 'response', how is this represented? This seems incorrect, as a constraint like response is between two activities.

This suggests that perhaps the user made a mistake in the prompt description. Alternatively, maybe the 'keys' for the second group are pairs of activities, but the user's wording is unclear.

But since the user explicitly says that for the second group keys, the value is a dictionary with activities as keys, perhaps each constraint applies to each activity individually, which doesn't make sense. There's likely a mistake here, but I have to proceed with the given structure.

Alternatively, perhaps the 'activities' in the second group's dictionaries are actually pairs of activities represented as strings, e.g., 'IG+DD' for a relation between IG and DD.

But the user's prompt says "containing as keys the activities", implying single activities. This is a problem. Without knowing the actual structure of the DECLARE model in PM4Py, I might be stuck.

Wait, checking PM4Py documentation: In PM4Py, DECLARE models are represented with each constraint having parameters. For example, an Existence constraint on activity 'A' would be one entry. A Response constraint between A and B would be another entry with parameters indicating A and B.

Therefore, the correct structure should have for each constraint type (like response), a dictionary where the keys are tuples (or some representation) of the linked activities. But according to the user's prompt, the keys are activities. This is conflicting.

Given this confusion, perhaps the user intended that for unary constraints (existence, etc.), the dict keys are activities, and for binary constraints (response, etc.), the keys are pairs of activities. But the prompt's wording doesn't clarify this.

Assuming that for the second group of keys, each dictionary's keys are tuples of two activities (but represented as strings in the example), then the structure would make sense. But given the user's description, I must proceed with their wording, which seems incorrect.

This is a major hurdle. Given the prompt's wording, perhaps the user made a mistake. But given that the task is to proceed, I'll make the following assumptions:

For the DECLARE constraints in pm4py:

- The keys like 'existence' have dictionaries where each key is an activity, representing a unary constraint on that activity.
- The keys like 'response' have dictionaries where each key is a pair of activities (e.g., a tuple ('A', 'B')), but represented in some way. However, according to the user's prompt, the keys are 'activities', which doesn't fit. Therefore, perhaps the prompt is incorrect and the second group's dictionaries have pairs of activities as keys.

But the user's instruction says: "the value is a dictionary containing as keys the activities". Maybe plural, so keys are combinations of activities. Not sure.

Given the ambiguity, I'll proceed with the following approach:

- For unary constraints (existence, etc.), each activity has an entry.
- For binary constraints, each key in the dictionary is a tuple of two activities (A, B) representing the constraint from A to B. However, the user's prompt says the keys are 'activities', so maybe each constraint in the second group is per activity, implying outgoing or incoming relations.

Alternatively, perhaps the prompt is incorrect and the second group's dictionaries have activity pairs as keys. Proceeding with that assumption.

Now, back to the problem.

Constructing the DECLARE model:

First group:

existence: All activities must exist. So each activity has {'support': 1.0, 'confidence': 1.0}

exactly_one: Same, each occurs exactly once.

absence: None, empty dict.

init: {'IG': {'support': 1.0, 'confidence': 1.0}} since IG is the first.

Second group:

Assuming that the keys in their dictionaries are tuples of two activities (A, B), each entry representing a constraint between them.

For the sequential steps IG  DD, DD  TFC, TFC  CE, CE  PC, PC  LT, LT  UT, UT  AG, AG  MP, MP  FL.

But if LT and UT are parallel after PC, then PC must be followed by both LT and UT. Also, AG must come after both LT and UT.

Assuming strictly sequential:

Then:

Response constraints between consecutive pairs.

So:

response: (IG, DD), (DD, TFC), (TFC, CE), (CE, PC), (PC, LT), (LT, UT), (UT, AG), (AG, MP), (MP, FL)

Precedence constraints would be similar if using succession.

But DECLARE's succession combines precedence and response.

Alternatively, using succession for each pair.

But the problem says to create the dictionary, not to mine it from logs, so we can assume all constraints are fully supported.

Given the complexity, perhaps the answer should include:

- existence for all activities
- exactly_one for all
- init IG
- response for each consecutive pair
- coexistence between LT and UT if they are parallel.

But given the uncertainty, perhaps proceed with the simplest version assuming sequential steps.

Now, structuring the Python dictionary:

DECLARE_model = {
    'existence': {
        'IG': {'support': 1.0, 'confidence': 1.0},
        'DD': {'support': 1.0, 'confidence': 1.0},
        # ... all other activities
    },
    'exactly_one': same entries,
    'init': {'IG': ...},
    'response': {
        ('IG', 'DD'): {'support': 1.0, 'confidence': 1.0},
        # etc. for each consecutive activity pair
    },
    # and similarly for other constraints as needed
}

But according to the user's prompt, the keys in the second group's dictionaries are 'activities', which doesn't fit pairs. This is the crux.

Alternative idea: Maybe the user made a mistake and in the second group, the keys are pairs of activities represented as strings like 'IG,DD'.

But given the prompt's wording, I'm stuck. Perhaps the user intended that for binary constraints, the keys are the target activity, and the constraint applies from some other activity. Not sure.

Alternatively, perhaps the prompt's description is incorrect, and the actual PM4Py DECLARE model uses tuples. Given that, I'll proceed to model the DECLARE constraints with the second group's dictionaries having pairs of activities as keys, even if the user's prompt says 'activities' as keys. Because otherwise, it's impossible to model binary constraints.

But the user explicitly wrote:

"For the keys {'responded_existence', 'coexistence', 'response', 'precedence', 'succession', 'altresponse', 'altprecedence', 'altsuccession', 'chainresponse', 'chainprecedence', 'chainsuccession', 'noncoexistence', 'nonsuccession', 'nonchainsuccession'}, the value is a dictionary containing as keys the activities and as corresponding value the support (1.0) and confidence of the declarative rule."

This suggests that even binary constraints are keyed by single activities, which doesn't make sense. Maybe the key is the source activity and the value is a dict with target activities. But no, the user says "the activities" as keys.

This is a major issue. Without clarification, I'll proceed with the following assumption:

The prompt contains an error. For the second group of constraints (binary), the dictionary keys are tuples of two activities (as strings), representing the constraint between them. For example, response has key ('IG', 'DD'), and the value is support/confidence.

Given that, the answer can be constructed. Otherwise, if the keys are single activities, it's impossible to model binary relations.

Proceeding under that assumption despite the prompt's wording.

So, the final answer would have:

DECLARE_model = {
    'existence': {
        'IG': {'support': 1.0, 'confidence': 1.0},
        'DD': {'support': 1.0, 'confidence': 1.0},
        # ... same for all 10 activities
    },
    'absence': {
        # no entries
    },
    'exactly_one': {
        'IG': {'support': 1.0, 'confidence': 1.0},
        # ... all others
    },
    'init': {
        'IG': {'support': 1.0, 'confidence': 1.0},
    },
    'responded_existence': {
        # if IG exists, DD exists and vice versa? Or pairs
        # assuming all activities must be present, responded existence between consecutive pairs?
        # Not sure. Maybe not needed if using existence.
    },
    'response': {
        ('IG', 'DD'): {'support': 1.0, 'confidence': 1.0},
        ('DD', 'TFC'): {'support': 1.0, 'confidence': 1.0},
        ('TFC', 'CE'): {'support': 1.0, 'confidence': 1.0},
        ('CE', 'PC'): {'support': 1.0, 'confidence': 1.0},
        ('PC', 'LT'): {'support': 1.0, 'confidence': 1.0},
        ('LT', 'UT'): {'support': 1.0, 'confidence': 1.0},
        ('UT', 'AG'): {'support': 1.0, 'confidence': 1.0},
        ('AG', 'MP'): {'support': 1.0, 'confidence': 1.0},
        ('MP', 'FL'): {'support': 1.0, 'confidence': 1.0},
    },
    'precedence': {},
    # and so on. But this may vary.
}

But this is speculative. Given time constraints, I'll proceed to draft the Python dictionary assuming that unary constraints are keyed by individual activities and binary constraints are keyed by tuples of two activities. Even though the prompt's wording conflicts, this is the only logical way DECLARE can work.

But the user's example might have expected a different structure. Given that, perhaps the answer should include:

- existence, exactly_one, init with all activities.
- response, precedence, etc., for consecutive pairs.
- coexistence between LT and UT if parallel.

But given time, I'll proceed to write the code with these assumptions.
</think>

```python
DECLARE_model = {
    'existence': {
        'IG': {'support': 1.0, 'confidence': 1.0},
        'DD': {'support': 1.0, 'confidence': 1.0},
        'TFC': {'support': 1.0, 'confidence': 1.0},
        'CE': {'support': 1.0, 'confidence': 1.0},
        'PC': {'support': 1.0, 'confidence': 1.0},
        'LT': {'support': 1.0, 'confidence': 1.0},
        'UT': {'support': 1.0, 'confidence': 1.0},
        'AG': {'support': 1.0, 'confidence': 1.0},
        'MP': {'support': 1.0, 'confidence': 1.0},
        'FL': {'support': 1.0, 'confidence': 1.0}
    },
    'absence': {},
    'exactly_one': {
        'IG': {'support': 1.0, 'confidence': 1.0},
        'DD': {'support': 1.0, 'confidence': 1.0},
        'TFC': {'support': 1.0, 'confidence': 1.0},
        'CE': {'support': 1.0, 'confidence': 1.0},
        'PC': {'support': 1.0, 'confidence': 1.0},
        'LT': {'support': 1.0, 'confidence': 1.0},
        'UT': {'support': 1.0, 'confidence': 1.0},
        'AG': {'support': 1.0, 'confidence': 1.0},
        'MP': {'support': 1.0, 'confidence': 1.0},
        'FL': {'support': 1.0, 'confidence': 1.0}
    },
    'init': {
        'IG': {'support': 1.0, 'confidence': 1.0}
    },
    'responded_existence': {
        ('IG', 'DD'): {'support': 1.0, 'confidence': 1.0},
        ('DD', 'TFC'): {'support': 1.0, 'confidence': 1.0},
        ('TFC', 'CE'): {'support': 1.0, 'confidence': 1.0},
        ('CE', 'PC'): {'support': 1.0, 'confidence': 1.0},
        ('PC', 'LT'): {'support': 1.0, 'confidence': 1.0},
        ('PC', 'UT'): {'support': 1.0, 'confidence': 1.0},
        ('LT', 'AG'): {'support': 1.0, 'confidence': 1.0},
        ('UT', 'AG'): {'support': 1.0, 'confidence': 1.0},
        ('AG', 'MP'): {'support': 1.0, 'confidence': 1.0},
        ('MP', 'FL'): {'support': 1.0, 'confidence': 1.0}
    },
    'coexistence': {
        ('LT', 'UT'): {'support': 1.0, 'confidence': 1.0}
    },
    'response': {
        ('IG', 'DD'): {'support': 1.0, 'confidence': 1.0},
        ('DD', 'TFC'): {'support': 1.0, 'confidence': 1.0},
        ('TFC', 'CE'): {'support': 1.0, 'confidence': 1.0},
        ('CE', 'PC'): {'support': 1.0, 'confidence': 1.0},
        ('PC', 'LT'): {'support': 1.0, 'confidence': 1.0},
        ('PC', 'UT'): {'support': 1.0, 'confidence': 1.0},
        ('LT', 'AG'): {'support': 1.0, 'confidence': 1.0},
        ('UT', 'AG'): {'support': 1.0, 'confidence': 1.0},
        ('AG', 'MP'): {'support': 1.0, 'confidence': 1.0},
        ('MP', 'FL'): {'support': 1.0, 'confidence': 1.0}
    },
    'precedence': {
        ('DD', 'IG'): {'support': 1.0, 'confidence': 1.0},
        ('TFC', 'DD'): {'support': 1.0, 'confidence': 1.0},
        ('CE', 'TFC'): {'support': 1.0, 'confidence': 1.0},
        ('PC', 'CE'): {'support': 1.0, 'confidence': 1.0},
        ('LT', 'PC'): {'support': 1.0, 'confidence': 1.0},
        ('UT', 'PC'): {'support': 1.0, 'confidence': 1.0},
        ('AG', 'LT'): {'support': 1.0, 'confidence': 1.0},
        ('AG', 'UT'): {'support': 1.0, 'confidence': 1.0},
        ('MP', 'AG'): {'support': 1.0, 'confidence': 1.0},
        ('FL', 'MP'): {'support': 1.0, 'confidence': 1.0}
    },
    'succession': {
        ('IG', 'DD'): {'support': 1.0, 'confidence': 1.0},
        ('DD', 'TFC'): {'support': 1.0, 'confidence': 1.0},
        ('TFC', 'CE'): {'support': 1.0, 'confidence': 1.0},
        ('CE', 'PC'): {'support': 1.0, 'confidence': 1.0},
        ('PC', 'LT'): {'support': 1.0, 'confidence': 1.0},
        ('PC', 'UT'): {'support': 1.0, 'confidence': 1.0},
        ('LT', 'AG'): {'support': 1.0, 'confidence': 1.0},
        ('UT', 'AG'): {'support': 1.0, 'confidence': 1.0},
        ('AG', 'MP'): {'support': 1.0, 'confidence': 1.0},
        ('MP', 'FL'): {'support': 1.0, 'confidence': 1.0}
    },
    'altsuccession': {},
    'chainresponse': {},
    'chainprecedence': {},
    'chainsuccession': {},
    'noncoexistence': {},
    'nonsuccession': {},
    'nonchainsuccession': {}
}
```