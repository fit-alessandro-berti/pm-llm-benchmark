Sure! Below is the Python code to construct an accepting Petri net for the insurance claim management process using `pm4py`. This implementation follows the described workflow, including loops for re-document submission and in-depth investigation.

---

### **Petri Net Construction:**
- **Places** represent states between activities.
- **Transitions** represent activities in the process.
- **Arcs** define the logical flow.
- **Initial Marking** places a token in `p_start`, representing a new claim.
- **Final Marking** places a token in `p_closed`, representing a closed claim.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri Net
net = PetriNet(name="Insurance Claim Process")

# Places (states)
p_start = PetriNet.Place("p_start")  # Initial state
p_cr = PetriNet.Place("p_cr")        # After Claim Registration
p_dv = PetriNet.Place("p_dv")        # After Document Verification
p_rds = PetriNet.Place("p_rds")      # After Re-Document Submission
p_fc = PetriNet.Place("p_fc")        # After Fraud Check
p_ii = PetriNet.Place("p_ii")        # After In-depth Investigation
p_ca = PetriNet.Place("p_ca")        # After Claim Assessment
p_ap = PetriNet.Place("p_ap")        # After Approval (if needed)
p_p = PetriNet.Place("p_p")          # After Payment
p_n = PetriNet.Place("p_n")          # After Notification
p_closed = PetriNet.Place("p_closed")  # Final state

# Add places to the net
net.places.update({p_start, p_cr, p_dv, p_rds, p_fc, p_ii, p_ca, p_ap, p_p, p_n, p_closed})

# Transitions (activities)
t_cr = PetriNet.Transition("t_cr", "Claim Registration (CR)")
t_dv = PetriNet.Transition("t_dv", "Document Verification (DV)")
t_rds = PetriNet.Transition("t_rds", "Re-Document Submission (RDS)")
t_fc = PetriNet.Transition("t_fc", "Fraud Check (FC)")
t_ii = PetriNet.Transition("t_ii", "In-depth Investigation (II)")
t_ca = PetriNet.Transition("t_ca", "Claim Assessment (CA)")
t_ap = PetriNet.Transition("t_ap", "Approval (AP)")
t_p = PetriNet.Transition("t_p", "Payment (P)")
t_n = PetriNet.Transition("t_n", "Notification (N)")
t_cl = PetriNet.Transition("t_cl", "Closure (CL)")

# Add transitions to the net
net.transitions.update({t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_p, t_n, t_cl})

# Arcs (workflow connections)
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_cr, net)
petri_utils.add_arc_from_to(p_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv, net)

# Re-Document Submission loop
petri_utils.add_arc_from_to(p_dv, t_rds, net)  # Incomplete documents
petri_utils.add_arc_from_to(t_rds, p_rds, net)
petri_utils.add_arc_from_to(p_rds, t_dv, net)  # Retry Document Verification

# Fraud Check
petri_utils.add_arc_from_to(p_dv, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc, net)

# In-depth Investigation loop
petri_utils.add_arc_from_to(p_fc, t_ii, net)  # Doubtful claim
petri_utils.add_arc_from_to(t_ii, p_ii, net)
petri_utils.add_arc_from_to(p_ii, t_fc, net)  # Retry Fraud Check

# Proceed to Claim Assessment
petri_utils.add_arc_from_to(p_fc, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_ca, net)

# Approval if required
petri_utils.add_arc_from_to(p_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ap, net)

# Payment
petri_utils.add_arc_from_to(p_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, p_p, net)

# Notification
petri_utils.add_arc_from_to(p_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_n, net)

# Closure
petri_utils.add_arc_from_to(p_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_closed, net)

# Initial and Final Markings
im = Marking()
im[p_start] = 1  # Start with a new claim

fm = Marking()
fm[p_closed] = 1  # Process ends when the claim is closed
```

---

### **Explanation of the Model:**
- **Start:** A new claim starts at `p_start`.
- **Claim Registration:** Moves from `p_start` to `p_cr` via `t_cr`.
- **Document Verification:** Moves from `p_cr` to `p_dv` via `t_dv`.
- **Re-Document Submission Loop:** If documents are incomplete, the process loops from `p_dv` â†’ `t_rds` â†’ `p_rds` â†’ `t_dv` â†’ `p_dv`.
- **Fraud Check:** Moves from `p_dv` to `p_fc` via `t_fc`.
- **In-depth Investigation Loop:** If fraud is suspected, the process loops from `p_fc` â†’ `t_ii` â†’ `p_ii` â†’ `t_fc` â†’ `p_fc`.
- **Claim Assessment:** Moves from `p_fc` to `p_ca` via `t_ca`.
- **Approval (if required):** Moves from `p_ca` to `p_ap` via `t_ap`.
- **Payment:** Moves from `p_ap` to `p_p` via `t_p`.
- **Notification:** Moves from `p_p` to `p_n` via `t_n`.
- **Closure:** Moves from `p_n` to `p_closed` via `t_cl`.

---

### **Final Thoughts:**
- This Petri net model properly represents the given insurance claim process, including loops for document re-submission and fraud investigation.
- The `im` and `fm` correctly define the initial and final states.
- The logical flow ensures that all claims follow a structured and controlled process before closure.

This should work well with `pm4py` for process mining and further analysis. ðŸš€