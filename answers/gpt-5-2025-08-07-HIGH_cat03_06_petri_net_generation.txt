```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create Petri net
net = PetriNet("insurance_claim_process")

# Places (states)
start = PetriNet.Place("p_start")
p_after_C = PetriNet.Place("p_after_C")
p_before_DV = PetriNet.Place("p_before_DV")
p_ready_for_FC = PetriNet.Place("p_ready_for_FC")  # after DV; ready for FC or RDS
p_after_FC = PetriNet.Place("p_after_FC")
p_after_CA = PetriNet.Place("p_after_CA")
p_after_AP = PetriNet.Place("p_after_AP")
p_after_P = PetriNet.Place("p_after_P")
p_after_N = PetriNet.Place("p_after_N")
end = PetriNet.Place("p_end")

for p in [start, p_after_C, p_before_DV, p_ready_for_FC, p_after_FC,
          p_after_CA, p_after_AP, p_after_P, p_after_N, end]:
    net.places.add(p)

# Transitions (activities)
t_C = PetriNet.Transition("t_C", "Insurance Claim")
t_CR = PetriNet.Transition("t_CR", "Claim Registration")
t_DV = PetriNet.Transition("t_DV", "Document Verification")
t_RDS = PetriNet.Transition("t_RDS", "Re-Document Submission")  # loop back to DV
t_FC = PetriNet.Transition("t_FC", "Fraud Check")
t_II = PetriNet.Transition("t_II", "In-depth Investigation")     # loop back to FC
t_CA = PetriNet.Transition("t_CA", "Claim Assessment")
t_AP = PetriNet.Transition("t_AP", "Approval")
# Two Payment transitions (same label) to model with/without approval
t_P_direct = PetriNet.Transition("t_P_direct", "Payment")        # payment without approval
t_P_after_ap = PetriNet.Transition("t_P_after_ap", "Payment")    # payment after approval
t_N = PetriNet.Transition("t_N", "Notification")
t_CL = PetriNet.Transition("t_CL", "Closure")

for t in [t_C, t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P_direct, t_P_after_ap, t_N, t_CL]:
    net.transitions.add(t)

# Arcs (control flow)
# Start -> Insurance Claim -> Claim Registration -> Document Verification
petri_utils.add_arc_from_to(start, t_C, net)
petri_utils.add_arc_from_to(t_C, p_after_C, net)

petri_utils.add_arc_from_to(p_after_C, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p_before_DV, net)

petri_utils.add_arc_from_to(p_before_DV, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p_ready_for_FC, net)

# DV <-> RDS loop (if docs incomplete, request re-submission and re-do DV)
petri_utils.add_arc_from_to(p_ready_for_FC, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_before_DV, net)

# Fraud Check and Investigation loop
petri_utils.add_arc_from_to(p_ready_for_FC, t_FC, net)
petri_utils.add_arc_from_to(t_FC, p_after_FC, net)

# If doubts after FC, perform II and go back to FC; else proceed to CA
petri_utils.add_arc_from_to(p_after_FC, t_II, net)
petri_utils.add_arc_from_to(t_II, p_ready_for_FC, net)

petri_utils.add_arc_from_to(p_after_FC, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p_after_CA, net)

# Optional Approval before Payment (if threshold surpassed)
petri_utils.add_arc_from_to(p_after_CA, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p_after_AP, net)

# Payment: either directly after CA (no approval) or after AP
petri_utils.add_arc_from_to(p_after_CA, t_P_direct, net)
petri_utils.add_arc_from_to(t_P_direct, p_after_P, net)

petri_utils.add_arc_from_to(p_after_AP, t_P_after_ap, net)
petri_utils.add_arc_from_to(t_P_after_ap, p_after_P, net)

# Notification -> Closure -> End
petri_utils.add_arc_from_to(p_after_P, t_N, net)
petri_utils.add_arc_from_to(t_N, p_after_N, net)

petri_utils.add_arc_from_to(p_after_N, t_CL, net)
petri_utils.add_arc_from_to(t_CL, end, net)

# Initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[end] = 1
```