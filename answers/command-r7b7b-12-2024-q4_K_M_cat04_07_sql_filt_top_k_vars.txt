To solve this task using DuckDB, we need to follow these steps:

1. **Extract the ordered sequence of activities for each `case_id`:**
   - Sort the events by their `timestamp` and group them by `case_id`. This will ensure that the sequence is maintained within each case.

2. **Identify unique process variants:**
   - Group cases by their complete activity sequence (i.e., the ordered list of activities).

3. **Count how many cases correspond to each variant:**
   - Use a COUNT function over the grouped results to determine the frequency of each variant.

4. **Determine the top K variants by their frequency:**
   - Use an ORDER BY clause and LIMIT to select the top K variants based on their frequency (number of cases).

5. **Return all events from the original event log that belong only to these top K variants:**
   - Filter the original `event_log` table to include only those events that are part of the top K variants.

Here's the SQL query to achieve this:

```sql
-- Step 1: Extract the ordered sequence of activities per case and group cases by their complete activity sequence
WITH CaseVariants AS (
    SELECT 
        case_id,
        ARRAY_AGG(activity ORDER BY timestamp) AS activity_sequence
    FROM 
        event_log
    GROUP BY 
        case_id
),
-- Step 2: Aggregate and count cases per variant
VariantCounts AS (
    SELECT 
        activity_sequence,
        COUNT(*) as variant_count
    FROM 
        CaseVariants
    GROUP BY 
        activity_sequence
)
-- Step 3 & 4: Determine the top K variants by their frequency
SELECT 
    vc.activity_sequence,
    vc.variant_count
FROM 
    VariantCounts vc
ORDER BY 
    vc.variant_count DESC
LIMIT ? -- You need to specify the value of K here
;

-- Step 5: Return all events from the original event log that belong only to these top K variants
SELECT DISTINCT
    e.*
FROM 
    event_log e
JOIN (
    -- Step 1 and 2 combined, with top K variants
    WITH CaseVariants AS (
        SELECT 
            case_id,
            ARRAY_AGG(activity ORDER BY timestamp) AS activity_sequence
        FROM 
            event_log
        GROUP BY 
            case_id
    ),
    VariantCounts AS (
        SELECT 
            activity_sequence,
            COUNT(*) as variant_count
        FROM 
            CaseVariants
        GROUP BY 
            activity_sequence
    )
    SELECT 
        vc.activity_sequence,
        vc.variant_count
    FROM 
        VariantCounts vc
    ORDER BY 
        vc.variant_count DESC
    LIMIT ? -- Specify the value of K here
) top_variants ON 
    e.case_id = ANY(top_variants.activity_sequence)
-- Assuming activity_sequence is a JSON array in CaseVariants, and you need to match it exactly
AND CAST(e.activity AS TEXT) IN (SELECT activity FROM UNNEST(top_variants.activity_sequence));
```

### Notes:
- Replace `?` with the value of K that you want to find the top variants for.
- The assumption in the last part is that the `activity_sequence` in the CTE is a JSON array, and you need to match it exactly by comparing individual activities using `UNNEST`. If your structure is different, adjust accordingly.