# DuckDB SQL Query for Process Variant Analysis

Here's a comprehensive solution that addresses all requirements:

```sql
WITH
-- Step 1: Get ordered activities per case
ordered_activities AS (
    SELECT
        case_id,
        activity,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_position
    FROM
        event_log
),

-- Step 2: Create the complete sequence of activities for each case
case_sequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, ', ' ORDER BY activity_position SEPARATOR ', ')
            AS variant_sequence
    FROM
        ordered_activities
    GROUP BY
        case_id
),

-- Step 3: Count cases per variant and identify top K variants
variant_counts AS (
    SELECT
        variant_sequence,
        COUNT(*) AS case_count
    FROM
        case_sequences
    GROUP BY
        variant_sequence
    ORDER BY
        case_count DESC
    LIMIT ?  -- Parameter for K, the number of top variants to consider
),

-- Step 4: Get case_ids for top variants
top_variants_cases AS (
    SELECT
        c.case_id
    FROM
        case_sequences c
    JOIN
        variant_counts v ON c.variant_sequence = v.variant_sequence
)

-- Final result: All events from cases that belong to top K variants
SELECT
    e.*
FROM
    event_log e
JOIN
    top_variants_cases tvc ON e.case_id = tvc.case_id
ORDER BY
    e.case_id,
    e.timestamp;
```

## Explanation:

1. **Extracting ordered activities per case**:
   - The `ordered_activities` CTE assigns a sequential position to each activity within a case based on its timestamp.

2. **Creating complete variant sequences**:
   - The `case_sequences` CTE concatenates all activities for each case in timestamp order to form a complete variant sequence.

3. **Counting variants and identifying top K**:
   - The `variant_counts` CTE groups by variant sequence and counts cases for each variant, then filters for the top K most frequent variants.

4. **Filtering events from top K variants**:
   - The `top_variants_cases` CTE identifies which case_ids belong to the top K variants.
   - The final query joins back to the original event log to retrieve all events from these cases.

Note: Replace `?` with your desired value for K (the number of top variants to consider). For example, to get the top 5 variants, you would use `LIMIT 5`.