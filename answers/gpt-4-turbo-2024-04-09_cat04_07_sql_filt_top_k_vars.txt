To achieve the specified objectives, we'll first need to create a query that orders and then concatenates activities for each case. This concatenation allows us to identify unique sequences or "process variants". Post that, we'll count distinct cases per each variant to identify the top K process variants. Finally, we'll use these top K variants to fetch and return all corresponding events.

Here's how the SQL can be structured in DuckDB to meet these requirements:

### SQL Query in DuckDB

```sql
WITH OrderedSequences AS (
    -- Step 1: Extract the ordered sequence of activities per case
    SELECT 
        case_id, 
        list(activity) AS activity_sequence  -- Concatenates activities into a list, ordered by timestamp
    FROM 
        event_log
    GROUP BY
        case_id
    ORDER BY 
        case_id,
        timestamp
),

VariantsCount AS (
    -- Step 2: Aggregate and count cases per variant
    SELECT
        activity_sequence, 
        count(*) AS cases_count
    FROM 
        OrderedSequences
    GROUP BY 
        activity_sequence
    ORDER BY 
        cases_count DESC
),

TopVariants AS (
    -- Step 3: Determine the top K variants (for example, taking K=3)
    SELECT
        activity_sequence
    FROM 
        VariantsCount
    LIMIT 3
),

FilteredCases AS (
    -- Step 4: Identify cases that belong to the top K variants
    SELECT 
        os.case_id
    FROM 
        OrderedSequences AS os
    JOIN 
        TopVariants AS tv ON os.activity_sequence = tv.activity_sequence
)

-- Returning the final result: all events from original log that are part of the top K variants
SELECT 
    el.*
FROM 
    event_log AS el
JOIN 
    FilteredCases AS fc ON el.case_id = fc.case_id
ORDER BY
    el.case_id, el.timestamp;
```

### Explanation:

1. **OrderedSequences CTE**: We start by determining the sequence of activities for each `case_id` ordered by their respective timestamps. Here, `list(activity)` forms the sequence after events are sorted based on `timestamp`.

2. **VariantsCount CTE**: After obtaining the sequence, we count how many cases (instances) share each unique sequence of activities to understand the frequency of each process variant.

3. **TopVariants CTE**: We then restrict our aggregate results to the top K variants based on their frequency. For demonstrative purposes, K is set as 3, but you can adjust this based on your specific needs.

4. **FilteredCases CTE**: Using the selected top K variants, now we fetch all matching `case_id`s which adhere to these top sequences.

5. **Final SELECT**: Finally, we return all entries from the `event_log` table for the filtered cases.

This query effectively filters the event log to only include data concerning the top most frequent process variants based on their occurrence in the dataset. By adjusting the `LIMIT` clause in the `TopVariants`, you can change the number of top variants considered (i.e., replace 3 with another integer for the top K variants).