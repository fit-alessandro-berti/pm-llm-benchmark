```sql
WITH CaseVariants AS (
    -- Step 1: Determine the ordered sequence of activities for each case_id.
    -- STRING_AGG concatenates activities, ordered by timestamp, into a single string,
    -- representing the process variant for that case.
    SELECT
        case_id,
        STRING_AGG(activity, '->' ORDER BY timestamp) AS variant_sequence
    FROM
        event_log
    GROUP BY
        case_id
),
VariantCounts AS (
    -- Step 2: Group cases by their variant_sequence to identify unique process variants
    -- and count how many cases fall into each variant.
    SELECT
        variant_sequence,
        COUNT(case_id) AS variant_frequency
    FROM
        CaseVariants
    GROUP BY
        variant_sequence
),
TopKVariants AS (
    -- Step 3: Determine the top K variants by their frequency.
    -- For this query, K is set to 5. Adjust the LIMIT value to change K.
    SELECT
        variant_sequence
    FROM
        VariantCounts
    ORDER BY
        variant_frequency DESC
    LIMIT 5 -- This is the 'K' value. Change this number to retrieve a different number of top variants.
)
-- Step 4: Return all events from the original event log that belong only to cases
-- which are part of these top K variants. Cases not matching the top K variants are excluded.
SELECT
    el.case_id,
    el.activity,
    el.timestamp
FROM
    event_log AS el
JOIN
    CaseVariants AS cv
ON
    el.case_id = cv.case_id
WHERE
    cv.variant_sequence IN (SELECT variant_sequence FROM TopKVariants)
ORDER BY
    el.case_id, el.timestamp;
```