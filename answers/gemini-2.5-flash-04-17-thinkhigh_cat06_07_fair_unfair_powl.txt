```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activity labels as Transitions
ReceiveApplication = Transition(label="ReceiveApplication")
ResumeParsingInitialDataCheck = Transition(label="ResumeParsingInitialDataCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
PreliminarySkillAssessment = Transition(label="PreliminarySkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")
skip = SilentTransition() # For the exit of the loop

# --- POWL Model with Potential Unfairness ---

# Loop for Data Completeness Check
data_completeness_loop_unfair = OperatorPOWL(operator=Operator.LOOP, children=[ResumeParsingInitialDataCheck, RequestMoreInfo])

# XOR for Cultural Fit / Community Affiliation Check
cultural_fit_or_affiliation_unfair = OperatorPOWL(operator=Operator.XOR, children=[CulturalFitCheck, CommunityAffiliationCheck])

# Main partial order for the unfair model
powl_unfair = StrictPartialOrder(nodes=[
    ReceiveApplication,
    data_completeness_loop_unfair,
    PreliminarySkillAssessment,
    cultural_fit_or_affiliation_unfair,
    ManagerialReview,
    FinalDecision
])

# Define the sequence of activities
powl_unfair.order.add_edge(ReceiveApplication, data_completeness_loop_unfair)
powl_unfair.order.add_edge(data_completeness_loop_unfair, PreliminarySkillAssessment)
powl_unfair.order.add_edge(PreliminarySkillAssessment, cultural_fit_or_affiliation_unfair)
powl_unfair.order.add_edge(cultural_fit_or_affiliation_unfair, ManagerialReview)
powl_unfair.order.add_edge(ManagerialReview, FinalDecision)

print("--- POWL Model with Potential Unfairness ---")
print(powl_unfair)
print("\n")

# --- POWL Model Without Unfairness ---

# Loop for Data Completeness Check (same as before)
data_completeness_loop_fair = OperatorPOWL(operator=Operator.LOOP, children=[ResumeParsingInitialDataCheck, RequestMoreInfo])

# Main partial order for the fair model
powl_fair = StrictPartialOrder(nodes=[
    ReceiveApplication,
    data_completeness_loop_fair,
    PreliminarySkillAssessment,
    CulturalFitCheck, # Direct cultural fit check for everyone
    ManagerialReview,
    FinalDecision
])

# Define the sequence of activities
powl_fair.order.add_edge(ReceiveApplication, data_completeness_loop_fair)
powl_fair.order.add_edge(data_completeness_loop_fair, PreliminarySkillAssessment)
powl_fair.order.add_edge(PreliminarySkillAssessment, CulturalFitCheck)
powl_fair.order.add_edge(CulturalFitCheck, ManagerialReview)
powl_fair.order.add_edge(ManagerialReview, FinalDecision)

print("--- POWL Model Without Unfairness ---")
print(powl_fair)
```