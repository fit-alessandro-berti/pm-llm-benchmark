# DuckDB SQL Query for Process Variant Analysis

Here's a comprehensive DuckDB SQL query that accomplishes all the requested tasks:

```sql
WITH 
-- Step 1: For each case, get the ordered sequence of activities
case_variants AS (
  SELECT 
    case_id,
    LIST_AGG(activity, ',' ORDER BY timestamp) AS activity_sequence
  FROM event_log
  GROUP BY case_id
),

-- Step 2: Count cases per variant and rank them by frequency
variant_frequencies AS (
  SELECT 
    activity_sequence,
    COUNT(*) AS case_count,
    RANK() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
  FROM case_variants
  GROUP BY activity_sequence
),

-- Step 3: Get top K variant sequences (you can set K to any number)
top_variants AS (
  SELECT activity_sequence
  FROM variant_frequencies
  WHERE variant_rank <= 5  -- Here K=5, adjust as needed
),

-- Step 4: Get case_ids that belong to top variants
top_cases AS (
  SELECT cv.case_id
  FROM case_variants cv
  JOIN top_variants tv ON cv.activity_sequence = tv.activity_sequence
)

-- Final result: all events from cases in top variants
SELECT el.*
FROM event_log el
JOIN top_cases tc ON el.case_id = tc.case_id
ORDER BY el.case_id, el.timestamp;
```

## Explanation:

1. **case_variants CTE**:
   - Uses `LIST_AGG` with `ORDER BY timestamp` to create the ordered activity sequence for each case
   - Generates a comma-separated string representing the process variant for each case

2. **variant_frequencies CTE**:
   - Counts how many cases follow each variant
   - Ranks variants by frequency using `RANK()` (you could also use `DENSE_RANK()` or `ROW_NUMBER()`)

3. **top_variants CTE**:
   - Selects only the activity sequences of the top K variants (K=5 in this example)
   - Adjust the `WHERE variant_rank <= 5` clause to change K

4. **top_cases CTE**:
   - Identifies all case_ids that belong to the top variants by joining with the case_variants table

5. **Final query**:
   - Returns all events from the original log that belong to cases in the top variants
   - Maintains original ordering by case_id and timestamp

## Notes:

- The query uses comma-separated strings to represent variants, which is simple but has limitations (e.g., activity names can't contain commas).
- For very large datasets, you might want to add appropriate indexes (DuckDB doesn't use traditional indexes but benefits from query optimization).
- You can easily modify this to return the variant frequencies as well by adding to the final SELECT or creating an additional output CTE.