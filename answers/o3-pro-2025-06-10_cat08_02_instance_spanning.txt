=================================================================
1.  IDENTIFYING INSTANCE-SPANNING CONSTRAINTS (ISC) AND THEIR IMPACT
=================================================================

Step 1 – Build an “enriched” event log  
•  Case attributes already exist (order type, cold-packing flag, destination, hazardous flag).  
•  Add two derived attributes per event:  
  – Queue_Start : moment the order is ready for the next activity.  
  – Queue_End   : moment the next activity really starts.  
  Waiting_Time = Queue_End – Queue_Start.  

Step 2 – Detect each ISC with process-mining queries  

a. Shared Cold-Packing Stations  
   Query: for every point in time, count running “Packing” events where Requires Cold Packing = TRUE and group by Station_ID.  
   KPIs:  
   •  Cold-Packing Utilisation = run_time(Cold-Packing) / calendar_time  
   •  Average Queue Length to enter a Cold-Packing station  
   •  Waiting_Time_Cold = Queue waiting before Packing for Cold orders – same metric for non-Cold orders.  
   •  Percentage of Cold orders that miss target SLA at end-to-end level.  

b. Batching Before Shipping  
   Pattern: several cases start “Shipping Label Generation” together (same batch id).  
   KPIs:  
   •  Batch Wait Time = time between QC Complete and Shipping_Label_Start.  
   •  Batch Size distribution.  
   •  Idle inventory hours caused by batching =  Batch Wait Time × order_value.  

c. Priority (Express) Handling  
   Identify pre-emption events: a standard order has Packing START, then an Express START on same station begins before Standard COMPLETE.  
   KPIs:  
   •  Pre-emption frequency.  
   •  Delay Standard = extra waiting added to Standard vs. its historical median when no Express arrived.  
   •  Express speed-up = reduction of Express cycle time compared to Standard.  

d. Hazardous-Material Simultaneity Limit (10)  
   Construct a “concurrency timeline” for hazardous orders in Packing + QC.  
   KPIs:  
   •  Violations (if any) – conformance check.  
   •  Blocking_Time_Haz = waiting time for hazardous orders whose start was postponed because count ==10.  
   •  Throughput_Loss_Haz =  Blocking_Time_Haz / analysis_period.  

Step 3 – Separate within- vs. between-instance waiting  
•  Within-instance causes: long **activity durations**. We already have durations per event (Complete-Start).  
•  Between-instance causes: gap between **end of an activity** and **start of the next**.  
  – If gap >0 **and** the required resource was busy with another order for 80 % of that gap, tag it as ISC_wait.  
  – Else tag as Case_internal.  
This resource-overlay technique cleanly isolates delays created by other cases.

==============================================================
2.  ANALYSING INTERACTIONS AMONG CONSTRAINTS
==============================================================

1. Express + Cold-Packing: an Express-Cold order can pre-empt a standard Cold order, doubling the waiting time because only 5 specialised stations exist.  
2. Batching + Hazardous Limit: a South-region batch could consist mainly of hazardous orders; to keep 10 in Packing+QC we may have to delay the last hazardous order, which in turn delays the whole batch.  
3. Express + Batching: Express orders are exempt from batching, but they still occupy QC resources, slowing the QC of batched standard orders, indirectly lengthening Batch Wait Time.  
4. Cold-Packing + Hazardous Limit: some hazardous goods are also refrigerated, competing simultaneously for the limited stations and the 10-order ceiling.

Understanding these compound effects is critical; an optimisation focused on a single ISC can shift the bottleneck to another.

==============================================================
3.  CONSTRAINT-AWARE OPTIMISATION STRATEGIES
==============================================================

Strategy 1 – Dynamic Reservation & Overtime Window for Cold-Packing  
Addresses: Shared Cold-Packing, Express interaction  
Changes  
•  Reserve 1 of the 5 cold stations exclusively for Express orders during peak hours (historically 11:00–16:00) detected via log.  
•  When Express demand <30 % of that station’s capacity, release it to standard cold orders automatically.  
•  Open 30-minute overtime slots on any idle non-cold station retro-fitted with portable cold kits (capital cost is minor) during the top 5 congestion periods identified in the log.  
Data use: heat-map of Cold queue length vs. time-of-day, Express arrival distribution.  
Expected outcomes: 40 % reduction in Express pre-emptions, 15 % reduction in mean Cold waiting time, <4 % cost increase.

Strategy 2 – Rolling-Horizon Smart Batching  
Addresses: Shipping Batch delay, interacts with Hazardous limit  
Changes  
•  Replace fixed “region batch closes every 30 min OR size = 20” with algorithm: close when (current_wait_time  Wmax) OR (size  Nmax) OR (predicted arrival for next 2 orders > Tpred).  
•  Wmax and Nmax learned from historical Pareto-front (wait vs. shipping cost).  
•  If batch has >6 hazardous orders, tag as “Haz-batch” and line-up QC slots in advance to avoid hitting 10-order ceiling.  
Data use: machine-learning prediction of next arrivals per region, shipping cost vs. batch size curve from carrier tariffs.  
Expected outcomes: 25 % cut in Batch Wait Time, while keeping truck fill-rate 92 %.

Strategy 3 – Constraint-Aware Scheduling Board (digital twin)  
Addresses: Priority handling, Hazardous limit overall  
Changes  
•  Implement an APS (advanced planning & scheduling) rule in WMS:  
  1. When an order is ready for Packing, calculate priority score = 100 if Express else 40 + (current promised ship-by – now in minutes) – 20 ×Hazardous flag.  
  2. Accept order into Packing queue if (Hazardous_count_running <10) else place in “Haz-buffer”.  
  3. Sequence Cold orders by earliest deadline but **prevent pre-emption**; Express can only skip queue if its lateness >5 min versus target.  
Data use: lateness probability models derived from 3-month log.  
Expected outcome: 10 % global cycle-time drop, zero regulatory breaches, 60 % fewer pre-empted standards.

==============================================================
4.  SIMULATION AND VALIDATION
==============================================================

Approach: Discrete-Event Simulation (DES) fed with mined distributions  
1. Mine duration distributions per activity, per order type, per resource (fit lognormal/Weibull).  
2. Mine inter-arrival times for each combination of order attributes.  
3. Encode ISCs explicitly:  
   •  Cold-station resource pool size = 5; reservation rule as parameter.  
   •  Batch entity with closing logic parameters.  
   •  Pre-emption logic for Express according to old vs. new policies.  
   •  Global counter for hazardous orders in Packing+QC (capacity =10).  
4. KPIs in simulator: end-to-end lead time, % SLA met, resource utilisation, average queue length, # violations.  
5. Experimental design: baseline vs. each strategy vs. combined package, 30 replications, 95 % confidence.  
6. Sensitivity: vary peak-season arrival rate +20 % and Cold-order mix +15 % to test robustness.

==============================================================
5.  POST-IMPLEMENTATION MONITORING
==============================================================

Dashboards (built in process-mining tool or BI layer connected to streaming log)

A. Resource Contention  
   •  Live utilisation of Cold-Packing stations (stacked standard vs. express).  
   •  Queue length trend – alert if >3 orders waiting for cold >10 min.

B. Batching Efficiency  
   •  Average batch wait time per region (last 4 h, daily, weekly).  
   •  Trigger rate of smart-batch closure rules (time vs. size vs. prediction).

C. Priority Impact  
   •  Count of pre-emptions and average delay added to affected standard orders.  
   •  Express order cycle-time vs. SLA line.

D. Hazardous Compliance  
   •  Realtime gauge: # hazardous orders currently in Packing+QC (green 8, yellow 9, red 10).  
   •  Automatic flag if any event starts that would make count >10 (should be impossible).

E. Outcome KPIs  
   •  End-to-end lead-time percentile chart (P50, P90, P95).  
   •  % Orders shipped within promised window (overall, Express, Standard).  
   •  Throughput per day and per resource group.

Continuous improvement loop: weekly mining of new three-day logs to detect drift—e.g., if Cold queue time creeps up, re-tune reservation percentage or add portable kit.

By explicitly mining, analysing, simulating and then monitoring these instance-spanning constraints, the fulfilment centre can turn cross-order dependencies from hidden bottlenecks into managed levers for performance.