Here is a concise solution that works in DuckDB and returns every event that belongs to a case with  6 events:

```sql
-- Option 1: sub-query + join (ANSI-SQL, easy to read)
WITH case_counts AS (
    SELECT
        case_id,
        COUNT(*) AS n_events
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6          -- keep only cases with  6 events
)

SELECT e.*                         -- all columns of the original log
FROM   event_log AS e
JOIN   case_counts USING (case_id) -- join back the “good” cases
ORDER  BY e.case_id, e.timestamp;  -- optional: tidy ordering
```

An equally valid window-function variant (often a bit shorter):

```sql
SELECT *
FROM (
    SELECT
        el.*,
        COUNT(*) OVER (PARTITION BY case_id) AS n_events
    FROM event_log AS el
) AS t
WHERE n_events <= 6
ORDER BY case_id, timestamp;
```

Explanation of the main steps:

1. Count the events per `case_id` (either with `GROUP BY` or `COUNT() OVER (PARTITION BY …)`).
2. Keep only those cases where that count  6.
3. Return the full, unmodified event rows for those cases.