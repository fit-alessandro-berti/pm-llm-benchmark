# DuckDB SQL Query for Filtering Cases Based on Activity Sequence and Timing

Here's a DuckDB SQL query that identifies and excludes cases containing the specific sequence with the timing condition, returning all other events:

```sql
WITH 
-- First identify all cases that have the exact sequence 'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order'
sequence_cases AS (
    SELECT DISTINCT a.case_id
    FROM event_log a
    JOIN event_log b ON a.case_id = b.case_id 
        AND b.timestamp = (
            SELECT MIN(timestamp) 
            FROM event_log 
            WHERE case_id = a.case_id 
            AND timestamp > a.timestamp
        )
    JOIN event_log c ON a.case_id = c.case_id 
        AND c.timestamp = (
            SELECT MIN(timestamp) 
            FROM event_log 
            WHERE case_id = a.case_id 
            AND timestamp > b.timestamp
        )
    WHERE a.activity = 'Approve Purchase Requisition'
    AND b.activity = 'Create Order'
    AND c.activity = 'Confirm Order'
    -- Ensure these are the only events between them (no other events in the case interrupt the sequence)
    AND NOT EXISTS (
        SELECT 1 
        FROM event_log x 
        WHERE x.case_id = a.case_id 
        AND x.timestamp > a.timestamp 
        AND x.timestamp < c.timestamp 
        AND x.event_id NOT IN (a.event_id, b.event_id, c.event_id)
    )
),

-- Then filter these cases to only those where time between Create Order and Confirm Order > 5 days
cases_to_exclude AS (
    SELECT sc.case_id
    FROM sequence_cases sc
    JOIN event_log a ON sc.case_id = a.case_id AND a.activity = 'Approve Purchase Requisition'
    JOIN event_log b ON sc.case_id = b.case_id AND b.activity = 'Create Order'
    JOIN event_log c ON sc.case_id = c.case_id AND c.activity = 'Confirm Order'
    WHERE (c.timestamp - b.timestamp) > INTERVAL '5 days'
)

-- Finally return all events except those belonging to the excluded cases
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, timestamp;
```

## Alternative Approach (Using Window Functions)

Here's another version using window functions which might be more efficient:

```sql
WITH 
-- Rank events within each case
ranked_events AS (
    SELECT 
        *,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_rank
    FROM event_log
),

-- Identify sequences and timing
sequence_timing AS (
    SELECT 
        a.case_id,
        -- Find the sequence events
        MAX(CASE WHEN a.activity = 'Approve Purchase Requisition' THEN a.timestamp END) AS approve_time,
        MAX(CASE WHEN a.activity = 'Create Order' THEN a.timestamp END) AS create_time,
        MAX(CASE WHEN a.activity = 'Create Order' THEN a.event_rank END) AS create_rank,
        MAX(CASE WHEN a.activity = 'Confirm Order' THEN a.timestamp END) AS confirm_time,
        MAX(CASE WHEN a.activity = 'Confirm Order' THEN a.event_rank END) AS confirm_rank,
        -- Check if the sequence exists (ranks are consecutive)
        MAX(CASE WHEN a.activity = 'Create Order' THEN a.event_rank END) - 
        MAX(CASE WHEN a.activity = 'Approve Purchase Requisition' THEN a.event_rank END) = 1 
        AND
        MAX(CASE WHEN a.activity = 'Confirm Order' THEN a.event_rank END) - 
        MAX(CASE WHEN a.activity = 'Create Order' THEN a.event_rank END) = 1 AS has_sequence
    FROM ranked_events a
    GROUP BY a.case_id
    HAVING 
        COUNT(DISTINCT CASE WHEN a.activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order') THEN a.activity END) = 3
        AND MAX(CASE WHEN a.activity = 'Create Order' THEN a.event_rank END) - 
            MAX(CASE WHEN a.activity = 'Approve Purchase Requisition' THEN a.event_rank END) = 1
        AND MAX(CASE WHEN a.activity = 'Confirm Order' THEN a.event_rank END) - 
            MAX(CASE WHEN a.activity = 'Create Order' THEN a.event_rank END) = 1
),

-- Cases meeting both criteria (sequence + timing)
cases_to_exclude AS (
    SELECT case_id
    FROM sequence_timing
    WHERE has_sequence AND (confirm_time - create_time) > INTERVAL '5 days'
)

-- Return all events except those in excluded cases
SELECT el.*
FROM event_log el
WHERE el.case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY el.case_id, el.timestamp;
```

Note: I added an assumption that there's an `event_id` column in the first approach for precise event identification. If your table doesn't have this, the second window function approach might be more reliable. You may need to adjust based on your exact schema.