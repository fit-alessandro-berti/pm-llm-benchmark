This is a complex task that requires several steps: ordering within partitions, string aggregation to form the variant, ranking, and finally, joining back to the original table.

Here is the DuckDB SQL query to achieve the desired result, assuming $K=5$ for demonstration purposes (you should replace `5` with your desired value for $K$):

```sql
-- Define K for the top K variants
WITH Parameters AS (
    SELECT 5 AS K_value
),

-- 1. Determine the ordered sequence of activities (the variant) for each case
CaseVariants AS (
    SELECT
        case_id,
        -- Use LISTAGG to concatenate the ordered activities into a single string variant
        LISTAGG(activity, ' -> ') WITHIN GROUP (ORDER BY timestamp) AS process_variant
    FROM
        event_log
    GROUP BY
        case_id
),

-- 2. & 3. Group cases by variant and count frequencies, then rank them
VariantFrequencies AS (
    SELECT
        process_variant,
        COUNT(case_id) AS variant_count,
        -- Rank the variants by their frequency in descending order
        RANK() OVER (ORDER BY COUNT(case_id) DESC) as rank_num
    FROM
        CaseVariants
    GROUP BY
        process_variant
),

-- Determine the set of case_ids that belong to the top K variants
TopKCaseIDs AS (
    SELECT
        cv.case_id
    FROM
        CaseVariants cv
    JOIN
        VariantFrequencies vf ON cv.process_variant = vf.process_variant
    CROSS JOIN
        Parameters p
    WHERE
        vf.rank_num <= p.K_value
)

-- 4. Return all original events belonging only to cases in the Top K variants
SELECT
    el.*
FROM
    event_log el
JOIN
    TopKCaseIDs tk ON el.case_id = tk.case_id
ORDER BY
    el.case_id, el.timestamp;
```

### Explanation of Steps:

1.  **`Parameters` CTE (Optional but Recommended):** Defines the value of $K$ (`5` in this example) in one place, making it easy to adjust.
2.  **`CaseVariants` CTE:**
    *   It groups by `case_id`.
    *   It uses the powerful **`LISTAGG(expression, separator) WITHIN GROUP (ORDER BY sorting_expression)`** function. This is crucial: it concatenates the `activity` names into a single string, but *only after* ordering them by the `timestamp` within each case. This correctly generates the ordered process variant.
3.  **`VariantFrequencies` CTE:**
    *   It groups the results of `CaseVariants` by the `process_variant`.
    *   It counts the occurrences (`variant_count`).
    *   It uses the **`RANK() OVER (...)`** window function to assign a rank based on `variant_count` descending.
4.  **`TopKCaseIDs` CTE:**
    *   It joins `CaseVariants` (to get the case ID associated with a variant) and `VariantFrequencies` (to check the rank).
    *   It filters this join to keep only those records where the `rank_num` is less than or equal to $K$.
    *   The result is a distinct list of `case_id`s that belong to the most frequent variants.
5.  **Final `SELECT` Statement:**
    *   It selects all columns (`el.*`) from the original `event_log`.
    *   It performs an `INNER JOIN` with `TopKCaseIDs` on `case_id`. This effectively filters the entire log down to only the events belonging to the top $K$ variants identified.
    *   The final ordering helps readability by grouping the events per case.