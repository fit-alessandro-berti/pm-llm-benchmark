Here's a complete DuckDB SQL query addressing your requirements. Assume a given parameter "K":

```sql
-- Replace <K> with your desired integer value for top K variants
WITH
-- Step 1: Create the ordered sequence of activities per case_id
case_variants AS (
  SELECT 
    case_id, 
    STRING_AGG(activity, '->' ORDER BY timestamp) AS activity_sequence
  FROM event_log
  GROUP BY case_id
),

-- Step 2: Count the frequency of each unique activity sequence (process variant)
variant_counts AS (
  SELECT
    activity_sequence,
    COUNT(*) AS num_cases
  FROM case_variants
  GROUP BY activity_sequence
  ORDER BY num_cases DESC
  LIMIT <K>
),

-- Step 3: Identify the case IDs that belong to the top K variants
top_k_cases AS (
  SELECT c.case_id
  FROM case_variants c
  JOIN variant_counts v
    ON c.activity_sequence = v.activity_sequence
)

-- Step 4: Retrieve the original events belonging to these top K variants
SELECT e.*
FROM event_log e
JOIN top_k_cases t
  ON e.case_id = t.case_id
ORDER BY e.case_id, e.timestamp;
```

**Explanation:**  
- **Step 1 (`case_variants`)**: Groups each `case_id`'s events into a single ordered sequence of activities, acting as the unique variant identifier.
- **Step 2 (`variant_counts`)**: Counts the number of cases per variant to identify the most-frequent (top K) variants.
- **Step 3 (`top_k_cases`)**: Filters down to cases that match the top K variants.
- **Step 4 (final query)**: Joins back with the event log to return all events from these cases, maintaining the original ordering by `case_id` and `timestamp`.