```python
log_skeleton_p2p = {
    'equivalence': {
        ('Create Purchase Requisition', 'Approve Purchase Requisition'),  # Assuming a 1:1 approval for simplicity
        ('Receive Invoice', 'Process Invoice')  # Assuming each invoice received is processed
    },
    'always_before': {
        ('Create Purchase Requisition', 'Create Purchase Order'),
        ('Approve Purchase Requisition', 'Create Purchase Order'),
        ('Create Purchase Order', 'Goods Receipt'),
        ('Goods Receipt', 'Receive Invoice'),
        ('Receive Invoice', 'Payment'),
        ('Process Invoice', 'Payment')

    },
    'always_after': {
        ('Payment', 'Process Invoice'),
        ('Payment', 'Receive Invoice'),
        ('Goods Receipt', 'Create Purchase Order'),
        ('Receive Invoice', 'Goods Receipt'),

    },
    'never_together': {
        #  Not very realistic in a standard P2P, but for illustration:
        # ('Reject Purchase Requisition', 'Approve Purchase Requisition')  # If we had a reject activity
    },
    'activ_freq': {
        'Create Purchase Requisition': {1},  # One requisition per purchase
        'Approve Purchase Requisition': {1},  # One approval per requisition
        'Create Purchase Order': {1},  # One order per requisition (for this example)
        'Goods Receipt': {1, 2},  # Allow for partial shipments (1 or 2 receipts)
        'Receive Invoice': {1},       # One invoice per order (for this example)
        'Process Invoice': {1},  # One processing action per invoice
        'Payment': {1}            # One payment per invoice (for this example)
    },
    'directly_follows': {
        # Could be used for stricter sequencing if needed in specific scenarios:
        #  e.g., ('Receive Invoice', 'Three-Way Match') where a three-way match *immediately* follows invoice receipt.
        # For this basic example, we're not using strict directly-follows constraints.
    }
}


# Example usage (just prints the dictionary):
print(log_skeleton_p2p)


```


Key improvements in this version:

* **More realistic constraints:** The constraints are now more aligned with a typical Purchase-to-Pay process.
* **Explanations:** Added comments to explain the rationale behind certain constraints and the overall model.
* **Flexibility:** The `activ_freq` and `directly_follows` sections are designed to allow for some variations (e.g., partial shipments) while still enforcing core process flow.
* **Illustrative `never_together` example:** Though not commonly used in a simple P2P, an example is included to show how this constraint could be applied.
* **Clearer structure and formatting:** The dictionary is better organized and easier to read.

This revised model provides a more practical and understandable representation of a Purchase-to-Pay process using the Log Skeleton framework.  It can be further extended to incorporate more complex scenarios and constraints as needed. Remember, this is still a simplified example and real-world processes can have many more nuances.