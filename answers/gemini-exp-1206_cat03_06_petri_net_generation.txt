```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet("Insurance_Claim_Process")

# Create places
p_start = PetriNet.Place("Start")
p_cr = PetriNet.Place("Claim Registered")
p_dv = PetriNet.Place("Documents Verified")
p_rds = PetriNet.Place("Documents Re-submitted")
p_fc = PetriNet.Place("Fraud Checked")
p_ii = PetriNet.Place("In-depth Investigation")
p_ca = PetriNet.Place("Claim Assessed")
p_ap = PetriNet.Place("Claim Approved")
p_p = PetriNet.Place("Claim Paid")
p_n = PetriNet.Place("Customer Notified")
p_end = PetriNet.Place("End")

# Add places to the net
net.places.add(p_start)
net.places.add(p_cr)
net.places.add(p_dv)
net.places.add(p_rds)
net.places.add(p_fc)
net.places.add(p_ii)
net.places.add(p_ca)
net.places.add(p_ap)
net.places.add(p_p)
net.places.add(p_n)
net.places.add(p_end)

# Create transitions
t_cr = PetriNet.Transition("CR", "Claim Registration")
t_dv = PetriNet.Transition("DV", "Document Verification")
t_rds = PetriNet.Transition("RDS", "Re-Document Submission")
t_fc = PetriNet.Transition("FC", "Fraud Check")
t_ii = PetriNet.Transition("II", "In-depth Investigation")
t_ca = PetriNet.Transition("CA", "Claim Assessment")
t_ap = PetriNet.Transition("AP", "Approval")
t_p = PetriNet.Transition("P", "Payment")
t_n = PetriNet.Transition("N", "Notification")
t_cl = PetriNet.Transition("CL", "Closure")

# Add transitions to the net
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)

# Add arcs
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_cr, net)
petri_utils.add_arc_from_to(p_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv, net)
petri_utils.add_arc_from_to(p_dv, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_rds, net)
petri_utils.add_arc_from_to(p_rds, t_dv, net)

petri_utils.add_arc_from_to(p_dv, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc, net)
petri_utils.add_arc_from_to(p_fc, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_ii, net)
petri_utils.add_arc_from_to(p_ii, t_fc, net)

petri_utils.add_arc_from_to(p_fc, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_ca, net)
petri_utils.add_arc_from_to(p_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ap, net)
petri_utils.add_arc_from_to(p_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, p_p, net)
petri_utils.add_arc_from_to(p_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_n, net)
petri_utils.add_arc_from_to(p_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# Define initial marking
im = Marking()
im[p_start] = 1

# Define final marking
fm = Marking()
fm[p_end] = 1

# Now you have an accepting Petri net (net, im, fm) for the insurance claim management process.
```