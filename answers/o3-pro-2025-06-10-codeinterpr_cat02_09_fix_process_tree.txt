1. Problems in the current (under-fitting) model  
   • After the requisition is approved, the model puts the rest of the activities (Create PO, Receive Goods, Receive Invoice, Match Invoice, Pay Invoice) in one big AND-block.  
   • In an AND-block every child can start at any time and in any order, therefore the model wrongly allows:  
     – Paying an invoice before it is received.  
     – Matching an invoice before either the goods or the invoice exist.  
     – Receiving goods before a purchase order exists, etc.  
   • “Close Case” is the only activity that is guaranteed to be last; everything else is unconstrained.

   Which steps really must be ordered?  
   1. Create Purchase Requisition  
   2. Approve Purchase Requisition  
   3. Create Purchase Order  
   4/5. Receive Goods and Receive Invoice – these two can legitimately arrive in any order, but both must be completed before the next step.  
   6. Match Invoice to PO (needs both goods receipt and invoice)  
   7. Pay Invoice  
   8. Close Case  

   Thus, only “Receive Goods” and “Receive Invoice” may be parallel; everything else is strictly sequential.

2. Corrected process-tree (Python pseudocode)

```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# Activities (same objects as in the original question)
create_req       = ProcessTree(label="Create_Purchase_Requisition")
approve_req      = ProcessTree(label="Approve_Purchase_Requisition")
create_po        = ProcessTree(label="Create_Purchase_Order")
receive_goods    = ProcessTree(label="Receive_Goods")
receive_invoice  = ProcessTree(label="Receive_Invoice")
match_invoice    = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice      = ProcessTree(label="Pay_Invoice")
close_case       = ProcessTree(label="Close_Case")

# Parallel block that ONLY contains the two receipts; 
# they may interleave, but both must finish before we continue
receive_parallel = ProcessTree(
    operator=Operator.PARALLEL,
    children=[receive_goods, receive_invoice]
)

# Complete, fixed model
root = ProcessTree(
    operator=Operator.SEQUENCE,
    children=[
        create_req,
        approve_req,
        create_po,
        receive_parallel,   # both receipts (any order)
        match_invoice,
        pay_invoice,
        close_case
    ]
)
```

3. Why the fixed tree conforms to “Procure-to-Pay”

• Strict SEQUENCE guarantees that no activity on the right may start before every activity to its left has completed.  
  – You can never create a PO before the requisition is approved, never pay before the match, etc.  

• Limited AND-block around Receive Goods and Receive Invoice mirrors reality: either may arrive first, but both artefacts must be present before a three-way match can be done.  

• “Match Invoice to PO” sits after that block, ensuring that the match is performed only when both receipts are available.  

• “Pay Invoice” follows the match, so payment cannot be executed prematurely.  

• “Close Case” is still the global final activity.

By removing the large parallel block and restricting parallelism to the single, justified pair of receipt activities, the model now disallows every previously possible but business-illogical trace (e.g., Pay Invoice  Receive_Goods). It therefore fits the intended behaviour while still permitting the only realworld flexibility the process requires.