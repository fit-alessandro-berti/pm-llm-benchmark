Here is a DuckDB SQL query that should accomplish the task:

```sql
WITH
  -- Extract the ordered sequence of activities per case
  case_activities AS (
    SELECT
      case_id,
      ARRAY_AGG(activity ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
  ),

  -- Aggregate and count cases per variant, and rank the variants by frequency
  ranked_variants AS (
    SELECT
      activity_sequence,
      COUNT(*) AS case_count,
      ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
    FROM case_activities
    GROUP BY activity_sequence
  ),

  -- Identify the top K variants
  top_k_variants AS (
    SELECT variant_rank, activity_sequence
    FROM ranked_variants
    WHERE variant_rank <= K
  ),

  -- Identify the case_ids that belong to the top K variants
  top_k_cases AS (
    SELECT DISTINCT case_id
    FROM case_activities
    WHERE activity_sequence IN (SELECT activity_sequence FROM top_k_variants)
  )

-- Return all events from the original event log that belong only to cases which are part of these top K variants
SELECT *
FROM event_log
WHERE case_id IN (SELECT case_id FROM top_k_cases)
ORDER BY case_id, timestamp;
```

Replace `K` in the query with the desired number of top variants.

This query first constructs the ordered sequence of activities for each case, then groups cases by their complete activity sequence to identify unique process variants. It counts how many cases correspond to each variant and determines the top K variants by their frequency. Finally, it returns all events from the original event log that belong only to cases which are part of these top K variants.