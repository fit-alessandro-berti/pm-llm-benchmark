Here's a DuckDB SQL query that accomplishes the requirements:

```sql
WITH filtered_cases AS (
  -- Identify cases with the specific sequence and timing condition
  SELECT DISTINCT el1.case_id
  FROM event_log el1
  JOIN event_log el2 ON el1.case_id = el2.case_id 
    AND el1.timestamp < el2.timestamp
  JOIN event_log el3 ON el2.case_id = el3.case_id 
    AND el2.timestamp < el3.timestamp
    AND el3.timestamp = (
      SELECT MIN(el4.timestamp)
      FROM event_log el4
      WHERE el4.case_id = el3.case_id 
        AND el4.timestamp > el2.timestamp
        AND el4.activity = 'Confirm Order'
    )
  WHERE el1.activity = 'Approve Purchase Requisition'
    AND el2.activity = 'Create Order'
    AND el3.activity = 'Confirm Order'
    AND el2.timestamp < el3.timestamp
    AND (
      -- No other events between Approve and Create Order
      NOT EXISTS (
        SELECT 1 FROM event_log el_between1 
        WHERE el_between1.case_id = el1.case_id 
          AND el_between1.timestamp > el1.timestamp 
          AND el_between1.timestamp < el2.timestamp
      )
    )
    AND (
      -- No other events between Create Order and Confirm Order
      NOT EXISTS (
        SELECT 1 FROM event_log el_between2 
        WHERE el_between2.case_id = el2.case_id 
          AND el_between2.timestamp > el2.timestamp 
          AND el_between2.timestamp < el3.timestamp
      )
    )
    AND (el3.timestamp - el2.timestamp) > INTERVAL '5' DAY
)
-- Return all events from cases that do NOT match the criteria
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM filtered_cases)
ORDER BY case_id, timestamp;
```

This query works as follows:

1. **CTE `filtered_cases`**: Identifies cases that meet both criteria:
   - Uses three JOINs to find consecutive events: `Approve Purchase Requisition`  `Create Order`  `Confirm Order`
   - Uses `NOT EXISTS` subqueries to ensure no other events occur between these activities
   - For the `Confirm Order` event, uses a subquery to find the earliest occurrence after `Create Order`
   - Filters for cases where the time difference between `Create Order` and `Confirm Order` exceeds 5 days

2. **Main query**: 
   - Selects all events from the `event_log` table
   - Excludes events from cases identified in the CTE using `NOT IN`
   - Orders results by `case_id` and `timestamp` for readability

The query ensures that only the exact sequence with no intervening events is considered, and only cases meeting both the sequence and timing criteria are excluded from the final result set.