To construct an accepting Petri net for the described insurance claim management process, we need to define the places, transitions, and arcs that represent the workflow. We will also define the initial and final markings. Here is the Python code that accomplishes this using `pm4py`:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking, Transition
from pm4py.objects.petri_net.utils import petri_utils

# Define the Petri net
net = PetriNet("Claim Management Process")

# Define places
start_place = PetriNet.Place("start_place")
cr_place = PetriNet.Place("Claim Registration (CR)")
dv_place = PetriNet.Place("Document Verification (DV)")
fc_place = PetriNet.Place("Fraud Check (FC)")
ii_place = PetriNet.Place("In-depth Investigation (II)")
ca_place = PetriNet.Place("Claim Assessment (CA)")
ap_place = PetriNet.Place("Approval (AP)")
payment_place = PetriNet.Place("Payment (P)")
notification_place = PetriNet.Place("Notification (N)")
closure_place = PetriNet.Place("Closure (CL)")
rds_place = PetriNet.Place("Re-Document Submission (RDS)")
fc_recheck_place = PetriNet.Place("Fraud Check Recheck (FC_recheck)")
ii_recheck_place = PetriNet.Place("In-depth Investigation Recheck (II_recheck)")

# Define transitions
claim_registration = Transition("Claim Registration", "Claim Registration")
doc_verification = Transition("Document Verification", "Document Verification")
fraud_check = Transition("Fraud Check", "Fraud Check")
in_depth_investigation = Transition("In-depth Investigation", "In-depth Investigation")
claim_assessment = Transition("Claim Assessment", "Claim Assessment")
approval = Transition("Approval", "Approval")
payment = Transition("Payment", "Payment")
notification = Transition("Notification", "Notification")
closure = Transition("Closure", "Closure")
rds = Transition("Re-Document Submission", "Re-Document Submission")
fc_recheck = Transition("Fraud Check Recheck", "Fraud Check Recheck")
ii_recheck = Transition("In-depth Investigation Recheck", "In-depth Investigation Recheck")

# Add places and transitions to the Petri net
net.places.add(start_place, cr_place, dv_place, fc_place, ii_place, ca_place, ap_place, payment_place, notification_place, closure_place, rds_place, fc_recheck_place, ii_recheck_place)
net.transitions.add(claim_registration, doc_verification, fraud_check, in_depth_investigation, claim_assessment, approval, payment, notification, closure, rds, fc_recheck, ii_recheck)

# Add arcs
petri_utils.add_arc_from_to(start_place, cr_place, net)
petri_utils.add_arc_from_to(cr_place, doc_verification, net)
petri_utils.add_arc_from_to(doc_verification, cr_place, net)
petri_utils.add_arc_from_to(doc_verification, fc_place, net)
petri_utils.add_arc_from_to(fc_place, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, ca_place, net)
petri_utils.add_arc_from_to(ca_place, ap_place, net)
petri_utils.add_arc_from_to(ap_place, payment_place, net)
petri_utils.add_arc_from_to(payment_place, notification_place, net)
petri_utils.add_arc_from_to(notification_place, closure_place, net)
petri_utils.add_arc_from_to(doc_verification, rds_place, net)
petri_utils.add_arc_from_to(rds_place, doc_verification, net)
petri_utils.add_arc_from_to(fraud_check, fc_recheck_place, net)
petri_utils.add_arc_from_to(fc_recheck_place, fraud_check, net)
petri_utils.add_arc_from_to(in_depth_investigation, ii_recheck_place, net)
petri_utils.add_arc_from_to(ii_recheck_place, in_depth_investigation, net)

# Define initial and final markings
initial_marking = Marking()
initial_marking[start_place] = 1

final_marking = Marking()
final_marking[closure_place] = 1

# Output the Petri net, initial marking, and final marking
print(net)
print(initial_marking)
print(final_marking)
```

### Explanation:
1. **Places**: Each place represents a state in the process.
2. **Transitions**: Each transition is labeled with the corresponding activity name.
3. **Arcs**: Directed arcs connect the transitions to the places, forming the workflow. There are loops for re-document submission and re-checks in fraud and in-depth investigation.
4. **Initial Marking**: A token is placed in the `start_place` to indicate the beginning of the process.
5. **Final Marking**: A token is placed in the `closure_place` to indicate the end of the process.

This Petri net accurately models the insurance claim management process, including the possibility of loops for re-document submission and re-checks.