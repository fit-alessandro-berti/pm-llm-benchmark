To represent the hiring process at GlobalTeq Solutions using POWL models, we will define two models. The first model will illustrate the process with the potential for unfairness due to preferential treatment based on community affiliations. The second model will depict a revised process where this specific source of unfairness is removed.

Both models will share common structural elements derived from the process description:
- An initial sequence for application reception and resume parsing.
- A loop for ensuring data completeness (`DataCompletenessCheck` and `RequestMoreInfo`).
- A skill assessment stage.
- A managerial review stage.
- A final decision stage.

The difference will lie in the "Cultural Fit & Community Affiliation Check" stage.

**Activity Labels Used (derived from the description):**
- `ReceiveApplication`: Represents the initial submission of applications.
- `ParseResume`: Represents "Resume Parsing & Initial Data Check" for qualifications.
- `DataCompletenessCheck`: Activity within the loop to check if data is complete.
- `RequestMoreInfo`: Activity within the loop to ask for more information.
- `SkillAssessment`: Represents "Preliminary Skill Assessment".
- `CulturalFitCheck`: Represents the standard cultural fit evaluation. In Model 2, this is the only path. In Model 1, it's one branch of an XOR.
- `CommunityAffiliationCheck`: Represents the biased check giving uplift for affiliations (only in Model 1, as part of an XOR).
- `ManagerialReview`: Represents "Managerial Review".
- `FinalDecision`: Represents "Final Hiring Decisions".

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

def create_powl_model_with_unfairness():
    """
    Creates a POWL model of the hiring process that includes a potential point of unfairness
    in the cultural fit evaluation stage using an XOR branch.
    """
    # Define transitions (activities)
    receive_app = Transition(label="ReceiveApplication")
    parse_resume = Transition(label="ParseResume")
    data_comp_check = Transition(label="DataCompletenessCheck")
    req_more_info = Transition(label="RequestMoreInfo")
    skill_assessment = Transition(label="SkillAssessment")
    
    # Activities for the XOR branch (cultural fit)
    standard_cultural_fit = Transition(label="CulturalFitCheck") # Standard path
    community_affiliation_check = Transition(label="CommunityAffiliationCheck") # Biased path

    managerial_review = Transition(label="ManagerialReview")
    final_decision = Transition(label="FinalDecision")

    # Define control-flow operators
    # Loop for data completeness: *(DataCompletenessCheck, RequestMoreInfo)
    # This means: execute DataCompletenessCheck. If it decides to loop (e.g., data is incomplete),
    # then execute RequestMoreInfo, then execute DataCompletenessCheck again.
    loop_data_check = OperatorPOWL(operator=Operator.LOOP, children=[data_comp_check, req_more_info])

    # XOR for cultural fit evaluation (potential unfairness)
    # X(StandardCulturalFitEvaluation, CommunityAffiliationCheck)
    xor_cultural_fit = OperatorPOWL(operator=Operator.XOR, 
                                    children=[standard_cultural_fit, community_affiliation_check])

    # Define the overall process structure as a StrictPartialOrder
    # Nodes are the top-level activities and operator constructs in the process flow.
    root_nodes = [
        receive_app,
        parse_resume,
        loop_data_check,
        skill_assessment,
        xor_cultural_fit,
        managerial_review,
        final_decision
    ]
    model_unfair = StrictPartialOrder(nodes=root_nodes)

    # Define the order (sequence) of execution
    model_unfair.order.add_edge(receive_app, parse_resume)
    model_unfair.order.add_edge(parse_resume, loop_data_check)
    model_unfair.order.add_edge(loop_data_check, skill_assessment)
    model_unfair.order.add_edge(skill_assessment, xor_cultural_fit)
    model_unfair.order.add_edge(xor_cultural_fit, managerial_review)
    model_unfair.order.add_edge(managerial_review, final_decision)
    
    return model_unfair

def create_powl_model_without_unfairness():
    """
    Creates a POWL model of the hiring process where the potential unfairness
    in cultural fit evaluation is removed. All applicants undergo the same
    cultural fit check.
    """
    # Define transitions (activities)
    receive_app = Transition(label="ReceiveApplication")
    parse_resume = Transition(label="ParseResume")
    data_comp_check = Transition(label="DataCompletenessCheck")
    req_more_info = Transition(label="RequestMoreInfo")
    skill_assessment = Transition(label="SkillAssessment")
    
    # Single, fair cultural fit check activity
    cultural_fit_check = Transition(label="CulturalFitCheck")

    managerial_review = Transition(label="ManagerialReview")
    final_decision = Transition(label="FinalDecision")

    # Define control-flow operators
    # Loop for data completeness (same as in the unfair model)
    loop_data_check = OperatorPOWL(operator=Operator.LOOP, children=[data_comp_check, req_more_info])

    # Define the overall process structure as a StrictPartialOrder
    # Nodes are the top-level activities and operator constructs in the process flow.
    # The xor_cultural_fit is replaced by the single cultural_fit_check activity.
    root_nodes = [
        receive_app,
        parse_resume,
        loop_data_check,
        skill_assessment,
        cultural_fit_check, # Replaces the XOR branch
        managerial_review,
        final_decision
    ]
    model_fair = StrictPartialOrder(nodes=root_nodes)

    # Define the order (sequence) of execution
    model_fair.order.add_edge(receive_app, parse_resume)
    model_fair.order.add_edge(parse_resume, loop_data_check)
    model_fair.order.add_edge(loop_data_check, skill_assessment)
    model_fair.order.add_edge(skill_assessment, cultural_fit_check) # Connect to the fair check
    model_fair.order.add_edge(cultural_fit_check, managerial_review)
    model_fair.order.add_edge(managerial_review, final_decision)
    
    return model_fair

if __name__ == '__main__':
    # Create the POWL model with potential unfairness
    powl_model_unfair = create_powl_model_with_unfairness()
    print("POWL Model with Potential Unfairness:")
    # A simple way to inspect the model structure (actual visualization/traversal would require more)
    print(f"Root node type: {type(powl_model_unfair)}")
    print(f"Number of top-level nodes: {len(powl_model_unfair.nodes)}")
    for i, node in enumerate(powl_model_unfair.nodes):
        if isinstance(node, Transition):
            print(f"  Node {i}: Transition_'{node.label}'")
        elif isinstance(node, OperatorPOWL):
            operator_type = "XOR" if node.operator == Operator.XOR else "LOOP"
            child_labels = [child.label for child in node.children if isinstance(child, Transition)]
            print(f"  Node {i}: OperatorPOWL_({operator_type}, children_labels={child_labels})")
    print("Edges:")
    for edge in powl_model_unfair.order:
        source_label = edge[0].label if isinstance(edge[0], Transition) else type(edge[0]).__name__
        target_label = edge[1].label if isinstance(edge[1], Transition) else type(edge[1]).__name__
        # For operators, let's try to get more specific names or identify them by their children
        if isinstance(edge[0], OperatorPOWL):
            source_label = f"Operator({[c.label for c in edge[0].children]})"
        if isinstance(edge[1], OperatorPOWL):
            target_label = f"Operator({[c.label for c in edge[1].children]})"
        print(f"  {source_label} --> {target_label}")

    print("\n" + "="*50 + "\n")

    # Create the POWL model without unfairness
    powl_model_fair = create_powl_model_without_unfairness()
    print("POWL Model Without Unfairness:")
    print(f"Root node type: {type(powl_model_fair)}")
    print(f"Number of top-level nodes: {len(powl_model_fair.nodes)}")
    for i, node in enumerate(powl_model_fair.nodes):
        if isinstance(node, Transition):
            print(f"  Node {i}: Transition_'{node.label}'")
        elif isinstance(node, OperatorPOWL):
            operator_type = "XOR" if node.operator == Operator.XOR else "LOOP"
            child_labels = [child.label for child in node.children if isinstance(child, Transition)]
            print(f"  Node {i}: OperatorPOWL_({operator_type}, children_labels={child_labels})")
    print("Edges:")
    for edge in powl_model_fair.order:
        source_label = edge[0].label if isinstance(edge[0], Transition) else type(edge[0]).__name__
        target_label = edge[1].label if isinstance(edge[1], Transition) else type(edge[1]).__name__
        if isinstance(edge[0], OperatorPOWL):
             source_label = f"Operator({[c.label for c in edge[0].children]})"
        if isinstance(edge[1], OperatorPOWL):
            target_label = f"Operator({[c.label for c in edge[1].children]})"
        print(f"  {source_label} --> {target_label}")

    # To visualize these models, one would typically use pm4py.view_powl(model, format="png")
    # For example (requires graphviz installed):
    # from pm4py import view_powl
    # view_powl(powl_model_unfair, format="png").view(filename="powl_model_unfair")
    # view_powl(powl_model_fair, format="png").view(filename="powl_model_fair")
```