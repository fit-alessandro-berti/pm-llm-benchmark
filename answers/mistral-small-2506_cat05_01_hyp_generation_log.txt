# Analysis of Order Event Log Anomalies

## Identified Anomalies

1. **Out-of-Sequence Events (Case 1002)**
   - Credit check performed after shipment confirmation (event 11 after event 9)
   - This violates the normal process flow where credit should be checked before shipment

2. **Premature Shipment Confirmation (Case 1002)**
   - Shipment confirmed (event 9) before stock validation (event 12)
   - This suggests potential stock availability issues or process shortcuts

3. **Late Shipment Confirmation (Case 1003)**
   - Shipment confirmed (event 19) after goods were shipped (event 17)
   - This indicates a documentation/process timing issue

4. **Payment Before Invoice (Case 1004)**
   - Payment received (event 22) before invoice issued (event 23)
   - This suggests either a system error or unusual payment arrangement

5. **Missing Credit Check (Case 1004)**
   - No credit check event recorded despite being a standard order
   - This could indicate a process bypass or system failure

## Hypothesized Causes

1. **Process Shortcuts (Cases 1002, 1003, 1004)**
   - Possible reasons:
     - Time pressure to meet customer expectations
     - Workaround for system limitations
     - Inadequate training on proper sequence
     - Departmental silos causing communication gaps

2. **System Errors (Case 1004)**
   - Payment recorded before invoice suggests:
     - System timing issues
     - Manual entry errors
     - Integration problems between systems

3. **Policy Violations (Case 1002)**
   - Credit check after shipment indicates:
     - Risk assessment being bypassed
     - Potential fraud risk
     - Inadequate oversight

## Proposed SQL Queries for Investigation

```sql
-- 1. Identify all cases with out-of-sequence events
WITH event_sequence AS (
    SELECT
        case_id,
        activity,
        event_id,
        LEAD(activity) OVER (PARTITION BY case_id ORDER BY event_id) AS next_activity
    FROM order_event_log
)
SELECT
    o.case_id,
    o.order_type,
    o.order_value,
    e.activity AS current_activity,
    e.next_activity,
    e.event_id,
    r.role AS current_role,
    r.department AS current_department
FROM event_sequence e
JOIN orders o ON e.case_id = o.case_id
JOIN resources r ON e.resource = r.resource_id
WHERE
    (e.activity = 'Confirm Shipment' AND e.next_activity = 'Perform Credit Check') OR
    (e.activity = 'Ship Goods' AND e.next_activity = 'Confirm Shipment') OR
    (e.activity = 'Receive Payment' AND e.next_activity = 'Issue Invoice')
ORDER BY o.case_id, e.event_id;

-- 2. Analyze time gaps between critical events
SELECT
    o.case_id,
    o.order_type,
    o.order_value,
    MAX(CASE WHEN e.activity = 'Register Order' THEN e.timestamp END) AS registration_time,
    MAX(CASE WHEN e.activity = 'Perform Credit Check' THEN e.timestamp END) AS credit_check_time,
    MAX(CASE WHEN e.activity = 'Confirm Shipment' THEN e.timestamp END) AS shipment_confirm_time,
    MAX(CASE WHEN e.activity = 'Ship Goods' THEN e.timestamp END) AS shipment_time,
    MAX(CASE WHEN e.activity = 'Issue Invoice' THEN e.timestamp END) AS invoice_time,
    MAX(CASE WHEN e.activity = 'Receive Payment' THEN e.timestamp END) AS payment_time,
    EXTRACT(EPOCH FROM (MAX(CASE WHEN e.activity = 'Confirm Shipment' THEN e.timestamp END) -
                       MAX(CASE WHEN e.activity = 'Perform Credit Check' THEN e.timestamp END))) / 60 AS credit_to_shipment_mins
FROM order_event_log e
JOIN orders o ON e.case_id = o.case_id
GROUP BY o.case_id, o.order_type, o.order_value
HAVING
    (credit_to_shipment_mins < 0) OR  -- Negative means credit check after shipment
    (MAX(CASE WHEN e.activity = 'Ship Goods' THEN e.timestamp END) <
     MAX(CASE WHEN e.activity = 'Confirm Shipment' THEN e.timestamp END)) OR
    (MAX(CASE WHEN e.activity = 'Receive Payment' THEN e.timestamp END) <
     MAX(CASE WHEN e.activity = 'Issue Invoice' THEN e.timestamp END))
ORDER BY o.case_id;

-- 3. Identify cases missing critical events
SELECT
    o.case_id,
    o.order_type,
    o.order_value,
    COUNT(DISTINCT e.activity) AS event_count,
    MAX(CASE WHEN e.activity = 'Perform Credit Check' THEN 1 ELSE 0 END) AS has_credit_check,
    MAX(CASE WHEN e.activity = 'Confirm Shipment' THEN 1 ELSE 0 END) AS has_shipment_confirm,
    MAX(CASE WHEN e.activity = 'Ship Goods' THEN 1 ELSE 0 END) AS has_shipment,
    MAX(CASE WHEN e.activity = 'Issue Invoice' THEN 1 ELSE 0 END) AS has_invoice,
    MAX(CASE WHEN e.activity = 'Receive Payment' THEN 1 ELSE 0 END) AS has_payment
FROM orders o
LEFT JOIN order_event_log e ON o.case_id = e.case_id
GROUP BY o.case_id, o.order_type, o.order_value
HAVING
    (has_credit_check = 0 AND order_type = 'standard') OR
    (has_shipment_confirm = 0) OR
    (has_shipment = 0) OR
    (has_invoice = 0) OR
    (has_payment = 0)
ORDER BY o.case_id;

-- 4. Analyze resource performance in anomalous cases
SELECT
    o.case_id,
    e.resource,
    r.role,
    r.department,
    COUNT(*) AS event_count,
    STRING_AGG(DISTINCT e.activity, ', ') AS activities_performed
FROM order_event_log e
JOIN orders o ON e.case_id = o.case_id
JOIN resources r ON e.resource = r.resource_id
WHERE o.case_id IN (
    SELECT case_id FROM (
        SELECT
            case_id,
            COUNT(DISTINCT activity) AS event_count,
            MAX(CASE WHEN activity = 'Perform Credit Check' THEN 1 ELSE 0 END) AS has_credit_check,
            MAX(CASE WHEN activity = 'Confirm Shipment' THEN 1 ELSE 0 END) AS has_shipment_confirm,
            MAX(CASE WHEN activity = 'Ship Goods' THEN 1 ELSE 0 END) AS has_shipment,
            MAX(CASE WHEN activity = 'Issue Invoice' THEN 1 ELSE 0 END) AS has_invoice,
            MAX(CASE WHEN activity = 'Receive Payment' THEN 1 ELSE 0 END) AS has_payment
        FROM order_event_log
        GROUP BY case_id
        HAVING
            (has_credit_check = 0) OR
            (has_shipment_confirm = 0) OR
            (has_shipment = 0) OR
            (has_invoice = 0) OR
            (has_payment = 0)
    ) t
)
GROUP BY o.case_id, e.resource, r.role, r.department
ORDER BY o.case_id, e.resource;

-- 5. Compare event timing patterns by department
SELECT
    r.department,
    e.activity,
    COUNT(*) AS event_count,
    AVG(EXTRACT(EPOCH FROM (e.timestamp - LAG(e.timestamp) OVER (PARTITION BY o.case_id ORDER BY e.event_id)))) / 60 AS avg_time_between_events_mins
FROM order_event_log e
JOIN orders o ON e.case_id = o.case_id
JOIN resources r ON e.resource = r.resource_id
GROUP BY r.department, e.activity
ORDER BY r.department, e.activity;
```

These queries will help identify patterns, root causes, and responsible departments for the observed anomalies in the order processing workflow.