```sql
-- First, we create a Common Table Expression (CTE) to identify the cases 
-- that contain the specific sequence of activities in direct succession.
WITH specific_sequence_cases AS (
    SELECT 
        e1.case_id
    FROM 
        event_log e1
    JOIN 
        event_log e2 ON e1.case_id = e2.case_id AND e2.activity = 'Create Order' 
            AND e2.timestamp > e1.timestamp
    JOIN 
        event_log e3 ON e2.case_id = e3.case_id AND e3.activity = 'Confirm Order' 
            AND e3.timestamp > e2.timestamp
    WHERE 
        e1.activity = 'Approve Purchase Requisition'
        -- Ensure no other events are between the specified activities
        AND NOT EXISTS (
            SELECT 1 FROM event_log eX 
            WHERE eX.case_id = e1.case_id 
                AND eX.timestamp > e1.timestamp 
                AND eX.timestamp < e2.timestamp
        )
        AND NOT EXISTS (
            SELECT 1 FROM event_log eY 
            WHERE eY.case_id = e1.case_id 
                AND eY.timestamp > e2.timestamp 
                AND eY.timestamp < e3.timestamp
        )
        -- Check if the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days
        AND e3.timestamp > e2.timestamp + INTERVAL '5' DAY
)
-- Now, we select all events from the event log except those belonging to the filtered-out cases
SELECT 
    *
FROM 
    event_log
WHERE 
    case_id NOT IN (SELECT case_id FROM specific_sequence_cases);
```

This query begins by identifying the `case_id`s that contain the exact sequence of activities `'Approve Purchase Requisition'`, `'Create Order'`, and `'Confirm Order'` with no other intervening activities. It then checks if the time elapsed between `'Create Order'` and `'Confirm Order'` is greater than five days. Finally, it excludes all events associated with these identified `case_id`s, returning all other events from the `event_log`.