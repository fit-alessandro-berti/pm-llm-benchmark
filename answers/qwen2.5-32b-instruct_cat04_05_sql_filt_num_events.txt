To achieve the task of filtering cases based on the number of events they contain and returning only those with six or fewer events, you can follow these steps using DuckDB SQL:

1. First, count the number of events per `case_id`.
2. Filter out `case_id` values that have more than six events.
3. Select all events for the remaining `case_id` values.

Here's how you can structure the SQL query:

```sql
WITH EventCounts AS (
    SELECT 
        case_id, 
        COUNT(*) AS event_count
    FROM 
        event_log
    GROUP BY 
        case_id
),
FilteredCases AS (
    SELECT 
        case_id
    FROM 
        EventCounts
    WHERE 
        event_count <= 6
)
SELECT 
    el.*
FROM 
    event_log el
JOIN 
    FilteredCases fc
ON 
    el.case_id = fc.case_id;
```

### Explanation:
1. **EventCounts CTE (Common Table Expression)**:
   - This CTE selects each `case_id` and counts the number of events for each `case_id`.
   - It groups the rows by `case_id` and counts the number of rows in each group.

2. **FilteredCases CTE**:
   - This CTE filters `case_id` values from the `EventCounts` CTE where the `event_count` is less than or equal to six.

3. **Final SELECT Statement**:
   - Finally, it selects all columns from the `event_log` table (`el.*`) but only for those `case_id` values that are in the `FilteredCases` CTE, ensuring that only cases with six or fewer events are included in the result.

This approach ensures that the final result contains only the events from cases that meet the criteria of having six or fewer events.