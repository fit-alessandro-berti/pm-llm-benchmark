To construct an accepting Petri net for the insurance claim management process described, we need to model the states, activities, and transitions. The Petri net will include places representing different stages of the process and transitions labeled with activity names. We will also define loops where re-submission of documents or in-depth investigation can occur.

Here is the Python code using `pm4py`:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Define the Petri net
net = PetriNet("Insurance Claim Management")

# Create places representing different states/stages of the process
start_place = PetriNet.Place(name="Start")
cr_place = PetriNet.Place(name="Claim Registration (CR)")
dv_place = PetriNet.Place(name="Document Verification (DV)")
rds_place = PetriNet.Place(name="Re-Document Submission (RDS)")
fc_place = PetriNet.Place(name="Fraud Check (FC)")
ii_place = PetriNet.Place(name="In-depth Investigation (II)")
ca_place = PetriNet.Place(name="Claim Assessment (CA)")
ap_place = PetriNet.Place(name="Approval (AP)")
payment_place = PetriNet.Place(name="Payment (P)")
notify_place = PetriNet.Place(name="Notification (N)")
closure_place = PetriNet.Place(name="Closure (CL)")

# Create transitions for each activity
cr_transition = PetriNet.Transition(name="Claim Registration")
dv_transition = PetriNet.Transition(name="Document Verification")
rds_transition = PetriNet.Transition(name="Re-Document Submission")
fc_transition = PetriNet.Transition(name="Fraud Check")
ii_transition = PetriNet.Transition(name="In-depth Investigation")
ca_transition = PetriNet.Transition(name="Claim Assessment")
ap_transition = PetriNet.Transition(name="Approval")
payment_transition = PetriNet.Transition(name="Payment")
notify_transition = PetriNet.Transition(name="Notification")
closure_transition = PetriNet.Transition(name="Closure")

# Add places and transitions to the net
net.places.add(start_place, cr_place, dv_place, rds_place, fc_place, ii_place, ca_place, ap_place, payment_place, notify_place, closure_place)
net.transitions.add(cr_transition, dv_transition, rds_transition, fc_transition, ii_transition, ca_transition, ap_transition, payment_transition, notify_transition)

# Connect the places and transitions
petri_utils.add_arc_from_to(start_place, cr_transition, net)  # Start -> CR

# Claim Registration to Document Verification (DV)
petri_utils.add_arc_from_to(cr_transition, dv_transition, net)
petri_utils.add_arc_from_to(dv_transition, cr_transition, net)  # DV -> RDS loop

# Document Verification (DV) to In-depth Investigation (II)
petri_utils.add_arc_from_to(dv_transition, fc_transition, net)
petri_utils.add_arc_from_to(fc_transition, ii_transition, net)
petri_utils.add_arc_from_to(ii_transition, fc_transition, net)  # FC -> II loop

# After in-depth investigation, go to Claim Assessment (CA) or back to DV
petri_utils.add_arc_from_to(ii_transition, ca_transition, net)
petri_utils.add_arc_from_to(ca_transition, ap_transition, net)

# Approval and Payment steps
petri_utils.add_arc_from_to(ap_transition, payment_transition, net)
petri_utils.add_arc_from_to(payment_transition, notify_transition, net)
petri_utils.add_arc_from_to(notify_transition, closure_transition, net)  # Notify -> Closure

# Final marking (closed claim)
im = Marking()
im[start_place] = 1
fm = Marking()
fm[closure_place] = 1

# Print the initial and final markings for verification
print("Initial Marking:", im)
print("Final Marking:", fm)

# Return the Petri net, marking (initial), and marking (final) as a tuple
return_value = (net, im, fm)
return return_value
```

### Explanation:
1. **Places:** Each step in the process is represented by a place.
2. **Transitions:** Each activity or decision point is represented by a transition.
3. **Arcs:** Arcs connect places and transitions to model the flow of the process, including loops for re-submission and in-depth investigation.

### Initial Marking:
- The initial marking (`im`) places a token on the `Start` place to indicate that a new claim has arrived.

### Final Marking:
- The final marking (`fm`) places a token on the `Closure (CL)` place to indicate that the claim is fully processed and closed.

This Petri net model will help simulate and analyze the insurance claim management process, ensuring all necessary steps are covered.