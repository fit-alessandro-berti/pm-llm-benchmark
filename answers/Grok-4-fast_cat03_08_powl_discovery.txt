```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()

# IQC loop: one or more IQC
iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, skip])

# Assembly phase: AS (iqc_loop AS)*
assembly_phase = OperatorPOWL(operator=Operator.LOOP, children=[AS, iqc_loop])

# Testing phase: TST (RT TST)*
testing_phase = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Labeling choice: LB or skip
labeling_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

# Root partial order (sequential chain)
root = StrictPartialOrder(nodes=[OR, MS, QS, assembly_phase, testing_phase, PK, labeling_choice, DP, D])

# Add ordering edges
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, assembly_phase)
root.order.add_edge(assembly_phase, testing_phase)
root.order.add_edge(testing_phase, PK)
root.order.add_edge(PK, labeling_choice)
root.order.add_edge(labeling_choice, DP)
root.order.add_edge(DP, D)
```