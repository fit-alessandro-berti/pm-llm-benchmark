```sql
WITH OrderedEvents AS (
    SELECT
        case_id,
        activity,
        timestamp,
        LAG(activity, 1, NULL) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
        LAG(activity, 2, NULL) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_prev_activity,
        LEAD(timestamp, 1, NULL) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp
    FROM
        event_log
),
FilteredCases AS (
    SELECT DISTINCT
        case_id
    FROM
        OrderedEvents
    WHERE
        activity = 'Confirm Order'
        AND prev_activity = 'Create Order'
        AND prev_prev_activity = 'Approve Purchase Requisition'
        AND next_timestamp IS NOT NULL
        AND next_timestamp - timestamp > INTERVAL '5 days'
)
SELECT
    el.*
FROM
    event_log el
LEFT JOIN
    FilteredCases fc ON el.case_id = fc.case_id
WHERE
    fc.case_id IS NULL
ORDER BY
    el.case_id, el.timestamp;
```

**Explanation:**

1. **OrderedEvents CTE:**
    *   This CTE adds three new columns using the `LAG` window function: `prev_activity`, `prev_prev_activity`, and `next_timestamp`.
    *   `prev_activity` and `prev_prev_activity` contain the names of the activities that occurred immediately before and two steps before the current activity, respectively, within the same `case_id`.
    *   `next_timestamp` contains the timestamp of the next event in the same case, used later to calculate the time difference.
    *   We partition by `case_id` and order by `timestamp` to ensure the window functions operate within each case and in chronological order.

2. **FilteredCases CTE:**
    *   This CTE identifies the `case_id`s that meet both the sequence and timing criteria.
    *   It filters the `OrderedEvents` CTE to select rows where:
        *   `activity` is 'Confirm Order'
        *   `prev_activity` is 'Create Order'
        *   `prev_prev_activity` is 'Approve Purchase Requisition'
        *   `next_timestamp` is not NULL (to avoid errors when calculating the time difference)
        *   The difference between `next_timestamp` and `timestamp` is greater than 5 days.
    *   `DISTINCT` ensures we only get unique `case_id`s.

3. **Final SELECT Statement:**
    *   It performs a `LEFT JOIN` between the original `event_log` table (`el`) and the `FilteredCases` CTE (`fc`) on `case_id`.
    *   The `WHERE` clause `fc.case_id IS NULL` filters out the rows where a match was found in `FilteredCases`, effectively excluding events from the cases that met both criteria.
    *   Finally, it orders the result by `case_id` and `timestamp` for better readability.

This query effectively identifies and removes all events associated with cases that have the specific sequence of three activities where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days. The result includes only the events from cases that do not satisfy both conditions.
