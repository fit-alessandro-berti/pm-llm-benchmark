```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri Net
net = PetriNet(name="Insurance Claim Process")

# Create Places
p_start = PetriNet.Place(name="start")
p_cr = PetriNet.Place(name="after_cr")
p_dv = PetriNet.Place(name="after_dv")
p_fc = PetriNet.Place(name="after_fc")
p_ca = PetriNet.Place(name="after_ca")
p_ap = PetriNet.Place(name="after_ap")
p_p = PetriNet.Place(name="after_p")
p_n = PetriNet.Place(name="after_n")
p_cl = PetriNet.Place(name="after_cl")

# Create Transitions
t_cr = PetriNet.Transition(name="Claim Registration", label="CR")
t_dv = PetriNet.Transition(name="Document Verification", label="DV")
t_rds = PetriNet.Transition(name="Re-Document Submission", label="RDS")
t_fc = PetriNet.Transition(name="Fraud Check", label="FC")
t_ii = PetriNet.Transition(name="In-depth Investigation", label="II")
t_ca = PetriNet.Transition(name="Claim Assessment", label="CA")
t_ap = PetriNet.Transition(name="Approval", label="AP")
t_p = PetriNet.Transition(name="Payment", label="P")
t_n = PetriNet.Transition(name="Notification", label="N")
t_cl = PetriNet.Transition(name="Closure", label="CL")

# Add Places and Transitions to the Net
net.places.add(p_start)
net.places.add(p_cr)
net.places.add(p_dv)
net.places.add(p_fc)
net.places.add(p_ca)
net.places.add(p_ap)
net.places.add(p_p)
net.places.add(p_n)
net.places.add(p_cl)

net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)


# Add Arcs to define the workflow
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_cr, net)
petri_utils.add_arc_from_to(p_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv, net)

# Loop for Re-Document Submission
petri_utils.add_arc_from_to(p_dv, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_dv, net)

petri_utils.add_arc_from_to(p_dv, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc, net)

# Loop for In-depth Investigation
petri_utils.add_arc_from_to(p_fc, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_fc, net)

petri_utils.add_arc_from_to(p_fc, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_ca, net)
petri_utils.add_arc_from_to(p_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ap, net)
petri_utils.add_arc_from_to(p_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, p_p, net)
petri_utils.add_arc_from_to(p_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_n, net)
petri_utils.add_arc_from_to(p_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_cl, net)


# Define Initial Marking
im = Marking()
im[p_start] = 1

# Define Final Marking
fm = Marking()
fm[p_cl] = 1


# You can print the net, initial marking and final marking to verify:
# print(net)
# print(im)
# print(fm)
```
