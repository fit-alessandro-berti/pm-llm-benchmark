 To achieve the desired result, we need to perform several steps in our SQL query:

1. Identify the sequence of events within each case.
2. Calculate the time difference between the 'Create Order' and 'Confirm Order' events.
3. Filter out the cases that match the sequence and have a time difference of more than 5 days.
4. Select all events from the remaining cases.

Here's a query that accomplishes this:

```sql
WITH SequencedEvents AS (
    SELECT
        e1.case_id,
        e1.activity AS activity1,
        e2.activity AS activity2,
        e3.activity AS activity3,
        e2.timestamp AS create_order_timestamp,
        e3.timestamp AS confirm_order_timestamp
    FROM
        event_log e1
    JOIN
        event_log e2 ON e1.case_id = e2.case_id AND e1.timestamp < e2.timestamp
    JOIN
        event_log e3 ON e2.case_id = e3.case_id AND e2.timestamp < e3.timestamp
    WHERE
        e1.activity = 'Approve Purchase Requisition' AND
        e2.activity = 'Create Order' AND
        e3.activity = 'Confirm Order'
),
FilteredCases AS (
    SELECT
        case_id
    FROM
        SequencedEvents
    WHERE
        DATEDIFF(day, create_order_timestamp, confirm_order_timestamp) > 5
)
SELECT
    e.case_id,
    e.activity,
    e.timestamp
FROM
    event_log e
WHERE
    e.case_id NOT IN (SELECT case_id FROM FilteredCases)
ORDER BY
    e.case_id,
    e.timestamp;
```

Explanation of the query:

- The `SequencedEvents` Common Table Expression (CTE) identifies cases with the specific sequence of activities by joining the `event_log` table with itself three times. It ensures that the events are in the correct order and belong to the same case.
- The `FilteredCases` CTE filters out the cases where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.
- The final `SELECT` statement retrieves all events from the `event_log` table, excluding those from cases that are present in the `FilteredCases` CTE.
- The results are ordered by `case_id` and `timestamp` to ensure a logical sequence of events.

Please note that the `DATEDIFF` function is used to calculate the difference in days between two timestamps. The exact syntax for date and time functions may vary depending on the SQL dialect, but this should work for DuckDB as it supports similar SQL standard functions.

Make sure to replace `DATEDIFF(day, create_order_timestamp, confirm_order_timestamp)` with the appropriate function if the syntax is different in your version of DuckDB.