Here is an example of how you might construct a Petri net for this complex insurance claim management process using Python's `pm4py` library. This code creates places for each activity, transitions between them with appropriate labels, and includes additional logic to handle re-submission if documents are incomplete or in-depth investigations.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking

# Define the initial marking (initial state)
im = Marking()
place_start = 0  # Placeholder for a start place
im.add(place_start)

# Define additional places and transitions based on your process.
source = PetriNet.Place(name="source")
sink = PetriNet.Place(name="sink")

execute_activity = PetriNet.Transition(name="execute_activity", label="Execute Activity")
doc_verification = PetriNet.Transition(name="doc_verification", label="Document Verification")
fraud_check = PetriNet.Transition(name="fraud_check", label="Fraud Check")
assessment = PetriNet.Transition(name="assessment", label="Claim Assessment")
approval = PetriNet.Transition(name="approval", label="Approval (if needed)")
payment = PetriNet.Transition(name="payment", label="Payment out to customer")

# Example transitions for documents and investigation steps
doc_verification.add_arc(from_=place_start, 
                          to=execute_activity)
doc_verification.add_arc(from_=exe