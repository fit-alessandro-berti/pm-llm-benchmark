<think>
First, I need to understand the process described. It's an insurance claim management process with several steps: Claim Registration (CR), Document Verification (DV), Fraud Check (FC), Claim Assessment (CA), Approval (AP), Payment (P), Notification (N), and Closure (CL). There are also optional loops: after DV, there might be a need for Re-Document Submission (RDS), and after FC, there might be an In-Depth Investigation (II) which can happen multiple times.

In Petri nets, places represent states, and transitions represent events or activities that change the state. So, I need to create places that represent the states between these activities, and transitions that are labeled with the activity names.

Let me outline the main flow:

- Start with a new claim arriving.

- Then CR (Claim Registration).

- After CR, go to DV (Document Verification).

- After DV, if documents are okay, go to FC; if not, go to RDS, and then back to DV.

- After FC, if no issues, go to CA; if doubts, go to II, and then back to FC, and this can loop.

- After CA, go to AP if the amount is high, but the description says "Approval (AP): The claim must be approved by a senior manager if the amount surpasses a certain threshold." So, AP might not always happen. I need to model that.

Re-reading: "The claim must be approved by a senior manager if the amount surpasses a certain threshold." So, after CA, there might be a branch: if amount high, go to AP, then to P; if not, directly to P or something. But the sequence listed is CA then AP then P, but it says "must be approved if amount surpasses", implying that if not, maybe skip AP.

Looking back: the steps are listed in order: CR, DV, FC, CA, AP, P, N, CL. But with conditions.

To simplify, perhaps in the Petri net, I need to model the possible paths.

Also, the loops: after DV, possible RDS and back to DV.

After FC, possible II and back to FC.

And the end: after P, N, then CL.

The final marking is when the claim is closed.

Initial marking: start place with a token.

So, let's define the places. In Petri nets for process modeling, often there are places before and after transitions to represent the flow.

A common way is to have a place for each state between activities.

For example:

- A start place.

- After start, transition for CR, then a place after CR.

- Then from that place, transition for DV, then a place after DV.

But with loops, I need to handle the decisions.

For the loop after DV: after DV, there might be a decision: documents ok or not.

Similarly after FC.

In Petri nets, decisions can be modeled with multiple outgoing arcs from a place, or with silent transitions, but since we're labeling transitions with activities, perhaps I need transitions for the activities and places for states.

I can have transitions for the main activities, and use places to control the flow.

Let me sketch the sequence.

Define the transitions first, based on activities:

- T_CR: Claim Registration, label "Claim Registration"

- T_DV: Document Verification, label "Document Verification"

- T_FC: Fraud Check, label "Fraud Check"

- T_CA: Claim Assessment, label "Claim Assessment"

- T_AP: Approval, label "Approval" (but this might be conditional)

- T_P: Payment, label "Payment"

- T_N: Notification, label "Notification"

- T_CL: Closure, label "Closure"

Additional transitions for loops:

- T_RDS: Re-Document Submission, label "Re-Document Submission"

- T_II: In-depth Investigation, label "In-depth Investigation"

Now, places to connect them.

Start with a place, say P_start.

Arc from P_start to T_CR.

After T_CR, a place, say P_after_CR.

From P_after_CR to T_DV.

After T_DV, now there's a decision: if documents ok, go to FC; if not, go to RDS.

In Petri nets, to model choices, we can have multiple outgoing arcs from a place, but the enabling depends on the marking.

A standard way is to have a place after DV, and from that place, two possible transitions: one to go directly to FC if ok, but since the decision isn't explicit, perhaps I need a place that can lead to either T_FC or T_RDS.

But T_RDS is an activity, so probably after DV, if not ok, T_RDS fires, then back to DV or something.

From the description: "if documents are incomplete after Document Verification (DV), a re-submission of documents step occurs (RDS) before the process continues."

So, after DV, if incomplete, do RDS, then probably back to DV to verify again.

Similarly for FC and II.

So, perhaps the flow is:

- After DV, there is a check: if docs ok, proceed to FC; else, do RDS, then back to DV.

But in Petri nets, since transitions are the actions, I might need to model the decision implicitly.

One way is to have the place after DV connected to two transitions: one is a silent transition for "docs ok" leading to FC, and another for "docs not ok" leading to RDS.

But the prompt specifies that transitions are labeled with activity names, so probably I should avoid silent transitions if possible.

I can have T_DV itself, and then the place after T_DV can have arcs to T_FC and to T_RDS, but that might not make sense because T_RDS is an activity that should be fired when needed.

Perhaps better to have:

- After T_DV, a place P_DV_done.

- From P_DV_done, an arc to T_FC if docs ok.

But to model the loop, I need a way to choose.

A common way in Petri nets for such loops is to have the verification transition, and if not passed, fire a transition that loops back.

But since RDS is an explicit activity, probably:

- From P_before_DV, arc to T_DV.

- After T_DV, to a place P_DV_result.

- From P_DV_result, two possible paths: if ok, to T_FC; if not, to T_RDS.

But how to model the choice? In standard Petri nets, the choice is non-deterministic, which might be fine for this model, as it can represent that depending on the case, different paths are taken.

Similarly for FC.

For the approval, it might be conditional, but perhaps I can assume that AP is always there, or model it as optional.

The description says "must be approved if amount surpasses threshold", so perhaps after CA, there is a decision to go to AP or directly to P.

To keep it simple, perhaps I can have AP always in the path, or add a branch.

But in the sequence listed, it's CA then AP then P, so maybe it's part of the main flow.

I'll assume the main flow includes AP, and the conditions are handled within the activities.

But for the loops, I need to model them.

Let me define the places and transitions.

Define transitions with labels:

- T_CR: "Claim Registration"

- T_DV: "Document Verification"

- T_RDS: "Re-Document Submission" (for the loop back to DV)

- T_FC: "Fraud Check"

- T_II: "In-depth Investigation" (for the loop back to FC)

- T_CA: "Claim Assessment"

- T_AP: "Approval"

- T_P: "Payment"

- T_N: "Notification"

- T_CL: "Closure"

Now, places: I need places between them to control the flow.

Start with P_start.

Arc: P_start -> T_CR

After T_CR, P_after_CR

Arc: T_CR -> P_after_CR

Then P_after_CR -> T_DV

After T_DV, now for the DV loop.

After T_DV, go to a place, say P_DV_check.

From P_DV_check, it can go to T_FC if ok, or to T_RDS if not.

Since the choice is part of the process, I can have two outgoing arcs from P_DV_check: one to T_FC and one to T_RDS.

Then, after T_RDS, it should go back to T_DV or to P_before_DV.

Typically, after an activity, we have a place, then arc to the next transition.

So, perhaps:

From T_DV -> P_DV_done

From P_DV_done, arc to T_FC (meaning docs ok)

And from P_DV_done, arc to T_RDS (meaning docs not ok)

Then, after T_RDS, it should go back to DV, so T_RDS -> P_before_DV or something.

I need to define the places carefully.

Define a place before each activity group.

- P_start

- T_CR -> P_CR_done

- P_CR_done -> T_DV

- T_DV -> P_DV_done

Now, from P_DV_done, since there might be a loop, I can have P_DV_done with two outgoing arcs: one to T_FC, and one to T_RDS.

But if I do that, when a token is in P_DV_done, both T_FC and T_RDS could be enabled if there are no conflicts, but in Petri nets, if both are enabled, non-determinism allows firing either.

In this case, it's intended that depending on the case, one or the other is taken, so it's ok.

Then, from T_RDS, where does it go? After re-submission, it should go back to verification, so T_RDS -> P_before_DV, but I don't have P_before_DV; I have P_CR_done -> T_DV, so perhaps T_RDS -> P_CR_done or directly to T_DV?

Probably directly to the input place of T_DV, but T_DV's input is from P_CR_done or from somewhere.

In my current setup, T_DV has input from P_CR_done.

But if I want to loop back after T_RDS, I can have T_RDS -> P_CR_done, so it goes back to the place before DV.

P_CR_done is after CR and before DV, so yes.

P_CR_done has a token when it's time for DV.

So, from T_RDS -> P_CR_done, then from P_CR_done -> T_DV can fire again.

In Petri nets, places can have multiple incoming arcs.

Currently, P_CR_done has incoming from T_CR.

If I add incoming from T_RDS, then when T_RDS fires, it puts a token in P_CR_done, enabling T_DV again.

From P_DV_done, if I have an arc to T_FC, that means when P_DV_done has a token, T_FC can fire directly, but T_FC should have its own input place.

I think I need to define the places as the states where an activity is about to start.

Standard way: each transition has input places and output places.

For sequential flow, P1 -> T1 -> P2 -> T2 -> P3, etc.

For branches, P2 can have multiple outgoing transitions.

Let me define the main path without loops first.

Main path: start -> CR -> DV -> FC -> CA -> AP -> P -> N -> CL -> end

But with loops.

So, for DV part: after DV, if ok, to FC; else, to RDS, then back to DV.

So, perhaps: P_before_DV -> T_DV -> P_after_DV

From P_after_DV, arc to T_FC (if ok)

And arc to T_RDS (if not ok)

Then T_RDS -> P_before_DV (back to before DV)

Similarly for FC: P_before_FC -> T_FC -> P_after_FC

From P_after_FC, arc to T_CA (if no issues)

And arc to T_II (if doubts)

T_II -> P_before_FC (back to before FC)

Then the rest is sequential: P_before_CA -> T_CA -> P_after_CA -> T_AP -> P_after_AP -> T_P -> P_after_P -> T_N -> P_after_N -> T_CL -> P_end

I need to connect them.

After P_after_DV, when it goes to T_FC, but T_FC should have an input place.

In the above, from P_after_DV directly to T_FC, but T_FC might need its own input place.

Better to define P_before each transition.

Define places as "waiting for" a particular activity.

- P_start: waiting to start CR

- T_CR: Claim Registration

- P_wait_DV: waiting for DV

- T_DV: Document Verification

- P_DV_result: after DV, decision point

From P_DV_result, to T_FC or to T_RDS

T_FC should have an input place, say P_wait_FC

Perhaps:

From T_DV -> P_DV_ok_or_not

Then from P_DV_ok_or_not -> T_FC if ok, or -> T_RDS if not.

But when T_FC fires, it should consume the token from P_DV_ok_or_not and produce a token in P_after_FC or something.

Standard is: transition consumes tokens from input places and produces to output places.

So, for the choice, P_DV_result can be an input place for both T_FC and T_RDS.

T_FC has input P_DV_result, output P_wait_CA or something.

Let's define the flow with places.

Define the sequence with loops.

Start:

- Place: P_start

- Transition: T_CR, input: P_start, output: P_wait_DV

- Place: P_wait_DV

- Transition: T_DV, input: P_wait_DV, output: P_DV_decision

- Place: P_DV_decision  (this place has the token after DV is done, and now decision to go to FC or RDS)

- From P_DV_decision, two possibilities:

  - Transition: T_go_to_FC (but I don't want a silent transition; I want the activities labeled)

Since the decision isn't an activity, perhaps it's ok to have the place with multiple outgoing transitions to the next activities.

In this case, from P_DV_decision, I can have an arc to T_FC, and an arc to T_RDS.

T_FC and T_RDS both consume the token from P_DV_decision.

Then, for T_RDS, after it fires, it should go back to DV, so T_RDS has output to P_wait_DV.

P_wait_DV is the input for T_DV, so if T_RDS outputs to P_wait_DV, then T_DV can fire again.

Similarly, for T_FC, it should output to a place for the next activity.

After T_FC fires (if no issues), it should go to CA, but there's a loop for FC as well.

Similar for FC.

So, let's define for DV part:

- T_DV outputs to P_DV_decision

- P_DV_decision has two outgoing arcs: to T_FC and to T_RDS? No, the arcs are from places to transitions or transitions to places.

Arcs are between places and transitions.

So, P_DV_decision is a place, so it can have outgoing arcs to transitions.

If I have an arc from P_DV_decision to T_FC, that means T_FC is enabled when P_DV_decision has a token, and firing T_FC consumes the token from P_DV_decision.

Similarly, if I have another arc from P_DV_decision to T_RDS, then T_RDS is also enabled, and firing it consumes the token.

So, when a token is in P_DV_decision, either T_FC or T_RDS can fire, non-deterministically.

If T_RDS fires, I need T_RDS to have an output arc to a place that enables T_DV again.

T_DV's input is P_wait_DV, so T_RDS should output to P_wait_DV.

But P_wait_DV is also the output of T_CR.

So, T_RDS output to P_wait_DV.

Then, when T_RDS fires, it consumes token from P_DV_decision and produces token in P_wait_DV, so T_DV can fire again.

If T_FC fires from P_DV_decision, it consumes the token and should produce a token in the next place, say P_FC_decision or P_wait_CA, but there's the FC loop.

For FC, similar thing.

After T_FC fires, there should be a decision: if no issues, go to CA; if doubts, go to II, then back to FC.

So, perhaps T_FC outputs to P_FC_decision.

From P_FC_decision, arc to T_CA and arc to T_II.

T_II outputs back to P_wait_FC or something.

T_FC has input from where? In the DV part, if T_FC is fired from P_DV_decision, then T_FC's input is P_DV_decision, but that might not be accurate because T_FC is "Fraud Check", which should have its own "waiting for FC" state.

Perhaps it's better to have separate places for each "waiting" state.

Let me redefine.

Let's have:

- P_start -> T_CR -> P_wait_DV

- P_wait_DV -> T_DV -> P_wait_RDS_or_FC

No.

After T_DV, the decision is made, but T_DV itself is the verification.

Perhaps:

- After T_DV, output to P_DV_pass, and if pass, go to FC, else to RDS.

But in Petri nets, I can have T_DV output to a place, and from that place, branches.

Since RDS is an activity, perhaps T_DV always outputs to a place that enables the next, but with the loop.

Another way: have T_DV output to P_after_DV, and from P_after_DV, arc to T_FC if docs ok, but since it's a place, I can have multiple transitions enabled.

But let's define T_FC with its own input.

Perhaps introduce intermediate places.

  - T_DV outputs to P_DV_result.

  - From P_DV_result, if docs ok, fire a transition to P_wait_FC, but I don't want extra transitions.

  Since the activities are the transitions, I can have:

  - P_wait_DV -> T_DV -> P_DV_decision

  - P_DV_decision -> T_FC  (meaning go to FC if ok)

  - P_DV_decision -> T_RDS  (meaning go to RDS if not ok)

  Then T_RDS -> P_wait_DV  (back to waiting for DV)

  For T_FC, when it fires, it consumes from P_DV_decision and should produce to a place for its own decision.

  T_FC should have output to P_FC_decision.

  So, T_FC input: P_DV_decision, output: P_FC_decision

  Then P_FC_decision has arcs to T_CA and to T_II

  T_II input: P_FC_decision, output: P_wait_FC or back to input of T_FC.

  T_FC's input is P_DV_decision, which is not good because P_DV_decision is specific to DV.

  This is messy.

  Better to have a separate waiting place for each activity.

  Let's define:

  - P_start -> T_CR -> P_wait_DV

  - P_wait_DV -> T_DV -> P_after_DV

  Now, from P_after_DV, it can go to P_wait_FC if ok, or to P_wait_RDS if not.

  But P_wait_RDS and P_wait_FC are places, but the arc is from place to transition, so I need transitions for the choices or something.

  In Petri nets, the choice is made by which transition is fired from a place.

  So, from P_after_DV, I can have two outgoing arcs: one to a transition T_proceed_to_FC (silent), outputting to P_wait_FC, and another to T_start_RDS, but I want T_RDS to be the activity.

  Perhaps make T_RDS the transition that is fired when re-submission is needed, and it outputs back to P_wait_DV.

  But from P_after_DV, the transition for "docs ok" isn't an activity, so perhaps use a silent transition.

  In pm4py, silent transitions can be created with label=None.

  The prompt doesn't specify, but in the example, transitions have labels, but I can have unlabeled transitions for decisions.

  To keep it with labeled transitions only, I can incorporate the decision into the places.

  But I think using silent transitions for decisions is acceptable.

  Let's do that to make it cleaner.

  So, for the DV loop:

- P_wait_DV -> T_DV -> P_DV_decision

  - P_DV_decision -> T_silent_DV_ok -> P_wait_FC  (silent transition, label=None)

  - P_DV_Decision -> T_RDS -> P_wait_DV  (T_RDS is "Re-Document Submission", and it loops back to P_wait_DV)

  When P_DV_decision has a token, either T_silent_DV_ok or T_RDS can fire.

  If T_silent_DV_ok fires, it goes to P_wait_FC.

  If T_RDS fires, it consumes the token and produces in P_wait_DV, so DV can be done again.

  Similarly for FC.

  For FC:

  - P_wait_FC -> T_FC -> P_FC_decision

  - P_FC_decision -> T_silent_FC_ok -> P_wait_CA  (silent)

  - P_FC_decision -> T_II -> P_wait_FC  (T_II is "In-depth Investigation", loops back to P_wait_FC)

  Then for the rest, sequential.

  - P_wait_CA -> T_CA -> P_wait_AP

  - P_wait_AP -> T_AP -> P_wait_P

  - P_wait_P -> T_P -> P_wait_N

  - P_wait_N -> T_N -> P_wait_CL

  - P_wait_CL -> T_CL -> P_end

  And initial marking: token in P_start

  Final marking: token in P_end

  Now, for the silent transitions, I need to create them with label=None.

  Also, in the code, I need to add all places, transitions, and arcs.

  First, create the Petri net.

  net = PetriNet("Insurance Claim Process")

  Then create all places:

  P_start = PetriNet.Place("p_start")

  P_wait_DV = PetriNet.Place("p_wait_dv")

  P_DV_decision = PetriNet.Place("p_dv_decision")

  P_wait_FC = PetriNet.Place("p_wait_fc")

  P_FC_decision = PetriNet.Place("p_fc_decision")

  P_wait_CA = PetriNet.Place("p_wait_ca")

  P_wait_AP = PetriNet.Place("p_wait_ap")

  P_wait_P = PetriNet.Place("p_wait_p")

  P_wait_N = PetriNet.Place("p_wait_n")

  P_wait_CL = PetriNet.Place("p_wait_cl")

  P_end = PetriNet.Place("p_end")

  And for the silent transitions:

  T_silent_DV_ok = PetriNet.Transition("t_silent_dv_ok", None)  # label=None for silent

  T_silent_FC_ok = PetriNet.Transition("t_silent_fc_ok", None)

  Now transitions with labels:

  T_CR = PetriNet.Transition("t_cr", "Claim Registration")

  T_DV = PetriNet.Transition("t_dv", "Document Verification")

  T_RDS = PetriNet.Transition("t_rds", "Re-Document Submission")

  T_FC = PetriNet.Transition("t_fc", "Fraud Check")

  T_II = PetriNet.Transition("t_ii", "In-depth Investigation")

  T_CA = PetriNet.Transition("t_ca", "Claim Assessment")

  T_AP = PetriNet.Transition("t_ap", "Approval")

  T_P = PetriNet.Transition("t_p", "Payment")

  T_N = PetriNet.Transition("t_n", "Notification")

  T_CL = PetriNet.Transition("t_cl", "Closure")

  Now add all to net.

  net.places.add(P_start, P_wait_DV, P_DV_decision, P_wait_FC, P_FC_decision, P_wait_CA, P_wait_AP, P_wait_P, P_wait_N, P_wait_CL, P_end)

  net.transitions.add(T_CR, T_DV, T_RDS, T_FC, T_II, T_CA, T_AP, T_P, T_N, T_CL, T_silent_DV_ok, T_silent_FC_ok)

  Now arcs.

  Using petri_utils.add_arc_from_to

  add_arc_from_to(from_obj, to_obj, petri_net)

  Arcs are from places to transitions or transitions to places.

  So:

  # From P_start to T_CR

  petri_utils.add_arc_from_to(P_start, T_CR, net)

  # From T_CR to P_wait_DV

  petri_utils.add_arc_from_to(T_CR, P_wait_DV, net)

  # From P_wait_DV to T_DV

  petri_utils.add_arc_from_to(P_wait_DV, T_DV, net)

  # From T_DV to P_DV_decision

  petri_utils.add_arc_from_to(T_DV, P_DV_decision, net)

  # From P_DV_decision to T_silent_DV_ok and to T_RDS

  petri_utils.add_arc_from_to(P_DV_decision, T_silent_DV_ok, net)

  petri_utils.add_arc_from_to(P_DV_decision, T_RDS, net)

  # From T_silent_DV_ok to P_wait_FC

  petri_utils.add_arc_from_to(T_silent_DV_ok, P_wait_FC, net)

  # From T_RDS to P_wait_DV  (loop back)

  petri_utils.add_arc_from_to(T_RDS, P_wait_DV, net)

  Now for FC part.

  # From P_wait_FC to T_FC

  petri_utils.add_arc_from_to(P_wait_FC, T_FC, net)

  # From T_FC to P_FC_decision

  petri_utils.add_arc_from_to(T_FC, P_FC_decision, net)

  # From P_FC_decision to T_silent_FC_ok and to T_II

  petri_utils.add_arc_from_to(P_FC_decision, T_silent_FC_ok, net)

  petri_utils.add_arc_from_to(P_FC_decision, T_II, net)

  # From T_silent_FC_ok to P_wait_CA

  petri_utils.add_arc_from_to(T_silent_FC_ok, P_wait_CA, net)

  # From T_II to P_wait_FC  (loop back)

  petri_utils.add_arc_from_to(T_II, P_wait_FC, net)

  Now sequential part.

  # From P_wait_CA to T_CA

  petri_utils.add_arc_from_to(P_wait_CA, T_CA, net)

  # From T_CA to P_wait_AP

  petri_utils.add_arc_from_to(T_CA, P_wait_AP, net)

  # From P_wait_AP to T_AP

  petri_utils.add_arc_from_to(P_wait_AP, T_AP, net)

  # From T_AP to P_wait_P

  petri_utils.add_arc_from_to(T_AP, P_wait_P, net)

  # From P_wait_P to T_P

  petri_utils.add_arc_from_to(P_wait_P, T_P, net)

  # From T_P to P_wait_N

  petri_utils.add_arc_from_to(T_P, P_wait_N, net)

  # From P_wait_N to T_N

  petri_utils.add_arc_from_to(P_wait_N, T_N, net)

  # From T_N to P_wait_CL

  petri_utils.add_arc_from_to(T_N, P_wait_CL, net)

  # From P_wait_CL to T_CL

  petri_utils.add_arc_from_to(P_wait_CL, T_CL, net)

  # From T_CL to P_end

  petri_utils.add_arc_from_to(T_CL, P_end, net)

  Now, initial and final markings.

  im = Marking()

  im[P_start] = 1

  fm = Marking()

  fm[P_end] = 1

  In the FC part, after the silent transition, it goes to P_wait_CA, which is correct.

  Also, for the approval, I assumed it's always there, but according to the description, it might be conditional. However, since the main sequence includes it, and to keep it simple, I'll leave it as is. If needed, I could add another branch, but it might complicate things.

  Now, in the code, I need to import the necessary modules.

  from pm4py.objects.petri_net.obj import PetriNet, Marking

  from pm4py.objects.petri_net.utils import petri_utils

  Then construct the net as above.

  In the transitions, I used names like "t_cr", but in the label, I have the activity name.

  In the place names, I used "p_start", etc., but it's fine.

  Now, to write the Python code.

  Also, at the end, define im and fm.

  Similar to the example.

  In the example, they removed a place, but I don't need to.

  So, the code should work.

  Let me write it.

First, import statements.

Then create net.

Then create all places and add to net.places.

In pm4py, when adding, it's net.places.add(place), but in the example, they used net.places.add(source), so probably add multiple.

In Python, set.add can add multiple? No, probably add one by one or use update.

In the example: net.places.add(source) and net.places.add(sink), so add one by one.

Similarly for transitions.

And for arcs, use petri_utils.add_arc_from_to.

Also, for the silent transitions, label=None.

Now, code.

In the final marking, it should be when the claim is closed, which is P_end.

Initial is P_start.

I think this covers the scenario.

For the approval, if it's conditional, but I'll assume it's part of the flow.

Now, write the code.
</think>

```python
import pm4py.objects.petri_net.obj as pn_obj
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = pn_obj.PetriNet(name="Insurance Claim Management Process")

# Create places
p_start = pn_obj.PetriNet.Place(name="p_start")
p_wait_dv = pn_obj.PetriNet.Place(name="p_wait_dv")
p_dv_decision = pn_obj.PetriNet.Place(name="p_dv_decision")
p_wait_fc = pn_obj.PetriNet.Place(name="p_wait_fc")
p_fc_decision = pn_obj.PetriNet.Place(name="p_fc_decision")
p_wait_ca = pn_obj.PetriNet.Place(name="p_wait_ca")
p_wait_ap = pn_obj.PetriNet.Place(name="p_wait_ap")
p_wait_p = pn_obj.PetriNet.Place(name="p_wait_p")
p_wait_n = pn_obj.PetriNet.Place(name="p_wait_n")
p_wait_cl = pn_obj.PetriNet.Place(name="p_wait_cl")
p_end = pn_obj.PetriNet.Place(name="p_end")

# Add places to the net
net.places.add(p_start)
net.places.add(p_wait_dv)
net.places.add(p_dv_decision)
net.places.add(p_wait_fc)
net.places.add(p_fc_decision)
net.places.add(p_wait_ca)
net.places.add(p_wait_ap)
net.places.add(p_wait_p)
net.places.add(p_wait_n)
net.places.add(p_wait_cl)
net.places.add(p_end)

# Create transitions with labels
t_cr = pn_obj.PetriNet.Transition(name="t_cr", label="Claim Registration")
t_dv = pn_obj.PetriNet.Transition(name="t_dv", label="Document Verification")
t_rds = pn_obj.PetriNet.Transition(name="t_rds", label="Re-Document Submission")
t_fc = pn_obj.PetriNet.Transition(name="t_fc", label="Fraud Check")
t_ii = pn_obj.PetriNet.Transition(name="t_ii", label="In-depth Investigation")
t_ca = pn_obj.PetriNet.Transition(name="t_ca", label="Claim Assessment")
t_ap = pn_obj.PetriNet.Transition(name="t_ap", label="Approval")
t_p = pn_obj.PetriNet.Transition(name="t_p", label="Payment")
t_n = pn_obj.PetriNet.Transition(name="t_n", label="Notification")
t_cl = pn_obj.PetriNet.Transition(name="t_cl", label="Closure")

# Create silent transitions for decisions (label=None)
t_silent_dv_ok = pn_obj.PetriNet.Transition(name="t_silent_dv_ok", label=None)
t_silent_fc_ok = pn_obj.PetriNet.Transition(name="t_silent_fc_ok", label=None)

# Add transitions to the net
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)
net.transitions.add(t_silent_dv_ok)
net.transitions.add(t_silent_fc_ok)

# Add arcs using petri_utils.add_arc_from_to
# Start to CR
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_wait_dv, net)

# DV part with loop
petri_utils.add_arc_from_to(p_wait_dv, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv_decision, net)
petri_utils.add_arc_from_to(p_dv_decision, t_silent_dv_ok, net)
petri_utils.add_arc_from_to(p_dv_decision, t_rds, net)
petri_utils.add_arc_from_to(t_silent_dv_ok, p_wait_fc, net)
petri_utils.add_arc_from_to(t_rds, p_wait_dv, net)

# FC part with loop
petri_utils.add_arc_from_to(p_wait_fc, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc_decision, net)
petri_utils.add_arc_from_to(p_fc_decision, t_silent_fc_ok, net)
petri_utils.add_arc_from_to(p_fc_decision, t_ii, net)
petri_utils.add_arc_from_to(t_silent_fc_ok, p_wait_ca, net)
petri_utils.add_arc_from_to(t_ii, p_wait_fc, net)

# Sequential part from CA to end
petri_utils.add_arc_from_to(p_wait_ca, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_wait_ap, net)
petri_utils.add_arc_from_to(p_wait_ap, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_wait_p, net)
petri_utils.add_arc_from_to(p_wait_p, t_p, net)
petri_utils.add_arc_from_to(t_p, p_wait_n, net)
petri_utils.add_arc_from_to(p_wait_n, t_n, net)
petri_utils.add_arc_from_to(t_n, p_wait_cl, net)
petri_utils.add_arc_from_to(p_wait_cl, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# Define initial and final markings
im = pn_obj.Marking()
im[p_start] = 1

fm = pn_obj.Marking()
fm[p_end] = 1
``` 

This code constructs an accepting Petri net for the insurance claim management process. The Petri net includes:
- **Places** representing states between activities (e.g., `p_wait_dv` for waiting to perform document verification).
- **Transitions** labeled with activity names (e.g., `t_dv` with label "Document Verification") and silent transitions (label `None`) for modeling decisions after document verification and fraud check.
- **Arcs** connecting places and transitions to form the logical sequence, including loops for re-document submission (between `p_dv_decision` and `p_wait_dv`) and in-depth investigation (between `p_fc_decision` and `p_wait_fc`).
- **Initial marking** with a token in `p_start`, representing a new claim arriving.
- **Final marking** with a token in `p_end`, representing a closed claim.

The loops allow for multiple iterations of document verification and fraud check as specified in the scenario. The approval step is included in the main sequence, assuming it is part of the process flow based on the description. If needed, additional branching for conditional approval can be added, but it is not explicitly modeled here to maintain simplicity.