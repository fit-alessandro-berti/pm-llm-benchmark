Here is a possible temporal profile for a Purchase-to-Pay process:
```python
temporal_profile = {
    ('Create Purchase Order', 'Send Purchase Order'): (3600, 1800),  # 1 hour avg, 30 minutes stdev
    ('Send Purchase Order', 'Receive Goods'): (86400, 43200),  # 1 day avg, 12 hours stdev
    ('Receive Goods', 'Create Invoice'): (7200, 3600),  # 2 hours avg, 1 hour stdev
    ('Create Invoice', 'Approve Invoice'): (14400, 7200),  # 4 hours avg, 2 hours stdev
    ('Approve Invoice', 'Pay Invoice'): (86400, 43200),  # 1 day avg, 12 hours stdev
    ('Create Purchase Order', 'Receive Goods'): (172800, 86400),  # 2 days avg, 1 day stdev
    ('Create Purchase Order', 'Create Invoice'): (259200, 129600),  # 3 days avg, 1.5 days stdev
    ('Create Purchase Order', 'Approve Invoice'): (345600, 172800),  # 4 days avg, 2 days stdev
    ('Create Purchase Order', 'Pay Invoice'): (432000, 216000),  # 5 days avg, 2.5 days stdev
    ('Send Purchase Order', 'Approve Invoice'): (216000, 108000),  # 2.5 days avg, 1.25 days stdev
    ('Send Purchase Order', 'Pay Invoice'): (288000, 144000),  # 3.5 days avg, 1.5 days stdev
    ('Receive Goods', 'Pay Invoice'): (216000, 108000),  # 2.5 days avg, 1.25 days stdev
}
```
This temporal profile assumes the following:

* Creating a purchase order and sending it to the supplier takes on average 1 hour, with a standard deviation of 30 minutes.
* The supplier takes on average 1 day to deliver the goods, with a standard deviation of 12 hours.
* Creating an invoice takes on average 2 hours, with a standard deviation of 1 hour.
* Approving an invoice takes on average 4 hours, with a standard deviation of 2 hours.
* Paying an invoice takes on average 1 day, with a standard deviation of 12 hours.
* The overall process takes on average 5 days, with a standard deviation of 2.5 days.

Note that these values are just examples and may vary depending on the specific organization and process.

To use this temporal profile, you can define a function that takes a couple of activities and returns the average and standard deviation of the time between them. For example:
```python
def get_temporal_profile(activity1, activity2):
    return temporal_profile.get((activity1, activity2), (None, None))
```
You can then use this function to calculate the expected time between two activities and detect deviations:
```python
def detect_deviation(activity1, activity2, time_taken):
    avg, stdev = get_temporal_profile(activity1, activity2)
    if avg is None:
        return False  # no temporal profile defined for this couple of activities
    zeta = 2  # adjust this value to change the sensitivity of the detection
    lower_bound = avg - zeta * stdev
    upper_bound = avg + zeta * stdev
    return time_taken < lower_bound or time_taken > upper_bound
```
This function returns `True` if the time taken between two activities is outside the expected range, and `False` otherwise.