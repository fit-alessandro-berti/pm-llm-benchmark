To address the given requirements, we need to craft a DuckDB SQL query that first identifies the cases that meet the specified conditions and then excludes these cases from the final result. Here's how we can achieve this:

```sql
WITH IdentifiedCases AS (
    SELECT DISTINCT e1.case_id
    FROM event_log e1
    JOIN event_log e2 ON e1.case_id = e2.case_id AND e1.timestamp < e2.timestamp
    JOIN event_log e3 ON e2.case_id = e3.case_id AND e2.timestamp < e3.timestamp
    WHERE e1.activity = 'Approve Purchase Requisition'
      AND e2.activity = 'Create Order'
      AND e3.activity = 'Confirm Order'
      AND (e3.timestamp - e2.timestamp) > INTERVAL '5 days'
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM IdentifiedCases)
ORDER BY case_id, timestamp;
```

### Explanation:

1. **IdentifiedCases CTE (Common Table Expression)**:
    - This part of the query identifies the `case_id`s that have the specific sequence of activities and the time gap between 'Create Order' and 'Confirm Order' that is more than 5 days.
    - We perform self-joins on the `event_log` table to ensure that the activities 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' appear in this exact order and within the same case.
    - The condition `(e3.timestamp - e2.timestamp) > INTERVAL '5 days'` ensures that the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.

2. **Main Query**:
    - The main query selects all events from the `event_log` table where the `case_id` is not in the list of `case_id`s identified in the `IdentifiedCases` CTE.
    - This effectively excludes all events from the cases that match the specific sequence and timing criteria.
    - The results are ordered by `case_id` and `timestamp` to maintain a logical order in the output.

This solution ensures that only the events from cases not meeting the outlined criteria are included in the final result.