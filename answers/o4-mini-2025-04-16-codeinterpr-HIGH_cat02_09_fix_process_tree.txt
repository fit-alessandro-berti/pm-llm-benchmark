Here’s what’s going on with the current (underfitting) model and how to fix it:

1. Issues with the current model  
   – After “Approve_Purchase_Requisition” the model jumps into a big ANDblock of five activities  
      • Create_PO  
      • Receive_Goods  
      • Receive_Invoice  
      • Match_Invoice_to_PO  
      • Pay_Invoice  
      This means all five can interleave arbitrarily: you could “Pay_Invoice” before you even “Receive_Goods” or “Receive_Invoice,” you could “Match_Invoice_to_PO” before creating the PO, etc.  
   – Domain logic, however, requires a *strict* linear flow:  
      1. Create PO  
      2. Receive Goods  
      3. Receive Invoice  
      4. Match Invoice to PO  
      5. Pay Invoice  

2. Fixed processtree model  
```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# Define all activities as leaves
create_req      = ProcessTree(label="Create_Purchase_Requisition")
approve_req     = ProcessTree(label="Approve_Purchase_Requisition")
create_po       = ProcessTree(label="Create_Purchase_Order")
receive_goods   = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice   = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice     = ProcessTree(label="Pay_Invoice")
close_case      = ProcessTree(label="Close_Case")

# Root enforces a *single* strict sequence of all steps
root = ProcessTree(
    operator=Operator.SEQUENCE,
    children=[
        create_req,
        approve_req,
        create_po,
        receive_goods,
        receive_invoice,
        match_invoice,
        pay_invoice,
        close_case
    ]
)
```

3. Why this fixes under-fitting  
   – By using ONE SEQUENCE over *all* activities, we eliminate any chance of out-of-order execution.  
   – You cannot “pay” until you have completed the “match,” which cannot occur until the “invoice” has been received, etc.  
   – The only path through the tree is the exact intended Procure-to-Pay flow, so any log trace that violates it will be flagged as non-conformant.  

With this revised tree you have exactly one allowed ordering, perfectly aligned with the standard Procure-to-Pay lifecycle.