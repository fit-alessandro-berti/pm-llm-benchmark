Given the requirements, we'll break down the solution into a multi-step process and then put it all together to form the final DuckDB SQL query. This query will:

- Identify cases (`case_id`) containing the sequence: 'Approve Purchase Requisition', 'Create Order', 'Confirm Order'.
- For those cases, check if there is a time difference of more than 5 days between 'Create Order' and 'Confirm Order'.
- Exclude these cases from the final dataset to return all other events.

Here is the step-by-step SQL query to achieve this:

```sql
WITH filtered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        LEAD(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity1,
        LEAD(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity2,
        LEAD(timestamp) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp1,
        LEAD(timestamp) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp2
    FROM
        event_log
),
sequences AS (
    SELECT
        case_id,
        'APPROVE' AS prev_activity,
        next_activity1 AS next_activity,
        next_timestamp AS prev_timestamp,
        next_timestamp1 AS next_timestamp,
        next_activity2 AS next_next_activity,
        next_timestamp1 AS next_next_timestamp
    FROM
        filtered_events
    WHERE
        activity = 'Approve Purchase Requisition' AND
        next_activity1 = 'Create Order' AND
        next_next_activity = 'Confirm Order' AND
        next_next_timestamp IS NOT NULL
),
timing_check AS (
    SELECT
        case_id,
        prev_timestamp,
        next_timestamp,
        next_next_timestamp,
        TIMESTAMPDIFF(DAY, next_timestamp, next_next_timestamp) AS days_between
    FROM
        sequences
    WHERE
        next_next_activity = 'Confirm Order'
)
SELECT
    e.case_id,
    e.activity,
    e.timestamp
FROM
    event_log e
LEFT JOIN
    sequences s ON e.case_id = s.case_id AND e.timestamp = s.prev_timestamp
LEFT JOIN
    filtering_cases fc ON s.case_id = fc.case_id AND s.days_between > 5
WHERE
    fc.case_id IS NULL
ORDER BY
    e.case_id, e.timestamp
```

Explanation:

1. **filtered_events CTE**: This common table expression (CTE) prepares data by using window functions (LEAD function) to identify sequences of activities for each `case_id` in the correct order.

2. **sequences CTE**: Filters the `filtered_events` CTE results where 'Approve Purchase Requisition' process immediately followed by 'Create Order' immediately followed by 'Confirm Order'.

3. **timing_check CTE**: Calculates the time difference in days between 'Create Order' and 'Confirm Order' for the relevant sequences. It then checks if it spans more than 5 days.

4. **Final SELECT**: Returns all events from the `event_log` table, excluding only those that match both the activity sequence and the time-difference condition, by check LEFT JOIN against filtered_cases and filtering out cases with a value in filters_cases.