```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define all activity transitions
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")

# Define silent transitions for optional paths
skip_iqc = SilentTransition()
skip_label = SilentTransition()

# IQC can be repeated multiple times: *(IQC, skip_iqc)
# This allows for consecutive IQC checks as seen in Case 3
iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, skip_iqc])

# Assembly process with optional quality checks: *(AS, iqc_loop)
# Executes AS, then optionally performs IQC check(s) and loops back to AS
assembly_loop = OperatorPOWL(operator=Operator.LOOP, children=[AS, iqc_loop])

# Testing process with optional re-testing: *(TST, RT)
# Executes TST, then optionally performs RT and loops back to TST
testing_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Labeling is optional: X(LB, skip_label)
# Either label the product or skip this step
labeling_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip_label])

# Overall process structure with strict sequential ordering
root = StrictPartialOrder(nodes=[OR, MS, QS, assembly_loop, testing_loop, PK, labeling_choice, DP, D])

# Define sequential dependencies
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, assembly_loop)
root.order.add_edge(assembly_loop, testing_loop)
root.order.add_edge(testing_loop, PK)
root.order.add_edge(PK, labeling_choice)
root.order.add_edge(labeling_choice, DP)
root.order.add_edge(DP, D)
```

**Model Explanation:**

1. **Sequential Start**: OR  MS  QS (always executed in this order)

2. **Assembly Loop**: `*(AS, *(IQC, skip_iqc))`
   - Executes AS first
   - Optionally enters inner loop for quality checks
   - Inner loop allows multiple consecutive IQC executions (Case 3: IQC, IQC)
   - Can exit without any IQC (Case 4)

3. **Testing Loop**: `*(TST, RT)`
   - Executes TST first
   - Optionally executes RT and loops back to TST
   - Supports multiple re-testing cycles (Case 5: TST, RT, TST, RT, TST)

4. **Packaging & Labeling**: PK  `X(LB, skip_label)`
   - PK always executed
   - LB is optional (skipped in Case 2)

5. **Sequential End**: DP  D (always executed in this order)

This POWL model captures all variations observed in the event log including optional loops, nested loops for quality checks, and optional labeling.