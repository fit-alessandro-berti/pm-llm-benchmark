Here's a DuckDB SQL query that accomplishes this task:

```sql
SELECT *
FROM event_log
WHERE case_id IN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
ORDER BY case_id, timestamp;
```

**How this works:**

1. **Inner subquery**: Groups events by `case_id` and uses `HAVING COUNT(*) <= 6` to identify only those cases with 6 or fewer events
2. **Outer query**: Filters the original table to return all events where the `case_id` is in the list of qualifying cases
3. **ORDER BY**: Sorts results by case and chronological order (useful for process analysis)

**Alternative approaches:**

If you prefer using a window function:
```sql
SELECT case_id, activity, timestamp
FROM (
    SELECT *,
           COUNT(*) OVER (PARTITION BY case_id) as events_per_case
    FROM event_log
) t
WHERE events_per_case <= 6
ORDER BY case_id, timestamp;
```

Or using a CTE for better readability:
```sql
WITH qualifying_cases AS (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
)
SELECT el.*
FROM event_log el
INNER JOIN qualifying_cases qc ON el.case_id = qc.case_id
ORDER BY el.case_id, el.timestamp;
```

All three approaches will produce the same result - returning only events from cases that contain 6 or fewer total events.