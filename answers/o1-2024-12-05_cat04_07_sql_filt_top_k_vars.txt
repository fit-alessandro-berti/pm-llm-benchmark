Below is an example DuckDB SQL query that accomplishes the requested steps. You will need to replace `K` with the desired number of top variants.

```sql
WITH variants AS (
    SELECT
        case_id,
        string_agg(activity, '->' ORDER BY timestamp) AS variant_sequence
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    SELECT
        variant_sequence,
        COUNT(*) AS case_count
    FROM variants
    GROUP BY variant_sequence
    ORDER BY case_count DESC
    LIMIT K
),
top_variant_cases AS (
    SELECT v.case_id
    FROM variants v
    INNER JOIN variant_counts vc
    ON v.variant_sequence = vc.variant_sequence
)
SELECT e.*
FROM event_log e
JOIN top_variant_cases tvc
ON e.case_id = tvc.case_id;
```

**Explanation:**

1. **Extracting the ordered sequence of activities per case:**
   - In the `variants` CTE, we use `string_agg()` with an `ORDER BY timestamp` clause to form a complete ordered sequence of activities for each `case_id`.

2. **Identifying unique process variants and their frequencies:**
   - The `variant_counts` CTE groups all variants by their sequence and counts how many cases follow each variant.

3. **Filtering to the top K variants:**
   - Within `variant_counts`, we order variants by their frequency (`case_count`) in descending order and select the top `K`.

4. **Returning only cases belonging to these top K variants:**
   - The `top_variant_cases` CTE isolates the `case_id`s that match the chosen top variants.
   - The final `SELECT` query then joins the original `event_log` table with `top_variant_cases` to return only the events for cases that are part of these top K variants.

By using this approach, all steps are satisfied: the activity sequence is correctly extracted, aggregated, and then used to filter down to the top variants. Only events belonging to those top variants are returned.