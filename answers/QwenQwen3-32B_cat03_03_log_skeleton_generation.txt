<think>
Okay, let's tackle this problem. So, I need to create a Log Skeleton for the order fulfillment process described. The Log Skeleton uses various constraints like equivalence, always before, always after, never together, activity occurrences, and directly-follows. 

First, I need to understand the process flow. Let's list out the activities again:

RO (Receive Order), CA (Check Availability), RI (Reserve Items), PI (Pick Items), QC (Quality Check), PO (Pack Order), GSL (Generate Shipping Label), D (Dispatch), IC (Invoice Customer), RP (Record Payment).

The process starts with RO. Then probably CA comes next because once an order is received, you check if items are available. If they are available, then reserve them. Then pick, check quality, pack, generate shipping label, dispatch. Then invoice and record payment. But maybe invoice and payment can happen after dispatch or before? Hmm, depends on the business. Let me think. Usually, the invoice is sent after the order is ready, maybe before dispatch, but sometimes after. Also, payment might be recorded after the invoice is sent. Let me try to outline the logical order.

Let me think of the steps in sequence:

RO  CA  RI  PI  QC  PO  GSL  D  IC  RP.

But there might be some parallel activities or constraints. Also, some constraints might require certain activities to happen before others, or not happen together.

Now, let's think about each constraint type.

First, equivalence: when two activities must have the same number of occurrences. For example, if you reserve items, you must have picked them, so maybe RI and PI are equivalent? Because for every reservation, there's a pick. But maybe not. Let me think. Each time you reserve, you need to pick. So if RI occurs, PI must occur the same number of times. So equivalence between RI and PI? Similarly, maybe between PI and QC? Because you can't pick without a quality check. Or maybe not. Maybe each pick leads to a QC. So equivalence between PI and QC. Similarly, PO and GSL? Because once you pack, you generate a shipping label. So maybe equivalence between PO and GSL. Also, D might be equivalent to PO or GSL? Because once you pack and generate label, you dispatch. So maybe PO and D are equivalent? Or maybe not. Let me think again. Each time you pack, you generate a shipping label and dispatch. So PO, GSL, D would all be equivalent? Or perhaps each of those steps happens once per order. So maybe all of them are equivalent. So equivalence between PO, GSL, D? But equivalence is between pairs. So maybe PO and GSL are equivalent, GSL and D are equivalent, etc. But maybe it's better to model equivalence between each consecutive pair. So PO and GSL are equivalent, GSL and D equivalent. But equivalence is transitive. So if PO and GSL are equivalent, and GSL and D are equivalent, then PO and D are equivalent. But in the Log Skeleton, equivalence is per pair. So I need to include each pair.

But maybe some activities are only done once. For example, RO is only done once per case. So maybe RO has activity occurrences set to exactly once. Let's think about activity occurrences. For example, RO must happen exactly once. Similarly, D must happen once. But what about CA? Let's say CA is done once. Unless there's backtracking. But the problem says it's a complex process, but maybe in the skeleton, we assume that each activity is done once unless there's a reason to do it multiple times. But the activity_occurrences would bound that. For example, if CA can be done multiple times (like rechecking availability), but maybe in this scenario, it's only done once. So activity_occurrences for each activity would be {1} unless there's a reason to allow more. But the problem says to consider a complex process. Hmm, perhaps some activities can be done multiple times. For example, maybe after picking, if there's an issue, they might have to pick again. But the problem doesn't mention that. Since the scenario is a standard order fulfillment, I think each activity is done once per case. So activity_occurrences for each activity would be {1}, except perhaps for some that might be optional. Wait, but what about Invoice Customer and Record Payment? Maybe those are done once. But maybe the payment isn't recorded if there's a problem. But according to the scenario, when the customer pays, then Record Payment is done. So perhaps IC is always done once, and RP is done once if payment is received. Wait, but the problem says to bound the occurrences. For example, maybe RP is optional. Let me think. The scenario says "once the customer pays", so maybe RP is done once if payment is made. But the problem doesn't specify whether payment is mandatory. Assuming that payment is required, then RP would be done once. But maybe in some cases, payment isn't made, so RP could be 0. But the problem says it's a fulfillment process, so perhaps RP is required. Hmm. This is a bit ambiguous, but perhaps the activity_occurrences for all activities are {1} except maybe some. Let me proceed with that for now and adjust if needed.

Now, let's think about the constraints.

Always Before: For example, CA must be done before RI. Because you can't reserve items until you check availability. So CA must be always before RI. Similarly, RI before PI, PI before QC, etc. Also, Dispatch (D) must come after GSL. Also, Invoice Customer (IC) might be before or after Dispatch? In some businesses, the invoice is sent after the order is shipped, in others before. Let's assume that IC is done after packing but before dispatch. Or maybe after dispatch. Let's think: once the order is packed and ready to ship, the invoice is generated. So maybe IC happens after PO, GSL, but before D. Or maybe after D. Suppose that the invoice is sent once the order is ready to be shipped, so after packing and before dispatch. Then IC comes after PO and GSL, but before D. Then Record Payment (RP) would come after IC. So the order would be RO  CA  RI  PI  QC  PO  GSL  IC  D  RP. But maybe IC can be done after dispatch. For example, the invoice is sent once the package is shipped. So D comes before IC. But that depends on the business. Let me think again. In typical scenarios, the invoice is generated once the order is processed and ready to ship. So maybe IC is after packing but before dispatch. So the order would be PO  GSL  IC  D  RP. So always before constraints: For example, PO must be before IC. Also, IC before D? Or D after IC. Let's decide that.

Another point: Quality Check (QC) must follow Pick Items (PI). So PI is always before QC. Also, after QC comes PO. So QC before PO. 

Now, Always After: For example, if RI occurs, then CA must have occurred before (covered by Always Before). But Always After would be if an activity must be followed by another. For example, if CA occurs, then RI must be next? No, because Always After is: if the first activity occurs, then the second is executed in one of the following events. So for example, if CA is done, then RI must be done after. Wait, no. The Always After constraint is: if the first activity occurs, then the second activity must be executed in a following event. So if CA occurs, then RI must occur after CA. But that's already covered by Always Before (CA before RI). So perhaps Always After is redundant here. Wait, no. The Always Before is that if the first occurs, then the second has been executed previously. So CA before RI. So if RI occurs, then CA must have occurred before. But if CA occurs, then RI must occur after? Not necessarily. Because CA could be done, but if there's no RI (maybe items are not available?), but according to the process, after CA, if items are available, then RI is done. But if items are not available, perhaps the process is different. But according to the scenario, the process is about order fulfillment, so assuming that the order is fulfilled, so CA is done, and items are available, so RI is done. Therefore, if CA occurs, then RI must be done. So there's an Always After between CA and RI. Because if CA occurs, then RI must be executed after. Similarly, if RI occurs, then PI must be after. So Always After between RI and PI, etc. So for each consecutive pair, we have Always Before and Always After? Or maybe not. For example, if CA must be before RI, then Always Before (CA, RI) means that if RI occurs, CA must have occurred before. But if CA occurs, RI must be done after? Not necessarily. Because Always Before doesn't enforce that. For example, if CA is done, but RI is not done (maybe order is canceled?), but according to the scenario, the process is about fulfillment, so RI is done. So perhaps there's a constraint that if CA occurs, then RI must occur. But how to model that? The constraints given don't include a "must follow" constraint. Wait, the constraints are:

- Equivalence
- Always Before
- Always After
- Never Together
- Activity Occurrences
- Directly-Follows

So if CA occurs, then RI must occur (i.e., RI is mandatory after CA). How to model that? Perhaps using Always After (CA, RI), which would mean that if CA occurs, then RI must be executed in a following event. But that doesn't ensure that RI occurs. Wait, the Always After constraint says that if the first activity occurs, then the second activity is executed in one of the following events. So if CA occurs, then RI must occur after it. Which would mean that RI must be present. So that would enforce that if CA occurs, then RI occurs. But in our case, since CA is part of the process, and the process is about fulfillment, CA will occur, so RI must occur. So adding Always After (CA, RI) would ensure that. Similarly for other steps.

But maybe there's a case where CA is done but RI is not. But according to the scenario, the process is about fulfilling orders, so RI is done. Therefore, adding Always After between CA and RI, between RI and PI, etc., would enforce that each step is followed by the next.

Now, directly-follows constraints: if an activity occurs, the next activity must directly follow. For example, CA directly followed by RI? Or maybe not. Because there could be other activities in between. But if we have directly-follows between CA and RI, that would mean that whenever CA occurs, RI must directly follow. But in reality, there might be other steps. For example, CA  RI  PI  QC. So directly-follows would be CA followed by RI, RI followed by PI, etc. So perhaps we need to add directly-follows constraints for each consecutive pair. But maybe not. Because directly-follows is a stricter constraint than Always Before and Always After. For example, if we have a directly-follows between CA and RI, then CA must be immediately followed by RI. But in reality, maybe there are other activities between them. However, in the standard process, these steps are consecutive. So perhaps adding directly-follows constraints between each consecutive pair. For example, CA directly followed by RI, RI directly followed by PI, etc.

But maybe there are cases where steps can be interleaved. For example, after CA, maybe some other activity occurs before RI. But according to the process, once availability is checked, items are reserved. So RI comes next. So directly-follows between CA and RI.

Now, Never Together constraints. These are pairs of activities that cannot co-exist in the same case. For example, if an order is canceled, but in our scenario, the process is about fulfillment, so all activities are part of the same case. So maybe there are no such constraints. Unless there are alternative paths. For example, maybe if items are not available, the process takes a different path, but the scenario doesn't mention that. Since the scenario says it's a complex order fulfillment, but the problem doesn't specify alternative paths, perhaps there are no Never Together constraints. Unless there's a pair that cannot be in the same case. For example, maybe IC and RP can't be done without D? Not sure. Maybe not. So perhaps no Never Together constraints here.

Now, activity occurrences. For each activity, we need to set the allowed number of occurrences. For example, RO must happen exactly once. Similarly, CA, RI, PI, QC, PO, GSL, D, IC, RP. Unless some activities can be done multiple times. For example, maybe QC can be done multiple times if there are issues. But the scenario doesn't mention that. So assuming that each activity is done once. So activity_occurrences for each activity is {1}. But maybe for some activities, like RP, it's optional. For example, if the payment isn't recorded yet. But according to the scenario, RP is when the payment is recorded once the customer pays. So if payment is made, then RP is done once. If not, maybe it's not done. But the problem says to bound the occurrences. For example, if RP can be done 0 or 1 times. But the scenario says "once the customer pays", implying that RP is done once if payment is made. But since the case is about order fulfillment, perhaps payment is required. Therefore, RP is done once. So all activities have {1} occurrences. But maybe IC is done once, and RP is done once. So activity_occurrences would be {'RO': {1}, 'CA': {1}, ... etc.}.

Putting this all together.

Now, let's start building the Log Skeleton dictionary.

First, the equivalence constraints. Which activities have the same number of occurrences? For example, RI and PI: for every reservation, there's a pick. So equivalence between RI and PI. Similarly, PI and QC: each pick must be followed by a quality check. So equivalence between PI and QC. Similarly, QC and PO: each quality check leads to packing. So equivalence between QC and PO. PO and GSL: each packing leads to generating a shipping label. Equivalence between PO and GSL. GSL and D: each shipping label leads to dispatch. Equivalence between GSL and D. Also, D and IC? No, because dispatch and invoice customer are separate. Wait, maybe IC is done once per order, so equivalence with others? Not sure. Let me think again. If each reservation leads to a pick, which leads to QC, which leads to PO, etc., then all these steps are done once per order. So equivalence between all these activities. So equivalence between RO and CA? No, because RO is the start. But CA is done once per order. So equivalence between RO and CA? Well, if RO occurs once, then CA must occur once. But equivalence is a two-way constraint. So if RO occurs, then CA occurs same number of times, and vice versa. Since RO is the start, it must occur once, so CA must also occur once. But if CA occurs once, then RO must occur once. Which is true. So equivalence between RO and CA. Similarly, between CA and RI, RI and PI, PI and QC, QC and PO, PO and GSL, GSL and D. Also, D and IC? Not sure. Let's see. After dispatch, the invoice is generated. So D occurs once, IC occurs once. So equivalence between D and IC? If D occurs once, then IC occurs once. But maybe IC can be done before D. But regardless, their occurrences are same. So equivalence between D and IC. Similarly between IC and RP. Because once the invoice is sent, payment is recorded once. So equivalence between IC and RP. 

So equivalence pairs would be:

('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP').

But equivalence is a symmetric constraint. So the pairs can be ordered either way. But in the dictionary, we need to include each pair once. So for example, ('RO', 'CA') and ('CA', 'RO') are the same, but since it's a set, we just need to include each unordered pair once.

Now, always_before constraints. For example, if RI occurs, then CA must have been executed previously. So always_before would include (RI, CA). Wait, no. The always_before constraint is: if the first activity occurs, then the second has been executed previously. So if the first activity is RI, then CA must have been executed before. So the pair is (RI, CA). Wait, no. The way the constraint is defined: "If the first activity occurs, then the second activity should have been executed previously." So if the first activity is RI, then CA must have been executed previously. So the pair is (RI, CA) would mean that whenever RI occurs, CA has occurred before. But that's the correct way. Similarly, for PI, the always_before would include (PI, RI), because if PI occurs, then RI has been executed before. So always_before would have pairs like (RI, CA), (PI, RI), (QC, PI), (PO, QC), (GSL, PO), (D, GSL), (IC, D), (RP, IC). 

Similarly, for the other activities. For example, if IC occurs, then D must have been executed before. So (IC, D) in always_before. 

Now, always_after constraints: if the first activity occurs, then the second is executed in one of the following events. So for example, if CA occurs, then RI must be executed after. So the pair (CA, RI) in always_after. Similarly, (RI, PI), (PI, QC), (QC, PO), (PO, GSL), (GSL, D), (D, IC), (IC, RP). 

Directly-follows constraints: if the first activity occurs, then the second occurs immediately after. So for example, CA directly followed by RI. So directly_follows would include (CA, RI), (RI, PI), (PI, QC), (QC, PO), (PO, GSL), (GSL, D), (D, IC), (IC, RP). 

Now, activity_occurrences: each activity is allowed to occur exactly once. So {'RO': {1}, 'CA': {1}, 'RI': {1}, 'PI': {1}, 'QC': {1}, 'PO': {1}, 'GSL': {1}, 'D': {1}, 'IC': {1}, 'RP': {1}}.

Never_together: there are no pairs of activities that cannot co-exist. So the set is empty.

Putting all this into the dictionary.

But let me check for possible errors. For example, equivalence between all consecutive activities. Suppose that RO and CA are equivalent. Since RO must occur once, CA must also occur once. Which is correct. Similarly, if CA occurs once, then RI must occur once. So equivalence between CA and RI. 

But what about the last pair, IC and RP. If IC occurs once, then RP must occur once. Which is correct, since once the invoice is sent, the payment is recorded once. 

Now, the always_before and always_after constraints. For example, always_before includes (RI, CA), meaning that if RI occurs, CA must have occurred before. Which is correct. And always_after includes (CA, RI), meaning that if CA occurs, then RI must occur after. Which ensures that RI occurs. 

The directly-follows constraints ensure that each step is immediately followed by the next. 

Now, let me think if there are any other constraints. For example, between IC and RP. Suppose that after IC, RP must occur. But according to the constraints, equivalence between IC and RP ensures same occurrences, always_before (RP, IC) would mean that if RP occurs, IC has occurred before. But since RP is after IC, we need always_before (RP, IC) to mean that if RP occurs, then IC must have occurred before. But since RP occurs after IC, that's correct. Also, always_after (IC, RP) would mean that if IC occurs, then RP must occur after. So adding always_after (IC, RP). But in the process, RP comes after IC. So yes. 

Wait, let's check the always_before and always_after for each pair. For example, for the pair (IC, RP):

- always_before for RP would have (RP, IC) meaning that whenever RP occurs, IC has occurred before. Which is correct.

- always_after for IC would have (IC, RP) meaning that whenever IC occurs, RP must occur after. Which is correct.

So all the pairs are covered.

Now, let's check if there are any other constraints. For example, between RO and other activities. RO is the first activity, so all other activities must come after it. But that's already covered by the equivalence and the always_before/always_after constraints. For example, CA must occur once (equivalent to RO), and since RO is first, CA comes after. 

Another thing to consider: the equivalence constraints. For example, if RO and CA are equivalent, then if RO occurs once, CA must occur once. Which is correct. Similarly, if CA occurs once, RO must occur once. Which is also correct. 

Now, what about the activity_occurrences? Suppose that for some reason, an activity can be done multiple times. For example, maybe after packing, they need to re-pack. But the scenario doesn't mention that. So assuming all activities are done once. 

Now, putting it all into the Python dictionary.

The keys are 'equivalence', 'always_before', 'always_after', 'never_together', 'activ_freq', 'directly_follows'.

So:

equivalence = set of tuples:

{('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')}

But since equivalence is symmetric, we can include each pair once. For example, ('RO', 'CA') and ('CA', 'RO') are the same, but since the set stores tuples, and tuples are ordered, but the constraint is symmetric. However, the problem says that the values are sets containing pairs (tuples) of activities that satisfy the given constraint. So perhaps each unordered pair is represented once as a tuple. For example, if we have (A,B) in equivalence, then it's the same as (B,A), but since the constraint is equivalence (if A occurs, same occurrences as B, and vice versa), we can include each pair once. So the order in the tuple doesn't matter for the constraint. So the set can have each unordered pair once. So for example, we can have ('RO', 'CA') and not ('CA', 'RO').

Similarly for the other constraints. For example, always_before is a directed constraint. For example, (RI, CA) means that if RI occurs, CA must have occurred before. So the order in the tuple matters here. So the tuples must be ordered accordingly.

Now, the always_before set would be:

{(RI, CA), (PI, RI), (QC, PI), (PO, QC), (GSL, PO), (D, GSL), (IC, D), (RP, IC)}

Wait, but also, for example, if CA occurs, then RI must be after. So that's handled by always_after (CA, RI). 

The always_after set would be:

{(CA, RI), (RI, PI), (PI, QC), (QC, PO), (PO, GSL), (GSL, D), (D, IC), (IC, RP)}

The directly_follows set would be the same as the always_after set? No, directly_follows is a different constraint. For example, directly_follows (CA, RI) means that CA is immediately followed by RI. Which is the same as the always_after (CA, RI) but with stricter timing.

Now, the activity_occurrences is a dictionary where each activity maps to {1}.

Never_together is an empty set.

So putting all together:

log_skeleton = {
    'equivalence': {('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')},
    'always_before': {('RI', 'CA'), ('PI', 'RI'), ('QC', 'PI'), ('PO', 'QC'), ('GSL', 'PO'), ('D', 'GSL'), ('IC', 'D'), ('RP', 'IC')},
    'always_after': {('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')},
    'never_together': set(),
    'activ_freq': {'RO': {1}, 'CA': {1}, 'RI': {1}, 'PI': {1}, 'QC': {1}, 'PO': {1}, 'GSL': {1}, 'D': {1}, 'IC': {1}, 'RP': {1}},
    'directly_follows': {('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')}
}

Wait, but in the always_before set, for example, (RI, CA) means that if RI occurs, then CA must have occurred before. Which is correct, because RI can't happen without CA. Similarly, (PI, RI) means if PI occurs, then RI must have occurred before. Which is correct.

Now, let me check for possible mistakes. For example, the always_before and always_after pairs.

For example, the always_before includes (RI, CA). So whenever RI occurs, CA must have occurred before. Which is correct. And always_after includes (CA, RI). So whenever CA occurs, RI must occur after. Which ensures that RI occurs once if CA occurs. Since CA is part of the process (as RO is first and equivalent to CA), CA occurs once, so RI must occur once.

Similarly for other steps.

Another check: the directly_follows constraints. Each step is directly followed by the next. So CA directly followed by RI, etc. Which is correct for the process flow.

Now, the activity_occurrences. All set to {1}.

Now, what about the Invoice Customer (IC) and Dispatch (D)? The order between them. In the always_before set, (IC, D) means if IC occurs, D must have occurred before. Wait, no. The always_before is (IC, D) would mean that if IC occurs, D must have occurred before. But in our case, D occurs before IC. Wait, no. Let me check. In the always_before set, we have (IC, D)? Or (D, IC)? Let me look back.

In the always_before set, we have entries like (IC, D). Let me check the construction. For example, for D and IC. The always_before constraint for IC would be that if IC occurs, then D must have occurred before. Which would be (IC, D). Which would mean that whenever IC occurs, D has occurred before. So IC happens after D. But according to our process flow, D comes after IC? Or before?

Earlier, I thought that after packing and generating the label, we do IC (invoice customer), then dispatch. So the order would be PO  GSL  IC  D  RP. Therefore, D occurs after IC. Therefore, if IC occurs, D must occur after. So in the always_after set, we have (IC, D). Wait, no. The always_after constraint is: if the first activity occurs, then the second is executed in one of the following events. So if IC occurs, then D must be executed after. So the pair would be (IC, D) in always_after. Which would mean that if IC occurs, then D is executed after. Which is correct. Also, in the always_before set, for D, if D occurs, then IC must have occurred before. So (D, IC) in always_before. Because if D occurs, then IC must have occurred before. Which is correct. 

So in the always_before set, we have (D, IC), meaning that if D occurs, then IC must have occurred before. And in the always_after set, (IC, D), meaning that if IC occurs, then D must occur after. 

Yes, that's correct. 

Similarly, for the directly_follows, we have (IC, D) meaning that IC is directly followed by D. Which is correct if the order is IC  D. 

So the current setup seems correct.

Now, let me check if all the pairs are included.

Equivalence pairs:

RO-CA, CA-RI, RI-PI, PI-QC, QC-PO, PO-GSL, GSL-D, D-IC, IC-RP. All consecutive pairs. That's correct.

Always_before:

For each activity (except RO), the previous activity is in the always_before. For example, RI must have CA before (RI, CA). PI must have RI before (PI, RI). QC must have PI before (QC, PI). PO must have QC before (PO, QC). GSL must have PO before (GSL, PO). D must have GSL before (D, GSL). IC must have D before (IC, D). RP must have IC before (RP, IC). 

Yes, that's all correct.

Always_after:

For each activity, the next activity must be executed after. For example, CA must be followed by RI (CA, RI). RI followed by PI (RI, PI). PI followed by QC (PI, QC). QC followed by PO (QC, PO). PO followed by GSL (PO, GSL). GSL followed by D (GSL, D). D followed by IC (D, IC). IC followed by RP (IC, RP). 

Yes, correct.

Directly_follows is same as always_after. So the directly-follows pairs are the same as the always_after pairs. 

Now, activity_occurrences: all set to {1}.

Never_together is empty.

This seems to cover all constraints. 

But let me think again if there are any other constraints. For example, between RO and other activities. Since RO is the first activity, there's no activity before it. So no constraints needed there. 

Another thing: the equivalence between all these pairs ensures that each activity occurs once if any of them occurs. Since RO is the first activity and must occur once, all the others must occur once as well. 

Therefore, this setup should model the process correctly.
</think>

```python
log_skeleton = {
    'equivalence': {
        ('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'),
        ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')
    },
    'always_before': {
        ('RI', 'CA'), ('PI', 'RI'), ('QC', 'PI'), ('PO', 'QC'),
        ('GSL', 'PO'), ('D', 'GSL'), ('IC', 'D'), ('RP', 'IC')
    },
    'always_after': {
        ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'),
        ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')
    },
    'never_together': set(),
    'activ_freq': {
        'RO': {1}, 'CA': {1}, 'RI': {1}, 'PI': {1}, 'QC': {1},
        'PO': {1}, 'GSL': {1}, 'D': {1}, 'IC': {1}, 'RP': {1}
    },
    'directly_follows': {
        ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'),
        ('PO', 'GSL'), ('GSL', 'D'), ('D', 'IC'), ('IC', 'RP')
    }
}
```