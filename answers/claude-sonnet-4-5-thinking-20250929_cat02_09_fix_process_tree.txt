# Analysis and Solution

## 1. Issues with the Current Model

The current model has a **critical flaw**: it places the following activities in a PARALLEL block:
- `create_po`
- `receive_goods`
- `receive_invoice`
- `match_invoice`
- `pay_invoice`

**This allows unwanted behaviors such as:**

 **Paying an invoice before receiving it** (Pay_Invoice before Receive_Invoice)  
 **Paying before goods are received** (Pay_Invoice before Receive_Goods)  
 **Matching an invoice before it exists** (Match_Invoice_to_PO before Receive_Invoice)  
 **Receiving goods before creating a PO** (Receive_Goods before Create_Purchase_Order)  
 **Matching invoices to non-existent POs** (Match_Invoice_to_PO before Create_Purchase_Order)

**Domain Logic Requirements:**
- A **Purchase Order must exist** before goods can be received or invoices processed
- Both **goods AND invoice must be received** before they can be matched
- **Matching must occur** before payment
- **Payment must occur** before case closure

---

## 2. Corrected Process Tree Model

```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# Define activities
create_req = ProcessTree(label="Create_Purchase_Requisition")
approve_req = ProcessTree(label="Approve_Purchase_Requisition")
create_po = ProcessTree(label="Create_Purchase_Order")
receive_goods = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice = ProcessTree(label="Pay_Invoice")
close_case = ProcessTree(label="Close_Case")

# Fixed structure:
# Goods and invoice can arrive in any order (parallel), 
# but both must arrive after PO creation and before matching
receive_parallel = ProcessTree(operator=Operator.PARALLEL, children=[
    receive_goods,
    receive_invoice
])

# Main sequence enforcing proper order
root = ProcessTree(operator=Operator.SEQUENCE, children=[
    create_req,
    approve_req,
    create_po,
    receive_parallel,  # Both must complete, but order flexible
    match_invoice,
    pay_invoice,
    close_case
])
```

---

## 3. How the Updated Model Ensures Conformance

### **Strict Sequencing Where Required:**

1. **Create_Req  Approve_Req  Create_PO**  
   - Ensures requisitions are approved before orders are created
   
2. **Create_PO  [Receive Goods & Invoice]  Match  Pay  Close**  
   - PO must exist before any receiving activities
   - Matching can only occur after both receiving steps
   - Payment only after successful matching
   - Case closure is the final step

### **Controlled Flexibility:**

- **PARALLEL block for Receive_Goods and Receive_Invoice only**  
  - Reflects real-world variability: goods may arrive before/after the invoice
  - Both must complete before proceeding (enforced by sequence after the parallel block)

### **Prevented Violations:**

 Cannot pay before receiving invoice or goods  
 Cannot match before receiving both items  
 Cannot receive goods/invoice without a PO  
 Cannot close case before payment  
 Maintains requisition approval before PO creation

This model balances **process flexibility** (where business reality permits variance) with **control** (where dependencies are mandatory), ensuring conformance to standard Procure-to-Pay practices.