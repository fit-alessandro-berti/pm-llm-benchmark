# Integrated Event Log - Merge Analysis & Results

## Methodology

### Matching Strategy
1. **Timestamp Tolerance**: Applied a ±2 second window for matching events
2. **Semantic Matching**: Normalized event names for comparison (removed spaces, converted to lowercase)
3. **Order ID**: All events share Order#1234, so matching focused on timing and event semantics
4. **Primary Timeline**: Log A timestamps used as canonical reference for merged events

### Conflict Resolution Rules
- **Timestamp conflicts**: Retain Log A timestamp as `primary_timestamp`, include Log B as `system_b_timestamp`
- **Attribute enrichment**: Add all Log B attributes (user_id, resource_id, notes) to merged records
- **Event naming**: Create unified event name while preserving original names in metadata

---

## Merged Event Log

| Seq | Primary Timestamp | Event Name | Order ID | Source | User ID | Resource ID | System B Timestamp | Notes | Time Diff (s) |
|-----|------------------|------------|----------|--------|---------|-------------|-------------------|-------|---------------|
| 1 | 2023-10-10T10:00:00Z | **Order Received** | Order#1234 | A+B | u45 | r10 | 2023-10-10T09:59:58Z | Event captured at warehouse system | +2 |
| 2 | 2023-10-10T10:01:30Z | **Order Validated** | Order#1234 | A+B | u12 | r10 | 2023-10-10T10:01:29Z | Cross-check inventory | +1 |
| 3 | 2023-10-10T10:02:00Z | **Payment Processed** | Order#1234 | A+B | u12 | r99 | 2023-10-10T10:02:05Z | Payment gateway delay | -5 |
| 4 | 2023-10-10T10:03:00Z | **Quality Check** | Order#1234 | B | u45 | r11 | N/A | Random inspection | N/A |
| 5 | 2023-10-10T10:05:00Z | **Item Shipped** | Order#1234 | A+B | u45 | r10 | 2023-10-10T10:05:02Z | Package handed to courier | -2 |
| 6 | 2023-10-10T10:20:00Z | **Item Delivered** | Order#1234 | A | N/A | N/A | N/A | N/A | N/A |

---

## Detailed Event-by-Event Analysis

### Event 1: Order Received  MERGED
**Match Confidence**: High  
**Reasoning**:
- Log A: "Order Received" at 10:00:00Z
- Log B: "OrderReceived" at 09:59:58Z
- Time difference: 2 seconds (within tolerance)
- Semantic equivalence: Clear match
- **Decision**: System B captured event 2 seconds before System A received it, likely due to network/processing latency. Merged as same event.

**Merged Attributes**:
```json
{
  "primary_timestamp": "2023-10-10T10:00:00Z",
  "system_b_timestamp": "2023-10-10T09:59:58Z",
  "event_name": "Order Received",
  "order_id": "Order#1234",
  "user_id": "u45",
  "resource_id": "r10",
  "notes": "Event captured at warehouse system",
  "source_systems": ["System A", "System B"]
}
```

### Event 2: Order Validated  MERGED
**Match Confidence**: High  
**Reasoning**:
- Log A: "Order Validated" at 10:01:30Z
- Log B: "OrderValidation" at 10:01:29Z
- Time difference: 1 second (within tolerance)
- Semantic equivalence: Clear match
- **Decision**: Near-perfect timestamp alignment confirms same event.

**Merged Attributes**:
```json
{
  "primary_timestamp": "2023-10-10T10:01:30Z",
  "system_b_timestamp": "2023-10-10T10:01:29Z",
  "event_name": "Order Validated",
  "order_id": "Order#1234",
  "user_id": "u12",
  "resource_id": "r10",
  "notes": "Cross-check inventory",
  "source_systems": ["System A", "System B"]
}
```

### Event 3: Payment Processed  MERGED (with caveat)
**Match Confidence**: Medium-High  
**Reasoning**:
- Log A: "Payment Processed" at 10:02:00Z
- Log B: "PaymentCheck" at 10:02:05Z
- Time difference: 5 seconds (slightly exceeds strict 2s tolerance)
- Semantic similarity: High (Processed vs Check)
- **Decision**: Merged despite 5-second difference because:
  1. No other payment-related events exist
  2. Log B notes mention "Payment gateway delay" explaining discrepancy
  3. Payment processing typically has variable completion times
  4. Sequential context supports this being the same event

**Merged Attributes**:
```json
{
  "primary_timestamp": "2023-10-10T10:02:00Z",
  "system_b_timestamp": "2023-10-10T10:02:05Z",
  "event_name": "Payment Processed",
  "order_id": "Order#1234",
  "user_id": "u12",
  "resource_id": "r99",
  "notes": "Payment gateway delay",
  "source_systems": ["System A", "System B"],
  "confidence_flag": "medium_high"
}
```

### Event 4: Quality Check  NO MATCH (Log B Only)
**Match Confidence**: N/A  
**Reasoning**:
- Only present in Log B at 10:03:00Z
- No corresponding event in Log A
- Falls between Payment Processed and Item Shipped
- **Decision**: Retained as standalone event. Likely an internal warehouse process not visible to System A.

**Attributes**:
```json
{
  "primary_timestamp": "2023-10-10T10:03:00Z",
  "event_name": "Quality Check",
  "order_id": "Order#1234",
  "user_id": "u45",
  "resource_id": "r11",
  "notes": "Random inspection",
  "source_systems": ["System B"],
  "match_status": "unmatched"
}
```

### Event 5: Item Shipped  MERGED
**Match Confidence**: High  
**Reasoning**:
- Log A: "Item Shipped" at 10:05:00Z
- Log B: "Shipping" at 10:05:02Z
- Time difference: 2 seconds (at tolerance boundary)
- Semantic equivalence: Clear match
- **Decision**: Merged with high confidence.

**Merged Attributes**:
```json
{
  "primary_timestamp": "2023-10-10T10:05:00Z",
  "system_b_timestamp": "2023-10-10T10:05:02Z",
  "event_name": "Item Shipped",
  "order_id": "Order#1234",
  "user_id": "u45",
  "resource_id": "r10",
  "notes": "Package handed to courier",
  "source_systems": ["System A", "System B"]
}
```

### Event 6: Item Delivered  NO MATCH (Log A Only)
**Match Confidence**: N/A  
**Reasoning**:
- Only present in Log A at 10:20:00Z
- No corresponding event in Log B (Log B ends at 10:05:02Z)
- **Decision**: Retained as standalone event. System B likely doesn't track post-shipment delivery status.

**Attributes**:
```json
{
  "primary_timestamp": "2023-10-10T10:20:00Z",
  "event_name": "Item Delivered",
  "order_id": "Order#1234",
  "source_systems": ["System A"],
  "match_status": "unmatched"
}
```

---

## Summary Statistics

| Metric | Count |
|--------|-------|
| Total events in merged log | 6 |
| Events from Log A | 5 |
| Events from Log B | 5 |
| Successfully merged events | 4 |
| Log A only events | 1 |
| Log B only events | 1 |
| Merge success rate | 80% |

---

## Key Insights

1. **System Coverage**: System A tracks end-to-end order lifecycle including delivery; System B focuses on warehouse operations
2. **Timestamp Pattern**: Log B consistently records events slightly earlier (average -0.5s), except for payment processing
3. **Attribute Richness**: Log B provides operational detail (users, resources) absent in Log A
4. **Process Discovery**: Quality Check event reveals a step not visible in System A's tracking
5. **Latency Indication**: Payment gateway delay noted in Log B explains the larger timestamp discrepancy

## Recommendations

1. **Standardize event names** across systems to facilitate automated merging
2. **Investigate payment processing** timing differences for potential optimization
3. **Consider adding Quality Check event** to System A for complete visibility
4. **Evaluate whether System B should track delivery** for end-to-end visibility