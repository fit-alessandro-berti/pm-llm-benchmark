To model the complex insurance claim management process as an **accepting Petri net** using `pm4py`, we need to define the following components:

1. **Places**: Represent the states between activities.
2. **Transitions**: Represent the activities themselves, labeled with their corresponding names.
3. **Arcs**: Connect places to transitions and transitions to places to form the flow of the process.
4. **Initial Marking (`im`)**: Indicates the starting point of the process.
5. **Final Marking (`fm`)**: Indicates the end state of the process.

Given the scenario, the process includes potential loops for document resubmission (`RDS`) and in-depth investigation (`II`). Below is the Python code that constructs this accepting Petri net, including the initial and final markings.

### Step-by-Step Explanation:

1. **Import Necessary Classes and Utilities**:
   - `PetriNet`, `Marking` from `pm4py.objects.petri_net.obj`.
   - `petri_utils` from `pm4py.objects.petri_net.utils`.

2. **Initialize the Petri Net**:
   - Create a new Petri net named `"InsuranceClaimProcess"`.

3. **Define Places**:
   - **Start**: The initial state where a new claim arrives.
   - **After_CR**: After Claim Registration.
   - **After_DV**: After Document Verification.
   - **After_FC**: After Fraud Check.
   - **After_CA**: After Claim Assessment.
   - **After_AP**: After Approval.
   - **After_P**: After Payment.
   - **After_N**: After Notification.
   - **End**: The final state where the claim is closed.
   - **RDS**: Re-Document Submission (for resubmission of documents).
   - **II**: In-depth Investigation (for further investigation if fraud is suspected).

4. **Define Transitions**:
   - **C**: Insurance Claim.
   - **CR**: Claim Registration.
   - **DV**: Document Verification.
   - **RDS**: Re-Document Submission.
   - **FC**: Fraud Check.
   - **II**: In-depth Investigation.
   - **CA**: Claim Assessment.
   - **AP**: Approval.
   - **P**: Payment.
   - **N**: Notification.
   - **CL**: Closure.

5. **Add Arcs to Define the Flow**:
   - Connect places to transitions and transitions to places to form the logical sequence.
   - Include arcs for loops:
     - From `After_DV` back to `DV` via `RDS` if documents need resubmission.
     - From `After_FC` back to `FC` via `II` if in-depth investigation is required.

6. **Define Initial and Final Markings**:
   - **Initial Marking (`im`)**: Place a token in the `Start` place.
   - **Final Marking (`fm`)**: Place a token in the `End` place.

### Python Code:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Initialize the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define Places
start = PetriNet.Place(name="Start")
after_cr = PetriNet.Place(name="After_CR")
after_dv = PetriNet.Place(name="After_DV")
after_fc = PetriNet.Place(name="After_FC")
after_ca = PetriNet.Place(name="After_CA")
after_ap = PetriNet.Place(name="After_AP")
after_p = PetriNet.Place(name="After_P")
after_n = PetriNet.Place(name="After_N")
end = PetriNet.Place(name="End")
rds = PetriNet.Place(name="RDS")  # Re-Document Submission
ii = PetriNet.Place(name="II")    # In-depth Investigation

# Add places to the net
for place in [start, after_cr, after_dv, after_fc, after_ca, after_ap, after_p, after_n, end, rds, ii]:
    net.places.add(place)

# Define Transitions
c = PetriNet.Transition(name="C", label="Insurance Claim")
cr = PetriNet.Transition(name="CR", label="Claim Registration")
dv = PetriNet.Transition(name="DV", label="Document Verification")
rds_trans = PetriNet.Transition(name="RDS", label="Re-Document Submission")
fc = PetriNet.Transition(name="FC", label="Fraud Check")
ii_trans = PetriNet.Transition(name="II", label="In-depth Investigation")
ca = PetriNet.Transition(name="CA", label="Claim Assessment")
ap = PetriNet.Transition(name="AP", label="Approval")
p = PetriNet.Transition(name="P", label="Payment")
n = PetriNet.Transition(name="N", label="Notification")
cl = PetriNet.Transition(name="CL", label="Closure")

# Add transitions to the net
for transition in [c, cr, dv, rds_trans, fc, ii_trans, ca, ap, p, n, cl]:
    net.transitions.add(transition)

# Define Arcs (Flow)

# Insurance Claim (C) to Claim Registration (CR)
petri_utils.add_arc_from_to(c, after_cr, net)

# Claim Registration (CR) to Document Verification (DV)
petri_utils.add_arc_from_to(after_cr, cr, net)
petri_utils.add_arc_from_to(cr, after_dv, net)

# Document Verification (DV) to Fraud Check (FC) or RDS
petri_utils.add_arc_from_to(after_dv, dv, net)
petri_utils.add_arc_from_to(dv, after_dv, net)  # Loop back if documents need resubmission
petri_utils.add_arc_from_to(dv, rds_trans, net)
petri_utils.add_arc_from_to(rds_trans, rds, net)
petri_utils.add_arc_from_to(rds, dv, net)  # Return to DV after RDS

# From Document Verification (DV) to Fraud Check (FC) if no RDS needed
petri_utils.add_arc_from_to(after_dv, fc, net)

# Fraud Check (FC) to Claim Assessment (CA) or II
petri_utils.add_arc_from_to(fc, after_fc, net)
petri_utils.add_arc_from_to(after_fc, fc, net)  # Loop back if in-depth investigation needed
petri_utils.add_arc_from_to(fc, ii_trans, net)
petri_utils.add_arc_from_to(ii_trans, ii, net)
petri_utils.add_arc_from_to(ii, fc, net)  # Return to FC after II

# From Fraud Check (FC) to Claim Assessment (CA) if no II needed
petri_utils.add_arc_from_to(after_fc, ca, net)

# Claim Assessment (CA) to Approval (AP) or Payment (P)
petri_utils.add_arc_from_to(ca, after_ca, net)
petri_utils.add_arc_from_to(after_ca, ap, net)
petri_utils.add_arc_from_to(ap, after_ap, net)
petri_utils.add_arc_from_to(after_ap, p, net)

# If no approval needed, go directly to Payment (P)
petri_utils.add_arc_from_to(after_ca, p, net)

# Payment (P) to Notification (N)
petri_utils.add_arc_from_to(p, after_p, net)
petri_utils.add_arc_from_to(after_p, n, net)

# Notification (N) to Closure (CL)
petri_utils.add_arc_from_to(n, after_n, net)
petri_utils.add_arc_from_to(after_n, cl, net)

# Closure (CL) to End
petri_utils.add_arc_from_to(cl, end, net)

# Define Initial Marking
im = Marking()
im[start] = 1

# Define Final Marking
fm = Marking()
fm[end] = 1

# Optional: To visualize the Petri net, you can use the following code
# from pm4py.visualization.petri_net import visualizer as pn_visualizer
# gviz = pn_visualizer.apply(net, im, fm)
# pn_visualizer.view(gviz)
```

### Explanation of the Code:

1. **Initialization**:
   - The Petri net is initialized with the name `"InsuranceClaimProcess"`.
   - All necessary places and transitions are defined and added to the net.

2. **Flow Construction**:
   - The flow begins with the `C` transition (Insurance Claim), placing a token in `after_cr` (After Claim Registration).
   - The process continues with `CR` (Claim Registration), leading to `after_dv` (After Document Verification).
   - From `after_dv`, the process can either proceed to `DV` (Document Verification) or `fc` (Fraud Check). If documents need resubmission, it goes to `rds_trans` (Re-Document Submission), loops back to `dv`, and then returns to `after_dv`.
   - Similarly, from `after_fc` (After Fraud Check), the process can either proceed to `ca` (Claim Assessment) or enter `ii_trans` (In-depth Investigation), looping back to `fc`.
   - The process then moves through `ca`, `ap` (Approval), `p` (Payment), `n` (Notification), and finally `cl` (Closure), placing a token in `end` (End).

3. **Initial and Final Markings**:
   - The initial marking (`im`) places a token in the `Start` place, indicating the beginning of the process.
   - The final marking (`fm`) places a token in the `End` place, indicating the completion of the process.

4. **Visualization (Optional)**:
   - The commented-out section provides a way to visualize the constructed Petri net using `pm4py`'s visualization tools.

### Notes:

- **Loops for RDS and II**: The loops for `RDS` and `II` are handled by having transitions and places that allow the process to return to previous states if necessary.
- **Approval Condition**: The process includes a conditional path from `ca` to `ap` (Approval) and then to `p` (Payment), as well as a direct path from `ca` to `p` if no approval is needed.
- **Closure**: After payment and notification, the process concludes with closure, transitioning to the `End` place.

This Petri net provides a comprehensive model of the insurance claim management process, including the necessary loops and conditional paths to handle various scenarios.