```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance Claim Management")

# Define Places
# States between activities
p_start = PetriNet.Place(name="start_claim")
p_claim_registered = PetriNet.Place(name="claim_registered")
p_docs_verified = PetriNet.Place(name="documents_verified")
p_docs_incomplete = PetriNet.Place(name="documents_incomplete") # For re-submission loop
p_fraud_checked = PetriNet.Place(name="fraud_checked")
p_fraud_doubt = PetriNet.Place(name="fraud_doubt") # For in-depth investigation loop
p_claim_assessed = PetriNet.Place(name="claim_assessed")
p_assessment_ready_for_approval = PetriNet.Place(name="assessment_ready_for_approval") # Before approval decision
p_claim_approved = PetriNet.Place(name="claim_approved")
p_claim_paid = PetriNet.Place(name="claim_paid")
p_notification_sent = PetriNet.Place(name="notification_sent")
p_end = PetriNet.Place(name="claim_closed") # Final state

# Add places to the net
net.places.add(p_start)
net.places.add(p_claim_registered)
net.places.add(p_docs_verified)
net.places.add(p_docs_incomplete)
net.places.add(p_fraud_checked)
net.places.add(p_fraud_doubt)
net.places.add(p_claim_assessed)
net.places.add(p_assessment_ready_for_approval)
net.places.add(p_claim_approved)
net.places.add(p_claim_paid)
net.places.add(p_notification_sent)
net.places.add(p_end)

# Define Transitions (Activities)
t_claim_registration = PetriNet.Transition(name="t_CR", label="Claim Registration (CR)")
t_document_verification = PetriNet.Transition(name="t_DV", label="Document Verification (DV)")
t_docs_ok = PetriNet.Transition(name="t_docs_ok", label="Documents OK") # Implicit transition for decision
t_docs_incomplete = PetriNet.Transition(name="t_docs_incomplete", label="Documents Incomplete") # Implicit transition for decision
t_re_document_submission = PetriNet.Transition(name="t_RDS", label="Re-Document Submission (RDS)")
t_fraud_check = PetriNet.Transition(name="t_FC", label="Fraud Check (FC)")
t_fraud_ok = PetriNet.Transition(name="t_fraud_ok", label="Fraud OK") # Implicit transition for decision
t_fraud_doubt = PetriNet.Transition(name="t_fraud_doubt", label="Fraud Doubt") # Implicit transition for decision
t_in_depth_investigation = PetriNet.Transition(name="t_II", label="In-depth Investigation (II)")
t_claim_assessment = PetriNet.Transition(name="t_CA", label="Claim Assessment (CA)")
t_approval_required = PetriNet.Transition(name="t_AR", label="Approval Required (Threshold)") # Implicit decision transition
t_no_approval_required = PetriNet.Transition(name="t_NAR", label="No Approval Required") # Implicit decision transition
t_approval = PetriNet.Transition(name="t_AP", label="Approval (AP)")
t_payment = PetriNet.Transition(name="t_P", label="Payment (P)")
t_notification = PetriNet.Transition(name="t_N", label="Notification (N)")
t_closure = PetriNet.Transition(name="t_CL", label="Closure (CL)")


# Add transitions to the net
net.transitions.add(t_claim_registration)
net.transitions.add(t_document_verification)
net.transitions.add(t_docs_ok)
net.transitions.add(t_docs_incomplete)
net.transitions.add(t_re_document_submission)
net.transitions.add(t_fraud_check)
net.transitions.add(t_fraud_ok)
net.transitions.add(t_fraud_doubt)
net.transitions.add(t_in_depth_investigation)
net.transitions.add(t_claim_assessment)
net.transitions.add(t_approval_required)
net.transitions.add(t_no_approval_required)
net.transitions.add(t_approval)
net.transitions.add(t_payment)
net.transitions.add(t_notification)
net.transitions.add(t_closure)

# Add Arcs
# Initial Claim -> Claim Registration
petri_utils.add_arc_from_to(p_start, t_claim_registration, net)
petri_utils.add_arc_from_to(t_claim_registration, p_claim_registered, net)

# Claim Registration -> Document Verification
petri_utils.add_arc_from_to(p_claim_registered, t_document_verification, net)
petri_utils.add_arc_from_to(t_document_verification, p_docs_verified, net) # Output of DV before decision
petri_utils.add_arc_from_to(t_document_verification, p_docs_incomplete, net) # Output of DV before decision

# Document Verification / Re-Document Submission Loop
petri_utils.add_arc_from_to(p_docs_incomplete, t_re_document_submission, net)
petri_utils.add_arc_from_to(t_re_document_submission, p_claim_registered, net) # After RDS, back to (re)verify documents

# Document Verification -> Fraud Check (if documents are OK)
petri_utils.add_arc_from_to(p_docs_verified, t_fraud_check, net)
petri_utils.add_arc_from_to(t_fraud_check, p_fraud_checked, net) # Output of FC before decision
petri_utils.add_arc_from_to(t_fraud_check, p_fraud_doubt, net) # Output of FC before decision

# Fraud Check / In-depth Investigation Loop
petri_utils.add_arc_from_to(p_fraud_doubt, t_in_depth_investigation, net)
petri_utils.add_arc_from_to(t_in_depth_investigation, p_claim_registered, net) # After II, back to initial checks

# Fraud Check -> Claim Assessment (if fraud check is OK)
petri_utils.add_arc_from_to(p_fraud_checked, t_claim_assessment, net)
petri_utils.add_arc_from_to(t_claim_assessment, p_claim_assessed, net)

# Claim Assessment -> Approval (Decision)
petri_utils.add_arc_from_to(p_claim_assessed, t_approval_required, net)
petri_utils.add_arc_from_to(t_approval_required, p_assessment_ready_for_approval, net) # State where approval is needed

petri_utils.add_arc_from_to(p_claim_assessed, t_no_approval_required, net)
petri_utils.add_arc_from_to(t_no_approval_required, p_claim_approved, net) # Directly to approved if no approval needed

# Approval -> Payment
petri_utils.add_arc_from_to(p_assessment_ready_for_approval, t_approval, net)
petri_utils.add_arc_from_to(t_approval, p_claim_approved, net)

# Approved -> Payment
petri_utils.add_arc_from_to(p_claim_approved, t_payment, net)
petri_utils.add_arc_from_to(t_payment, p_claim_paid, net)

# Payment -> Notification
petri_utils.add_arc_from_to(p_claim_paid, t_notification, net)
petri_utils.add_arc_from_to(t_notification, p_notification_sent, net)

# Notification -> Closure
petri_utils.add_arc_from_to(p_notification_sent, t_closure, net)
petri_utils.add_arc_from_to(t_closure, p_end, net)


# Define Initial Marking (IM)
im = Marking()
im[p_start] = 1

# Define Final Marking (FM)
fm = Marking()
fm[p_end] = 1

print("Petri Net for Insurance Claim Management constructed successfully.")
print("\nInitial Marking (im):", im)
print("Final Marking (fm):", fm)

# You can optionally visualize the net using pm4py if you have graphviz installed:
# from pm4py.visualization.petri_net import visualizer as pn_visualizer
# gviz = pn_visualizer.apply(net, im, fm)
# pn_visualizer.view(gviz)
```