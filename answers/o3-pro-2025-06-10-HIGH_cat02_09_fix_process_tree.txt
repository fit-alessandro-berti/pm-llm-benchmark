1. What is wrong with the current (under-fitting) model?  
   • After the requisition is approved the model puts every remaining activity (Create PO, Receive Goods, Receive Invoice, Match, Pay) in one big PARALLEL block.  
   • Consequently the run-time engine would accept, for instance:  
     – Paying an invoice before the invoice (or even the goods) is received.  
     – Matching an invoice to a PO before the invoice exists.  
     – Receiving / paying without a PO ever being created, etc.  
   • In real “Procure-to-Pay” these steps have to respect clear causal relations:
     1. A PO can only be created after the requisition is both created and approved.  
     2. Nothing may be received before the PO exists.  
     3. The invoice-to-PO match needs both the physical receipt (GR) and the financial document (invoice).  
     4. Paying is allowed only after a successful match.  
     5. Only then can the case be closed.

2. Corrected Process-Tree (Python / pm4py pseudocode)  

```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# activities
create_req      = ProcessTree(label="Create_Purchase_Requisition")
approve_req     = ProcessTree(label="Approve_Purchase_Requisition")
create_po       = ProcessTree(label="Create_Purchase_Order")
receive_goods   = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice   = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice     = ProcessTree(label="Pay_Invoice")
close_case      = ProcessTree(label="Close_Case")

# 1. Requisition handling – strictly sequential
req_sequence = ProcessTree(operator=Operator.SEQUENCE,
                           children=[create_req, approve_req])

# 2. Goods receipt and invoice receipt may arrive in either order,
#    but BOTH must be completed before we can match the invoice.
receive_parallel = ProcessTree(operator=Operator.PARALLEL,
                               children=[receive_goods, receive_invoice])

# 3. Final sequential chain
root = ProcessTree(operator=Operator.SEQUENCE, children=[
        req_sequence,          # PR creation and approval
        create_po,             # PO creation
        receive_parallel,      # Goods & invoice (AND-join)
        match_invoice,         # three-way match
        pay_invoice,           # payment
        close_case             # closure
])
```

3. Why the fixed model is conformant  

• Mandatory order is enforced with SEQUENCE operators:  
  – You cannot create a PO before the requisition exists and is approved.  
  – You cannot attempt the match, the payment, or the closing step until everything that precedes them in the sequence has happened.

• Limited, controlled parallelism is introduced only where the domain allows it.  
  – The PARALLEL (AND) block for Receive Goods and Receive Invoice means the two events can come in either order or even truly concurrently, but the AND-join ensures both have happened before the sequence continues to “Match Invoice to PO”.  
  – Because the parallel block is located after “Create Purchase_Order” and before “Match Invoice”, neither receipt can occur before the PO exists and both must be completed before matching/payments.

• No activity can be skipped: the tree contains every mandatory step exactly once and there is no XOR/OR operator that would make a step optional.

• No activity can happen too early: the combination of SEQUENCE and the single controlled PARALLEL block removes the original freedom that allowed, for example, “Pay Invoice” first.

In short, the revised process tree accepts every legally possible “Procure-to-Pay” variant while rejecting all variants that violate the canonical business logic.