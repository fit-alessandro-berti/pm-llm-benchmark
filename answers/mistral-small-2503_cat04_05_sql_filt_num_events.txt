To achieve the desired result, you can use a combination of subqueries and common table expressions (CTEs) in DuckDB. The goal is to first count the number of events per `case_id`, filter out the `case_id`s that have more than six events, and then return the events for the remaining `case_id`s.

Here's the SQL query to accomplish this:

```sql
WITH event_counts AS (
    SELECT
        case_id,
        COUNT(*) AS event_count
    FROM
        event_log
    GROUP BY
        case_id
),
filtered_cases AS (
    SELECT
        case_id
    FROM
        event_counts
    WHERE
        event_count <= 6
)
SELECT
    e.*
FROM
    event_log e
JOIN
    filtered_cases f
ON
    e.case_id = f.case_id;
```

### Explanation:

1. **event_counts CTE**:
   - This CTE calculates the number of events for each `case_id` by grouping the `event_log` table by `case_id` and counting the rows in each group.

2. **filtered_cases CTE**:
   - This CTE filters out the `case_id`s that have more than six events by selecting only those `case_id`s from `event_counts` where `event_count` is less than or equal to six.

3. **Final SELECT Statement**:
   - This part of the query joins the original `event_log` table with the `filtered_cases` CTE on `case_id` to return only the events for the `case_id`s that have six or fewer events.

This query ensures that you get the full set of events for the cases that meet the criteria, while excluding any cases with more than six events.