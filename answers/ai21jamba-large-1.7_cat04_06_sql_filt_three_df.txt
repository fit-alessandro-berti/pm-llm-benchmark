Here is the DuckDB SQL query to meet the requirements:

```sql
-- Step 1: Identify cases with the specific activity sequence
WITH SequenceMatch AS (
    SELECT 
        case_id
    FROM (
        SELECT 
            case_id,
            activity,
            LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity1,
            LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity2,
            LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp2
        FROM event_log
    ) subquery
    WHERE 
        activity = 'Approve Purchase Requisition'
        AND next_activity1 = 'Create Order'
        AND next_activity2 = 'Confirm Order'
),

-- Step 2: Filter for cases where 'Create Order' -> 'Confirm Order' time difference > 5 days
FilteredCases AS (
    SELECT 
        case_id
    FROM SequenceMatch
    WHERE 
        (next_timestamp2 - timestamp) > INTERVAL '5 days'
)

-- Step 3: Return all events except those from the filtered cases
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM FilteredCases);
```

### Explanation:

1. **Step 1 (SequenceMatch CTE)**:
	- Identifies cases where the sequence `'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order'` appears in that order without any other events in between.
	- Uses the `LEAD()` function to access the next and second-next activity and timestamp for each event.
2. **Step 2 (FilteredCases CTE)**:
	- Filters the cases where the elapsed time between the events 'Create Order' and 'Confirm Order' is more than 5 days.
3. **Final Query**:
	- Excludes events from cases that match the sequence and the timing condition. It returns the rest of the events from `event_log`.

This query ensures proper grouping and filtering based on the specified conditions.