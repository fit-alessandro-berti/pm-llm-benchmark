```sql
WITH case_sequences AS (
    SELECT 
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS variant_sequence
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    SELECT 
        variant_sequence,
        COUNT(*) AS case_count
    FROM case_sequences
    GROUP BY variant_sequence
),
top_k_variants AS (
    SELECT variant_sequence
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT K
),
top_k_cases AS (
    SELECT DISTINCT cs.case_id
    FROM case_sequences cs
    INNER JOIN top_k_variants tkv 
        ON cs.variant_sequence = tkv.variant_sequence
)
SELECT el.*
FROM event_log el
INNER JOIN top_k_cases tkc 
    ON el.case_id = tkc.case_id
ORDER BY el.case_id, el.timestamp;
```

---

### Explanation:

1. **`case_sequences` CTE**:  
   For each `case_id`, aggregates the `activity` values in the order dictated by `timestamp` using `STRING_AGG(... ORDER BY timestamp)`. This creates a string representation of the variant (e.g., `"A -> B -> C"`).

2. **`variant_counts` CTE**:  
   Groups by the variant sequence and counts how many cases follow each variant.

3. **`top_k_variants` CTE**:  
   Selects the top K variants by case count (descending). Replace `K` with the desired integer value (e.g., 5, 10) when executing.

4. **`top_k_cases` CTE**:  
   Identifies all `case_id`s that belong to one of the top K variants by joining with `case_sequences`.

5. **Final SELECT**:  
   Returns all original event log rows (`el.*`) for cases that are in the top K variants, preserving all original columns and ordering by `case_id` and `timestamp` for clarity.

---

### Notes:
- The `STRING_AGG` with `ORDER BY` is crucial to ensure the sequence is correctly ordered by timestamp within each case.
- The delimiter `' -> '` is arbitrary and chosen for readability; it should not appear in actual activity names to avoid ambiguity.
- To use this query, replace `K` in the `LIMIT K` clause with the desired number (e.g., `LIMIT 5`).
- DuckDB supports `STRING_AGG` with `ORDER BY` inside, which is essential for correctly constructing the variant sequence.

This query is efficient and leverages DuckDB’s ability to handle ordered aggregations and CTEs for clear, modular logic.