```sql
WITH ordered_events AS (
  -- Add row numbers to establish event order within each case
  SELECT 
    case_id,
    activity,
    timestamp,
    ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
  FROM event_log
),

sequence_matches AS (
  -- Find sequences of three consecutive activities matching the pattern
  SELECT DISTINCT
    e1.case_id,
    e1.timestamp AS approve_time,
    e2.timestamp AS create_time,
    e3.timestamp AS confirm_time
  FROM ordered_events e1
  INNER JOIN ordered_events e2 
    ON e1.case_id = e2.case_id 
    AND e2.rn = e1.rn + 1
  INNER JOIN ordered_events e3 
    ON e2.case_id = e3.case_id 
    AND e3.rn = e2.rn + 1
  WHERE 
    e1.activity = 'Approve Purchase Requisition'
    AND e2.activity = 'Create Order'
    AND e3.activity = 'Confirm Order'
),

cases_to_exclude AS (
  -- Filter to cases where Create->Confirm time difference exceeds 5 days
  SELECT DISTINCT case_id
  FROM sequence_matches
  WHERE DATEDIFF('day', create_time, confirm_time) > 5
)

-- Return all events except those from excluded cases
SELECT 
  el.case_id,
  el.activity,
  el.timestamp
FROM event_log el
WHERE el.case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY el.case_id, el.timestamp;
```

**Explanation:**

1. **`ordered_events` CTE**: Assigns row numbers to events within each case based on timestamp order, allowing us to identify consecutive events.

2. **`sequence_matches` CTE**: Uses self-joins on the ordered events to find cases where:
   - Event at position `n` is 'Approve Purchase Requisition'
   - Event at position `n+1` is 'Create Order'
   - Event at position `n+2` is 'Confirm Order'
   
   This ensures the three activities appear in direct succession with no intervening events.

3. **`cases_to_exclude` CTE**: Filters the matched sequences to only those where the time between 'Create Order' and 'Confirm Order' exceeds 5 days using `DATEDIFF`.

4. **Final SELECT**: Returns all events from the original table except those belonging to cases in the exclusion list.

**Alternative approach using LEAD window function:**

```sql
WITH sequence_detection AS (
  SELECT 
    case_id,
    activity,
    timestamp,
    LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
    LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
    LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp,
    LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_timestamp
  FROM event_log
),

cases_to_exclude AS (
  SELECT DISTINCT case_id
  FROM sequence_detection
  WHERE 
    activity = 'Approve Purchase Requisition'
    AND next_activity = 'Create Order'
    AND next_next_activity = 'Confirm Order'
    AND DATEDIFF('day', next_timestamp, next_next_timestamp) > 5
)

SELECT 
  el.case_id,
  el.activity,
  el.timestamp
FROM event_log el
WHERE el.case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY el.case_id, el.timestamp;
```

Both approaches are valid; the second one using `LEAD` is often more readable for sequence detection patterns.