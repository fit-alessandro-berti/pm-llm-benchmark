To solve this benchmark, we need to follow a step-by-step approach to identify and filter out the cases that match the specified sequence and timing conditions. Here's the SQL query to achieve this:

1. Identify the cases that have the specified sequence of activities.
2. Filter out cases where the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.
3. Exclude these cases from the final result.

Here is the SQL query:

```sql
WITH sequence_cases AS (
    SELECT
        case_id,
        LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_2,
        LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_1,
        activity AS activity_0,
        LAG(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_timestamp,
        timestamp AS current_timestamp
    FROM
        event_log
),
filtered_cases AS (
    SELECT
        case_id
    FROM
        sequence_cases
    WHERE
        activity_2 = 'Approve Purchase Requisition' AND
        activity_1 = 'Create Order' AND
        activity_0 = 'Confirm Order' AND
        (current_timestamp - prev_timestamp) > INTERVAL '5 days'
    GROUP BY
        case_id
)
SELECT
    *
FROM
    event_log
WHERE
    case_id NOT IN (SELECT case_id FROM filtered_cases)
ORDER BY
    case_id,
    timestamp;
```

### Explanation:

1. **sequence_cases CTE**:
   - This Common Table Expression (CTE) uses the `LAG` window function to look back at the previous two activities and their timestamps for each `case_id`.
   - `activity_2` is the activity two events back.
   - `activity_1` is the activity one event back.
   - `activity_0` is the current activity.
   - `prev_timestamp` is the timestamp of the previous event.
   - `current_timestamp` is the timestamp of the current event.

2. **filtered_cases CTE**:
   - This CTE filters out the cases where the sequence 'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order' exists and the time between 'Create Order' and 'Confirm Order' is more than 5 days.
   - It groups the results by `case_id` to get a list of cases that meet the criteria.

3. **Final SELECT**:
   - The final query selects all events from the `event_log` table where the `case_id` is not in the list of `case_id`s from the `filtered_cases` CTE.
   - The results are ordered by `case_id` and `timestamp` to ensure proper sequencing of events.

This query ensures that only events from cases that do not match the specified sequence and timing conditions are returned.