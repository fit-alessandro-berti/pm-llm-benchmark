```python
log_skeleton = {
    'equivalence': {('RO', 'IC')},  # Each order received should have a corresponding invoice.
    'always_before': {('RI', 'PI'), ('QC', 'PO'), ('GSL', 'D')}, # Pick Items happen before Reserve, quality check before pack, generate shipping label before dispatch
    'always_after': {('RO', 'CA'), ('PO', 'GSL')},  # Check availability is done after receiving order, after packing generate shipping label
    'never_together': {('RI', 'PI'), ('RO', 'D')}, #Reserve and Pick should never be done at same step, Receive and Dispatch at same time
    'activ_freq': {
        'RO': {1},        # Receive Order: Each order is received exactly once.
        'CA': {1},        # Check Availability:  Each order is checked for availability exactly once.
        'RI': {0, 1},        # Reserve Items: Items may or may not be reserved (e.g., if the items are always available).
        'PI': {1},        # Pick Items: Items are picked exactly once per order.
        'QC': {1},        # Quality Check: Items are checked for quality exactly once.
        'PO': {1},        # Pack Order: Each order is packed exactly once.
        'GSL': {1},       # Generate Shipping Label: A shipping label is generated exactly once per order.
        'D': {1},         # Dispatch:  Each order is dispatched exactly once.
        'IC': {1},        # Invoice Customer:  Each order is invoiced exactly once.
        'RP': {0, 1}         # Record Payment: Payment may or may not be recorded yet
    },
    'directly_follows': {('RO', 'CA'), ('CA', 'RI'), ('RI', 'PI'), ('PI', 'QC'), ('QC', 'PO'), ('PO', 'GSL'), ('GSL', 'D')} # Activities which have a direct follow
}

print(log_skeleton)
```

**Explanation:**

1.  **Equivalence:**  `('RO', 'IC')` ensures that for every "Receive Order" event, there is a corresponding "Invoice Customer" event. This reflects a business rule that every order must be invoiced.

2.  **Always Before:**
    *   `('RI', 'PI')` ensures that items are picked before they are reserved.
    *   `('QC', 'PO')` ensures that quality check must happen before pack.
    *   `('GSL', 'D')` ensures that shipping label is generated before dispatch.

3.  **Always After:**
    *   `('RO', 'CA')` states that after receiving an order, the availability of the items is checked.
    *   `('PO', 'GSL')` states that after packing the order, the shipping label is generated.

4.  **Never Together:**
    *   `('RI', 'PI')` says that items should never be in both the process of reserving and picking.
    *   `('RO', 'D')` says that Receive Order and Dispatch can never happen at same time.

5.  **Activity Occurrences:**  This section defines the allowed number of times each activity can occur within a single order fulfillment process instance.  For example:
    *   `'RO': {1}` means "Receive Order" happens exactly once per order.
    *   `'RP': {0, 1}` means "Record Payment" happens either zero (if the customer hasn't paid yet) or one time.
    *    `'RI': {0,1}` Reserve Items: Items may or may not be reserved if they are available
    *   The other activities ('CA', 'PI', 'QC', 'PO', 'GSL', 'D', 'IC') are expected to happen exactly once.

6.  **Directly-Follows Constraints:**  This specifies the immediate sequence of activities:
    *   `('RO', 'CA')`: Receive Order is immediately followed by Check Availability.
    *   `('CA', 'RI')`: Check Availability is immediately followed by Reserve Items.
    *   `('RI', 'PI')`: Reserve Items is immediately followed by Pick Items.
    *   `('PI', 'QC')`: Pick Items is immediately followed by Quality Check.
    *   `('QC', 'PO')`: Quality Check is immediately followed by Pack Order.
    *   `('PO', 'GSL')`: Pack Order is immediately followed by Generate Shipping Label.
    *   `('GSL', 'D')`: Generate Shipping Label is immediately followed by Dispatch.
