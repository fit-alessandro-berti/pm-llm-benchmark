Below is the Python code to construct the process tree as per the given hospital patient management scenario:

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Create the root node
root = ProcessTree(operator=Operator.SEQUENCE)

# Create the activities
A = ProcessTree(label="A", parent=None)
RG = ProcessTree(label="RG", parent=None)
IA = ProcessTree(label="IA", parent=None)
TI = ProcessTree(label="TI", parent=None)
TC = ProcessTree(label="TC", parent=None)
CE = ProcessTree(label="CE", parent=None)
FBP = ProcessTree(label="FBP", parent=None)
SC = ProcessTree(label="SC", parent=None)
TM = ProcessTree(label="TM", parent=None)
SPT = ProcessTree(label="SPT", parent=None)
FCE = ProcessTree(label="FCE", parent=None)
FBA = ProcessTree(label="FBA", parent=None)
AI = ProcessTree(label="AI", parent=None)
NC = ProcessTree(label="NC", parent=None)
FAS = ProcessTree(label="FAS", parent=None)
DDI = ProcessTree(label="DDI", parent=None)
BL = ProcessTree(label="BL", parent=None)
ICP = ProcessTree(label="ICP", parent=None)
MRF = ProcessTree(label="MRF", parent=None)

# Setting the hierarchy manually to avoid automatic calculation of parent
# Node A to root
node_A_to_RG_IA = ProcessTree(operator=Operator.SEQUENCE, parent=root)
node_A_to_RG_IA.children.append(A)
node_RG_IA = ProcessTree(operator=Operator.SEQUENCE, parent=node_A_to_RG_IA)
node_RG_IA.children.append(RG)
node_RG_IA.children.append(IA)
node_A_to_RG_IA.children.append(node_RG_IA)
root.children.append(node_A_to_RG_IA)

# Node TI and TC sequence
node_TI_TC = ProcessTree(operator=Operator.SEQUENCE, parent=root)
node_TI_TC.children.append(TI)
node_TI_TC.children.append(TC)
root.children.append(node_TI_TC)

# Exclusive choice CE or FBP
node_CE_or_FBP = ProcessTree(operator=Operator.XOR, parent=root)
node_CE_or_FBP.children.append(CE)
node_CE_or_FBP.children.append(FBP)
root.children.append(node_CE_or_FBP)

# Loop for Specialist Consultation, Treatment and Re-diagnostic test
node_loop = ProcessTree(operator=Operator.LOOP, parent=root)
node_SC = ProcessTree(operator=Operator.SEQUENCE, parent=node_loop)
node_SC_Treat = ProcessTree(operator=Operator.XOR, parent=node_SC)
node_SC_Treat.children.append(TM)
node_SC_Treat.children.append(SPT)
node_SC.children.append(SC)
node_SC.children.append(node_SC_Treat)
node_RDT = ProcessTree(operator=Operator.XOR, parent=node_SC)
node_RDT_FCE_or_FBA = ProcessTree(operator=Operator.XOR, parent=node_RDT)
node_RDT_FCE_or_FBA.children.append(FCE)
node_RDT_FCE_or_FBA.children.append(FBA)
node_RDT.children.append(node_RDT_FCE_or_FBA)
node_loop.children.append(node_SC)
node_loop.children.append(node_RDT)
root.children.append(node_loop)

# Concurrency for Advanced Imaging and Nutritional Counseling
node_AI_NC = ProcessTree(operator=Operator.PARALLEL, parent=root)
node_AI_NC.children.append(AI)
node_AI_NC.children.append(NC)
root.children.append(node_AI_NC)

# Sequence for FAS and DDI
node_FAS_DDI = ProcessTree(operator=Operator.SEQUENCE, parent=root)
node_FAS_DDI.children.append(FAS)
node_FAS_DDI.children.append(DDI)
root.children.append(node_FAS_DDI)

# Concurrency for BL, ICP, MRF
node_BL_ICP_MRF = ProcessTree(operator=Operator.PARALLEL, parent=root)
node_BL_ICP_MRF.children.append(BL)
node_BL_ICP_MRF.children.append(ICP)
node_BL_ICP_MRF.children.append(MRF)
root.children.append(node_BL_ICP_MRF)

# Adjust the parent of each node according to the tree hierarchy
A.parent = node_A_to_RG_IA
RG.parent = node_RG_IA
IA.parent = node_RG_IA
TI.parent = node_TI_TC
TC.parent = node_TI_TC
CE.parent = node_CE_or_FBP
FBP.parent = node_CE_or_FBP
SC.parent = node_SC
TM.parent = node_SC_Treat
SPT.parent = node_SC_Treat
FCE.parent = node_RDT_FCE_or_FBA
FBA.parent = node_RDT_FCE_or_FBA
AI.parent = node_AI_NC
NC.parent = node_AI_NC
FAS.parent = node_FAS_DDI
DDI.parent = node_FAS_DDI
BL.parent = node_BL_ICP_MRF
ICP.parent = node_BL_ICP_MRF
MRF.parent = node_BL_ICP_MRF

node_A_to_RG_IA.parent = root
node_RG_IA.parent = node_A_to_RG_IA
node_TI_TC.parent = root
node_CE_or_FBP.parent = root
node_loop.parent = root
node_SC.parent = node_loop
node_SC_Treat.parent = node_SC
node_RDT.parent = node_SC
node_RDT_FCE_or_FBA.parent = node_RDT
node_AI_NC.parent = root
node_FAS_DDI.parent = root
node_BL_ICP_MRF.parent = root

```
However, to create this complex process tree in the exact manner required (as the hierarchy provided seems incomplete for defining the sequence of activities directly), you would ideally first establish the sequence and concurrency blocks as defined and then directly attach these to the root, considering the overall flow of the process as described.

For simplification, let's reconsider and rearrange the approach focusing on constructing the overall tree structure directly without intermediary node definitions for each sequence, choice, or concurrency, but instead, focusing on how these elements directly integrate into the overall process flow.

Below is the adjusted Python code:

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Create the root node
root = ProcessTree(operator=Operator.SEQUENCE)

# Arrival and Registration sequence
arrival_registration = ProcessTree(operator=Operator.SEQUENCE, parent=root)
A = ProcessTree(label="A", parent=arrival_registration)
RG = ProcessTree(label="RG", parent=arrival_registration)
IA = ProcessTree(label="IA", parent=arrival_registration)
arrival_registration.children.append(A)
arrival_registration.children.append(RG)
arrival_registration.children.append(IA)
root.children.append(arrival_registration)

# Triage sequence
triage_sequence = ProcessTree(operator=Operator.SEQUENCE, parent=root)
TI = ProcessTree(label="TI", parent=triage_sequence)
TC = ProcessTree(label="TC", parent=triage_sequence)
triage_sequence.children.append(TI)
triage_sequence.children.append(TC)
root.children.append(triage_sequence)

# Initial diagnostic test choice
diagnostic_test_choice = ProcessTree(operator=Operator.XOR, parent=root)
CE = ProcessTree(label="CE", parent=diagnostic_test_choice)
FBP = ProcessTree(label="FBP", parent=diagnostic_test_choice)
diagnostic_test_choice.children.append(CE)
diagnostic_test_choice.children.append(FBP)
root.children.append(diagnostic_test_choice)

# Loop for specialist consultation and re-diagnostic test
specialist_loop = ProcessTree(operator=Operator.LOOP, parent=root)
specialist_sequence = ProcessTree(operator=Operator.SEQUENCE, parent=specialist_loop)
SC = ProcessTree(label="SC", parent=specialist_sequence)
treatment_choice = ProcessTree(operator=Operator.XOR, parent=specialist_sequence)
TM = ProcessTree(label="TM", parent=treatment_choice)
SPT = ProcessTree(label="SPT", parent=treatment_choice)
treatment_choice.children.append(TM)
treatment_choice.children.append(SPT)
specialist_sequence.children.append(SC)
specialist_sequence.children.append(treatment_choice)
re_diagnostic_test_choice = ProcessTree(operator=Operator.XOR, parent=specialist_sequence)
FCE = ProcessTree(label="FCE", parent=re_diagnostic_test_choice)
FBA = ProcessTree(label="FBA", parent=re_diagnostic_test_choice)
re_diagnostic_test_choice.children.append(FCE)
re_diagnostic_test_choice.children.append(FBA)
specialist_sequence.children.append(re_diagnostic_test_choice)
specialist_loop.children.append(specialist_sequence)
root.children.append(specialist_loop)

# Advanced imaging and nutritional counseling concurrency
imaging_nutrition_concurrency = ProcessTree(operator=Operator.PARALLEL, parent=root)
AI = ProcessTree(label="AI", parent=imaging_nutrition_concurrency)
NC = ProcessTree(label="NC", parent=imaging_nutrition_concurrency)
imaging_nutrition_concurrency.children.append(AI)
imaging_nutrition_concurrency.children.append(NC)
root.children.append(imaging_nutrition_concurrency)

# Follow-up appointment and discharge instructions sequence
follow_up_sequence = ProcessTree(operator=Operator.SEQUENCE, parent=root)
FAS = ProcessTree(label="FAS", parent=follow_up_sequence)
DDI = ProcessTree(label="DDI", parent=follow_up_sequence)
follow_up_sequence.children.append(FAS)
follow_up_sequence.children.append(DDI)
root.children.append(follow_up_sequence)

# Billing, insurance claims, and medical records concurrency
final_concurrency = ProcessTree(operator=Operator.PARALLEL, parent=root)
BL = ProcessTree(label="BL", parent=final_concurrency)
ICP = ProcessTree(label="ICP", parent=final_concurrency)
MRF = ProcessTree(label="MRF", parent=final_concurrency)
final_concurrency.children.append(BL)
final_concurrency.children.append(ICP)
final_concurrency.children.append(MRF)
root.children.append(final_concurrency)

# Adjust the parent of each node
A.parent = arrival_registration
RG.parent = arrival_registration
IA.parent = arrival_registration
TI.parent = triage_sequence
TC.parent = triage_sequence
CE.parent = diagnostic_test_choice
FBP.parent = diagnostic_test_choice
SC.parent = specialist_sequence
TM.parent = treatment_choice
SPT.parent = treatment_choice
FCE.parent = re_diagnostic_test_choice
FBA.parent = re_diagnostic_test_choice
AI.parent = imaging_nutrition_concurrency
NC.parent = imaging_nutrition_concurrency
FAS.parent = follow_up_sequence
DDI.parent = follow_up_sequence
BL.parent = final_concurrency
ICP.parent = final_concurrency
MRF.parent = final_concurrency

arrival_registration.parent = root
triage_sequence.parent = root
diagnostic_test_choice.parent = root
specialist_loop.parent = root
imaging_nutrition_concurrency.parent = root
follow_up_sequence.parent = root
final_concurrency.parent = root

specialist_sequence.parent = specialist_loop
treatment_choice.parent = specialist_sequence
re_diagnostic_test_choice.parent = specialist_sequence
```

This revised approach more accurately represents the process tree structure as described, with each sequence, choice, loop, and concurrency block properly integrated into the overall process flow. The `parent` of each node is manually set to maintain the correct hierarchy.