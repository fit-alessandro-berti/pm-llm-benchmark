To construct the described Petri net for the insurance claim management process, we will follow the provided structure and add necessary places and transitions. Here's how you can do it:

1. Define all the places and transitions.
2. Add arcs between places and transitions.
3. Define initial and final markings.

Here is the complete Python code to achieve this:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance Claim Management Process")

# Define places
source = PetriNet.Place(name="Source")
claim_registered = PetriNet.Place(name="Claim Registered")
documents_verified = PetriNet.Place(name="Documents Verified")
fraud_checked = PetriNet.Place(name="Fraud Checked")
claim_assessed = PetriNet.Place(name="Claim Assessed")
approval_pending = PetriNet.Place(name="Approval Pending")
payment_made = PetriNet.Place(name="Payment Made")
notification_sent = PetriNet.Place(name="Notification Sent")
closure = PetriNet.Place(name="Closure")
re_document_submission = PetriNet.Place(name="Re-Document Submission")
in_depth_investigation = PetriNet.Place(name="In-depth Investigation")

# Define transitions
cr = PetriNet.Transition(name="CR", label="Claim Registration")
dv = PetriNet.Transition(name="DV", label="Document Verification")
fc = PetriNet.Transition(name="FC", label="Fraud Check")
ca = PetriNet.Transition(name="CA", label="Claim Assessment")
ap = PetriNet.Transition(name="AP", label="Approval")
p = PetriNet.Transition(name="P", label="Payment")
n = PetriNet.Transition(name="N", label="Notification")
cl = PetriNet.Transition(name="CL", label="Closure")
rds = PetriNet.Transition(name="RDS", label="Re-Document Submission")
ii = PetriNet.Transition(name="II", label="In-depth Investigation")

# Add places and transitions to the Petri net
net.places.add(source)
net.places.add(claim_registered)
net.places.add(documents_verified)
net.places.add(fraud_checked)
net.places.add(claim_assessed)
net.places.add(approval_pending)
net.places.add(payment_made)
net.places.add(notification_sent)
net.places.add(closure)
net.places.add(re_document_submission)
net.places.add(in_depth_investigation)

net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(fc)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl)
net.transitions.add(rds)
net.transitions.add(ii)

# Add arcs
petri_utils.add_arc_from_to(source, cr, net)
petri_utils.add_arc_from_to(cr, claim_registered, net)
petri_utils.add_arc_from_to(claim_registered, dv, net)
petri_utils.add_arc_from_to(dv, documents_verified, net)
petri_utils.add_arc_from_to(documents_verified, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, dv, net)
petri_utils.add_arc_from_to(dv, fraud_checked, net)
petri_utils.add_arc_from_to(fraud_checked, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, fraud_checked, net)
petri_utils.add_arc_from_to(fraud_checked, claim_assessed, net)
petri_utils.add_arc_from_to(claim_assessed, approval_pending, net)
petri_utils.add_arc_from_to(approval_pending, ca, net)
petri_utils.add_arc_from_to(ca, payment_made, net)
petri_utils.add_arc_from_to(payment_made, notification_sent, net)
petri_utils.add_arc_from_to(notification_sent, closure, net)
petri_utils.add_arc_from_to(closure, cl, net)

# Define initial and final markings
im = Marking()
im[source] = 1

fm = Marking()
fm[closure] = 1

# Print the Petri net for verification
print("Places:")
for p in net.places:
    print(p.name)
    
print("\nTransitions:")
for t in net.transitions:
    print(t.name)

# Output initial and final markings
print("\nInitial Marking:", im)
print("Final Marking:", fm)
```

### Explanation:
- **Places**: Represent states in the process.
- **Transitions**: Represent activities or events that cause a transition from one state to another.
- **Arcs**: Connect places and transitions, defining the flow of the process.
- **Initial Marking**: Places a token in the "Source" place, indicating a new claim arrives.
- **Final Marking**: Places a token in the "Closure" place, indicating the claim has been processed and closed.

This code creates a Petri net that models the entire insurance claim management process, including loops for re-document submission and in-depth investigations.