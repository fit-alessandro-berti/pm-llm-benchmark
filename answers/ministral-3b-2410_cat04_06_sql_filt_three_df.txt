To achieve the desired result, you can use a combination of window functions and common table expressions (CTEs) in DuckDB. The goal is to identify cases that do not meet the specified sequence and timing condition, and then return all events from those cases.

Here's the SQL query to accomplish this:

```sql
WITH ordered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) as rn
    FROM
        event_log
),
filtered_cases AS (
    SELECT
        case_id
    FROM
        ordered_events
    WHERE
        activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
        AND rn IN (1, 2, 3)
        AND activity = 'Approve Purchase Requisition' AND rn = 1
        AND activity = 'Create Order' AND rn = 2
        AND activity = 'Confirm Order' AND rn = 3
)
SELECT
    *
FROM
    event_log
WHERE
    case_id NOT IN (
        SELECT
            case_id
        FROM
            filtered_cases
        WHERE
            timestamp = (
                SELECT
                    MIN(timestamp)
                FROM
                    event_log e2
                WHERE
                    e2.case_id = filtered_cases.case_id
                    AND e2.activity = 'Create Order'
            )
            AND timestamp = (
                SELECT
                    MAX(timestamp)
                FROM
                    event_log e3
                WHERE
                    e3.case_id = filtered_cases.case_id
                    AND e3.activity = 'Confirm Order'
            )
            AND DATEDIFF('day', (
                SELECT
                    MIN(timestamp)
                FROM
                    event_log e2
                WHERE
                    e2.case_id = filtered_cases.case_id
                    AND e2.activity = 'Create Order'
            ), (
                SELECT
                    MAX(timestamp)
                FROM
                    event_log e3
                WHERE
                    e3.case_id = filtered_cases.case_id
                    AND e3.activity = 'Confirm Order'
            )) > 5
    )
ORDER BY
    case_id,
    timestamp;
```

### Explanation:

1. **ordered_events CTE**:
   - This CTE assigns a row number (`rn`) to each event within the same `case_id` ordered by `timestamp`.

2. **filtered_cases CTE**:
   - This CTE identifies cases that contain the sequence of activities 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' in that exact order.

3. **Main Query**:
   - The main query selects all events from `event_log` where the `case_id` is not in the list of cases identified by the `filtered_cases` CTE.
   - It further ensures that the time difference between 'Create Order' and 'Confirm Order' is more than 5 days for the cases that meet the sequence criteria.

This query ensures that only events from cases that do not meet the specified sequence and timing condition are returned.