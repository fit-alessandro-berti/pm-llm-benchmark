To solve this problem, we need to identify the top K process variants from an event log and return all events belonging to cases that follow these variants. The solution involves constructing activity sequences for each case, counting variant frequencies, determining the top K variants, and filtering the original events accordingly.

### Approach
1. **Construct Activity Sequences**: For each case, aggregate activities into an ordered sequence based on their timestamps using `ARRAY_AGG`.
2. **Count Variant Frequencies**: Group cases by their activity sequences and count the occurrences of each variant. Use `DENSE_RANK()` to rank variants by frequency, ensuring ties are handled correctly.
3. **Identify Top K Variants**: Select variants with a rank less than or equal to K, including all variants tied at the K-th rank.
4. **Filter Events**: Join the original event log with the cases belonging to the top K variants to retrieve all corresponding events.

### Solution Code
```sql
WITH case_variants AS (
    SELECT 
        case_id, 
        ARRAY_AGG(activity ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    SELECT 
        variant,
        COUNT(*) AS case_count,
        DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
    FROM case_variants
    GROUP BY variant
),
top_k_cases AS (
    SELECT cv.case_id
    FROM case_variants cv
    JOIN variant_counts vc ON cv.variant = vc.variant
    WHERE vc.variant_rank <= K  -- Replace K with the desired number (e.g., 3)
)
SELECT e.*
FROM event_log e
JOIN top_k_cases tkc ON e.case_id = tkc.case_id;
```

### Explanation
1. **case_variants CTE**:
   - For each `case_id`, activities are aggregated into an array ordered by `timestamp` using `ARRAY_AGG`. This array represents the unique process variant for the case.
   
2. **variant_counts CTE**:
   - Groups cases by their variant and counts occurrences per variant.
   - Uses `DENSE_RANK()` to assign ranks based on frequency (highest frequency first). This ensures all variants tied at the K-th rank are included.

3. **top_k_cases CTE**:
   - Joins `case_variants` with `variant_counts` to identify cases where the variant's rank is  K. This retrieves all `case_id`s belonging to the top K variants.

4. **Final SELECT**:
   - Joins the original `event_log` with `top_k_cases` on `case_id` to return all events from cases in the top K variants. The result includes all columns and rows from the original log for these cases.

Replace `K` in the `WHERE vc.variant_rank <= K` clause with the desired number of top variants (e.g., `3` for the top 3 variants). This query efficiently handles ties and ensures all events from the relevant cases are returned.