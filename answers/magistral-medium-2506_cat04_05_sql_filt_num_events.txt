Here's a DuckDB SQL query that accomplishes the task:

```sql
WITH case_counts AS (
    SELECT
        case_id,
        COUNT(*) AS event_count
    FROM event_log
    GROUP BY case_id
),
filtered_cases AS (
    SELECT case_id
    FROM case_counts
    WHERE event_count <= 6
)
SELECT e.*
FROM event_log e
JOIN filtered_cases fc ON e.case_id = fc.case_id
ORDER BY e.case_id, e.timestamp;
```

This query works in three steps:

1. First, it creates a CTE (`case_counts`) that counts the number of events for each `case_id`
2. Then it creates another CTE (`filtered_cases`) that selects only those case_ids with 6 or fewer events
3. Finally, it joins the original event log with the filtered cases to return all events that belong to cases with 6 or fewer events

The results are ordered by `case_id` and `timestamp` for readability, but you could remove or modify the ORDER BY clause if needed.

Alternative version using a window function approach:

```sql
SELECT e.*
FROM (
    SELECT
        *,
        COUNT(*) OVER (PARTITION BY case_id) AS case_event_count
    FROM event_log
) e
WHERE case_event_count <= 6
ORDER BY case_id, timestamp;
```

Both queries will produce the same result. The first approach might be more efficient for very large datasets as it first filters the case_ids before joining.