Below are two POWL models represented in a Python-like pseudocode that illustrate the hiring process. In the first model an XOR branch is used to give a “CommunityAffiliationCheck” special path after the skill assessment (which can create a subtle unfairness), while in the second model all applicants follow the same “CulturalFitCheck” path with no branch based on community affiliation.

  
1. Model with Potential Unfairness

In this model the workflow is as follows:  
• Applicants submit their application and their resume is checked for completeness. If incomplete, a “RequestMoreInfo” loop is initiated.  
• The applicant then takes a “SkillAssessment”.  
• Following the skill test, an XOR branch is applied:  
– one branch performs a standard “CulturalFitCheck”  
– the other branch performs a “CommunityAffiliationCheck”.  
• Finally a “ManagerialReview” is performed to decide the "FinalDecision".

The pseudocode below defines the nodes and edges:

---------------------------------------------------
# POWL Model with Potential Unfairness

import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define basic activities
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")
tau = SilentTransition()  # Used for silent transitions if needed

# Loop for ensuring data completeness: After DataCompletenessCheck, if incomplete, RequestMoreInfo then re-check.
completeness_loop = OperatorPOWL(operator=Operator.LOOP, children=[DataCompletenessCheck, RequestMoreInfo])
# The process starts with receiving applications then validating completeness.
head_PO = StrictPartialOrder(nodes=[ReceiveApplication, completeness_loop])
head_PO.order.add_edge(ReceiveApplication, completeness_loop)

# After ensuring completeness, Skill Assessment is performed.
pre_assessment = StrictPartialOrder(nodes=[completeness_loop, SkillAssessment])
pre_assessment.order.add_edge(completeness_loop, SkillAssessment)

# Create XOR branch for Cultural Fit.
# One branch does standard CulturalFitCheck.
# The other branch goes through the CommunityAffiliationCheck that can give a subtle advantage.
culture_branch = OperatorPOWL(operator=Operator.XOR, children=[CulturalFitCheck, CommunityAffiliationCheck])

# Connect SkillAssessment to the XOR branch.
post_assessment = StrictPartialOrder(nodes=[SkillAssessment, culture_branch])
post_assessment.order.add_edge(SkillAssessment, culture_branch)

# After cultural evaluation review, go to ManagerialReview and then FinalDecision.
final_phase = StrictPartialOrder(nodes=[culture_branch, ManagerialReview, FinalDecision])
final_phase.order.add_edge(culture_branch, ManagerialReview)
final_phase.order.add_edge(ManagerialReview, FinalDecision)

# Full process representation:
# We set the overall ordering: first head_PO (receive and completeness), then pre_assessment (skill),
# then post_assessment (cultural fork), then final_phase.
full_unfair_workflow = StrictPartialOrder(nodes=[head_PO, pre_assessment, post_assessment, final_phase])
full_unfair_workflow.order.add_edge(head_PO, pre_assessment)
full_unfair_workflow.order.add_edge(pre_assessment, post_assessment)
full_unfair_workflow.order.add_edge(post_assessment, final_phase)

# full_unfair_workflow is the POWL representation with potential unfairness.
---------------------------------------------------

  
2. Model Without Unfairness

In this unbiased model the steps remain the same except that after the "SkillAssessment" all applicants follow a single “CulturalFitCheck” path (i.e., no XOR branch with a community-based adjustment exists).  
Thus:  
• Application receipt and completeness check loop  
• SkillAssessment  
• All applicants then go through CulturalFitCheck  
• ManagerialReview  FinalDecision

Below is the pseudocode representation:

---------------------------------------------------
# POWL Model Without Unfairness

import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities (reuse some names, no CommunityAffiliationCheck here)
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")
tau = SilentTransition()

# Loop for data completeness as before.
completeness_loop = OperatorPOWL(operator=Operator.LOOP, children=[DataCompletenessCheck, RequestMoreInfo])
head_PO = StrictPartialOrder(nodes=[ReceiveApplication, completeness_loop])
head_PO.order.add_edge(ReceiveApplication, completeness_loop)

# Following completeness, perform SkillAssessment.
pre_assessment = StrictPartialOrder(nodes=[completeness_loop, SkillAssessment])
pre_assessment.order.add_edge(completeness_loop, SkillAssessment)

# All applicants then flow to CulturalFitCheck (no choice branch here).
post_assessment = StrictPartialOrder(nodes=[SkillAssessment, CulturalFitCheck])
post_assessment.order.add_edge(SkillAssessment, CulturalFitCheck)

# Then follow ManagerialReview and FinalDecision.
final_phase = StrictPartialOrder(nodes=[CulturalFitCheck, ManagerialReview, FinalDecision])
final_phase.order.add_edge(CulturalFitCheck, ManagerialReview)
final_phase.order.add_edge(ManagerialReview, FinalDecision)

# Compose the full process: head->skill->culture->final.
full_fair_workflow = StrictPartialOrder(nodes=[head_PO, pre_assessment, post_assessment, final_phase])
full_fair_workflow.order.add_edge(head_PO, pre_assessment)
full_fair_workflow.order.add_edge(pre_assessment, post_assessment)
full_fair_workflow.order.add_edge(post_assessment, final_phase)

# full_fair_workflow is the POWL representation without unfair bias.
---------------------------------------------------

  
Explanation:

• In the first model (full_unfair_workflow) the Cultural Evaluation is handled by an XOR operator that allows for two alternative branches:
– CulturalFitCheck (generic, merit-based)  
– CommunityAffiliationCheck (which introduces a potential unfair advantage)  
This XOR decision represents the point where the process might give preferential treatment based on community affiliation.

• In the second model (full_fair_workflow) every applicant goes through the same CulturalFitCheck step, eliminating any branch that would produce special treatment.

Both models include the loop structure for data completeness and the sequential order of skill assessments, cultural evaluations, and final decision stages.