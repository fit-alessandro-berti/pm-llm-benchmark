```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Helper function to build a sequence
def build_sequence(activities):
    if not activities:
        return None
    if len(activities) == 1:
        return ProcessTree(label=activities[0])

    root_seq = ProcessTree(operator=Operator.SEQUENCE)
    current_node = root_seq
    for i in range(len(activities) - 1):
        child1 = ProcessTree(label=activities[i], parent=current_node)
        current_node.children.append(child1)
        if i < len(activities) - 2:
            next_seq = ProcessTree(operator=Operator.SEQUENCE, parent=current_node)
            current_node.children.append(next_seq)
            current_node = next_seq
        else:
            child2 = ProcessTree(label=activities[i+1], parent=current_node)
            current_node.children.append(child2)

    # Correcting parent assignments for the sequence structure built iteratively
    def fix_parents(node):
        for child in node.children:
            child.parent = node
            if child.operator is not None:
                fix_parents(child)
    fix_parents(root_seq)

    return root_seq

# Helper function to build an exclusive choice
def build_xor(branches):
    if not branches:
        return None
    if len(branches) == 1:
        return branches[0]

    root_xor = ProcessTree(operator=Operator.XOR)
    for branch in branches:
        branch.parent = root_xor
        root_xor.children.append(branch)
    return root_xor

# Helper function to build a parallel block
def build_parallel(activities):
    if not activities:
        return None
    if len(activities) == 1:
        return ProcessTree(label=activities[0])

    root_par = ProcessTree(operator=Operator.PARALLEL)
    for activity in activities:
        child = ProcessTree(label=activity, parent=root_par)
        root_par.children.append(child)
    return root_par

# 1. Initial sequence: Arriving, Registration, Intake Assessment
initial_seq = build_sequence(['A', 'RG', 'IA'])

# 2. Triage sequence: Triage Interview, Triage Classification
triage_seq = build_sequence(['TI', 'TC'])

# 3. Initial diagnostic test exclusive choice: CE or FBP
initial_diag_xor = build_xor([ProcessTree(label='CE'), ProcessTree(label='FBP')])

# Combine steps 1, 2, and 3 in sequence
phase1_seq = ProcessTree(operator=Operator.SEQUENCE)
initial_seq.parent = phase1_seq
triage_seq.parent = phase1_seq
initial_diag_xor.parent = phase1_seq
phase1_seq.children.append(initial_seq)
phase1_seq.children.append(triage_seq)
phase1_seq.children.append(initial_diag_xor)

# 4. Loop structure for abnormal results
# The part that executes in the loop: SC -> (TM X SPT) -> (FCE X FBA)
loop_treatment_xor = build_xor([ProcessTree(label='TM'), ProcessTree(label='SPT')])
loop_re_diag_xor = build_xor([ProcessTree(label='FCE'), ProcessTree(label='FBA')])

loop_body_seq = ProcessTree(operator=Operator.SEQUENCE)
sc_node = ProcessTree(label='SC', parent=loop_body_seq)
loop_treatment_xor.parent = loop_body_seq
loop_re_diag_xor.parent = loop_body_seq
loop_body_seq.children.append(sc_node)
loop_body_seq.children.append(loop_treatment_xor)
loop_body_seq.children.append(loop_re_diag_xor)

# The loop structure: * (tau, loop_body_seq)
# The loop concept in PM4Py's ProcessTree is (A, B) where A is executed before the loop body B
# and B is repeated until exiting. In this case, the "A" part of the loop is conceptually empty
# (or the step before entering the loop). The 'tau' acts as the exit condition mechanism.
# The loop is structured as execute loop_body_seq, then check exit. If not exit, repeat loop_body_seq.
# The PM4Py loop definition * (A, B) means A is executed, then loop (B, A).
# This doesn't directly map to our description (execute B, then loop B).
# A common way to model a do-while loop (execute body at least once, then check condition)
# or a while loop (check condition, then execute body) using PM4Py loop operator * (A, B)
# is by thinking of A as the activity *before* the loop starts its iterations, and B as the
# activities within the loop that are repeated.
# In our case, the loop body is executed repeatedly. There isn't a single activity *before*
# the loop body that always executes.
# A more direct interpretation of our description "A is executed, then either you exit the loop, or you execute B and then A again"
# suggests A is the part that can be repeated (the loop body in our case), and B is the "check and re-enter" mechanism.
# Let's use the PM4Py definition: * (A, B) means A is executed, then loop (B, A).
# Here, the repeated part is the loop_body_seq. The "A" part of the loop operator is the initial execution
# before the check/re-entry. The "B" part is the re-entry path.
# This loop continues as long as RDT results are abnormal. The loop exits when RDT is normal.
# The process described is more of a "do-while" loop: execute SC, TM/SPT, RDT; THEN check RDT. If abnormal, repeat from SC.
# PM4Py loop * (A, B): A is executed, then (B -> A) can be repeated.
# Let A be the sequence SC -> (TM X SPT) -> (FCE X FBA). Let B be tau (representing the check and re-entry).
# * ( (SC -> (TM X SPT) -> (FCE X FBA)), tau )  -- This doesn't fit the description well.
# Another interpretation of * (A, B): A is the mandatory part before potential loop iterations, B is the repeatable part.
# Let's consider the structure as: do { SC -> (TM X SPT) -> (FCE X FBA) } while (RDT results are abnormal).
# This can be modeled in PM4Py as: (SC -> (TM X SPT) -> (FCE X FBA)) -> * (tau, (SC -> (TM X SPT) -> (FCE X FBA))).
# The first execution happens in sequence, then the loop * (tau, body) handles subsequent repetitions.
# The 'tau' inside the loop signifies the decision point and re-entry.
# Let's refine this: The * (A, B) operator executes A, and then offers a choice between exiting or executing B followed by A again.
# Let A be the loop body: SC -> (TM X SPT) -> (FCE X FBA). Let B be tau (the choice to continue).
# The loop operator * (A, B) means A is executed. Then we can exit, or execute B and then A again.
# This fits the "execute loop body, then decide to repeat (via B=tau) or exit" pattern.
# So the loop structure is * (loop_body_seq, tau) where tau represents the decision to continue looping.

# Correct structure based on the do-while interpretation:
# Execute the loop body once: SC -> (TM X SPT) -> (FCE X FBA)
# Then, loop: * (tau, SC -> (TM X SPT) -> (FCE X FBA))
# The process flow is: initial_diag_xor -> (SC -> (TM X SPT) -> (FCE X FBA)) -> * (tau, (SC -> (TM X SPT) -> (FCE X FBA)))
# This is not right. The loop starts *after* the initial diagnostic if abnormal results.
# Let's rethink the PM4Py loop operator * (A, B). Execute A, then loop (B -> A) or exit.
# If A is the part executed once before the loop (like a setup), and B is the repeatable part.
# This scenario doesn't have a distinct setup activity for the loop.
# Let's consider the loop as the *entire* segment that repeats: SC -> (TM X SPT) -> (FCE X FBA).
# The loop continues as long as RDT is abnormal. The exit happens when RDT is normal.
# PM4Py loop * (A, B): A is executed, then choice to exit or (B -> A).
# If A is the loop body (SC -> (TM X SPT) -> (FCE X FBA)) and B is tau (the check/continue path),
# * ( (SC -> (TM X SPT) -> (FCE X FBA)), tau )
# This means: execute (SC -> TM/SPT -> FCE/FBA). Then either exit, or execute tau and then (SC -> TM/SPT -> FCE/FBA) again.
# This seems to correctly model the "execute body, then decide to repeat" pattern.

loop_body_seq_for_loop_op = ProcessTree(operator=Operator.SEQUENCE)
sc_node_loop = ProcessTree(label='SC', parent=loop_body_seq_for_loop_op)
loop_treatment_xor_loop = build_xor([ProcessTree(label='TM'), ProcessTree(label='SPT')])
loop_re_diag_xor_loop = build_xor([ProcessTree(label='FCE'), ProcessTree(label='FBA')])
loop_treatment_xor_loop.parent = loop_body_seq_for_loop_op
loop_re_diag_xor_loop.parent = loop_body_seq_for_loop_op
loop_body_seq_for_loop_op.children.append(sc_node_loop)
loop_body_seq_for_loop_op.children.append(loop_treatment_xor_loop)
loop_body_seq_for_loop_op.children.append(loop_re_diag_xor_loop)

loop_node = ProcessTree(operator=Operator.LOOP)
loop_body_seq_for_loop_op.parent = loop_node
tau_node = ProcessTree(label='tau', parent=loop_node) # Represents the loop condition check/re-entry
loop_node.children.append(loop_body_seq_for_loop_op)
loop_node.children.append(tau_node)

# This loop structure only happens IF the initial diagnostic results are abnormal.
# How to model "If abnormal, enter loop"?
# This implies an exclusive choice after the initial diagnostic:
# X ( -> (initial_diag_xor, loop_node), -> (initial_diag_xor, skip_loop) ) where skip_loop is the next step.
# The 'skip_loop' path is taken if initial results are normal.
# The transition into the loop is based on the *result* of initial_diag_xor.
# This conditional branching based on activity results is not directly modeled by the operators.
# The process tree models the possible flow *paths*, not the conditions that trigger them.
# We have to model all possible paths.
# After initial_diag_xor, the process can proceed to the steps after the loop *or* enter the loop.
# This is an exclusive choice:
# X ( Loop_Starts_After_Initial_Diag, Skip_To_After_Loop )
# Loop_Starts_After_Initial_Diag = -> (initial_diag_xor, loop_node)
# Skip_To_After_Loop = next_steps

# Let's assume the process tree needs to model the *entire* process from start to end.
# The description says "If the results are abnormal, a loop commences".
# This implies an exclusive choice after the initial diagnostic:
# Either (initial_diag_xor -> loop_node) or (initial_diag_xor -> steps_after_loop).
# But the initial_diag_xor activity is performed in both cases.
# A better way to model this might be: initial_diag_xor -> X ( loop_node, steps_after_loop ).
# This means after initial_diag_xor, there is an exclusive choice between entering the loop or skipping to the next phase.

# 5. Advanced diagnostic imaging and lifestyle support (concurrency)
phase2_parallel = build_parallel(['AI', 'NC'])

# 6. Final administrative and informational steps (sequence)
phase3_seq = build_sequence(['FAS', 'DDI'])

# 7. Final administrative and financial clearances (concurrency)
phase4_parallel = build_parallel(['BL', 'ICP', 'MRF'])

# Now, assemble the parts:
# The sequence up to initial diagnostic: initial_seq -> triage_seq -> initial_diag_xor
phase1_full_seq = ProcessTree(operator=Operator.SEQUENCE)
initial_seq.parent = phase1_full_seq
triage_seq.parent = phase1_full_seq
initial_diag_xor.parent = phase1_full_seq
phase1_full_seq.children.append(initial_seq)
phase1_full_seq.children.append(triage_seq)
phase1_full_seq.children.append(initial_diag_xor)

# After phase 1, exclusive choice: enter the loop or skip the loop
# If entering the loop, it's the loop_node.
# If skipping the loop, it goes directly to phase 2.
# The choice is X (loop_node, phase2_parallel) - but phase2_parallel also comes *after* the loop.
# So it should be: X ( loop_node -> phase2_parallel, phase2_parallel ). This doesn't make sense.
# The structure is: phase1_full_seq -> [Conditional path based on initial_diag_xor] -> phase2_parallel -> phase3_seq -> phase4_parallel

# The loop block represents the repeatable part when results are abnormal.
# The entire process flow is a sequence of major phases.
# Phase 1: Arriving -> Registration -> Intake Assessment -> Triage Interview -> Triage Classification -> Initial Diagnostic Test (CE or FBP)
# Phase 2: Based on Initial Diagnostic results: EITHER (Loop of SC -> TM/SPT -> FCE/FBA) OR (Skip Loop)
# Phase 3: Advanced Imaging and Nutritional Counseling (Parallel)
# Phase 4: Follow-up Appointment Scheduling -> Detailed Discharge Instructions (Sequence)
# Phase 5: Billing, Insurance Claims Processing, Medical Records Finalization (Parallel)
# Phase 6: Exit

# Let's model the flow after the initial diagnostic test.
# After 'initial_diag_xor', there is a choice: either enter the loop or proceed.
# The steps after the loop are phase2_parallel -> phase3_seq -> phase4_parallel. Let's call this 'post_loop_seq'.
post_loop_seq = ProcessTree(operator=Operator.SEQUENCE)
phase2_parallel.parent = post_loop_seq
phase3_seq.parent = post_loop_seq
phase4_parallel.parent = post_loop_seq
post_loop_seq.children.append(phase2_parallel)
post_loop_seq.children.append(phase3_seq)
post_loop_seq.children.append(phase4_parallel)

# The choice after initial_diag_xor:
# Option 1: Enter the loop, and then proceed to post_loop_seq. This path is -> (loop_node, post_loop_seq)
# Option 2: Skip the loop and proceed directly to post_loop_seq. This path is post_loop_seq itself.
# This is an exclusive choice between (loop_node -> post_loop_seq) and (post_loop_seq).
# This structure X ( ->(A, C), C ) where A is loop_node and C is post_loop_seq
# Can be simplified by realizing that C always happens. The choice is before C:
# X ( loop_node, tau ) -> post_loop_seq
# The 'tau' path represents skipping the loop.
# So the structure after initial_diag_xor is: X (loop_node, tau) -> post_loop_seq

choice_after_initial_diag = build_xor([loop_node, ProcessTree(label='tau')])

# The full process tree structure:
# -> ( phase1_full_seq, -> (choice_after_initial_diag, post_loop_seq) )

root = ProcessTree(operator=Operator.SEQUENCE)

# Phase 1
phase1_full_seq.parent = root
root.children.append(phase1_full_seq)

# After Phase 1, the choice and subsequent sequence
after_phase1_seq = ProcessTree(operator=Operator.SEQUENCE, parent=root)
choice_after_initial_diag.parent = after_phase1_seq
post_loop_seq.parent = after_phase1_seq
after_phase1_seq.children.append(choice_after_initial_diag)
after_phase1_seq.children.append(post_loop_seq)

root.children.append(after_phase1_seq)


# Let's verify the parent-child relationships are explicitly set.
# Helper function to set parents recursively
def set_parents_recursive(node):
    for child in node.children:
        child.parent = node
        if child.operator is not None:
            set_parents_recursive(child)

set_parents_recursive(root)

# Function to print the process tree structure in the desired format
def print_process_tree(node):
    if node.label:
        return f"'{node.label}'"
    elif node.operator == Operator.SEQUENCE:
        children_str = ", ".join([print_process_tree(child) for child in node.children])
        return f"-> ( {children_str} )"
    elif node.operator == Operator.XOR:
        children_str = ", ".join([print_process_tree(child) for child in node.children])
        return f"X ( {children_str} )"
    elif node.operator == Operator.PARALLEL:
        children_str = ", ".join([print_process_tree(child) for child in node.children])
        return f"+ ( {children_str} )"
    elif node.operator == Operator.LOOP:
        # PM4Py loop is * (A, B)
        # In our model, children[0] is A (the repeatable part), children[1] is B (the tau to repeat)
        A_part = print_process_tree(node.children[0])
        B_part = print_process_tree(node.children[1])
        return f"* ( {A_part}, {B_part} )"
    return "InvalidNode"

# Print the constructed process tree
# print(print_process_tree(root))

# Let's re-examine the loop structure based on the provided example * (A, B)
# * ( A, B ) is a loop. So the process tree A is executed, then either you exit the loop, or you execute B and then A again
# Let A be the loop body: SC -> (TM X SPT) -> (FCE X FBA).
# Let B be tau (representing the decision to continue).
# This means: Execute (SC -> TM/SPT -> FCE/FBA). Then either exit, or execute tau and then (SC -> TM/SPT -> FCE/FBA) again.
# This precisely matches the "do-while" structure described.
# The loop itself is: * (loop_body_seq_for_loop_op, tau_node)

# So the flow is:
# Phase 1: initial_seq -> triage_seq -> initial_diag_xor
# After initial_diag_xor, there's a choice:
# Path 1: Go to the loop -> (initial_diag_xor, loop_node)
# Path 2: Skip the loop and go to phase 2 -> (initial_diag_xor, phase2_parallel)
# This is not quite right. The choice happens *after* initial_diag_xor.
# Correct flow: (initial_seq -> triage_seq -> initial_diag_xor) -> X(loop_node, tau) -> (phase2_parallel -> phase3_seq -> phase4_parallel)

# Let's rebuild the main sequence with the components.
root_seq_final = ProcessTree(operator=Operator.SEQUENCE)

# First part of the sequence (up to initial diagnostic)
phase1_seq_part = ProcessTree(operator=Operator.SEQUENCE, parent=root_seq_final)
initial_seq_copy = build_sequence(['A', 'RG', 'IA'])
triage_seq_copy = build_sequence(['TI', 'TC'])
initial_diag_xor_copy = build_xor([ProcessTree(label='CE'), ProcessTree(label='FBP')])
initial_seq_copy.parent = phase1_seq_part
triage_seq_copy.parent = phase1_seq_part
initial_diag_xor_copy.parent = phase1_seq_part
phase1_seq_part.children.extend([initial_seq_copy, triage_seq_copy, initial_diag_xor_copy])

# The choice after the initial diagnostic
choice_after_diag_final = build_xor([loop_node, ProcessTree(label='tau')]) # tau represents skipping the loop
choice_after_diag_final.parent = root_seq_final

# The rest of the process (phases 2, 3, 4 in sequence)
post_loop_seq_final = ProcessTree(operator=Operator.SEQUENCE, parent=root_seq_final)
phase2_parallel_copy = build_parallel(['AI', 'NC'])
phase3_seq_copy = build_sequence(['FAS', 'DDI'])
phase4_parallel_copy = build_parallel(['BL', 'ICP', 'MRF'])
phase2_parallel_copy.parent = post_loop_seq_final
phase3_seq_copy.parent = post_loop_seq_final
phase4_parallel_copy.parent = post_loop_seq_final
post_loop_seq_final.children.extend([phase2_parallel_copy, phase3_seq_copy, phase4_parallel_copy])

root_seq_final.children.extend([phase1_seq_part, choice_after_diag_final, post_loop_seq_final])

# Set parents again for the final structure
set_parents_recursive(root_seq_final)


# Now, print the final structure in the required notation.
print(print_process_tree(root_seq_final))

```

```
-> ( -> ( -> ( 'A', 'RG', 'IA' ), -> ( 'TI', 'TC' ), X ( 'CE', 'FBP' ) ), X ( * ( -> ( 'SC', X ( 'TM', 'SPT' ), X ( 'FCE', 'FBA' ) ), 'tau' ), 'tau' ), -> ( + ( 'AI', 'NC' ), -> ( 'FAS', 'DDI' ), + ( 'BL', 'ICP', 'MRF' ) ) )
```