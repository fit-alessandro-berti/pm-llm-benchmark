Okay, here's a draft prompt designed to guide the benchmark, incorporating clarity and specific instructions for the DuckDB query:

**Prompt:**

"You are a SQL query generator tasked with evaluating a DuckDB query.  The `event_log` table stores event data. Each row represents a single event. The table has the following columns: `case_id`, `activity`, and `timestamp`.  `case_id` uniquely identifies a process instance.

**Your task is to write a DuckDB SQL query that performs the following:**

1.  **Filter:**  Exclude any `case_id` where the total number of events within that case is greater than six.
2.  **Group & Count:** Group the events by `case_id` and count the number of events for each `case_id`.
3.  **Return Results:** Return the full set of events for each `case_id` that has a total event count of 6 or fewer.  The output should be a table with the `case_id` and the corresponding event count.

**Example:**

Let's say `event_log` contains the following data:

| case_id | activity | timestamp           |
|---------|----------|---------------------|
| 1       | login     | 2023-10-26 10:00:00 |
| 1       | logout    | 2023-10-26 10:05:00 |
| 1       | login     | 2023-10-26 10:10:00 |
| 1       | login     | 2023-10-26 10:15:00 |
| 1       | logout    | 2023-10-26 10:20:00 |
| 1       | login     | 2023-10-26 10:25:00 |
| 1       | login     | 2023-10-26 10:30:00 |
| 1       | logout    | 2023-10-26 10:35:00 |
| 2       | test      | 2023-10-26 11:00:00 |
| 2       | test      | 2023-10-26 11:05:00 |
| 2       | test      | 2023-10-26 11:10:00 |
| 2       | test      | 2023-10-26 11:15:00 |
| 2       | test      | 2023-10-26 11:20:00 |
| 2       | test      | 2023-10-26 11:25:00 |

**Your response should be a valid DuckDB SQL query that fulfills the requirements outlined above.**"

**Why this prompt is effective:**

*   **Role Definition:**  Clearly assigns the role of a SQL query generator.
*   **Context:** Provides a detailed description of the table schema and data.
*   **Specific Instructions:**  Outlines exactly what the query needs to do (filter, group, count, return results).
*   **Example Data:**  Includes a sample dataset to help the model understand the expected input format.
*   **Clear Output Requirements:** Specifies the desired output format (table with `case_id` and event count).
*   **Emphasis on Logic:**  The prompt explicitly asks for the *correct* grouping and filtering, encouraging a well-reasoned solution.

To further refine the prompt, you could add:

*   **Specific Constraints:** If there are any limitations on the query's performance (e.g., "The query should be as efficient as possible"), include that.
*   **Error Handling:**  You could add a statement about how the query should handle cases where the `event_log` table is empty.

Let me know if you'd like me to refine this prompt further based on specific aspects you want to test!