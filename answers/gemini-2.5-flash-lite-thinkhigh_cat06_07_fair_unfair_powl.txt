Here are two POWL models representing the hiring process at GlobalTeq Solutions, differing in how they handle the cultural fit and affiliation check.

---

### POWL Model 1: With Potential Unfairness

This model represents the hiring process where an XOR split occurs after the skill assessment. One branch leads to a standard cultural fit evaluation, while the other leads to a path that includes community affiliation checks, which can introduce bias.

**Activities Used:**

*   `ReceiveApplication`: Initial submission of job applications.
*   `DataCompletenessCheck`: Automated check for resume completeness, potentially involving loops for additional information (internal representation).
*   `SkillAssessment`: Online test for domain-specific knowledge.
*   `StandardCulturalFitCheck`: A standard evaluation of cultural alignment.
*   `CommunityAffiliationCheck`: An evaluation path that considers community affiliations, potentially leading to subjective uplifts.
*   `ManagerialReview`: Review by a hiring manager, especially for borderline candidates.
*   `FinalDecision`: The ultimate hiring decision.

**POWL Structure:**

The process flows sequentially through the initial stages, then splits into an XOR for cultural fit, and then reconverges for the final stages.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# --- POWL Model 1: With Potential Unfairness ---

# Define activities for Model 1
act_receive_app_m1 = Transition(label="ReceiveApplication")
act_data_completeness_m1 = Transition(label="DataCompletenessCheck")
act_skill_assessment_m1 = Transition(label="SkillAssessment")

# Define the two branches of the XOR for cultural fit evaluation
act_std_cult_fit_m1 = Transition(label="StandardCulturalFitCheck")
act_comm_aff_check_m1 = Transition(label="CommunityAffiliationCheck")

# Define the XOR operator node
xor_cultural_fit_m1 = OperatorPOWL(
    operator=Operator.XOR,
    children=[act_std_cult_fit_m1, act_comm_aff_check_m1]
)

act_managerial_review_m1 = Transition(label="ManagerialReview")
act_final_decision_m1 = Transition(label="FinalDecision")

# Create the root POWL model for Model 1
# The nodes include all activities and the XOR operator
nodes_m1 = [
    act_receive_app_m1,
    act_data_completeness_m1,
    act_skill_assessment_m1,
    xor_cultural_fit_m1,
    act_managerial_review_m1,
    act_final_decision_m1
]

# A StrictPartialOrder defines the structure and order of nodes
root_m1 = StrictPartialOrder(nodes=nodes_m1)

# Define the sequential and branching order of execution
# Initial stages are sequential
root_m1.order.add_edge(act_receive_app_m1, act_data_completeness_m1)
root_m1.order.add_edge(act_data_completeness_m1, act_skill_assessment_m1)

# After skill assessment, an XOR choice is made
root_m1.order.add_edge(act_skill_assessment_m1, xor_cultural_fit_m1)

# The branches of the XOR converge before the managerial review
root_m1.order.add_edge(xor_cultural_fit_m1, act_managerial_review_m1)
root_m1.order.add_edge(act_managerial_review_m1, act_final_decision_m1)

print("--- POWL Model 1: With Potential Unfairness ---")
print("Represents the hiring process with an XOR split for cultural fit assessment.")
print("Flow: ReceiveApplication -> DataCompletenessCheck -> SkillAssessment -> XOR(StandardCulturalFitCheck, CommunityAffiliationCheck) -> ManagerialReview -> FinalDecision")
# You can optionally visualize root_m1 using pm4py.visualization.bpmn_visualizer.apply or similar,
# but the structure is described above.
```

---

### POWL Model 2: Without Unfairness

This model represents the same hiring process but eliminates the XOR split for cultural fit. All applicants undergo a single, unified cultural fit evaluation process, removing the potential for community affiliation bias.

**Activities Used:**

*   `ReceiveApplication`: Initial submission of job applications.
*   `DataCompletenessCheck`: Automated check for resume completeness (representing the entire data check phase).
*   `SkillAssessment`: Online test for domain-specific knowledge.
*   `CulturalFitCheck`: A single, unified evaluation of cultural alignment for all applicants.
*   `ManagerialReview`: Review by a hiring manager.
*   `FinalDecision`: The ultimate hiring decision.

**POWL Structure:**

This model follows a simple sequential flow, with no branching for cultural fit evaluation.

```python
# --- POWL Model 2: Without Unfairness ---

# Define activities for Model 2
act_receive_app_m2 = Transition(label="ReceiveApplication")
act_data_completeness_m2 = Transition(label="DataCompletenessCheck")
act_skill_assessment_m2 = Transition(label="SkillAssessment")

# This activity represents the unified cultural fit check for all applicants
act_cultural_fit_check_m2 = Transition(label="CulturalFitCheck")

act_managerial_review_m2 = Transition(label="ManagerialReview")
act_final_decision_m2 = Transition(label="FinalDecision")

# Create the root POWL model for Model 2
nodes_m2 = [
    act_receive_app_m2,
    act_data_completeness_m2,
    act_skill_assessment_m2,
    act_cultural_fit_check_m2,
    act_managerial_review_m2,
    act_final_decision_m2
]

root_m2 = StrictPartialOrder(nodes=nodes_m2)

# Define the sequential order of execution
root_m2.order.add_edge(act_receive_app_m2, act_data_completeness_m2)
root_m2.order.add_edge(act_data_completeness_m2, act_skill_assessment_m2)
root_m2.order.add_edge(act_skill_assessment_m2, act_cultural_fit_check_m2) # Direct sequence, no XOR
root_m2.order.add_edge(act_cultural_fit_check_m2, act_managerial_review_m2)
root_m2.order.add_edge(act_managerial_review_m2, act_final_decision_m2)

print("\n--- POWL Model 2: Without Unfairness ---")
print("Represents the hiring process with a single, unified cultural fit assessment.")
print("Flow: ReceiveApplication -> DataCompletenessCheck -> SkillAssessment -> CulturalFitCheck -> ManagerialReview -> FinalDecision")
# You can optionally visualize root_m2.
```