To solve this problem, we need to construct a SQL query that meets the specified criteria using DuckDB capabilities. We'll use window functions and common table expressions (CTEs) to identify cases with the required sequence and time constraint, then exclude those cases from the final result.

Here's the step-by-step approach:

1. **Identify the Sequence**: We need to find cases where the sequence 'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order' occurs in direct succession.

2. **Calculate Time Difference**: For cases with the sequence, calculate the time difference between 'Create Order' and 'Confirm Order'. Filter to keep only those where this difference is more than 5 days.

3. **Exclude Specific Cases**: Finally, exclude all events from cases identified in step 2.

Here's the DuckDB SQL query to achieve this:

```sql
WITH RankedEvents AS (
    SELECT
        case_id,
        activity,
        timestamp,
        -- Use ROW_NUMBER to keep track of the sequence within each case
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
    FROM
        event_log
),
Sequences AS (
    SELECT
        a.case_id
    FROM
        RankedEvents a
    JOIN
        RankedEvents b ON a.case_id = b.case_id AND b.rn = a.rn + 1
    JOIN
        RankedEvents c ON a.case_id = c.case_id AND c.rn = b.rn + 1
    WHERE
        a.activity = 'Approve Purchase Requisition'
        AND b.activity = 'Create Order'
        AND c.activity = 'Confirm Order'
),
FilteredCases AS (
    SELECT
        a.case_id
    FROM
        Sequences a
    JOIN
        RankedEvents b ON a.case_id = b.case_id AND b.activity = 'Create Order'
    JOIN
        RankedEvents c ON a.case_id = c.case_id AND c.activity = 'Confirm Order'
    WHERE
        c.rn = b.rn + 2 -- Ensure they are in direct sequence
        AND DATE_DIFF(c.timestamp, b.timestamp, DAY) > 5
)
SELECT
    e.*
FROM
    event_log e
WHERE
    e.case_id NOT IN (SELECT case_id FROM FilteredCases);
```

### Explanation:

- **RankedEvents CTE**: Assigns a row number (`rn`) to each event within a `case_id` based on the `timestamp`. This helps in identifying the sequence of events.

- **Sequences CTE**: Finds cases where the specified sequence of activities occurs in direct succession. It joins the `RankedEvents` table with itself to check for the sequence.

- **FilteredCases CTE**: Filters out cases from the `Sequences` CTE where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days. We ensure the events are in direct succession by checking `c.rn = b.rn + 2`.

- **Final SELECT**: Returns all events except those from cases identified in `FilteredCases`.

This query ensures that we correctly identify and exclude cases with the specified sequence and timing condition, while returning all other events.