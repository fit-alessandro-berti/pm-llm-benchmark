```sql
WITH SequenceCheck AS (
    SELECT
        case_id,
        activity,
        timestamp
    FROM
        event_log
    WHERE EXISTS (
        SELECT 1
        FROM (
            VALUES
                ('Approve Purchase Requisition'),
                ('Create Order'),
                ('Confirm Order')
        ) AS activities(activity)
        WHERE activities.activity = event_log.activity
        AND NOT EXISTS (
            SELECT 1
            FROM (
                SELECT
                    activity,
                    timestamp
                FROM
                    event_log
                WHERE
                    case_id = event_log.case_id
                    AND timestamp < activities.activity
            ) as previous_events
            WHERE activities.activity = previous_events.activity
        )
    )
),
TimeElapsedCheck AS (
    SELECT
        *
    FROM
        SequenceCheck
    WHERE
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) BETWEEN DATEADD('day', -5, 'Create Order'::timestamp) AND DATEADD('day', NULL, 'Confirm Order'::timestamp)
),
ExcludedCases AS (
    SELECT DISTINCT
        case_id
    FROM
        TimeElapsedCheck
)
SELECT
    e.*
FROM
    event_log e
LEFT JOIN
    ExcludedCases ec ON e.case_id = ec.case_id
WHERE
    ec.case_id IS NULL;
```

### Explanation:

1. **SequenceCheck CTE**: This common table expression identifies cases (`case_id`) containing the exact sequence of activities ('Approve Purchase Requisition', 'Create Order', 'Confirm Order') with no other activity interspersed between them using window functions and subqueries.

2. **TimeElapsedCheck CTE**: Narrows down to only those sequences from `SequenceCheck` where the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days, using `LEAD()` for comparing timestamps within the same case.

3. **ExcludedCases CTE**: Extracts unique `case_id` values that meet both sequence and timing criteria.

4. The final SELECT statement performs a left join with `ExcludedCases`, filtering out rows (`WHERE ec.case_id IS NULL`) where no match was found, ensuring only events from cases not meeting the specified conditions are returned. 

This query ensures efficient identification of cases that do not conform to the given complex event sequence and timing criteria by carefully utilizing window functions and CTEs for intermediate results management.