Hereâ€™s a DuckDB SQL query that accomplishes the task step by step:

```sql
WITH ordered_events AS (
    -- Step 1: Order activities per case
    SELECT 
        case_id, 
        activity, 
        timestamp
    FROM event_log
    ORDER BY case_id, timestamp
), 

variant_sequences AS (
    -- Step 2: Construct activity sequences per case
    SELECT 
        case_id, 
        STRING_AGG(activity, ' -> ') AS activity_sequence
    FROM ordered_events
    GROUP BY case_id
), 

variant_counts AS (
    -- Step 3: Count occurrences of each variant
    SELECT 
        activity_sequence, 
        COUNT(*) AS case_count
    FROM variant_sequences
    GROUP BY activity_sequence
    ORDER BY case_count DESC
    LIMIT K  -- Only keep top K variants
), 

filtered_cases AS (
    -- Step 4: Identify cases that belong to top K variants
    SELECT v.case_id
    FROM variant_sequences v
    JOIN variant_counts vc ON v.activity_sequence = vc.activity_sequence
)

-- Step 5: Retrieve original event log for top K variant cases
SELECT e.*
FROM event_log e
JOIN filtered_cases fc ON e.case_id = fc.case_id
ORDER BY e.case_id, e.timestamp;
```

### Breakdown of the Query:

1. **`ordered_events` CTE**  
   - Orders the events within each case by `timestamp` to maintain correct process sequence.
  
2. **`variant_sequences` CTE**  
   - Groups events by `case_id` and constructs the activity sequence using `STRING_AGG(activity, ' -> ')`.

3. **`variant_counts` CTE**  
   - Groups cases by activity sequence, counts occurrences, and sorts by frequency.
   - Limits the result to the top `K` most frequent process variants.

4. **`filtered_cases` CTE**  
   - Selects only cases that belong to one of the top `K` process variants.

5. **Final Query**  
   - Joins back with the original `event_log` to retrieve all events for cases that belong to the top `K` variants.

### Assumptions:
- `K` is a placeholder for the number of top variants to keep and should be replaced with an actual value.
- The use of `STRING_AGG` assumes DuckDB supports it (which it does for recent versions).
- The `->` separator is used to clearly distinguish activities in a sequence.

This query ensures that only the most common process variants are considered while keeping the original event details intact. ğŸš€