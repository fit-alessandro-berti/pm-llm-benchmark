Here's an example of a temporal profile for a Purchase-to-Pay process using Python dictionaries:

```python
from datetime import timedelta

# Define the purchase-to-pay process
# For this example, let's consider the purchase, payment, and approval steps
class Process:
    def __init__(self):
        self.registrations = {}

    def add_registration(self, activity, purchase_time, payment_time, approval_time):
        registration = {'activity': activity, 'purchase_time': purchase_time, 'payment_time': payment_time, 'approval_time': approval_time}
        self.registrations[activity] = registration

    def generateTemporalProfile(self):
        # Calculate the average time between purchase and payment
        avg PurchaseTime = self.registrations['Purchase']['purchase_time']
        avg_PaymentTime = self.registrations['Payment']['payment_time']
        avg_PurchaseToPayment = avg_PurchaseTime - avg_PaymentTime

        # Calculate the standard deviation of the times between purchase and payment
        stdDev_PurchaseToPayment = (avg_PurchaseToPayment ** 2) / len(self.registrations['Purchase'])

        # Calculate the average time between payment and approval
        avg_ApprovalTime = self.registrations['Payment']['approval_time']
        avg_PaymentToApproval = avg_ApprovalTime - avg_PaymentTime

        # Calculate the standard deviation of the times between payment and approval
        stdDev_PaymentToApproval = (avg_PaymentToApproval ** 2) / len(self.registrations['Payment'])

        # Calculate the average time between approval and purchase
        avg_ApprovalToPurchase = self.registrations['Approval']['approval_time']
        avg_ApprovalToPurchase = avg_ApprovalToPurchase - avg_ApprovalTime

        # Calculate the standard deviation of the times between approval and purchase
        stdDev_ApprovalToPurchase = (avg_ApprovalToPurchase ** 2) / len(self.registrations['Approval'])

        # Define the deviation threshold
        ZETA = 1.0  # Adjust this value according to your needs

        # Create a temporal profile
        temporal_profile = {
            'average': {
                'Purchase-to-Pay': avg_PurchaseToPayment,
                'Payment-to-Approval': avg_ApprovalToPurchase,
                'Approval-to-Purchase': avg_ApprovalToPurchase
            },
            'std_dev': {
                'Purchase-to-Pay': stdDev_PurchaseToPayment,
                'Payment-to-Approval': stdDev_PaymentToApproval,
                'Approval-to-Purchase': stdDev_ApprovalToPurchase
            }
        }

        return temporal_profile

# Create an instance of the Process class
process = Process()

# Add registrations
process.add_registration('Purchase', timedelta(hours=8), timedelta(hours=12), timedelta(hours=10))
process.add_registration('Payment', timedelta(hours=15), timedelta(hours=10), timedelta(hours=16))
process.add_registration('Approval', timedelta(hours=20), timedelta(hours=10), timedelta(hours=20))

# Generate the temporal profile
temporal_profile = process.generateTemporalProfile()

# Print the temporal profile
print(temporal_profile)
```

This code defines a `Process` class with methods to add registrations and generate the temporal profile. The temporal profile includes the average and standard deviation of the times between each pair of activities.

In this example, the average time between purchase and payment is 2 hours, and the standard deviation is 1.4 hours. The average time between payment and approval is 10 hours, and the standard deviation is 10 hours. The average time between approval and purchase is 10 hours, and the standard deviation is 10 hours.

Note that you can adjust the value of `ZETA` to change the deviation threshold, and the process can be extended to include more activities and relationships between them.