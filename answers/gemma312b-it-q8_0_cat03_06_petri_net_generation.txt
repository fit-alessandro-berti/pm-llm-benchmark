```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define places
claim_received = PetriNet.Place(name="Claim Received")
claim_registration = PetriNet.Place(name="Claim Registration")
document_verification = PetriNet.Place(name="Document Verification")
fraud_check = PetriNet.Place(name="Fraud Check")
claim_assessment = PetriNet.Place(name="Claim Assessment")
approval = PetriNet.Place(name="Approval")
payment = PetriNet.Place(name="Payment")
notification = PetriNet.Place(name="Notification")
claim_closed = PetriNet.Place(name="Claim Closed")
re_document_submission = PetriNet.Place(name="Re-Document Submission")
in_depth_investigation = PetriNet.Place(name="In-Depth Investigation")

# Add places to the net
net.places.add(claim_received)
net.places.add(claim_registration)
net.places.add(document_verification)
net.places.add(fraud_check)
net.places.add(claim_assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(claim_closed)
net.places.add(re_document_submission)
net.places.add(in_depth_investigation)

# Define transitions
cr = PetriNet.Transition(name="Claim Registration", label="Claim Registration")
dv = PetriNet.Transition(name="Document Verification", label="Document Verification")
fc = PetriNet.Transition(name="Fraud Check", label="Fraud Check")
ca = PetriNet.Transition(name="Claim Assessment", label="Claim Assessment")
ap = PetriNet.Transition(name="Approval", label="Approval")
p = PetriNet.Transition(name="Payment", label="Payment")
n = PetriNet.Transition(name="Notification", label="Notification")
cl = PetriNet.Transition(name="Closure", label="Closure")
rds = PetriNet.Transition(name="Re-Document Submission", label="Re-Document Submission")
ii = PetriNet.Transition(name="In-Depth Investigation", label="In-Depth Investigation")

# Add transitions to the net
net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(fc)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl)
net.transitions.add(rds)
net.transitions.add(ii)

# Define arcs
petri_utils.add_arc_from_to(claim_received, cr, net)
petri_utils.add_arc_from_to(cr, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, dv, net)
petri_utils.add_arc_from_to(dv, document_verification, net)
petri_utils.add_arc_from_to(document_verification, rds, net)
petri_utils.add_arc_from_to(rds, document_verification, net)
petri_utils.add_arc_from_to(document_verification, fc, net)
petri_utils.add_arc_from_to(fc, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, ii, net)
petri_utils.add_arc_from_to(ii, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, ca, net)
petri_utils.add_arc_from_to(ca, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, ap, net)
petri_utils.add_arc_from_to(ap, approval, net)
petri_utils.add_arc_from_to(approval, p, net)
petri_utils.add_arc_from_to(p, payment, net)
petri_utils.add_arc_from_to(payment, n, net)
petri_utils.add_arc_from_to(n, claim_closed, net)

# Define initial and final markings
im = Marking()
im[claim_received] = 1

fm = Marking()
fm[claim_closed] = 1

# Print the Petri net information
print("Petri Net:", net)
print("Initial Marking:", im)
print("Final Marking:", fm)
```