To model the complex insurance claim management process as an accepting Petri net, we need to represent all activities, their sequences, and the possible loops for document re-submission and in-depth investigations. Below is the Python code implementing this using PM4Py:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet("Insurance Claim Process")

# Create places
source = PetriNet.Place("source")
p_after_cr = PetriNet.Place("p_after_cr")
p_dv = PetriNet.Place("p_dv")
p_fc = PetriNet.Place("p_fc")
p_ca = PetriNet.Place("p_ca")
p_ap = PetriNet.Place("p_ap")
p_p = PetriNet.Place("p_p")
p_n = PetriNet.Place("p_n")
p_cl = PetriNet.Place("p_cl")

net.places.add(source)
net.places.add(p_after_cr)
net.places.add(p_dv)
net.places.add(p_fc)
net.places.add(p_ca)
net.places.add(p_ap)
net.places.add(p_p)
net.places.add(p_n)
net.places.add(p_cl)

# Create transitions
cr = PetriNet.Transition("Claim_Registration", "Claim Registration")
dv = PetriNet.Transition("Document_Verification", "Document Verification")
rds = PetriNet.Transition("Re_Document_Submission", "Re-Document Submission")
fc = PetriNet.Transition("Fraud_Check", "Fraud Check")
ii = PetriNet.Transition("In_depth_Investigation", "In-depth Investigation")
ca = PetriNet.Transition("Claim_Assessment", "Claim Assessment")
ap = PetriNet.Transition("Approval", "Approval")
silent_ap = PetriNet.Transition("silent_approval", None)
p = PetriNet.Transition("Payment", "Payment")
n = PetriNet.Transition("Notification", "Notification")
cl = PetriNet.Transition("Closure", "Closure")

net.transitions.extend([cr, dv, rds, fc, ii, ca, ap, silent_ap, p, n, cl])

# Add arcs
petri_utils.add_arc_from_to(source, cr, net)
petri_utils.add_arc_from_to(cr, p_after_cr, net)

petri_utils.add_arc_from_to(p_after_cr, dv, net)
petri_utils.add_arc_from_to(dv, p_dv, net)

petri_utils.add_arc_from_to(p_dv, rds, net)
petri_utils.add_arc_from_to(rds, p_after_cr, net)

petri_utils.add_arc_from_to(p_dv, fc, net)
petri_utils.add_arc_from_to(fc, p_fc, net)

petri_utils.add_arc_from_to(p_fc, ii, net)
petri_utils.add_arc_from_to(ii, p_dv, net)

petri_utils.add_arc_from_to(p_fc, ca, net)
petri_utils.add_arc_from_to(ca, p_ca, net)

petri_utils.add_arc_from_to(p_ca, ap, net)
petri_utils.add_arc_from_to(ap, p_ap, net)

petri_utils.add_arc_from_to(p_ca, silent_ap, net)
petri_utils.add_arc_from_to(silent_ap, p_ap, net)

petri_utils.add_arc_from_to(p_ap, p, net)
petri_utils.add_arc_from_to(p, p_p, net)

petri_utils.add_arc_from_to(p_p, n, net)
petri_utils.add_arc_from_to(n, p_n, net)

petri_utils.add_arc_from_to(p_n, cl, net)
petri_utils.add_arc_from_to(cl, p_cl, net)

# Set initial and final markings
im = Marking()
im[source] = 1

fm = Marking()
fm[p_cl] = 1
```

**Explanation:**
- **Places and Transitions:** Each step in the process is modeled as a transition with the corresponding activity name. Places represent the state between these activities.
- **Loops:** 
  - The loop between **Document Verification (DV)** and **Re-Document Submission (RDS)** is created by connecting the place after DV (`p_dv`) to the RDS transition, which feeds back to the place before DV (`p_after_cr`).
  - The loop between **Fraud Check (FC)** and **In-depth Investigation (II)** is handled by connecting the place after FC (`p_fc`) to the II transition, which loops back to the place before FC (`p_dv`).
- **Optional Approval (AP):** After **Claim Assessment (CA)**, a silent transition (no label) allows bypassing the **Approval (AP)** step if the claim amount is below the threshold.
- **Final Marking:** The process concludes with a token in the place after **Closure (CL)**, representing the final state of a closed claim.