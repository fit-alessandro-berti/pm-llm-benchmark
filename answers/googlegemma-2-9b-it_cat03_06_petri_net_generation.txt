```python
from pm4py.objects.petri_net.obj import PetriNet, Place, Transition, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="Insurance Claim Management")

# Places
source = Place(name="New Claim")
cr = Place(name="Claim Registered")
dv = Place(name="Documents Verified")
rds = Place(name="Re-Document Submission")
fc = Place(name="Fraud Check")
ii = Place(name="In-depth Investigation")
ca = Place(name="Claim Assessed")
ap = Place(name="Approved")
p = Place(name="Payment")
n = Place(name="Notification")
cl = Place(name="Closed Claim")

# Transitions
cr_t = Transition(name="Claim Registration", label="CR")
dv_t = Transition(name="Document Verification", label="DV")
rds_t = Transition(name="Re-Document Submission", label="RDS")
fc_t = Transition(name="Fraud Check", label="FC")
ii_t = Transition(name="In-depth Investigation", label="II")
ca_t = Transition(name="Claim Assessment", label="CA")
ap_t = Transition(name="Approval", label="AP")
p_t = Transition(name="Payment", label="P")
n_t = Transition(name="Notification", label="N")
cl_t = Transition(name="Closure", label="CL")

# Add places and transitions to the net
net.places.add(source)
net.places.add(cr)
net.places.add(dv)
net.places.add(rds)
net.places.add(fc)
net.places.add(ii)
net.places.add(ca)
net.places.add(ap)
net.places.add(p)
net.places.add(n)
net.places.add(cl)

net.transitions.add(cr_t)
net.transitions.add(dv_t)
net.transitions.add(rds_t)
net.transitions.add(fc_t)
net.transitions.add(ii_t)
net.transitions.add(ca_t)
net.transitions.add(ap_t)
net.transitions.add(p_t)
net.transitions.add(n_t)
net.transitions.add(cl_t)

# Add arcs to the net
petri_utils.add_arc_from_to(source, cr_t, net)
petri_utils.add_arc_from_to(cr_t, dv, net)
petri_utils.add_arc_from_to(dv, rds_t, net)
petri_utils.add_arc_from_to(rds_t, dv, net)
petri_utils.add_arc_from_to(dv, fc_t, net)
petri_utils.add_arc_from_to(fc_t, ii_t, net)
petri_utils.add_arc_from_to(ii_t, fc_t, net)
petri_utils.add_arc_from_to(fc_t, ca_t, net)
petri_utils.add_arc_from_to(ca_t, ap_t, net)
petri_utils.add_arc_from_to(ap_t, p_t, net)
petri_utils.add_arc_from_to(p_t, n_t, net)
petri_utils.add_arc_from_to(n_t, cl_t, net)
petri_utils.add_arc_from_to(cl_t, cl, net)

# Initial Marking (im)
im = Marking()
im[source] = 1

# Final Marking (fm)
fm = Marking()
fm[cl] = 1

print(net.to_string())
```

**Explanation:**

* **Places and Transitions:**

Each step in the process is represented by a place (e.g., `cr`, `dv`, `fc`). Transitions represent the actions taken (e.g., "Claim Registration", "Document Verification"). 

* **Arcs:**

The arcs connect the places and transitions to depict the flow of the process. An arc between a place and a transition represents that the transition can fire if a token is present in the place. Arcs between places indicate that tokens move from one state to another.

* **Loops:**

Loops (`dv` to `rds` and `fc` to `ii`) are added to handle the potential need for re-submissions and additional investigations.

* **Initial and Final Markings:**

The `im` marking places a token in the `source` place, representing a new claim arriving.

The `fm` marking places a token in the `cl` place, representing a closed claim.



Let me know if you'd like to explore other aspects of this Petri net, such as simulating its behaviour or analyzing its properties.