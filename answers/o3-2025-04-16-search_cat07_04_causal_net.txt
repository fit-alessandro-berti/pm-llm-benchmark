The picture is a “causal-net” (C-net) representation of a simple request-handling process that was popularised in Wil van der Aalst’s process-mining lectures.  
What you see can be read as a Petri-net-style token game:

1. Main process graph (upper left)  
   • Rounded rectangles = activities (transitions).  
     a  register request (start)  
     b  examine thoroughly  
     c  examine casually  
     d  check ticket  
     e  decide  
     f  re-initiate request (loops the case back to the start)  
     g  pay compensation  
     h  reject request  
     z  end (completion)  

   • Solid black dots on the arcs are the “places/conditions”.  
     A token (black dot) sitting on a place marks where an individual case is at a given moment.

   • Splits and joins  
     – After a the case is routed to b, c and/or d (the dot pattern in front of the three outgoing arrows tells you whether the routing is exclusive, parallel or inclusive).  
     – b always goes straight to the joint decision point e.  
     – c and d can alternate (there are arrows both ways) until both are finished, after which they also arrive in e.  
     – From e there are two mutually exclusive outcomes: g (compensation) or h (rejection), both leading to z.  
     – e can also send the case to f, which loops back to a, allowing the request to be re-submitted.

2. Legend (lower right, grey box)  
   It explains the meaning of every black-dot pattern you see in the net:  
   • XOR-split / XOR-join(one-of-N choice)  
   • AND-split / AND-join(all branches in parallel)  
   • OR-split / OR-join(any non-empty subset of branches)

   In each miniature diagram the incoming token(s) and the way they are copied or synchronised are drawn explicitly, so when you look back at the large net you immediately know whether a branching or merging point is exclusive, parallel or inclusive.

Reading the model from left to right with the token-game semantics therefore tells you exactly how one request can flow, where activities may run concurrently, where choices occur and how the loop for re-initiation works. ([slideshare.net](https://www.slideshare.net/slideshow/process-mining-chapter02processmodelingandanalysis/7914565))