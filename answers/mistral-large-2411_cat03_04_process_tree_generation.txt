Sure dimensions of the Purchase-to-Pay (P2P) process can be quite complex, but I'll provide a simplified example to illustrate the concept. A typical P2P process might involve the following activities:

1. Create Purchase Order (PO)
2. Approve PO
3. Receive Goods
4. Verify Goods
5. Create Invoice
6. Approve Invoice
7. Pay Invoice

We'll use the `pm4py` library to construct this process tree. Here is the Python code to implement the Purchase-to-Pay process:

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Root process tree
root = ProcessTree(operator=Operator.SEQUENCE)

# Create Purchase Order
create_po = ProcessTree(label="Create Purchase Order", parent=root)

# Approve Purchase Order
approve_po = ProcessTree(label="Approve Purchase Order", parent=root)

# Receive Goods
receive_goods = ProcessTree(label="Receive Goods", parent=root)

# Verify Goods
verify_goods = ProcessTree(label="Verify Goods", parent=root)

# Create Invoice
create_invoice = ProcessTree(label="Create Invoice", parent=root)

# Approve Invoice
approve_invoice = ProcessTree(label="Approve Invoice", parent=root)

# Pay Invoice
pay_invoice = ProcessTree(label="Pay Invoice", parent=root)

# Adding children to the root process tree
root.children.append(create_po)
root.children.append(approve_po)
root.children.append(receive_goods)
root.children.append(verify_goods)
root.children.append(create_invoice)
root.children.append(approve_invoice)
root.children.append(pay_invoice)

# Print the process tree to verify
print(root)
```

This code constructs a simple Purchase-to-Pay process tree where each activity is executed sequentially. If you want to add more complexity, such as parallel execution or loops, you can modify the process tree accordingly.

For example, if you want to add a loop where the "Verify Goods" activity can be repeated multiple times until the goods are verified, you can modify the process tree as follows:

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Root process tree
root = ProcessTree(operator=Operator.SEQUENCE)

# Create Purchase Order
create_po = ProcessTree(label="Create Purchase Order", parent=root)

# Approve Purchase Order
approve_po = ProcessTree(label="Approve Purchase Order", parent=root)

# Receive Goods
receive_goods = ProcessTree(label="Receive Goods", parent=root)

# Verify Goods Loop
verify_goods_loop = ProcessTree(operator=Operator.LOOP, parent=root)
verify_goods = ProcessTree(label="Verify Goods", parent=verify_goods_loop)
verify_goods_loop.children.append(verify_goods)

# Create Invoice
create_invoice = ProcessTree(label="Create Invoice", parent=root)

# Approve Invoice
approve_invoice = ProcessTree(label="Approve Invoice", parent=root)

# Pay Invoice
pay_invoice = ProcessTree(label="Pay Invoice", parent=root)

# Adding children to the root process tree
root.children.append(create_po)
root.children.append(approve_po)
root.children.append(receive_goods)
root.children.append(verify_goods_loop)
root.children.append(create_invoice)
root.children.append(approve_invoice)
root.children.append(pay_invoice)

# Print the process tree to verify
print(root)
```

This modified process tree includes a loop for the "Verify Goods" activity, allowing it to be repeated until the goods are verified.