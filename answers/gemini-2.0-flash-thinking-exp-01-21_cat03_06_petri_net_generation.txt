```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a Petri Net
net = PetriNet(name="Insurance Claim Process")

# Create Places
p_start = PetriNet.Place(name="Start")
p_cr = PetriNet.Place(name="AfterClaimRegistration")
p_dv = PetriNet.Place(name="AfterDocumentVerification")
p_rds_loop = PetriNet.Place(name="ReDocumentSubmissionLoop")
p_fc = PetriNet.Place(name="AfterFraudCheck")
p_ii_loop = PetriNet.Place(name="InDepthInvestigationLoop")
p_ca = PetriNet.Place(name="AfterClaimAssessment")
p_ap = PetriNet.Place(name="AfterApproval")
p_p = PetriNet.Place(name="AfterPayment")
p_n = PetriNet.Place(name="AfterNotification")
p_cl = PetriNet.Place(name="AfterClosure")
p_end = PetriNet.Place(name="End")

net.places.add(p_start)
net.places.add(p_cr)
net.places.add(p_dv)
net.places.add(p_rds_loop)
net.places.add(p_fc)
net.places.add(p_ii_loop)
net.places.add(p_ca)
net.places.add(p_ap)
net.places.add(p_p)
net.places.add(p_n)
net.places.add(p_cl)
net.places.add(p_end)

# Create Transitions
t_cr = PetriNet.Transition(name="ClaimRegistration", label="Claim Registration (CR)")
t_dv = PetriNet.Transition(name="DocumentVerification", label="Document Verification (DV)")
t_rds = PetriNet.Transition(name="ReDocumentSubmission", label="Re-Document Submission (RDS)")
t_fc = PetriNet.Transition(name="FraudCheck", label="Fraud Check (FC)")
t_ii = PetriNet.Transition(name="InDepthInvestigation", label="In-depth Investigation (II)")
t_ca = PetriNet.Transition(name="ClaimAssessment", label="Claim Assessment (CA)")
t_ap = PetriNet.Transition(name="Approval", label="Approval (AP)")
t_p = PetriNet.Transition(name="Payment", label="Payment (P)")
t_n = PetriNet.Transition(name="Notification", label="Notification (N)")
t_cl = PetriNet.Transition(name="Closure", label="Closure (CL)")

net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)

# Create Arcs
petri_utils.add_arc_from_to(p_start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_cr, net)

petri_utils.add_arc_from_to(p_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv, net)
petri_utils.add_arc_from_to(p_dv, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_rds_loop, net)
petri_utils.add_arc_from_to(p_rds_loop, t_dv, net) # Loop for Re-Document Submission
petri_utils.add_arc_from_to(p_dv, t_fc, net) # Proceed from DV to FC

petri_utils.add_arc_from_to(p_fc, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_ii_loop, net)
petri_utils.add_arc_from_to(p_ii_loop, t_fc, net) # Loop for In-depth Investigation
petri_utils.add_arc_from_to(p_fc, t_ca, net) # Proceed from FC to CA

petri_utils.add_arc_from_to(p_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_ap, net)

petri_utils.add_arc_from_to(p_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, p_p, net)

petri_utils.add_arc_from_to(p_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_n, net)

petri_utils.add_arc_from_to(p_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_cl, net)
petri_utils.add_arc_from_to(p_cl, p_end, net)


# Define Initial Marking
im = Marking()
im[p_start] = 1

# Define Final Marking
fm = Marking()
fm[p_end] = 1

print("Accepting Petri Net for Insurance Claim Process created successfully!")
print("Petri Net:", net)
print("Initial Marking:", im)
print("Final Marking:", fm)
```