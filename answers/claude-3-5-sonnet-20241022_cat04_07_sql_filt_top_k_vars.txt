I'll help you create a SQL query for this process variant analysis. I'll break it down into steps and then combine them into a complete solution.

```sql
WITH 
-- Step 1: Create ordered activity sequences for each case
case_sequences AS (
    SELECT 
        case_id,
        STRING_AGG(activity, '->' ORDER BY timestamp) AS variant_sequence
    FROM event_log
    GROUP BY case_id
),

-- Step 2: Count cases per variant sequence
variant_frequencies AS (
    SELECT 
        variant_sequence,
        COUNT(*) as variant_count,
        -- Add rank to identify top K variants
        ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as variant_rank
    FROM case_sequences
    GROUP BY variant_sequence
),

-- Step 3: Get case_ids belonging to top K variants (let's say top 5)
top_variant_cases AS (
    SELECT cs.case_id
    FROM case_sequences cs
    JOIN variant_frequencies vf 
        ON cs.variant_sequence = vf.variant_sequence
    WHERE vf.variant_rank <= 5  -- K=5 in this example
)

-- Step 4: Return all events from cases in top variants
SELECT el.*
FROM event_log el
JOIN top_variant_cases tvc 
    ON el.case_id = tvc.case_id
ORDER BY el.case_id, el.timestamp;
```

Let's break down how this query works:

1. `case_sequences` CTE:
   - Groups events by case_id
   - Uses STRING_AGG to create an ordered sequence of activities
   - Activities are joined with '->' as a separator
   - ORDER BY timestamp ensures correct activity order

2. `variant_frequencies` CTE:
   - Groups by the variant sequences
   - Counts how many cases follow each variant
   - Assigns a rank based on frequency (most frequent gets rank 1)

3. `top_variant_cases` CTE:
   - Identifies which cases belong to top K variants
   - Joins case_sequences with variant_frequencies
   - Filters for variants with rank <= K (5 in this example)

4. Final SELECT:
   - Returns all original events from the event log
   - But only for cases that belong to top K variants
   - Maintains original event information and ordering

To modify K (number of top variants), simply change the number in:
```sql
WHERE vf.variant_rank <= 5
```

This query will:
- Preserve the temporal order of activities within each case
- Correctly identify and group process variants
- Count variant frequencies
- Filter to show only events from the most common variants

The result will contain all original event data (case_id, activity, timestamp) for cases that follow one of the K most frequent variants, ordered by case_id and timestamp.