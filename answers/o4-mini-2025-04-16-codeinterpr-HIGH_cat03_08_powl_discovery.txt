Below is a POWLstyle encoding of the “ordertodispatch” process you described.  We use

• a single strict partial order to enforce the global sequence  
• two loops, one for inline quality rework (Assembly  IQC), one for Test  ReTest  
• an XOR to optionally skip Labeling  
• plain Transitions for the other steps  

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# 1. Define all activities
OR  = Transition(label="OR")    # Order Received
MS  = Transition(label="MS")    # Material Sourcing
QS  = Transition(label="QS")    # Quality Screening
AS  = Transition(label="AS")    # Assembly
IQC = Transition(label="IQC")   # Inline Quality Check
TST = Transition(label="TST")   # Testing
RT  = Transition(label="RT")    # ReTesting
PK  = Transition(label="PK")    # Packaging
LB  = Transition(label="LB")    # Labeling
DP  = Transition(label="DP")    # Distribution Planning
D   = Transition(label="D")     # Dispatch

skip = SilentTransition()        # transition for skipping Labeling

# 2. Model the two repeating subprocesses as loops
#    * (A, B)  means: do A, then either exit or do B and loop back to A
loop_AS_IQC = OperatorPOWL(
    operator=Operator.LOOP,
    children=[AS, IQC]
)
loop_TST_RT = OperatorPOWL(
    operator=Operator.LOOP,
    children=[TST, RT]
)

# 3. Optional Labeling: either LB or skip
xor_LB = OperatorPOWL(
    operator=Operator.XOR,
    children=[LB, skip]
)

# 4. Put them all into one StrictPartialOrder to enforce the global sequence
root = StrictPartialOrder(
    nodes=[OR, MS, QS, loop_AS_IQC, loop_TST_RT, PK, xor_LB, DP, D]
)

# 5. Add the “happensbefore” edges
root.order.add_edge(OR,  MS)
root.order.add_edge(MS,  QS)
root.order.add_edge(QS,  loop_AS_IQC)
root.order.add_edge(loop_AS_IQC, loop_TST_RT)
root.order.add_edge(loop_TST_RT, PK)
root.order.add_edge(PK, xor_LB)
root.order.add_edge(xor_LB, DP)
root.order.add_edge(DP, D)

# 'root' is now your POWL model for the entire process
```

Explanation of the main fragments:

1. **loop_AS_IQC = \* (AS, IQC)**  
   After each Assembly you do an IQC check; if it fails you automatically go back to Assembly (and then IQC again), repeating until you exit the loop.

2. **loop_TST_RT = \* (TST, RT)**  
   After each Test you may need to ReTest; if so you return to Testing, repeating until success.

3. **xor_LB = X (LB, )**  
   Labeling is optional; some cases skip it entirely.

4. The **StrictPartialOrder** then simply strings all the “macrosteps” in order:  
   OR  MS  QS  (ASIQC)  (TSTRT)  PK  [LB or skip]  DP  D.  

This POWL model faithfully captures:

• the core linear backbone of the process  
• the two independent “repairloops” (assembly rework & retesting)  
• the optional labeling branch  
• the final planning & dispatch steps.