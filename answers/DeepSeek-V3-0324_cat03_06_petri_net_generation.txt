Here's the Python code to construct the accepting Petri net for the insurance claim management process, including loops for re-submission and in-depth investigation:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Create places
start = PetriNet.Place(name="start")
p_claim_received = PetriNet.Place(name="claim_received")
p_docs_verified = PetriNet.Place(name="docs_verified")
p_fraud_checked = PetriNet.Place(name="fraud_checked")
p_claim_assessed = PetriNet.Place(name="claim_assessed")
p_approved = PetriNet.Place(name="approved")
p_paid = PetriNet.Place(name="paid")
p_notified = PetriNet.Place(name="notified")
p_closed = PetriNet.Place(name="closed")
p_docs_incomplete = PetriNet.Place(name="docs_incomplete")
p_fraud_doubt = PetriNet.Place(name="fraud_doubt")

# Add places to the net
net.places.add(start)
net.places.add(p_claim_received)
net.places.add(p_docs_verified)
net.places.add(p_fraud_checked)
net.places.add(p_claim_assessed)
net.places.add(p_approved)
net.places.add(p_paid)
net.places.add(p_notified)
net.places.add(p_closed)
net.places.add(p_docs_incomplete)
net.places.add(p_fraud_doubt)

# Create transitions
t_claim_registration = PetriNet.Transition(name="CR", label="Claim Registration")
t_doc_verification = PetriNet.Transition(name="DV", label="Document Verification")
t_fraud_check = PetriNet.Transition(name="FC", label="Fraud Check")
t_claim_assessment = PetriNet.Transition(name="CA", label="Claim Assessment")
t_approval = PetriNet.Transition(name="AP", label="Approval")
t_payment = PetriNet.Transition(name="P", label="Payment")
t_notification = PetriNet.Transition(name="N", label="Notification")
t_closure = PetriNet.Transition(name="CL", label="Closure")
t_redoc_submission = PetriNet.Transition(name="RDS", label="Re-Document Submission")
t_investigation = PetriNet.Transition(name="II", label="In-depth Investigation")

# Add transitions to the net
net.transitions.add(t_claim_registration)
net.transitions.add(t_doc_verification)
net.transitions.add(t_fraud_check)
net.transitions.add(t_claim_assessment)
net.transitions.add(t_approval)
net.transitions.add(t_payment)
net.transitions.add(t_notification)
net.transitions.add(t_closure)
net.transitions.add(t_redoc_submission)
net.transitions.add(t_investigation)

# Add arcs for main flow
petri_utils.add_arc_from_to(start, t_claim_registration, net)
petri_utils.add_arc_from_to(t_claim_registration, p_claim_received, net)
petri_utils.add_arc_from_to(p_claim_received, t_doc_verification, net)
petri_utils.add_arc_from_to(t_doc_verification, p_docs_verified, net)
petri_utils.add_arc_from_to(p_docs_verified, t_fraud_check, net)
petri_utils.add_arc_from_to(t_fraud_check, p_fraud_checked, net)
petri_utils.add_arc_from_to(p_fraud_checked, t_claim_assessment, net)
petri_utils.add_arc_from_to(t_claim_assessment, p_claim_assessed, net)
petri_utils.add_arc_from_to(p_claim_assessed, t_approval, net)
petri_utils.add_arc_from_to(t_approval, p_approved, net)
petri_utils.add_arc_from_to(p_approved, t_payment, net)
petri_utils.add_arc_from_to(t_payment, p_paid, net)
petri_utils.add_arc_from_to(p_paid, t_notification, net)
petri_utils.add_arc_from_to(t_notification, p_notified, net)
petri_utils.add_arc_from_to(p_notified, t_closure, net)
petri_utils.add_arc_from_to(t_closure, p_closed, net)

# Add arcs for document re-submission loop
petri_utils.add_arc_from_to(t_doc_verification, p_docs_incomplete, net)
petri_utils.add_arc_from_to(p_docs_incomplete, t_redoc_submission, net)
petri_utils.add_arc_from_to(t_redoc_submission, p_claim_received, net)

# Add arcs for fraud investigation loop
petri_utils.add_arc_from_to(t_fraud_check, p_fraud_doubt, net)
petri_utils.add_arc_from_to(p_fraud_doubt, t_investigation, net)
petri_utils.add_arc_from_to(t_investigation, p_claim_received, net)

# Set initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[p_closed] = 1

print("Petri net created successfully with:")
print(f"- {len(net.places)} places")
print(f"- {len(net.transitions)} transitions")
print(f"- Initial marking: {im}")
print(f"- Final marking: {fm}")
```

This code creates a Petri net that:
1. Starts with a token in the "start" place (initial marking)
2. Models the main sequential flow of the insurance claim process
3. Includes loops for document re-submission (between DV and RDS)
4. Includes loops for in-depth investigation (between FC and II)
5. Ends with a token in the "closed" place (final marking)

The net has 11 places and 10 transitions, with the initial marking placing one token in the "start" place and the final marking requiring one token in the "closed" place.