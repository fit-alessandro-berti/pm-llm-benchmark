Below is a single DuckDB SQL statement (using CTEs) that:

1. Builds the ordered activity-sequence (“variant”) for each `case_id`.  
2. Counts how many cases share each variant.  
3. Picks the top K variants by case-count.  
4. Returns all events from only those cases whose variant is in the top K.

```sql
-- Set your desired K here
PRAGMA my_top_k = 10;

WITH
  -- 1. Build the ordered sequence of activities per case
  case_sequences AS (
    SELECT
      case_id,
      -- concatenate activities in timestamp order into a single string variant;
      -- you can swap '->' for any delimiter you prefer
      STRING_AGG(activity, '->' ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
  ),

  -- 2. Count how many cases per variant
  variant_counts AS (
    SELECT
      variant,
      COUNT(*) AS case_count
    FROM case_sequences
    GROUP BY variant
  ),

  -- 3. Pick the top K variants by frequency
  top_variants AS (
    SELECT
      variant
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT (SELECT my_top_k)
  ),

  -- 4. Identify all cases whose sequence is one of the top K
  top_cases AS (
    SELECT
      cs.case_id
    FROM case_sequences AS cs
    JOIN top_variants AS tv
      ON cs.variant = tv.variant
  )

-- 5. Return all events for those topK cases, preserving original ordering
SELECT
  el.*
FROM event_log AS el
JOIN top_cases AS tc
  ON el.case_id = tc.case_id
ORDER BY
  el.case_id,
  el.timestamp;
```

Explanation of each step:

• **case_sequences**  
  Uses `STRING_AGG(activity, '->' ORDER BY timestamp)` to turn each case’s ordered activity list into a single “variant” string.  

• **variant_counts**  
  Groups by that `variant` value and counts how many distinct cases share it.  

• **top_variants**  
  Orders variants by `case_count DESC` and takes only the first K (via the `my_top_k` PRAGMA).  

• **top_cases**  
  Joins back to find which `case_id`s correspond to those topK variants.  

• **Final SELECT**  
  Joins the filtered case IDs to the original `event_log`, returning all events (and ordering them by case and timestamp).  

You can adjust the delimiter in `STRING_AGG` (e.g. comma, pipe, arrow) or switch to `ARRAY_AGG` if you’d rather work with arrays instead of a concatenated string. Likewise, replace the `PRAGMA my_top_k = 10` with whatever mechanism you prefer for passing in your K parameter.