```python
LOG_SKELETON = {
    'equivalence': set(),  # No strict equivalence identified explicitly
    'always_before': {
        'RO': {'CA'},          # RO must occur before CA
        'CA': {'RESERVE'},
        'RESERVE': {'PI'},     # Reserve items before picking
    },
    'always_after': {
        'RO': {'PI'},           # RO starts before items are picked
        'PI': {'QC'},
        'QC': {'PO'},
        'PO': {'GSL'},
        'GSL': {'D'},
        'REServE': {'D'},      # Reserve items should happen before dispatch
    },
    'never_together': {
        ('RO', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP'),
        ('RP', 'QUICK'),      # Avoid rapid consecutive steps not allowed directly
    },
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RESERVE': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {1},
    },
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RESERVE'),
        ('RESERVE', 'PI'),
        ('RESERVE', 'PI'),  # Reserve immediately after Check Availability
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP'),
    }
}
```

---

### Explanation:

- **Equivalence:** Not explicitly enforced, so an empty set.
- **Always Before:**  
  - `RO` before `CA` (to process order before availability check)  
  - `CA` before `RESERVE`  
  - `RESERVE` before `PI`  
- **Always After:**  
  - Order (`RO`) immediately precedes picking (`PI`)  
  - Each step leads directly to the next, avoiding skips  
- **Never Together:**  
  - Key steps prohibited from occurring in sequence: `RO  PI`, `PI  QC`, etc., avoiding overlapping execution  
  - Also disallows consecutive direct steps like `GSL  D` without intermediate validation  
- **Activity Occurrences:**  
  - Each activity occurs exactly once in a typical order (set {1})  
- **Directly Follows:**  
  - Defines strict sequential flow: each activity directly precedes the next in critical progression, with careful constraints to prevent unauthorized overlaps or rapid jumps.

This model ensures strict procedural ordering, safety, and data integrity across the order fulfillment lifecycle.