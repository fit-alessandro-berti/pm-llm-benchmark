```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define places
start = PetriNet.Place(name="Start")
claim_registration = PetriNet.Place(name="ClaimRegistration")
document_verification = PetriNet.Place(name="DocumentVerification")
re_document_submission = PetriNet.Place(name="ReDocumentSubmission")
fraud_check = PetriNet.Place(name="FraudCheck")
in_depth_investigation = PetriNet.Place(name="InDepthInvestigation")
claim_assessment = PetriNet.Place(name="ClaimAssessment")
approval = PetriNet.Place(name="Approval")
payment = PetriNet.Place(name="Payment")
notification = PetriNet.Place(name="Notification")
closure = PetriNet.Place(name="Closure")

# Add places to the net
net.places.add(start)
net.places.add(claim_registration)
net.places.add(document_verification)
net.places.add(re_document_submission)
net.places.add(fraud_check)
net.places.add(in_depth_investigation)
net.places.add(claim_assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(closure)

# Define transitions
register_claim = PetriNet.Transition(name="RegisterClaim", label="Register Claim")
verify_documents = PetriNet.Transition(name="VerifyDocuments", label="Verify Documents")
resubmit_documents = PetriNet.Transition(name="ResubmitDocuments", label="Resubmit Documents")
check_fraud = PetriNet.Transition(name="CheckFraud", label="Check Fraud")
investigate = PetriNet.Transition(name="Investigate", label="Investigate")
assess_claim = PetriNet.Transition(name="AssessClaim", label="Assess Claim")
approve_claim = PetriNet.Transition(name="ApproveClaim", label="Approve Claim")
make_payment = PetriNet.Transition(name="MakePayment", label="Make Payment")
notify_customer = PetriNet.Transition(name="NotifyCustomer", label="Notify Customer")
close_claim = PetriNet.Transition(name="CloseClaim", label="Close Claim")

# Add transitions to the net
net.transitions.add(register_claim)
net.transitions.add(verify_documents)
net.transitions.add(resubmit_documents)
net.transitions.add(check_fraud)
net.transitions.add(investigate)
net.transitions.add(assess_claim)
net.transitions.add(approve_claim)
net.transitions.add(make_payment)
net.transitions.add(notify_customer)
net.transitions.add(close_claim)

# Add arcs to connect places and transitions
petri_utils.add_arc_from_to(start, register_claim, net)
petri_utils.add_arc_from_to(register_claim, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, verify_documents, net)
petri_utils.add_arc_from_to(verify_documents, document_verification, net)
petri_utils.add_arc_from_to(document_verification, verify_documents, net) # Loop for re-submission
petri_utils.add_arc_from_to(document_verification, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, verify_documents, net)
petri_utils.add_arc_from_to(verify_documents, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, fraud_check, net) # Loop for in-depth investigation
petri_utils.add_arc_from_to(fraud_check, investigate, net)
petri_utils.add_arc_from_to(investigate, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, assess_claim, net)
petri_utils.add_arc_from_to(assess_claim, approval, net)
petri_utils.add_arc_from_to(approval, make_payment, net)
petri_utils.add_arc_from_to(make_payment, payment, net)
petri_utils.add_arc_from_to(payment, notify_customer, net)
petri_utils.add_arc_from_to(notify_customer, notification, net)
petri_utils.add_arc_from_to(notification, close_claim, net)
petri_utils.add_arc_from_to(close_claim, closure, net)

# Define initial marking
im = Marking()
im[start] = 1

# Define final marking
fm = Marking()
fm[closure] = 1

# Print the Petri net structure (optional)
print("Places:", list(net.places.keys()))
print("Transitions:", list(net.transitions.keys()))
print("Initial Marking:", im)
print("Final Marking:", fm)
```

The solution constructs a Petri net representing the insurance claim management process. It defines places for each state between activities and transitions labeled with the activity names. Arcs are added to connect these places and transitions, forming a logical sequence of events. The loops between `document_verification` and `re_document_submission`, and between `fraud_check` and `investigate`, represent the possibility of re-submission and multiple in-depth investigations, respectively. The initial marking places a token at the `Start` place, and the final marking places a token at the `Closure` place, indicating the completion of the process. The optional print statements allow you to visualize the structure of the Petri net.