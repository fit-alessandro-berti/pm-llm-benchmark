Here's a DuckDB SQL query that solves this problem:

```sql
WITH ordered_events AS (
    -- Add row numbers and lead values for pattern detection
    SELECT 
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity_1,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity_2,
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp_1,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp_2,
        LEAD(ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp), 1) 
            OVER (PARTITION BY case_id ORDER BY timestamp) AS next_rn_1,
        LEAD(ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp), 2) 
            OVER (PARTITION BY case_id ORDER BY timestamp) AS next_rn_2
    FROM event_log
),
cases_with_pattern AS (
    -- Identify cases with the specific sequence in direct succession
    SELECT DISTINCT case_id
    FROM ordered_events
    WHERE 
        -- Check for the exact sequence
        activity = 'Approve Purchase Requisition'
        AND next_activity_1 = 'Create Order'
        AND next_activity_2 = 'Confirm Order'
        -- Ensure direct succession (consecutive row numbers)
        AND next_rn_1 = rn + 1
        AND next_rn_2 = rn + 2
        -- Check time condition: more than 5 days between Create Order and Confirm Order
        AND next_timestamp_2 - next_timestamp_1 > INTERVAL '5 days'
)
-- Return all events except those from the filtered cases
SELECT 
    case_id,
    activity,
    timestamp
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_with_pattern)
ORDER BY case_id, timestamp;
```

This query works as follows:

1. **`ordered_events` CTE**: 
   - Assigns row numbers to events within each case ordered by timestamp
   - Uses `LEAD()` to look ahead at the next two activities and their timestamps
   - Also captures the row numbers of the next events to verify direct succession

2. **`cases_with_pattern` CTE**:
   - Identifies cases containing the exact sequence 'Approve Purchase Requisition'  'Create Order'  'Confirm Order'
   - Verifies direct succession by checking that row numbers are consecutive (no events in between)
   - Filters for cases where the time between 'Create Order' and 'Confirm Order' exceeds 5 days

3. **Final SELECT**:
   - Returns all events from the original table
   - Excludes events belonging to cases identified in `cases_with_pattern`
   - Orders results by case_id and timestamp for clarity

The query ensures that only cases meeting both conditions (specific sequence in direct succession AND timing constraint) are excluded from the final result.