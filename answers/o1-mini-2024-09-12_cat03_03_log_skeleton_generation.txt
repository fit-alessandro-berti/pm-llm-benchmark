```python
log_skeleton = {
    'equivalence': set(),
    
    'always_before': {
        ('RO', 'CA'), ('RO', 'RI'), ('RO', 'PI'), ('RO', 'QC'), ('RO', 'PO'),
        ('RO', 'GSL'), ('RO', 'D'), ('RO', 'IC'), ('RO', 'RP'),
        ('CA', 'RI'), ('CA', 'PI'), ('CA', 'QC'), ('CA', 'PO'),
        ('CA', 'GSL'), ('CA', 'D'), ('CA', 'IC'), ('CA', 'RP'),
        ('RI', 'PI'), ('RI', 'QC'), ('RI', 'PO'), ('RI', 'GSL'),
        ('RI', 'D'), ('RI', 'IC'), ('RI', 'RP'),
        ('PI', 'QC'), ('PI', 'PO'), ('PI', 'GSL'), ('PI', 'D'),
        ('PI', 'IC'), ('PI', 'RP'),
        ('QC', 'PO'), ('QC', 'GSL'), ('QC', 'D'), ('QC', 'IC'),
        ('QC', 'RP'),
        ('PO', 'GSL'), ('PO', 'D'), ('PO', 'IC'), ('PO', 'RP'),
        ('GSL', 'D'), ('GSL', 'IC'), ('GSL', 'RP'),
        ('D', 'IC'), ('D', 'RP'),
        ('IC', 'RP')
    },
    
    'always_after': {
        ('CA', 'RO'), ('RI', 'RO'), ('PI', 'RO'), ('QC', 'RO'), ('PO', 'RO'),
        ('GSL', 'RO'), ('D', 'RO'), ('IC', 'RO'), ('RP', 'RO'),
        ('RI', 'CA'), ('PI', 'CA'), ('QC', 'CA'), ('PO', 'CA'),
        ('GSL', 'CA'), ('D', 'CA'), ('IC', 'CA'), ('RP', 'CA'),
        ('PI', 'RI'), ('QC', 'RI'), ('PO', 'RI'), ('GSL', 'RI'),
        ('D', 'RI'), ('IC', 'RI'), ('RP', 'RI'),
        ('QC', 'PI'), ('PO', 'PI'), ('GSL', 'PI'), ('D', 'PI'),
        ('IC', 'PI'), ('RP', 'PI'),
        ('PO', 'QC'), ('GSL', 'QC'), ('D', 'QC'), ('IC', 'QC'),
        ('RP', 'QC'),
        ('GSL', 'PO'), ('D', 'PO'), ('IC', 'PO'), ('RP', 'PO'),
        ('D', 'GSL'), ('IC', 'GSL'), ('RP', 'GSL'),
        ('IC', 'D'), ('RP', 'D'),
        ('RP', 'IC')
    },
    
    'never_together': set(),
    
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {1}
    },
    
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    }
}
```

**Explanation:**

- **Equivalence:** There are no pairs of activities that are equivalent in this scenario, so the `equivalence` set is empty.

- **Always Before:** This set contains all pairs of activities where the first must always occur before the second if both are present in a case. Given the linear nature of the order fulfillment process, every preceding activity must occur before all subsequent activities. This results in 45 pairs covering all combinations where one activity precedes another in the defined sequence.

- **Always After:** This is the inverse of the `always_before` set. It ensures that if the second activity occurs, the first must have occurred before it. It also contains 45 pairs, reversing each pair from the `always_before` set.

- **Never Together:** There are no constraints preventing any two activities from occurring together in this process, so the `never_together` set is empty.

- **Activity Occurrences (`activ_freq`):** Each activity is expected to occur exactly once in a case. This is reflected by mapping each activity to the set `{1}`.

- **Directly Follows:** This set captures the immediate succession of activities as defined by the process flow. For example, `('RO', 'CA')` indicates that `Check Availability (CA)` directly follows `Receive Order (RO)`.

This Log Skeleton accurately represents the declarative constraints of the described order fulfillment process, ensuring that all activities follow the required order and occur the correct number of times.