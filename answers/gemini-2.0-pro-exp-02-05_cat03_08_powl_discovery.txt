```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities as Transitions
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()

# Define the IQC loop.  IQC can be repeated, intertwined with AS.
iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])

# TST/RT loop
tst_rt_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])


# Choice between LB and skipping LB
lb_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

# Define nodes for the main partial order
main_nodes = [OR, MS, QS, iqc_loop, AS, tst_rt_loop, PK, lb_choice, DP, D]

# Create the main partial order
root = StrictPartialOrder(nodes=main_nodes)

# Define the order
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, AS)
root.order.add_edge(AS, iqc_loop) # AS can lead to IQC loop
root.order.add_edge(iqc_loop, AS)   # AS and IQC alternate inside the loop.
root.order.add_edge(iqc_loop, tst_rt_loop)  # after last AS / IQC, can continue with TST
root.order.add_edge(AS, tst_rt_loop)       # The last AS from the loop *OR* the first AS leads to the TST/RT loop.
root.order.add_edge(tst_rt_loop, PK)
root.order.add_edge(PK, lb_choice)
root.order.add_edge(lb_choice, DP)
root.order.add_edge(DP, D)

# Note about cases without IQC: in Case 4 there are no IQC/RT at all.
# The model allows skipping the loops, if there is not a single IQC in the data,
# AS can directly be followed by TST.

# Final POWL Model: root
```
