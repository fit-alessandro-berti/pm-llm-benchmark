```sql
--------------------------------------------------------------------
--  Step-1 :  locate the pattern *inside* every single case
--------------------------------------------------------------------
WITH seq AS (     -- one row per possible starting point of the trio
    SELECT
        case_id,

        /* the current event (must be ‘Approve Purchase Requisition’) */
        timestamp                                    AS ts_approve,

        /* the activity + time of the next event     (offset = 1)   */
        LEAD(activity   , 1) OVER w                  AS act_create ,
        LEAD(timestamp  , 1) OVER w                  AS ts_create ,

        /* the activity + time of the next-next event(offset = 2)   */
        LEAD(activity   , 2) OVER w                  AS act_confirm,
        LEAD(timestamp  , 2) OVER w                  AS ts_confirm

    FROM event_log
    WHERE activity = 'Approve Purchase Requisition'  -- only possible starts
    WINDOW w AS (PARTITION BY case_id ORDER BY timestamp)
)

--------------------------------------------------------------------
--  Step-2 :  pick the cases that really match the rule
--------------------------------------------------------------------
,bad_cases AS (
    SELECT DISTINCT case_id
    FROM   seq
    WHERE  act_create  = 'Create Order'
      AND  act_confirm = 'Confirm Order'
      AND  ts_confirm  - ts_create > INTERVAL '5 days'   -- > 5 days
)

--------------------------------------------------------------------
--  Step-3 :  return every event that is *not* in a “bad” case
--------------------------------------------------------------------
SELECT *
FROM   event_log
WHERE  case_id NOT IN (SELECT case_id FROM bad_cases)
ORDER  BY case_id, timestamp;
```

Explanation of the approach

1. `seq`  
   • Within every `case_id`, events are ordered by their `timestamp`.  
   • Using `LEAD` we look one and two rows ahead to obtain the activities/timestamps that immediately follow an `'Approve Purchase Requisition'` event.  
   • Because `LEAD` picks the “next” rows in that order, the three activities are guaranteed to be consecutive (no events in between).

2. `bad_cases`  
   • Keeps only those cases where the exact consecutive trio  
     `'Approve Purchase Requisition'  'Create Order'  'Confirm Order'`  
     exists and the time between the middle and last events exceeds 5 days.

3. Final `SELECT`  
   • Returns the full event log excluding every case listed in `bad_cases`, thus delivering only the cases that do not satisfy both the sequence and the timing condition.