```sql
------------------------------------------------------------------------------
-- 1.  Look at every case in timestamporder
-- 2.  Check whether three consecutive rows are
--        Approve Purchase Requisition  ->  Create Order  ->  Confirm Order
-- 3.  For the rows that satisfy 2., keep only the cases whose
--     Create Order  Confirm Order gap is longer than 5 days
-- 4.  Throw away every event that belongs to one of those cases
------------------------------------------------------------------------------

WITH ordered AS (              -- add “lookahead” information
    SELECT
        case_id,
        activity,
        "timestamp",

        /* activities of the next 1st and 2nd events in the same case */
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY "timestamp") AS nxt_act1,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY "timestamp") AS nxt_act2,

        /* timestamps of the next 1st and 2nd events in the same case */
        LEAD("timestamp", 1) OVER (PARTITION BY case_id ORDER BY "timestamp") AS nxt_ts1,
        LEAD("timestamp", 2) OVER (PARTITION BY case_id ORDER BY "timestamp") AS nxt_ts2
    FROM event_log
),

bad_cases AS (                 -- cases to be removed
    SELECT DISTINCT case_id
    FROM ordered
    WHERE  activity   = 'Approve Purchase Requisition'
      AND  nxt_act1   = 'Create Order'
      AND  nxt_act2   = 'Confirm Order'                  -- exact consecutive order
      AND  (nxt_ts2 - nxt_ts1) > INTERVAL '5 days'       -- gap > 5 days
)

SELECT  *                      -- keep every event that is NOT in a bad case
FROM    event_log
WHERE   case_id NOT IN (SELECT case_id FROM bad_cases)
ORDER BY case_id, "timestamp";
```

Explanation of the approach

1. `ordered`  
   • Rows are kept in chronological order inside each `case_id`.  
   • `LEAD` is used to peek one and two rows ahead, giving the activity names and timestamps of the immediately following events.  
   • If a row is `'Approve Purchase Requisition'` and the first lookahead row is `'Create Order'` and the second lookahead row is `'Confirm Order'`, then those three events are consecutive and in the required order.

2. `bad_cases`  
   • Collects every `case_id` that contains at least one such triple **and** where the time between the `'Create Order'` and `'Confirm Order'` rows is greater than 5 days.

3. Final `SELECT`  
   • Removes every event whose `case_id` is in `bad_cases`, leaving only cases that do not satisfy both the sequence and timing condition.