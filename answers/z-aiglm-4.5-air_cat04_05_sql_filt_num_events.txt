To solve this problem, we need to filter out events from cases that contain more than six events while retaining all events from cases with six or fewer events. The solution involves two main steps: first, identifying the `case_id` values that meet the event count criterion, and then retrieving all corresponding events from the original table.

### Approach
1. **Identify Valid Cases**: Use a subquery to compute the number of events per `case_id` and filter for cases with six or fewer events. This is done by grouping the events by `case_id` and applying a `HAVING` clause to restrict the count to 6 or fewer.
2. **Retrieve Events**: Join the original `event_log` table with the subquery results to fetch all events belonging to the valid cases. This ensures we only include events from cases that passed the filter.

### Solution Code
```sql
SELECT e.*
FROM event_log e
JOIN (
    SELECT case_id
    FROM event_log
    GROUP BY case_id
    HAVING COUNT(*) <= 6
) AS valid_cases
ON e.case_id = valid_cases.case_id;
```

### Explanation
1. **Subquery for Valid Cases**: The inner query (`valid_cases`) groups all events by `case_id` and counts the number of events per case. The `HAVING` clause filters these groups to include only those cases with 6 or fewer events (`HAVING COUNT(*) <= 6`).
2. **Joining with Original Table**: The outer query joins the original `event_log` with the `valid_cases` subquery using `case_id` as the join key. This ensures that only events from valid cases (those 6 events) are returned.
3. **Efficiency**: The approach efficiently narrows down the relevant `case_id` values first, minimizing the amount of data processed in the join operation. This leverages DuckDB's optimizations for subqueries and joins, ensuring good performance even with large datasets.