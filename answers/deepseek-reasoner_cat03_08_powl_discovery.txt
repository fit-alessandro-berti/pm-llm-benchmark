To model the manufacturing and distribution process as a POWL, we capture the sequence, loops, and optional steps observed in the event logs. The final POWL structure is:

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()

# AS-IQC loop (repeat AS after IQC if needed)
as_iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[AS, IQC])

# TST-RT loop (retest if needed)
tst_rt_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Optional labeling (XOR between LB and skip)
lb_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

# Main partial order
root = StrictPartialOrder(nodes=[OR, MS, QS, as_iqc_loop, tst_rt_loop, PK, lb_choice, DP, D])

# Define execution order
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, as_iqc_loop)
root.order.add_edge(as_iqc_loop, tst_rt_loop)
root.order.add_edge(tst_rt_loop, PK)
root.order.add_edge(PK, lb_choice)
root.order.add_edge(lb_choice, DP)
root.order.add_edge(DP, D)
```

**Structure Explanation:**
1. **Sequence:**  
   `OR  MS  QS` forms the initial sequential flow.  
   `DP  D` is the final sequential step.  

2. **Loops:**  
   - *AS-IQC Loop*: After assembling (AS), quality checks (IQC) can trigger rework.  
   - *TST-RT Loop*: Failed tests (TST) require retesting (RT) and re-execution of TST.  

3. **Choice:**  
   `X ( LB,  )`: Labeling (LB) is optional after packaging (PK), modeled via XOR with a silent transition ().  

4. **Partial Order:**  
   The `StrictPartialOrder` enforces dependencies between all steps, ensuring the correct workflow sequence.