```python
log_skeleton = {
    # Activities that always occur the same number of times
    'equivalence': {
        ('RO', 'D'),      # Receive Order and Dispatch always occur together (once each)
        ('RO', 'IC'),     # Every order gets invoiced
        ('IC', 'RP'),     # Every invoice results in a payment record
        ('CA', 'RI'),     # Check Availability and Reserve Items occur together
        ('PI', 'PO'),     # Pick Items and Pack Order occur together
        ('PO', 'GSL'),    # Pack Order and Generate Shipping Label occur together
        ('GSL', 'D')      # Generate Label and Dispatch occur together
    },
    
    # If first activity occurs, second must have been executed previously
    'always_before': {
        ('CA', 'RO'),     # Check Availability requires Receive Order first
        ('RI', 'CA'),     # Reserve Items requires Check Availability first
        ('PI', 'RI'),     # Pick Items requires Reserve Items first
        ('QC', 'PI'),     # Quality Check requires Pick Items first
        ('PO', 'QC'),     # Pack Order requires Quality Check first
        ('GSL', 'PO'),    # Generate Shipping Label requires Pack Order first
        ('D', 'GSL'),     # Dispatch requires Generate Shipping Label first
        ('IC', 'RO'),     # Invoice requires Receive Order first
        ('RP', 'IC')      # Record Payment requires Invoice first
    },
    
    # If first activity occurs, second will be executed later
    'always_after': {
        ('RO', 'CA'),     # After Receive Order, Check Availability must occur
        ('CA', 'RI'),     # After Check Availability, Reserve Items must occur
        ('RI', 'PI'),     # After Reserve Items, Pick Items must occur
        ('PI', 'QC'),     # After Pick Items, Quality Check must occur
        ('QC', 'PO'),     # After Quality Check, Pack Order must occur
        ('PO', 'GSL'),    # After Pack Order, Generate Shipping Label must occur
        ('GSL', 'D'),     # After Generate Label, Dispatch must occur
        ('RO', 'IC'),     # After Receive Order, Invoice must eventually occur
        ('IC', 'RP')      # After Invoice, Record Payment must occur
    },
    
    # Activities that cannot co-exist in the same case
    'never_together': set(),  # All activities are part of the standard process
    
    # Number of times each activity can occur per case
    'activ_freq': {
        'RO': {1},   # Receive Order occurs exactly once
        'CA': {1},   # Check Availability occurs exactly once
        'RI': {1},   # Reserve Items occurs exactly once
        'PI': {1},   # Pick Items occurs exactly once
        'QC': {1},   # Quality Check occurs exactly once
        'PO': {1},   # Pack Order occurs exactly once
        'GSL': {1},  # Generate Shipping Label occurs exactly once
        'D': {1},    # Dispatch occurs exactly once
        'IC': {1},   # Invoice Customer occurs exactly once
        'RP': {1}    # Record Payment occurs exactly once
    },
    
    # Second activity occurs immediately after first activity
    'directly_follows': {
        ('RO', 'CA'),    # Check Availability immediately follows Receive Order
        ('CA', 'RI'),    # Reserve Items immediately follows Check Availability
        ('RI', 'PI'),    # Pick Items immediately follows Reserve Items
        ('PI', 'QC'),    # Quality Check immediately follows Pick Items
        ('QC', 'PO'),    # Pack Order immediately follows Quality Check
        ('PO', 'GSL'),   # Generate Label immediately follows Pack Order
        ('GSL', 'D')     # Dispatch immediately follows Generate Shipping Label
        # Note: IC and RP are not in directly_follows as they may not
        # immediately follow other activities (timing varies)
    }
}
```

**Key Design Decisions:**

1. **Linear Physical Process**: The core fulfillment activities (RO  CA  RI  PI  QC  PO  GSL  D) form a strict sequential chain with directly-follows constraints.

2. **Financial Activities**: Invoice Customer (IC) and Record Payment (RP) are linked to the process through always_before/always_after constraints but not directly_follows, allowing flexibility in timing.

3. **Single Occurrence**: All activities occur exactly once per order, reflecting a standard "happy path" order fulfillment.

4. **No Exceptions**: The never_together set is empty as all activities are compatible and part of the standard process flow.