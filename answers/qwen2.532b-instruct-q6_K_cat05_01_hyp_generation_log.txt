To address the prompt effectively, we will first identify anomalies in the given event logs based on the normal process flow. Then, we'll hypothesize about why these anomalies might occur and suggest relevant SQL queries to explore these issues.

### Anomalies Identified

1. **Case 1002:**
   - The activity sequence is incorrect:
     - Confirm Shipment should not happen before Perform Credit Check and Validate Stock.
   
2. **Case 1003:**
   - The activity sequence is incorrect:
     - Ship Goods should not occur before Perform Credit Check and Validate Stock.

3. **Case 1004:**
   - Activities are out of order:
     - Receive Payment before Confirm Shipment, Issue Invoice.
   
### Hypotheses

1. **Incorrect Activity Sequence (Cases 1002 & 1003):**
   - Possible causes could be system glitches or user error where the activities were recorded in an incorrect sequence.
   - Alternatively, it might indicate a process flow customization that was not documented.

2. **Receive Payment Before Confirm Shipment and Issue Invoice (Case 1004):**
   - This could imply a payment method that does not require confirmation of shipment or invoicing before receiving the payment, such as pre-payment arrangements.
   - Alternatively, it might indicate an error where the order was marked for payment prematurely.

### SQL Queries to Investigate Hypotheses

#### Query 1: Identify Orders Where Activities Occur Out of Order (Cases 1002 & 1003)
```sql
SELECT o.case_id,
       e.activity,
       e.timestamp,
       r.resource,
       r.role,
       r.department
FROM order_event_log e
JOIN resources r ON e.resource = r.resource_id
WHERE case_id IN (
    SELECT DISTINCT case_id 
    FROM order_event_log 
    WHERE activity NOT IN ('Register Order', 'Receive Payment') -- Exclude the start and end activities for simplicity
)
ORDER BY o.case_id, e.timestamp;
```

#### Query 2: Identify Orders Where Receive Payment Happens Before Confirm Shipment (Case 1004)
```sql
SELECT o.case_id,
       e.activity,
       e.timestamp,
       r.resource,
       r.role,
       r.department
FROM order_event_log e
JOIN resources r ON e.resource = r.resource_id
WHERE case_id IN (
    SELECT DISTINCT e1.case_id 
    FROM order_event_log e1, order_event_log e2
    WHERE e1.activity = 'Receive Payment' AND e2.activity = 'Confirm Shipment'
      AND e1.timestamp < e2.timestamp AND e1.case_id = e2.case_id
)
ORDER BY o.case_id, e.timestamp;
```

#### Query 3: Analyze Order Value and Type for Anomalous Cases (Cases 1002 & 1004)
```sql
SELECT o.case_id,
       o.customer_id,
       o.order_type,
       o.order_value,
       r.resource,
       r.role,
       r.department
FROM orders o
JOIN order_event_log e ON o.case_id = e.case_id
JOIN resources r ON e.resource = r.resource_id
WHERE o.case_id IN (1002, 1004)
ORDER BY o.case_id;
```

### Conclusion

The above queries will help to identify the nature of anomalies and understand if they are due to process customizations or errors. By analyzing these cases further, you can pinpoint specific issues in the workflow, which may lead to corrective actions such as retraining staff, updating system workflows, or adjusting business policies.