```sql
WITH CaseSequence AS (
  SELECT
    case_id,
    activity,
    timestamp,
    LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity1,
    LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity2
  FROM event_log
),
SequenceCases AS (
  SELECT
    case_id,
    timestamp
   FROM CaseSequence
    WHERE activity = 'Confirm Order'
    AND prev_activity1 = 'Create Order'
    AND prev_activity2 = 'Approve Purchase Requisition'
),
TimeFilteredCases AS (
    SELECT 
        s.case_id
    FROM SequenceCases s
    JOIN event_log el ON s.case_id = el.case_id AND el.activity = 'Create Order'
    WHERE  el.timestamp < s.timestamp  
    GROUP BY s.case_id, s.timestamp
    HAVING  MAX(CASE WHEN el.activity = 'Create Order' THEN el.timestamp END) < s.timestamp  AND 
      STRFTIME('%J', s.timestamp) - STRFTIME('%J', MAX(CASE WHEN el.activity = 'Create Order' THEN el.timestamp END) ) > 5
),
ExcludedCases AS (
    SELECT DISTINCT case_id FROM TimeFilteredCases
)
SELECT
  el.*
FROM event_log el
WHERE NOT EXISTS (SELECT 1 FROM ExcludedCases ec WHERE el.case_id = ec.case_id)
ORDER BY el.case_id, el.timestamp;
```

**Explanation:**

1. **`CaseSequence` CTE:**
   - This CTE retrieves all events from `event_log`.
   - It uses the `LAG()` window function to create `prev_activity1` and `prev_activity2` columns, which contain the activity names of the previous and second-previous events within the same case, ordered by timestamp.
   - This sets the stage for identifying the desired three-activity sequence.

2. **`SequenceCases` CTE:**
   - This CTE filters the results from `CaseSequence` to identify cases containing the target activity sequence: 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' in that exact order.
   - It selects the `case_id` and the `timestamp` of the 'Confirm Order' event of that sequence.

3. **`TimeFilteredCases` CTE:**
   - This CTE takes the cases identified from the previous step and checks if the time elapsed between the 'Create Order' event and the 'Confirm Order' event within each identified sequence exceeds 5 days.
   - It joins `SequenceCases` with `event_log` to retrieve the timestamp of the 'Create Order' event.
   - The `HAVING` clause filters cases where the time difference is greater than 5 days. `STRFTIME('%J', s.timestamp)` extracts the Julian date representation and we perform the subtraction and check against `5`.
  
4. **`ExcludedCases` CTE:**
    - This CTE identifies the distinct `case_id` from the `TimeFilteredCases`, which are the cases that will be excluded from the final result.

5. **Final `SELECT` Statement:**
   - This statement retrieves all rows (`*`) from `event_log`.
   - It uses a `WHERE NOT EXISTS` clause along with `ExcludedCases` CTE to filter out events that belong to the cases which we want to exclude.
   - It orders the output first by `case_id` and then by `timestamp` within each case for better readability of the final result.

**How it addresses the prompt:**

- **Sequence Identification:** The use of `LAG()` and filtering on `prev_activity1` and `prev_activity2` within the `CaseSequence` and the `SequenceCases` CTEs, respectively, ensures we identify the cases with the correct direct succession of the activities.
- **Time Filtering:** The `TimeFilteredCases` CTE then filters these down to only cases with the specified time condition.
- **Exclusion:** The `ExcludedCases` CTE and final `WHERE NOT EXISTS` clause guarantee that we exclude events from cases matching *both* the sequence *and* the timing criteria.
- **Return all other events:** The final `SELECT` statement is designed to return all events *except* those that belong to the identified cases.
- **Proper Grouping and Ordering:**  The query uses `PARTITION BY case_id` in the window function, groups based on `case_id`, and finally orders by `case_id` and `timestamp`.

This SQL query provides a clear and efficient solution to the problem outlined in the prompt. It also demonstrates good practices in SQL, using common table expressions (CTEs) for better readability and modularity.
