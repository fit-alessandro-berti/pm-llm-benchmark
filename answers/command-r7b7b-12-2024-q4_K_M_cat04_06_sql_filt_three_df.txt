Here's the SQL solution for your specific requirements in DuckDB:
```sql
WITH CaseSequence AS (
    -- First, we find all sequences of three consecutive activities with 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order'
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp ASC) - 1 AS seq
    FROM event_log
    WHERE activity IN ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
),
CaseSequenceWithTiming AS (
    -- Then, we filter those sequences where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days
    SELECT
        case_id,
        seq + 2 AS full_seq
    FROM CaseSequence
    WHERE activity = 'Create Order' AND seq + 1 = 'Confirm Order' AND
        EXTRACT(DAY FROM (timestamp + INTERVAL '5 days')) - EXTRACT(DAY FROM timestamp) > 5
),
FilteredEvents AS (
    -- We exclude cases that match the specific sequence and timing criteria from the final result
    SELECT *
    FROM event_log
    WHERE NOT EXISTS (SELECT 1 FROM CaseSequenceWithTiming WHERE case_id = event_log.case_id)
)
-- Finally, we return all events except those filtered out in step 3
SELECT *
FROM FilteredEvents;
```

Here's a breakdown of the query:
- The `CaseSequence` CTE identifies sequences of three consecutive activities with 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' for each case.
- The `CaseSequenceWithTiming` CTE further refines this by checking if the time difference between the 'Create Order' and 'Confirm Order' events is more than 5 days.
- In the `FilteredEvents` CTE, we exclude cases that match both the specific sequence and timing criteria from the original event log.
- Finally, in the main query, we return all events except those filtered out in the previous step.