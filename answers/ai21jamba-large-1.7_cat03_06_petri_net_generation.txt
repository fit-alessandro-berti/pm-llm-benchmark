Here is the Python code to construct the accepting Petri net for the described insurance claim management process. The code follows the specified scenario and includes loops for re-submission of documents and in-depth investigations.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Initialize the Petri net
net = PetriNet("Insurance_Claim_Management")

# Create places and transitions
start = PetriNet.Place("start")
claim_registration = PetriNet.Place("claim_registration")
document_verification = PetriNet.Place("document_verification")
re_document_submission = PetriNet.Place("re_document_submission")
fraud_check = PetriNet.Place("fraud_check")
in_depth_investigation = PetriNet.Place("in_depth_investigation")
claim_assessment = PetriNet.Place("claim_assessment")
approval = PetriNet.Place("approval")
payment = PetriNet.Place("payment")
notification = PetriNet.Place("notification")
closure = PetriNet.Place("closure")

# Add places and transitions to the net
net.places.add(start)
net.places.add(claim_registration)
net.places.add(document_verification)
net.places.add(re_document_submission)
net.places.add(fraud_check)
net.places.add(in_depth_investigation)
net.places.add(claim_assessment)
net.places.add(approval)
net.places.add(payment)
net.places.add(notification)
net.places.add(closure)

# Transitions
claim_registration_t = PetriNet.Transition("Claim_Registration", "Claim Registration")
document_verification_t = PetriNet.Transition("Document_Verification", "Document Verification")
re_document_submission_t = PetriNet.Transition("Re_Document_Submission", "Re-Document Submission")
fraud_check_t = PetriNet.Transition("Fraud_Check", "Fraud Check")
in_depth_investigation_t = PetriNet.Transition("In_Depth_Investigation", "In-Depth Investigation")
claim_assessment_t = PetriNet.Transition("Claim_Assessment", "Claim Assessment")
approval_t = PetriNet.Transition("Approval", "Approval")
payment_t = PetriNet.Transition("Payment", "Payment")
notification_t = PetriNet.Transition("Notification", "Notification")
closure_t = PetriNet.Transition("Closure", "Closure")

# Add transitions to the net
net.transitions.add(claim_registration_t)
net.transitions.add(document_verification_t)
net.transitions.add(re_document_submission_t)
net.transitions.add(fraud_check_t)
net.transitions.add(in_depth_investigation_t)
net.transitions.add(claim_assessment_t)
net.transitions.add(approval_t)
net.transitions.add(payment_t)
net.transitions.add(notification_t)
net.transitions.add(closure_t)

# Add arcs between places and transitions
petri_utils.add_arc_from_to(start, claim_registration_t, net)
petri_utils.add_arc_from_to(claim_registration_t, claim_registration, net)

petri_utils.add_arc_from_to(claim_registration, document_verification_t, net)
petri_utils.add_arc_from_to(document_verification_t, document_verification, net)
petri_utils.add_arc_from_to(document_verification, document_verification_t, net)  # Loop for re-submission
petri_utils.add_arc_from_to(document_verification_t, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, document_verification_t, net)

petri_utils.add_arc_from_to(document_verification, fraud_check_t, net)
petri_utils.add_arc_from_to(fraud_check_t, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check_t, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation_t, fraud_check, net)  # Loop for multiple investigations
petri_utils.add_arc_from_to(in_depth_investigation, in_depth_investigation_t, net)

petri_utils.add_arc_from_to(fraud_check, claim_assessment_t, net)
petri_utils.add_arc_from_to(claim_assessment_t, claim_assessment, net)

peti
```