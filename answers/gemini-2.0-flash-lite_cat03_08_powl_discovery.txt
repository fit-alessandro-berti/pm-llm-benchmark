```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions (activities)
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()

# Define the IQC/AS loop
iqc_as_loop = OperatorPOWL(operator=Operator.LOOP, children=[AS, IQC])

# Define the TST/RT loop
tst_rt_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Define the LB choice (exclusive choice between LB and skip - no labeling)
lb_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])


# Build the POWL Model
root = StrictPartialOrder(nodes=[OR, MS, QS, iqc_as_loop, tst_rt_loop, PK, lb_choice, DP, D])

# Define the order
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, iqc_as_loop) # QS precedes assembly and in-line check
root.order.add_edge(iqc_as_loop, TST)
root.order.add_edge(TST, tst_rt_loop)
root.order.add_edge(iqc_as_loop, PK)  #IQC/AS loop precedes packaging if no RT is required
root.order.add_edge(tst_rt_loop, PK)  # TST/RT loop proceeds packaging.
root.order.add_edge(PK, lb_choice)
root.order.add_edge(lb_choice, DP)
root.order.add_edge(DP, D)
```
