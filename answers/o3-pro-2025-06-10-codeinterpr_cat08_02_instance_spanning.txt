=====================================================================
SECTION 1Identifying Instance-Spanning Constraints and Measuring Impact
=====================================================================

A.  How to detect each constraint in the event log  
   1. Shared Cold-Packing stations  
      • Build a “resource-calendar” from start/complete pairs for every packing station.  
      • Flag the five Cold-Packing stations  create an occupancy timeline.  
      • For every order that requires cold-packing, compute:  
        – Ready-time = completion of previous activity  
        – Start-time = start of cold-packing  
        – Wait_CP = Start-time – Ready-time  
      • Link Wait_CP to the occupancy state of the five stations at Ready-time. If all five were busy, the wait is attributed to the constraint.  

   2. Batching before Shipping Label Generation  
      • Detect “batch instances” using the Resource column (“System (Batch Bx)”) or by equal Destination Region & close timestamps.  
      • For every order:  
        – Ready-time = completion of Quality Check  
        – Batch-start = earliest Shipping-Label-Gen. start for its batch  
        – Wait_Batch = Batch-start – Ready-time  

   3. Priority (Express) pre-emption  
      • Identify overlaps where a Standard order is in progress at a shared resource (e.g., Station S7) and an Express order arrives.  
      • A pre-emption event is logged as: Standard “START … INTERRUPT”, Express “START”, Standard later “RESUME”. If “interrupt” events are not logged, infer them when the same Standard order shows two separate start stamps for the same activity.  
      • Measure:  
        – Count_Preemptions per day/week  
        – Delay_STD = Resume-time – Interrupt-time  

   4. Hazardous-material 10-order cap  
      • Create a running counter of concurrent “Packing” + “Quality Check” activities with HazardousMaterial = TRUE.  
      • Every time Ready-time occurs while counter = 10, the subsequent wait is attributed to the constraint.  

B.  Metrics to quantify impact  
   • Mean / median / 95-percentile wait due to each constraint (Wait_CP, Wait_Batch, Delay_STD, Wait_Haz).  
   • Resource utilisation: % busy time for Cold-Packing stations; % time HM counter is at 10.  
   • Throughput loss: difference between theoretical throughput (if no waits) and actual completed orders per day.  
   • SLA miss rate disaggregated by cause (root-cause attribution from above waits).  

C.  Separating within-instance vs between-instance delays  
   • Activity duration = Complete – Start (within-instance).  
   • Idle time = Start(next) – Complete(previous).  
   • Attribute idle time:  
     – If required resource busy with another order  between-instance (resource contention).  
     – If waiting for batch trigger  between-instance.  
     – If none of the above but long duration in previous activity  within-instance.  
   • Automate attribution with an algorithm that checks resource occupancy, queue state, and batch readiness at every idle interval; remainder is labelled “intrinsic”.  

=====================================================================
SECTION 2Analysing Interactions between Constraints
=====================================================================

1. Express + Cold-Packing  
   • Because there are only five Cold-Packing stations, any Express-cold order pre-empts one of them. The queue for normal cold orders is immediately lengthened; ripple-effect reaches Quality Check and batching steps.

2. Batching + Hazardous limit  
   • If a South-region batch contains many hazardous orders, the 10-order cap can keep some hazardous orders in earlier stages, preventing the batch from reaching minimum size, which in turn blocks non-hazardous orders going to the same region.

3. Express + Batching  
   • Express orders skip (or form micro-batches). When they are removed from the normal batch pool, the remaining standard orders wait longer for the minimum batch size.

4. Cold-Packing + Hazardous limit  
   • Some hazardous orders also need cold-packing (e.g., medical reagents). When both constraints apply, the effective capacity is determined by the stricter one (5 stations vs 10-order cap), amplifying delays.

Understanding these interactions is essential: improving one constraint (e.g., adding a sixth cold station) might yield negligible benefit if the hazardous cap or batching rule becomes the new bottleneck.

=====================================================================
SECTION 3Constraint-Aware Optimisation Strategies
=====================================================================

Strategy ADynamic Slot Reservation for Cold-Packing  
• Constraints addressed: Shared Cold-Packing, Express priority  
• Change: Convert the 5 cold stations into a virtual pool with two reserved “express slots” during peak periods; reservation is dynamically released if no Express job arrives within X minutes.  
• Data leverage: Use historical inter-arrival time of Express-cold orders to set X by quantile (e.g., 90th).  
• Expected outcome:  
  – Express orders still receive immediate service.  
  – Standard cold orders no longer suffer unnecessary pre-emption; predicted Wait_CP  20-30 %.  

Strategy BAdaptive Batch Formation with Time-Caps  
• Constraints addressed: Shipping batches, Express interaction, Hazardous interaction  
• Change: Introduce a rolling-horizon algorithm: a batch for a region is closed either when (a) N orders arrived, or (b) max-waiting-time of the oldest order reaches T minutes (T tuned per region via log analysis).  
• Data leverage: Mine average pick-to-QC times and inter-arrival rates to set (N,T) so that 95 % of standard orders still fit into a truck’s capacity.  
• Expected outcome: Wait_Batch  40 %, SLA adherence ; negligible additional last-mile cost (<3 %).  

Strategy CToken-Based Hazardous-Material Scheduling  
• Constraints addressed: 10-order hazardous cap  
• Change: Implement a digital “token” system: 10 HM tokens circulate between Packing and QC. Scheduler only starts a hazardous order when a token is free; tokens are assigned preferentially to orders that also occupy scarce resources (cold stations) to minimise multi-constraint blockage.  
• Data leverage: Predict which upcoming orders will be hazardous and cold using the order header; pre-allocate tokens to align with cold-station availability.  
• Expected outcome: Counter rarely hits 10, so non-hazardous flow is not blocked; overall throughput  8-10 %.  

Optional Strategy DSmall-Scale Capacity Boost + Cross-Training  
• Add one mobile cold-packing cart (CAPEX friendly) and cross-train staff so that Quality-Check area can temporarily absorb cold-packing overflow.  
• Addresses Cold-Packing & priority interaction; modelled in simulation to confirm ROI.  

=====================================================================
SECTION 4Simulation and Validation Plan
=====================================================================

1. Build a discrete-event simulation (DES) using:  
   • Mined control-flow model (Petri-net or BPMN) with service-time distributions per activity.  
   • Resource pools:  
     – Standard pack stations (unlimited in this example)  
     – Cold-pack pool (5 units)  
     – QC staff, pickers, etc.  
     – HM token pool (10 tokens).  
   • Priority rules and pre-emption logic coded exactly as observed.  
   • Batch entity representing a group of orders that triggers the Shipping-label activity.  

2. Calibrate with three-month log: fit distributions for durations, inter-arrival times, order-type mix. Validate that baseline KPI results from simulation replicate historical KPIs (±5 %).  

3. Experiments  
   • Run baseline vs Strategy A/B/C (individually and combined) with 500 replications each.  
   • KPIs: End-to-end time, Wait_CP, Wait_Batch, SLA compliance rate, % time HM counter = 10, utilisation of cold stations, truck fill rate.  
   • Check constraint compliance in every run (e.g., never >10 HM simultaneously).  

4. Sensitivity analyses  
   • Peak-season arrival rate +30 %.  
   • Express-order proportion doubled.  
   • Cold-station breakdown scenarios.  

=====================================================================
SECTION 5Post-Implementation Monitoring
=====================================================================

Dashboards (updated daily, drill-down to 15-min granularity):

1. Constraint-Specific Queues  
   • Cold-Packing queue length & average wait, split by Express vs Standard.  
   • # of hazardous orders currently in Packing+QC vs limit (red band at 10).  

2. Batch Performance  
   • Median & 95th percentile Wait_Batch per region.  
   • Distribution of actual batch sizes vs target (N).  
   • % batches closed by time-cap vs count-cap.  

3. Pre-Emption Tracker  
   • Count_Preemptions and cumulative delay imposed on Standard orders.  
   • Heat map of which stations incur most pre-emptions.  

4. End-to-End & SLA  
   • Lead-time histogram per order type.  
   • SLA miss rate with root-cause tags (Cold-pack, Batch, HM cap, Other).  

5. Compliance Alarms  
   • Real-time alert if HM counter reaches 9 (yellow) or 10 (red).  
   • Alert if any Express order waits > threshold at Cold-Packing.  

Continuous improvement loop: weekly review of dashboards  feed new data into the DES model  retune parameters (reservations X, batch (N,T), token priorities) as demand patterns evolve.

=====================================================================
Summary
=====================================================================
By mining the event log for cross-case dependencies, explicitly measuring waiting times attributable to each constraint, analysing their interactions, and testing targeted optimisation tactics in a calibrated simulation, the fulfilment centre can confidently implement dynamic slot reservation, adaptive batching, and token-based hazardous scheduling. Ongoing process-mining dashboards ensure that the instance-spanning constraints remain under control while end-to-end performance meets peak-season delivery targets.