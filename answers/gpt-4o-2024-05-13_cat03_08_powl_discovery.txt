To model the given complex event log using the Partially Ordered Workflow Language (POWL), we need to create POWL constructs for each activity and handle the different paths, loops, concurrent activities, and choices based on the sequences detailed in the event log.

#### Step-by-Step Analysis and Construction:

1. **Activities as Transitions**:
   - OR: Order Received
   - MS: Material Sourcing
   - QS: Quality Screening
   - AS: Assembly
   - IQC: In-line Quality Check
   - TST: Testing
   - RT: Re-Testing
   - PK: Packaging
   - LB: Labeling
   - DP: Distribution Planning
   - D: Dispatch
   - Silent transition (skip) to represent optional steps (like Labeling).

2. **Choices (XOR)**:
   - Labeling, which might be skipped.
3. **Loops**:
   - Between TST and RT.
   - IQC and AS.

4. **Partial Order**:
   - Order constraints between activities.

Here is the POWL model that captures this workflow:

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities as transitions
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()

# Define loops
loop_IQC_AS = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])
loop_TST_RT = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Define choices
xor_LB = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

# Define the partial order
root = StrictPartialOrder(nodes=[OR, MS, QS, loop_IQC_AS, loop_TST_RT, PK, xor_LB, DP, D])
root.order.add_edge(OR, MS)          # Order received -> Material sourcing
root.order.add_edge(MS, QS)          # Material sourcing -> Quality screening
root.order.add_edge(QS, AS)          # Quality screening -> Assembly
root.order.add_edge(AS, loop_IQC_AS) # Assembly -> Loop IQC-AS
root.order.add_edge(loop_IQC_AS, loop_TST_RT)  # IQC-AS Loop -> TST-RT Loop
root.order.add_edge(loop_TST_RT, PK) # Testing/Re-Testing Loop -> Packaging
root.order.add_edge(PK, xor_LB)      # Packaging -> Labeling (or skip)
root.order.add_edge(xor_LB, DP)      # Label (or skip) -> Distribution planning
root.order.add_edge(DP, D)           # Distribution planning -> Dispatch
```

### Explanation:

1. **Basic Transitions:**
   - Defined each activity as a `Transition`.
2. **Loops:**
   - `loop_IQC_AS` handles the loop between IQC and Assembly: If IQC fails, it goes back to Assembly.
   - `loop_TST_RT` handles the loop between TST and RT: If the product fails the testing, it goes back for re-testing.
3. **Choices:**
   - `xor_LB` handles the optional Labeling step, which includes the choice to skip.
4. **Partial Order:**
   - Strictly defined the order of execution to reflect dependencies and possible parallel executions.

This POWL model accurately captures the described manufacturing and distribution process while allowing for loops, choices, and partial ordering to handle the concurrency and specific flow requirements as detailed in the event logs.