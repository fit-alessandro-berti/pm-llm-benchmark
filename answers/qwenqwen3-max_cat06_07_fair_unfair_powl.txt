Below are two **POWL (Partially Ordered Workflow Language)** models representing the hiring process at *GlobalTeq Solutions*, as described. Both models use the same set of core activities but differ in how the **cultural fit and community affiliation** step is handled—one includes a potentially biased XOR branch, and the other ensures uniform treatment.

We'll use the following activity labels (as `Transition` objects):
- `"ReceiveApplication"`
- `"DataCompletenessCheck"`
- `"RequestMoreInfo"` (used in the loop for incomplete data)
- `"SkillAssessment"`
- `"CulturalFitCheck"` (standard, unbiased evaluation)
- `"CommunityAffiliationCheck"` (biased path that may confer advantage)
- `"ManagerialReview"`
- `"FinalDecision"`

We also use:
- `Operator.XOR` for exclusive choice
- `Operator.LOOP` for the data completeness loop
- `StrictPartialOrder` to sequence steps and enforce dependencies

---

### **1. POWL Model with Potential Unfairness**

This model includes an **XOR split** after the skill assessment:  
- One branch leads to the standard `"CulturalFitCheck"`  
- The other leads to `"CommunityAffiliationCheck"` (which may give an implicit advantage)

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Core activities
receive_app = Transition(label="ReceiveApplication")
data_check = Transition(label="DataCompletenessCheck")
request_info = Transition(label="RequestMoreInfo")
skill_assess = Transition(label="SkillAssessment")
cultural_fit = Transition(label="CulturalFitCheck")
community_check = Transition(label="CommunityAffiliationCheck")
manager_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# Loop for data completeness: DataCompletenessCheck -> (if incomplete) RequestMoreInfo -> repeat
data_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_check, request_info])

# XOR between standard cultural fit and community-based path
cultural_xor = OperatorPOWL(operator=Operator.XOR, children=[cultural_fit, community_check])

# Build main sequence
root = StrictPartialOrder(nodes=[
    receive_app,
    data_loop,
    skill_assess,
    cultural_xor,
    manager_review,
    final_decision
])

# Enforce order
root.order.add_edge(receive_app, data_loop)
root.order.add_edge(data_loop, skill_assess)
root.order.add_edge(skill_assess, cultural_xor)
root.order.add_edge(cultural_xor, manager_review)
root.order.add_edge(manager_review, final_decision)
```

> **Where unfairness arises**: The `XOR` choice means applicants are routed down different evaluation paths based on optional questionnaire data (e.g., club membership or local residency). The `"CommunityAffiliationCheck"` path may result in a higher effective cultural fit score, even if not explicitly scored—introducing **structural bias**.

---

### **2. POWL Model Without Unfairness**

This model **removes the XOR branch** and ensures **all applicants undergo the same `"CulturalFitCheck"`**, with no special path for community affiliations. Optional affiliation data may still be collected but does **not alter the workflow path**.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Core activities (note: no CommunityAffiliationCheck as a separate path)
receive_app = Transition(label="ReceiveApplication")
data_check = Transition(label="DataCompletenessCheck")
request_info = Transition(label="RequestMoreInfo")
skill_assess = Transition(label="SkillAssessment")
cultural_fit = Transition(label="CulturalFitCheck")  # Uniform for all
manager_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# Same data completeness loop
data_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_check, request_info])

# No XOR — only one cultural evaluation path
root = StrictPartialOrder(nodes=[
    receive_app,
    data_loop,
    skill_assess,
    cultural_fit,
    manager_review,
    final_decision
])

# Enforce sequential order
root.order.add_edge(receive_app, data_loop)
root.order.add_edge(data_loop, skill_assess)
root.order.add_edge(skill_assess, cultural_fit)
root.order.add_edge(cultural_fit, manager_review)
root.order.add_edge(manager_review, final_decision)
```

> **Fairness safeguard**: All applicants follow the **exact same sequence** after skill assessment. Any use of community or affiliation data (if retained in background scoring) would need to be audited separately—but **the process structure itself is neutral**, eliminating the biased branching point.

---

### Summary of Differences

| Feature | Model 1 (Unfair) | Model 2 (Fair) |
|--------|------------------|----------------|
| Cultural evaluation path | XOR: `CulturalFitCheck` **or** `CommunityAffiliationCheck` | Single path: `CulturalFitCheck` for all |
| Structural bias risk |  Present (path-dependent advantage) |  Eliminated |
| Use of optional affiliation data | Affects workflow routing | Does **not** affect workflow routing |
| Compliance with fairness-by-design | Low | High |

These POWL models clearly illustrate how **process structure**—not just scoring algorithms—can embed or mitigate bias in hiring systems.