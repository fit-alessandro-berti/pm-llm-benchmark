Below is an example DuckDB SQL query that implements the described logic. Note that you will need to replace `K` in the query with the desired number of top variants to return.

**Explanation of the Steps:**

1. **Create a sequence per case:**  
   Using `STRING_AGG()` (or `LIST_AGG()` in newer versions of DuckDB), we build a single string that represents the ordered sequence of activities for each case, ordered by their timestamps.

2. **Identify top K variants:**  
   We group by these sequences to find unique variants and count how many cases follow each variant. We then limit to the top K most frequent variants.

3. **Filter the original events:**  
   We select only those events whose `case_id` matches the top K variants identified.

**Query:**

```sql
WITH case_sequences AS (
    SELECT
        case_id,
        string_agg(activity, '->' ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
),
top_variants AS (
    SELECT
        variant,
        COUNT(*) AS variant_count
    FROM case_sequences
    GROUP BY variant
    ORDER BY variant_count DESC
    LIMIT K -- Replace K with the desired number of top variants
),
filtered_cases AS (
    SELECT
        case_id
    FROM case_sequences
    WHERE variant IN (SELECT variant FROM top_variants)
)
SELECT
    e.*
FROM event_log e
JOIN filtered_cases fc ON e.case_id = fc.case_id
ORDER BY e.case_id, e.timestamp;
```

**Notes:**
- Ensure that DuckDB version supports the window functions and `string_agg()` as used. In recent versions of DuckDB, `string_agg()` is supported. If not, consider using `LIST_AGG()` followed by `LIST_TO_STRING()` if needed.
- The `ORDER BY e.case_id, e.timestamp` at the end is optional, but it can help present the final result in a sensible, chronological order per case.