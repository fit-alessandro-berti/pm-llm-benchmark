To solve this, we need to:

1. Order the events per `case_id` by `timestamp`.
2. Use a window function to identify sequences of three directly successive events.
3. Identify cases where the sequence is exactly:  
   `'Approve Purchase Requisition'`  `'Create Order'`  `'Confirm Order'`, **with no interruption**.
4. For these sequences, calculate the time difference between `'Create Order'` and `'Confirm Order'`.
5. Keep sequences where the time difference is **more than 5 days**.
6. Exclude those `case_id`s from the final result.

Here’s how you can achieve this in DuckDB SQL:

```sql
WITH ordered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
    FROM event_log
),
triplets AS (
    SELECT
        e1.case_id,
        e1.timestamp AS ts1,
        e2.timestamp AS ts2,
        e3.timestamp AS ts3
    FROM ordered_events e1
    JOIN ordered_events e2
        ON e1.case_id = e2.case_id AND e2.rn = e1.rn + 1
    JOIN ordered_events e3
        ON e1.case_id = e3.case_id AND e3.rn = e1.rn + 2
    WHERE 
        e1.activity = 'Approve Purchase Requisition' AND
        e2.activity = 'Create Order' AND
        e3.activity = 'Confirm Order' AND
        e3.timestamp - e2.timestamp > INTERVAL '5 days'
),
cases_to_exclude AS (
    SELECT DISTINCT case_id FROM triplets
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, timestamp;
```

### Explanation:

- **`ordered_events`** assigns a row number to each event within a case ordered by timestamp.
- **`triplets`** checks for every 3-event window if the exact sequence matches and if the time from `'Create Order'` to `'Confirm Order'` is more than 5 days.
- **`cases_to_exclude`** lists the matching `case_id`s.
- **Final `SELECT`** filters out these cases and returns the rest of the events ordered by `case_id` and `timestamp`.

This ensures only cases that **do not** have that exact sequence with >5-day gap are returned.