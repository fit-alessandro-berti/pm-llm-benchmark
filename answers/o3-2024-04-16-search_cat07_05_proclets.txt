The figure is composed of three related parts that together illustrate how two collaborating “procol” (protocol) classes are modelled, related and enacted in a hospitallaboratory scenario.

(a) Behaviour of the two procol classes, linked by two channels  
• Left column – Lab visit procol  
  – Begins at the solid black circle (initial state).  
  – Steps performed by different roles are shown as rounded rectangles:  
    1. Order entry (doctor)  
    2. Take blood sample (lab assistant)  
    3. Judge results (lab assistant) – decision point.  
       • If everything is fine (green branch) the visit proceeds to Send report and terminates (right-hand black circle).  
       • If additional analyses are needed (red branch) it moves to Do tests again, waits for an updated result, then re-enters Judge results.  
  – Small open circles mark receive states where the visit procol waits for messages coming from the Lab test procol.  
• Right column – Lab test procol  
  – Starts with Perform test (chemical analyst), continues to Make report, and normally finishes in Finish lab test (black circle).  
  – If a repeat test is requested, Perform test again and Provide updated report are executed before finalisation.  
• Dotted, labelled arrows between the two columns represent message exchanges that travel through channels:  
  – Channel “Order system” (upper dashed frame) carries messages 1.0 and 1.1 (ordering a test and returning the first report).  
  – Channel “HIS” (lower dashed frame) carries messages 1.2 and 1.3 (repeat order and updated report).  
  – Each arrow is numbered (1.0 … 1.3) and its head is placed on the state where the message is consumed; its tail is on the state that creates the message.

(b) Class diagram of the collaborating procol classes  
The static view shows that a Lab visit requires one or more Lab test instances (multiplicity 1..* on the Lab test side, 1 on the Lab visit side).

(c) Example performative (runtime message instance)  
A single log entry is shown in tabular form:  
Time: 11:00  
Channel: Order system  
Sender: Lab visit – HGB John  
Receivers: Lab test – HGB John  
Action: Create  
Content: “Can you perform an HGB test for John?”  
Scope: Private  
Direction: OUT  

In essence, the visualisation demonstrates:
• How the procedural behaviour of two separate but related processes (visit and test) is modelled.  
• How they are structurally related in the class diagram.  
• How an individual message (“performative”) looks at execution time.