**DuckDB SQL Query:**

```sql
WITH ActivitySequences AS (
    SELECT
        case_id,
        STRING_AGG(activity ORDER BY timestamp) WITHIN GROUP (ORDER BY min(timestamp)) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

UniqueVariants AS (
    SELECT DISTINCT activity_sequence
    FROM ActivitySequences
),

VariantCounts AS (
    SELECT activity_sequence, COUNT(*) AS variant_count
    FROM ActivitySequences
    GROUP BY activity_sequence
),

TopKVariants AS (
    SELECT *
    FROM VariantCounts
    ORDER BY variant_count DESC
    LIMIT :k -- Replace :k with the desired value for K
)

SELECT el.*
FROM event_log el
JOIN ActivitySequences as as_ ON el.case_id = as_.case_id
WHERE as_.activity_sequence IN (SELECT activity_sequence FROM TopKVariants);
```

### Explanation:

1. **ActivitySequences**: 
   - This Common Table Expression (CTE) generates the sequence of activities for each `case_id`, ordered by `timestamp`. It uses `STRING_AGG` to concatenate activities within each case while ordering them correctly.

2. **UniqueVariants**: 
   - Extracts unique activity sequences from `ActivitySequences`, ensuring we consider only distinct process variants.

3. **VariantCounts**: 
   - Counts the number of occurrences for each variant across all cases by aggregating on `activity_sequence`.

4. **TopKVariants**: 
   - Orders the variants by their frequency (`variant_count`) and selects the top K (specified by `:k`).

5. **Final SELECT Statement**:
   - Joins back to the original `event_log` table using `case_id`, filtering only those rows where the activity sequence matches one of the top K variants identified earlier. This ensures that we retrieve events belonging exclusively to cases following these most frequent process variants, excluding any others.

### Note:
- Replace `:k` with your specific value for `K`. The actual performance and execution might require index creation on `case_id`, `activity`, and `timestamp` columns for optimal speed, especially with large datasets.