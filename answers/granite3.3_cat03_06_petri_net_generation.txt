```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net object
net = PetriNet(name="InsuranceClaimManagement")

# Define places
start = PetriNet.Place(name="Start")
claim_registered = PetriNet.Place(name="ClaimRegistered")
document_verified = PetriNet.Place(name="DocumentVerified")
fraud_checked = PetriNet.Place(name="FraudChecked")
claim_assessed = PetriNet.Place(name="ClaimAssessed")
approved = PetriNet.Place(name="Approved")
payment_processed = PetriNet.Place(name="PaymentProcessed")
notification_sent = PetriNet.Place(name="NotificationSent")
closure_achieved = PetriNet.Place(name="ClosureAchieved")
re_document_submission = PetriNet.Place(name="ReDocumentSubmission")
in_depth_investigation = PetriNet.Place(name="InDepthInvestigation")

# Add places to the net
net.places.extend([start, claim_registered, document_verified, fraud_checked,
                   claim_assessed, approved, payment_processed, notification_sent, 
                   closure_achieved, re_document_submission, in_depth_investigation])

# Define transitions with their input and output places
register_claim = PetriNet.Transition(name="RegisterClaim", input_place=start, output_place=claim_registered)
verify_documents = PetriNet.Transition(name="VerifyDocuments", input_place=claim_registered, 
                                      output_place=document_verified)
re_submit_docs = PetriNet.Transition(name="ReSubmitDocs", input_place=document_verified, 
                                    output_place=re_document_submission)
fraud_check = PetriNet.Transition(name="FraudCheck", input_place=document_verified, 
                                output_place=fraud_checked)
in_depth_investigate = PetriNet.Transition(name="InDepthInvestigation", input_place=fraud_checked, 
                                         output_place=in_depth_investigation)
check_assessment = PetriNet.Transition(name="CheckAssessment", input_place=in_depth_investigation, 
                                      output_place=claim_assessed)
approve_claim = PetriNet.Transition(name="ApproveClaim", input_place=claim_assessed, 
                                    output_place=approved)
process_payment = PetriNet.Transition(name="ProcessPayment", input_place=approved, 
                                     output_place=payment_processed)
send_notification = PetriNet.Transition(name="SendNotification", input_place=payment_processed, 
                                      output_place=notification_sent)
close_claim = PetriNet.Transition(name="CloseClaim", input_place=notification_sent, 
                                 output_place=closure_achieved)

# Add transitions to the net
net.transitions.extend([register_claim, verify_documents, re_submit_docs, fraud_check,
                        in_depth_investigate, check_assessment, approve_claim, process_payment, 
                        send_notification, close_claim])

# Define arcs connecting places and transitions
petri_utils.add_arc_from_to(start, register_claim, net)
petri_utils.add_arc_from_to(register_claim, claim_registered, net)
petri_utils.add_arc_from_to(claim_registered, verify_documents, net)
petri_utils.add_arc_from_to(verify_documents, document_verified, net)
petri_utils.add_arc_from_to(document_verified, re_submit_docs, net)
petri_utils.add_arc_from_to(re_submit_docs, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, fraud_checked, net)
petri_utils.add_arc_from_to(fraud_checked, in_depth_investigate, net)
petri_utils.add_arc_from_to(in_depth_investigate, claim_assessed, net)
petri_utils.add_arc_from_to(claim_assessed, check_assessment, net)
petri_utils.add_arc_from_to(check_assessment, approve_claim, net)
petri_utils.add_arc_from_to(approve_claim, process_payment, net)
petri_utils.add_arc_from_to(process_payment, send_notification, net)
petri_utils.add_arc_from_to(send_notification, close_claim, net)
petri_utils.add_arc_from_to(close_claim, closure_achieved, net)
petri_utils.add_arc_from_to(in_depth_investigate, fraud_checked, net) # Loop back if investigation needed
petri_utils.add_arc_from_to(document_verified, re_submit_docs, net)   # Loop back for resubmission

# Define initial marking
im = Marking()
im[start] = 1

# Define final marking
fm = Marking()
fm[closure_achieved] = 1

# Remove places not part of the final marking
petri_utils.remove_place(net, start)
del im[start]
```

In this Petri net construction for an insurance claim management process:

- Places represent the different states (e.g., Start, ClaimRegistered, DocumentVerified).
- Transitions represent activities (e.g., RegisterClaim, VerifyDocuments).
- Arcs connect places and transitions, defining the control flow of the process.
- The Petri net allows for loops (re-submission after document verification and multiple in-depth investigations if needed).
- Initial marking `im` starts a new claim with a token at the 'Start' place.
- Final marking `fm` indicates a closed claim, placing a token at the `ClosureAchieved` place.