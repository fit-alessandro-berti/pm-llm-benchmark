### 1. Process Discovery and Conformance Checking

**Data Integration and Preprocessing:**
To build a cohesive event log for process mining, the multi-source data from GPS trackers, driver scanners, dispatch systems, and maintenance logs would first be integrated into a unified data format. This involves:
- **Normalization**: Aligning the event types (e.g., 'Arrive Depot', 'Unscheduled Stop'), timestamps to a common time zone, and merging session identifiers like `Case ID` to track each delivery's lifecycle.
- **Enrichment**: Adding contextual metadata (e.g., customer time windows, vehicle capacity constraints from dispatch system, maintenance events from logs) to enrich events without overwhelming the model.
- **Noise Reduction**: Filtering spurious events (e.g., repeated 'Depart Customer' entries within seconds) or inconsistencies (e.g., a GPS stop point with a speed of 0 correctly attributed to 'Low Speed Detected').
- **Temporal Alignment**: Ensuring timestamps are synchronized across systems, especially GPS and scanners, to create a real-time or near-real-time timeline.

**Challenges**:
- **Temporal Discrepancies**: GPS events may lag behind scanner timestamps due to transmission delays.
- **Spatial Ambiguity**: GPS coordinates might require geocoding to match customer locations precisely.
- **Missing Data**: Scanner events (e.g., 'Stop 1') could be missing GPS updates if drivers disable GPS for privacy.
- **Granularity Issues**: Vehicle Speed logs are typically minute-level, while GPS tracks are every few seconds, requiring downsampling or upsampling for process modeling.

**Process Discovery:**
Using Minimum Cost Flow (MCF) or Inductive Process Mining (IPM) algorithms in tools like Celonis or Disco:
- **Workflow Visualization**: Generating process models showing rounds of activity cycles (e.g., "Depart Depot  Arrive Customer  Depart Customer  Fork in: Depot Stop (Unscheduled)  Continue Route").
- **Identified Phases**:
  - **Route Consistency Checks**: Ensuring deliveries adhere to planned stop sequences and time windows.
  - **Deviational Analysis**: Capturing stops like 'Unscheduled Stop' (indicating maintenance queries), 'Delivery Failed,' and 'Traffic Jam' delays.

**Conformance Checking:**
Comparing the discovered process model (actual) against the dispatch-supplied plan (reference model) reveals:
- **Sequence Deviations**: Zigzag routes or skipped stops (e.g., a vehicle proceeding from 'Stop 3  5' instead of '3  4  5').
- **Unplanned Stops**: Maintenance halts or 'Traffic Jam' detours not accounted for in the plan.
- **Timing Variations**: Delays exceeding predefined thresholds for unplanned events (e.g., a traffic stop lasting 20 minutes beyond an expected 5 minutes).
- **Order Violations**: Failures where drivers departed customers out of sequence specified in the dispatch plan.

---

### 2. Performance Analysis and Bottleneck Identification

**Key Performance Indicators (KPIs)**:
- **On-Time Delivery Rate**: % of deliveries arriving within the customer’s requested time window.
- **Average Time per Delivery Stop**: Mean duration spent handling each stop (shipping/unloading/scanning), flagging inefficiencies.
- **Travel vs. Service Time Ratio**: (Total travel time) / (Total time per delivery, including service and stops). >100% indicates poor route optimization.
- **Fuel Consumption (kWh/km or liters/package)**: Calculated via total distance and fuel usage logs.
- **Vehicle Utilization Rate**: % of time vehicles are actively deploying vs. idle (e.g., weekends).
- **Delivery Failure Rate**: Frequency of failed deliveries per total attempts, stratified by cause (e.g., customer unavailable, traffic, failed scan).

**Event Log Calculation**:
- Acerbi timesegments: Discretize timestamps (e.g., 1-min intervals), compute durations between consecutive events (e.g., 'Arrive Depot' to 'Depart Depot').
- **Service Time Calculation**: Delay between 'Arrive Customer' and 'Depart Customer' minus scrolling time for unscanned packages.
- **Traffic Delay Attribution**: If GPS speed > 0 but location matches static (unlikely), but generally inferred via deviation from route.

**Bottleneck Detection**:
- **Process Mining Tools**: Use Mamata (Celonis) or ProM to flag:
  - **Sequential Bottlenecks**: Frequent 'Traffic Jam' delays clustering on specific routes.
  - **Temporal Bottlenecks**: Peak-hour traffic hotspots (e.g., 5–7 PM in downtown) causing consistent 15–20 min delays.
  - **Driver/Resource Bottlenecks**: Instances where drivers spend >10-min idling (e.g., waiting at stoplights or parking).
  - **Customer-Related**: 'Delivery Failed' spikes correlating with time-of-day (e.g., evenings due to customers not home).
  - **Traffic and Dwell Analysis**: Correlate GPS speeds with external traffic APIs (e.g., Google Maps) to identify hotspots and dwell times exceeding service time.

---

### 3. Root Cause Analysis for Inefficiencies

**Potential Root Causes**:
- **Static Route Planning**: Predefined routes ignoring real-time traffic or order updates.
- **Inexact Travel Time Estimates**: Over-reliance on historical averages vs. live traffic (e.g., 10-min route was booked, but 30-min due to congestion).
- **Traffic Congestion Patterns**: High roadway density in areas like 'Main Street', causing unplanned rerouting.
- **Service Time Variability**: Drivers' inconsistent scanning/loading times due to poor ergonomics or untrained staff.
- **Maintenance Disruptions**: Unexpected breakdowns at shift midpoints, causing recovery time delays.
- **Failed Delivery Frequency**: High defaults from customers being unavailable; unclear time windows.

**Process Mining Validation**:
- **Variant Analysis**: Compare delivery routes optimized by algorithm vs. real-world deviations. High deviation rates indicate inflexible planning.
- **Correlation Analysis**: Link 'Delivery Failed' events with real-time traffic data via time-window overlaps (e.g., stop B at 8 PM with PM traffic hotspots).
- **Dwell Time Analysis**: Identify stops with dwell times exceeding 90% of the average (from historical data), flagging slower services.
- **Sequence Profiling**: Compare routes of 'Jagger' drivers (often late) vs. 'Efficient' drivers, noting common bottlenecks (e.g., frequent stops at certain addresses).

---

### 4. Data-Driven Optimization Strategies

#### **Strategy 1: Dynamic Route Replanning with Real-Time Data Integration**
- **Target**: Reduce traffic-induced delays and unplanned stops.
- **Root Cause Addressed**: Static routing; reliance on outdated travel times.
- **Process Mining Support**: Event logs reveal that 40% of 'Traffic Jam' delays occur on 'Highway A'. Integrating real-time traffic APIs (e.g., TomTom) into the dispatch system feeds graphs into an MCF engine, enabling on-the-fly rerouting. E.g., if GPS detects a traffic jam on Highway A, the algorithm suggests an alternate route with similar duration but no congestion.
- **Expected KPI Impacts**:
  - Reduce average delay at traffic hotspots: from 15 min to 5 min (20% improvement).
  - Lower fuel consumption by avoiding congestion (5% reduction).
  - Improve On-Time Delivery Rate by 10–15%.

#### **Strategy 2: Predictive Maintenance Scheduling optimized via Usage Patterns**
- **Target**: Reduce unexpected breakdowns and unscheduled stops.
- **Root Cause Addressed**: Unplanned maintenance detours.
- **Process Mining Support**: Analyze maintenance logs alongside vehicle usage (e.g., mileage, delivery count, stop duration). Identify high-mileage vehicles or those with prolonged 'Unscheduled Stop' events. Combine with sensor data (injecting telematics if available) to predict failures. For example, a delivery driver spending 10-min idle at stop D repeatedly might have a vehicle with a questionable battery/engine.
- **Expected KPI Impacts**:
  - Reduce unscheduled stops due to mechanical issues: from 12% to 5%.
  - Lower maintenance-related delivery delays by 30%.

#### **Strategy 3: Customer Communication Optimization for Reducing Failed Deliveries**
- **Target**: Minimize 'Delivery Failed' attempts due to customer unavailability.
- **Root Cause Addressed**: Poor time-window management and delayed notifications.
- **Process Mining Support**: Track time-window adherence by analyzing 'Delivery Failed (Attempted)' events relative to logged windows. Customers like 'C123' typically arrive at 15:30–16:00; if deliveries are made between 16:30–17:00, failure risk spikes. Automated SMS/emails triggering just before arrival windows (if the driver is delayed beyond X minutes) reduce mismatches.
- **Expected KPI Impacts**:
  - Reduce 'Delivery Failed' attempts by 35%.
  - Improve Customer Satisfaction Score by 20% (via reduced re-delivery stress).

---

### 5. Operational Constraints and Continuous Monitoring

**Accounting for Constraints**:
- **Driver Working Hours**: Enforce MCF models with rules (e.g., daily driving limits, break times) in dispatch optimizations.
- **Vehicle Capacities**: Include load limits as constraints in vehicle assignment logic; edge-based downtime if overcapacity is detected.
- **Customer Time Windows**: Enforce mandatory window constraints (e.g., 'Stop A must be serviced between 10:00–11:00').
  
**Continuous Monitoring Plan**:
- **Process Mining Dashboards**:
  - **Real-Time Metrics**: Track On-Time Delivery Rate, Active Stops Per Driving Hour, Traffic Delay Per Route.
  - **Periodic Drills**: Run MCF analysis weekly to detect emerging process inefficiencies (e.g., new chequers causing delays).
  - **Anomaly Detection**: Alert on deviations from baseline (e.g., a route suddenly showing 25% sequence deviations).
- **Feedback Loop**: Incorporate driver feedback into process models (e.g., "Stop F often has poor parking—add parking search step").

By systematically leveraging log data, Speedy Parcels can transform reactive troubleshooting into proactive optimization, directly correlating operational data with strategic decisions to enhance efficiency and customer satisfaction.