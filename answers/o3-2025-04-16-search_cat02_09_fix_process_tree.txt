--------------------------------------------------
1. Problems with the current (under-fitting) model
--------------------------------------------------
•	The model puts **Create PO, Receive Goods, Receive Invoice, Match Invoice to PO and Pay Invoice in the same PARALLEL (AND) block**.  
– Because an AND-block has no internal order, any of those five activities may start as soon as the block is entered.  
– Therefore the model wrongly allows behaviour such as:  
• Pay Invoice before the goods have been received.  
• Match Invoice to PO before either the goodsreceipt or the supplier invoice exists.  
• Receive Invoice before a PO has even been issued, etc.

•	In a normal Procure-to-Pay (3-way-match) scenario the domain rules are:  
1. Create Purchase Requisition  
2. Approve Purchase Requisition  
3. Create Purchase Order  
4. Receive Goods (GR) -–OR–- Receive Invoice (IR)   both must be present before the next step  
5. Match Invoice to PO (3-way match: PO + GR + IR)  
6. Pay Invoice (only after successful match)  
7. Close Case

•	Consequently, only Receive Goods and Receive Invoice may occur in either order – everything else is strictly sequential.

--------------------------------------------------
2. Corrected process-tree model (pseudocode)
--------------------------------------------------
```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# Activities
create_req       = ProcessTree(label="Create_Purchase_Requisition")
approve_req      = ProcessTree(label="Approve_Purchase_Requisition")
create_po        = ProcessTree(label="Create_Purchase_Order")
receive_goods    = ProcessTree(label="Receive_Goods")
receive_invoice  = ProcessTree(label="Receive_Invoice")
match_invoice    = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice      = ProcessTree(label="Pay_Invoice")
close_case       = ProcessTree(label="Close_Case")

# Parallel block that ONLY contains the two events that may swap order
gr_ir_parallel = ProcessTree(
        operator=Operator.PARALLEL,          # AND-block
        children=[receive_goods, receive_invoice]
)

# Build the full, strictly ordered tree
root = ProcessTree(
        operator=Operator.SEQUENCE,
        children=[
            create_req,
            approve_req,
            create_po,
            gr_ir_parallel,      # both GR and IR must complete (any order) before continuing
            match_invoice,
            pay_invoice,
            close_case
        ]
)
```

(If one also wants to allow that occasionally *one* of the two receipts is not required, wrap `receive_goods` and/or `receive_invoice` in an OR-operator.  
That is not done here because the question required all given activities to be present.)

--------------------------------------------------
3. Why the new tree enforces correct behaviour
--------------------------------------------------
•	The **SEQUENCE** operator at the top level makes the entire process progress linearly from left to right; no later step can start until all earlier ones have completed.

•	The only concurrency that remains is the **PARALLEL (AND) block containing Receive Goods and Receive Invoice**.  
– Both events must occur exactly once, but their *relative* order is unconstrained – reflecting real business practice where the supplier’s invoice might arrive before or after the goods.  
– Because the AND-block sits *before* Match Invoice to PO, the match can only happen when *both* GR and IR exist (classic three-way match requirement).

•	Placing **Match Invoice to PO  Pay Invoice  Close Case** in sequence means:  
– The invoice cannot be paid unless it has been successfully matched.  
– The case cannot close until the payment is finished.

•	Removing the large parallel block for all five activities eliminates all previously allowed but illogical permutations (pay-before-receive, match-before-invoice, etc.).  
  The resulting model is therefore fitting and *sound* with respect to the intended Procure-to-Pay domain logic.