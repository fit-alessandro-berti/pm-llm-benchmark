To solve this problem, we need to identify the most frequent process variants (sequences of activities) from an event log and retrieve all events associated with cases belonging to these top variants. Here's how you can achieve this using DuckDB SQL:

### Solution Code

```sql
WITH case_variants AS (
    SELECT
        case_id,
        LIST(activity ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    SELECT
        variant,
        COUNT(*) AS case_count
    FROM case_variants
    GROUP BY variant
),
top_variants AS (
    SELECT
        variant
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT 5  -- Replace 5 with the desired K value
),
top_cases AS (
    SELECT
        case_id
    FROM case_variants
    INNER JOIN top_variants
        USING (variant)
)
SELECT
    event_log.*
FROM event_log
WHERE case_id IN (SELECT case_id FROM top_cases)
ORDER BY case_id, timestamp;
```

### Explanation

1. **Extract Process Variants per Case**:
   - **`case_variants` CTE**: For each `case_id`, aggregate the activities into an ordered list (using `LIST(activity ORDER BY timestamp)`), which represents the process variant for that case.

2. **Count Cases per Variant**:
   - **`variant_counts` CTE**: Group the results by `variant` and count how many cases correspond to each variant (`case_count`).

3. **Identify Top K Variants**:
   - **`top_variants` CTE**: Select the top K variants based on their frequency (`case_count`). Replace `LIMIT 5` with the desired value of K.

4. **Filter Cases in Top Variants**:
   - **`top_cases` CTE**: Retrieve all `case_id`s that belong to the top K variants by joining `case_variants` with `top_variants`.

5. **Retrieve All Events for Top Cases**:
   - The final query selects all events from the original `event_log` where the `case_id` is in the list of top cases, ensuring only those events are included in the result.

This approach efficiently identifies the most common process variants and filters the event log to include only relevant cases, maintaining their original order of events.