Here is a DuckDB SQL query that should accomplish what you described:
```sql
WITH ranked_variants AS (
  SELECT
    activity,
    ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS row_num,
    count(*) OVER (PARTITION BY sequence) AS variant_count
  FROM (
    SELECT
      case_id,
      activity,
      timestamp,
      array_join(array_agg(activity ORDER BY timestamp), ',') AS sequence
    FROM event_log
    GROUP BY case_id, activity, timestamp
  ) AS subquery
)
SELECT
  case_id,
  activities
FROM ranked_variants
WHERE variant_count = (
  SELECT DENSE_RANK() OVER (ORDER BY variant_count DESC) AS rank
  FROM (
    SELECT COUNT(*) AS variant_count
    FROM ranked_variants
    GROUP BY variant_count
  ) AS denserank
  WHERE rank <= 10  -- adjust K to desired value
);

WITH final_events AS (
  SELECT *
  FROM event_log
  JOIN (
    SELECT DISTINCT sequence
    FROM ranked_variants
    WHERE variant_count = (
      SELECT DENSE_RANK() OVER (ORDER BY variant_count DESC) AS rank
      FROM (
        SELECT COUNT(*) AS variant_count
        FROM ranked_variants
        GROUP BY variant_count
      ) AS denserank
      WHERE rank <= 10  -- adjust K to desired value
    )
  ) AS top_variants ON event_log.sequence = top_variants.sequence
)
SELECT * FROM final_events;
```
Here's a brief explanation of the query:

1. The first common table expression (CTE), `ranked_variants`, groups events by `case_id` and sorts the activities within each group by `timestamp`. It then uses `ROW_NUMBER` and `COUNT` window functions to assign a row number and count for each sequence of activities.
2. The second CTE, `final_events`, uses a self-join to select events that correspond to the top K variants. The subquery selects the top K sequences and joins these against the original `event_log` table using the `sequence` column.
3. The final query simply returns all the events that belong to the cases that follow the top K variants.

Note that the `K` value should be adjusted to the desired number of top variants. In this example, I used `10` as the value of `K`. Also, this solution assumes that the `sequence` column is generated by concatenating the `activity` values with commas, as in your description. If this is not the case, please adjust the query accordingly.