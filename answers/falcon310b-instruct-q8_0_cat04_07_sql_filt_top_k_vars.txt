```sql
WITH OrderedActivities AS (
    SELECT
        case_id,
        activity,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
    FROM
        event_log
),

VariantSequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ') WITHIN GROUP (ORDER BY rn) AS variant_sequence
    FROM
        OrderedActivities
    GROUP BY
        case_id
),

VariantCounts AS (
    SELECT
        variant_sequence,
        COUNT(*) AS variant_count
    FROM
        VariantSequences
    GROUP BY
        variant_sequence
),

TopKVariants AS (
    SELECT
        variant_sequence,
        variant_count
    FROM
        VariantCounts
    ORDER BY
        variant_count DESC
    LIMIT K  -- Replace K with the desired number of top variants
),

FilteredCases AS (
    SELECT
        case_id
    FROM
        VariantSequences
    WHERE
        variant_sequence IN (
            SELECT
                variant_sequence
            FROM
                TopKVariants
        )
)

SELECT
    *
FROM
    event_log
WHERE
    case_id IN (
        SELECT
            case_id
        FROM
            FilteredCases
    );
```

**Explanation:**

1. **OrderedActivities CTE:** This Common Table Expression (CTE) adds a row number to each activity within a case, ordered by the `timestamp`.

2. **VariantSequences CTE:** It aggregates the activities for each case into a single string (`variant_sequence`), ordered by the row number generated in the previous step.

3. **VariantCounts CTE:** This step counts the occurrences of each unique variant sequence.

4. **TopKVariants CTE:** Selects the top K variant sequences by their frequency (i.e., the number of cases that follow each variant).

5. **FilteredCases CTE:** Identifies the `case_id`s that belong to the top K variants.

6. **Final SELECT:** Returns all events from the original `event_log` that belong to the cases identified in the filtered cases, effectively excluding any cases not part of the top K variants.