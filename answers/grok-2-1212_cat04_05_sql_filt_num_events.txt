To address this task, we need to create a DuckDB SQL query that will filter out cases with more than six events and return the events from the remaining cases. Let's break down the approach and then construct the query:

1. **Count the number of events per `case_id`**: We'll use a subquery to calculate this.
2. **Filter out cases with more than six events**: We'll join this count with the original table and use a `WHERE` clause to filter.
3. **Return the full set of events for the remaining cases**: The final result will include all columns from the original table for the filtered cases.

Here's the DuckDB SQL query that accomplishes this:

```sql
-- Subquery to count events per case_id
WITH event_counts AS (
    SELECT case_id, COUNT(*) as event_count
    FROM event_log
    GROUP BY case_id
)

-- Main query to filter and return events
SELECT el.*
FROM event_log el
JOIN event_counts ec ON el.case_id = ec.case_id
WHERE ec.event_count <= 6
ORDER BY el.case_id, el.timestamp;
```

Let's break down the query:

1. **CTE (Common Table Expression) `event_counts`**:
   - This subquery calculates the number of events for each `case_id`.
   - It uses `GROUP BY case_id` to aggregate the counts.

2. **Main query**:
   - We join the original `event_log` table with our `event_counts` CTE.
   - The `WHERE` clause filters out any `case_id` where the `event_count` is greater than 6.
   - We select all columns (`*`) from the original `event_log` table for the remaining cases.

3. **Ordering**:
   - The results are ordered by `case_id` and then by `timestamp` to present the events in a logical order.

This query efficiently filters out cases with more than six events and returns all events from the remaining cases, meeting the requirements specified in the prompt.