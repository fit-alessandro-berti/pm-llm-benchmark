### Anomalies and Undesirable Behaviors in the Event Log

Based on the assumed normal process flow and the provided event log data, several anomalies and deviations from expected behavior are evident. These suggest potential operational inefficiencies, procedural violations, or systemic issues.

---

#### **Anomaly 1: Payment Received Before Credit Check (Case ID 1004)**

- **Observation:**  
  In `case_id = 1004`, the `Receive Payment` event (event_id=22, timestamp: `2024-02-01 09:05:00`) occurs **before** the `Perform Credit Check` (event_id=23, timestamp: `2024-02-01 09:20:00`).
  
- **Violation of Process Flow:**  
  According to the assumed flow, **credit check must precede payment** to mitigate risk of non-payment. Receiving payment before credit verification is a **critical compliance risk**.

- **Hypothesized Causes:**
  - **Manual override** by finance staff due to urgent customer request.
  - **System error** in event logging or workflow engine.
  - **Misconfigured business rules** allowing early payments for certain order types.
  - **Fraudulent behavior** (e.g., fake payment entry).

---

#### **Anomaly 2: Shipment Before Credit Check (Case ID 1003)**

- **Observation:**  
  In `case_id = 1003`, the `Ship Goods` event (event_id=17, `09:10:00`) occurs **before** `Perform Credit Check` (event_id=16, `09:00:00`)? Wait — actually, **credit check comes first** here (event_id=16 at 09:00, ship at 09:10), so this is **not** a violation.

>  Correction: This is **not** an anomaly — credit check precedes shipment.

But wait — let’s double-check the timeline:
- `event_id=16`: Perform Credit Check  `09:00:00`
- `event_id=17`: Ship Goods  `09:10:00`

 This is **valid**.

---

#### **Anomaly 3: Confirm Shipment After Ship Goods (Case ID 1003)**

- **Observation:**  
  `Confirm Shipment` (event_id=19, `09:45:00`) occurs **after** `Ship Goods` (event_id=17, `09:10:00`), which is **correct** in sequence.

>  This is **not** an anomaly.

But note: `Confirm Shipment` is **late** (09:45), and the `additional_info` says `late_confirmation=Y`. This indicates a **process delay**, not a logical error.

---

#### **Anomaly 4: Confirm Shipment Before Validate Stock (Case ID 1002)**

- **Observation:**  
  In `case_id = 1002`, `Confirm Shipment` (event_id=9, `08:25:00`) occurs **before** `Validate Stock` (event_id=12, `09:15:00`).

- **Violation of Process Flow:**  
  `Validate Stock` must occur **before** `Confirm Shipment` to ensure availability. Confirming shipment without stock validation risks **overpromising delivery**.

- **Hypothesized Causes:**
  - **Process bypass** due to time pressure.
  - **System bug** in event logging or workflow orchestration.
  - **Miscommunication** between logistics and warehouse teams.
  - **Lack of proper validation gates** in the system.

---

#### **Anomaly 5: Shipment Scheduled Without Credit Check (Case ID 1002)**

- **Observation:**  
  `Confirm Shipment` (event_id=9) occurs at `08:25:00`, but `Perform Credit Check` (event_id=11) is at `09:10:00`. So, shipment confirmation **precedes** credit check.

- **Violation:**  
  This is a **major procedural breach** — shipment should not be confirmed without credit approval.

- **Hypothesized Causes:**
  - **High-priority order** bypassing checks.
  - **Human error** or **misjudgment** by logistics manager.
  - **No enforcement** of credit check as a prerequisite.

---

#### **Anomaly 6: Invoice Issued Before Shipment (Case ID 1004)**

- **Observation:**  
  `Issue Invoice` (event_id=23, `09:20:00`) occurs **before** `Ship Goods` (event_id=25, `09:50:00`), but **after** `Confirm Shipment` (event_id=24, `09:25:00`).

- **Violation:**  
  While invoicing after shipment confirmation is acceptable, **issuing invoice before actual shipment** is **not standard**. Typically, invoices are issued **after** goods are shipped to avoid premature billing.

- **Hypothesized Causes:**
  - **Early billing policy** for certain customers.
  - **System timing issue** (e.g., invoice generated at confirmation, not at shipment).
  - **Manual invoice creation** without proper workflow control.

---

#### **Anomaly 7: Missing Credit Check (Case ID 1004)**

- **Observation:**  
  `case_id = 1004` has:
  - `Register Order` (21)
  - `Receive Payment` (22)
  - `Issue Invoice` (23)
  - `Confirm Shipment` (24)
  - `Ship Goods` (25)

  **No `Perform Credit Check` event at all.**

- **Critical Violation:**  
  **No credit check** was performed on a high-value order (`order_value = 3000.00`), despite the process requiring it.

- **Hypothesized Causes:**
  - **System failure** in triggering credit check.
  - **Process bypass** due to high-value customer or urgency.
  - **Missing data** or **logging error**.
  - **Role-based access** allowing certain users to skip checks.

---

#### **Anomaly 8: Late Confirmation of Shipment (Case ID 1003)**

- **Observation:**  
  `Confirm Shipment` (event_id=19, `09:45:00`) is **35 minutes after** `Ship Goods` (event_id=17, `09:10:00`), and marked as `late_confirmation=Y`.

- **Hypothesized Causes:**
  - **Manual delay** in updating system.
  - **Lack of real-time integration** between warehouse and logistics systems.
  - **Inadequate monitoring** or alerting.

---

### Summary of Key Anomalies

| Case ID | Anomaly Description | Severity | Process Step Violated |
|--------|----------------------|----------|------------------------|
| 1002 | Confirm Shipment before Validate Stock | High | Stock Validation |
| 1002 | Confirm Shipment before Credit Check | Critical | Credit Check |
| 1004 | Receive Payment before Credit Check | Critical | Credit Check |
| 1004 | No Credit Check at all | Critical | Credit Check |
| 1004 | Issue Invoice before Ship Goods | Medium | Shipment  Invoice |
| 1003 | Late Confirmation of Shipment | Medium | Shipment Confirmation |

---

### Proposed SQL Queries for Investigation

Below are targeted SQL queries to investigate the anomalies **without any hints**. These queries are designed to **isolate suspicious cases**, **validate process sequences**, and **cross-reference with metadata** (from `orders` and `resources`).

---

#### **1. Find orders where payment is received before credit check (or missing credit check)**

```sql
SELECT 
    o.case_id,
    o.customer_id,
    o.order_type,
    o.order_value,
    ol1.timestamp AS payment_timestamp,
    ol2.timestamp AS credit_check_timestamp,
    CASE 
        WHEN ol2.timestamp IS NULL THEN 'MISSING_CREDIT_CHECK'
        WHEN ol1.timestamp < ol2.timestamp THEN 'PAYMENT_BEFORE_CREDIT_CHECK'
        ELSE 'NORMAL'
    END AS anomaly_type
FROM order_event_log ol1
JOIN orders o ON ol1.case_id = o.case_id
LEFT JOIN order_event_log ol2 
    ON ol1.case_id = ol2.case_id 
    AND ol2.activity = 'Perform Credit Check'
WHERE ol1.activity = 'Receive Payment'
  AND ol1.timestamp < COALESCE(ol2.timestamp, '9999-12-31 23:59:59')
ORDER BY o.order_value DESC;
```

---

#### **2. Identify cases where shipment confirmation occurs before stock validation**

```sql
SELECT 
    ol1.case_id,
    ol1.resource AS confirm_shipment_resource,
    ol1.timestamp AS confirm_shipment_time,
    ol2.timestamp AS validate_stock_time,
    EXTRACT(EPOCH FROM (ol1.timestamp - ol2.timestamp)) / 60 AS minutes_before
FROM order_event_log ol1
JOIN order_event_log ol2 
    ON ol1.case_id = ol2.case_id
WHERE ol1.activity = 'Confirm Shipment'
  AND ol2.activity = 'Validate Stock'
  AND ol1.timestamp < ol2.timestamp
ORDER BY minutes_before DESC;
```

---

#### **3. Find cases where shipment occurs before credit check**

```sql
SELECT 
    ol1.case_id,
    ol1.resource AS ship_goods_resource,
    ol1.timestamp AS ship_goods_time,
    ol2.timestamp AS credit_check_time,
    EXTRACT(EPOCH FROM (ol1.timestamp - ol2.timestamp)) / 60 AS minutes_before
FROM order_event_log ol1
JOIN order_event_log ol2 
    ON ol1.case_id = ol2.case_id
WHERE ol1.activity = 'Ship Goods'
  AND ol2.activity = 'Perform Credit Check'
  AND ol1.timestamp < ol2.timestamp
ORDER BY minutes_before DESC;
```

---

#### **4. Detect orders with no credit check event**

```sql
SELECT 
    o.case_id,
    o.customer_id,
    o.order_type,
    o.order_value,
    r.department,
    r.role
FROM orders o
JOIN resources r ON r.resource_id = 'CreditOfficer_1' -- or any CreditOfficer
WHERE o.case_id NOT IN (
    SELECT DISTINCT case_id 
    FROM order_event_log 
    WHERE activity = 'Perform Credit Check'
)
ORDER BY o.order_value DESC;
```

---

#### **5. Check for invoice issued before shipment**

```sql
SELECT 
    ol1.case_id,
    ol1.resource AS invoice_resource,
    ol1.timestamp AS invoice_time,
    ol2.timestamp AS ship_goods_time,
    EXTRACT(EPOCH FROM (ol1.timestamp - ol2.timestamp)) / 60 AS minutes_before
FROM order_event_log ol1
JOIN order_event_log ol2 
    ON ol1.case_id = ol2.case_id
WHERE ol1.activity = 'Issue Invoice'
  AND ol2.activity = 'Ship Goods'
  AND ol1.timestamp < ol2.timestamp
ORDER BY minutes_before DESC;
```

---

#### **6. Identify late shipment confirmations (delay > 30 min)**

```sql
SELECT 
    ol1.case_id,
    ol1.resource AS confirm_shipment_resource,
    ol1.timestamp AS confirm_shipment_time,
    ol2.timestamp AS ship_goods_time,
    EXTRACT(EPOCH FROM (ol1.timestamp - ol2.timestamp)) / 60 AS delay_minutes
FROM order_event_log ol1
JOIN order_event_log ol2 
    ON ol1.case_id = ol2.case_id
WHERE ol1.activity = 'Confirm Shipment'
  AND ol2.activity = 'Ship Goods'
  AND ol1.timestamp > ol2.timestamp
  AND EXTRACT(EPOCH FROM (ol1.timestamp - ol2.timestamp)) / 60 > 30
ORDER BY delay_minutes DESC;
```

---

#### **7. Cross-reference anomalies with resource roles (e.g., who skipped checks?)**

```sql
SELECT 
    ol.case_id,
    ol.activity,
    ol.resource,
    r.role,
    r.department,
    ol.timestamp,
    o.order_value
FROM order_event_log ol
JOIN resources r ON ol.resource = r.resource_id
JOIN orders o ON ol.case_id = o.case_id
WHERE ol.activity IN ('Receive Payment', 'Confirm Shipment', 'Issue Invoice')
  AND ol.case_id IN (
    SELECT case_id 
    FROM order_event_log 
    WHERE activity = 'Receive Payment'
    AND case_id NOT IN (
      SELECT DISTINCT case_id 
      FROM order_event_log 
      WHERE activity = 'Perform Credit Check'
    )
  )
ORDER BY ol.timestamp;
```

---

### Final Note

These SQL queries are **self-contained**, **data-driven**, and designed to **uncover root causes** behind process violations. They can be executed in any PostgreSQL environment with the given schema and data.

They enable:
- **Anomaly detection**
- **Root cause analysis**
- **Role-based audit trails**
- **Process compliance monitoring**

No assumptions are made — only data is used to reveal inconsistencies.