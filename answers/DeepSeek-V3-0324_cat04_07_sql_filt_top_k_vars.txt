# DuckDB SQL Query for Process Variant Analysis

Here's a solution that accomplishes all the requested tasks in a single query:

```sql
WITH 
-- Step 1: Extract ordered activity sequences per case
case_sequences AS (
  SELECT 
    case_id,
    string_agg(activity, ' -> ' ORDER BY timestamp) AS variant
  FROM event_log
  GROUP BY case_id
),

-- Step 2: Count cases per variant and rank by frequency
variant_counts AS (
  SELECT 
    variant,
    COUNT(*) AS case_count,
    DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS variant_rank
  FROM case_sequences
  GROUP BY variant
),

-- Step 3: Identify top K variants (replace 5 with desired K value)
top_variants AS (
  SELECT variant
  FROM variant_counts
  WHERE variant_rank <= 5
),

-- Step 4: Get case_ids belonging to top variants
top_cases AS (
  SELECT case_id
  FROM case_sequences
  WHERE variant IN (SELECT variant FROM top_variants)
)

-- Final result: All events from cases in top variants
SELECT e.*
FROM event_log e
WHERE e.case_id IN (SELECT case_id FROM top_cases)
ORDER BY e.case_id, e.timestamp;
```

## Explanation:

1. **Case Sequences**: The first CTE (`case_sequences`) creates a string representation of each case's activity sequence by concatenating activities in timestamp order, separated by " -> ".

2. **Variant Counting**: The second CTE (`variant_counts`) groups cases by their variant string, counts how many cases share each variant, and ranks variants by frequency using `DENSE_RANK()`.

3. **Top Variants**: The third CTE (`top_variants`) filters to only the top K variants (here set to 5, which you can adjust).

4. **Case Filtering**: The fourth CTE (`top_cases`) identifies which case_ids belong to the top variants.

5. **Final Result**: The main query returns all events from the original log that belong to cases in the top variants, maintaining the original event order per case.

## Notes:

- Replace `5` in the `top_variants` CTE with your desired K value.
- The `DENSE_RANK()` function ensures proper handling of ties (variants with identical counts get the same rank).
- The `string_agg` with " -> " separator provides a human-readable variant representation. You could use a different separator if preferred.