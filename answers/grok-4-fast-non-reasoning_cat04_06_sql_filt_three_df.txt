Here's a DuckDB SQL query that meets all the specified requirements:

```sql
WITH target_cases AS (
  -- Identify cases with the specific sequence
  SELECT DISTINCT 
    el1.case_id
  FROM event_log el1
  JOIN event_log el2 ON el1.case_id = el2.case_id 
    AND el2.timestamp > el1.timestamp 
    AND el2.activity = 'Create Order'
    AND NOT EXISTS (
      SELECT 1 FROM event_log el_between 
      WHERE el_between.case_id = el1.case_id 
      AND el_between.timestamp > el1.timestamp 
      AND el_between.timestamp < el2.timestamp
    )
  JOIN event_log el3 ON el2.case_id = el3.case_id 
    AND el3.timestamp > el2.timestamp 
    AND el3.activity = 'Confirm Order'
    AND NOT EXISTS (
      SELECT 1 FROM event_log el_between2 
      WHERE el_between2.case_id = el2.case_id 
      AND el_between2.timestamp > el2.timestamp 
      AND el_between2.timestamp < el3.timestamp
    )
  WHERE el1.activity = 'Approve Purchase Requisition'
),

timed_cases AS (
  -- Among target cases, identify those with >5 days between Create Order and Confirm Order
  SELECT DISTINCT 
    el1.case_id
  FROM target_cases tc
  JOIN event_log el1 ON tc.case_id = el1.case_id AND el1.activity = 'Create Order'
  JOIN event_log el2 ON el1.case_id = el2.case_id 
    AND el2.activity = 'Confirm Order'
    AND el2.timestamp > el1.timestamp
    AND NOT EXISTS (
      SELECT 1 FROM event_log el_between 
      WHERE el_between.case_id = el1.case_id 
      AND el_between.timestamp > el1.timestamp 
      AND el_between.timestamp < el2.timestamp
    )
  WHERE (el2.timestamp - el1.timestamp) > INTERVAL '5 days'
)

-- Return all events from cases that are NOT in timed_cases
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM timed_cases)
ORDER BY case_id, timestamp;
```

**How this query works:**

1. **First CTE (`target_cases`)**: Identifies cases containing the exact sequence "Approve Purchase Requisition"  "Create Order"  "Confirm Order" with no intervening events. It uses:
   - Self-joins to find consecutive pairs of events
   - `NOT EXISTS` subqueries to ensure no other events occur between the specified activities
   - The joins are ordered by timestamp to maintain sequence

2. **Second CTE (`timed_cases`)**: Among the cases from the first CTE, it further filters for those where the time difference between the "Create Order" and "Confirm Order" events in the sequence exceeds 5 days. It uses:
   - DuckDB's interval arithmetic `(el2.timestamp - el1.timestamp) > INTERVAL '5 days'`
   - The same direct succession check to ensure we're measuring the correct pair of events

3. **Final SELECT**: Returns all events from the original `event_log` table, excluding those belonging to cases identified in `timed_cases`. The result is ordered by `case_id` and `timestamp` for readability.

**Key features:**
- Ensures **direct succession** by checking for no intervening events between each pair
- Uses **DuckDB-specific interval syntax** for the 5-day condition
- Returns **all events** (not just specific ones) from the filtered cases
- Handles multiple occurrences of the sequence within the same case by using `DISTINCT case_id`

The query will exclude entire cases that meet both criteria while preserving all events from cases that either don't have the sequence or have the sequence but with 5 days between "Create Order" and "Confirm Order".