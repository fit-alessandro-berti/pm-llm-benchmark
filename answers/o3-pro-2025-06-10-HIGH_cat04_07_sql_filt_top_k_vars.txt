Below is a single, self-contained DuckDB query that carries out every requested step.  
Replace the value of the parameter k (in the first line) with the number of variants you want to keep.

```sql
-- ---- configurable parameter -------------------------------------------------
-- How many most-frequent variants do we want?
WITH
    params AS (SELECT 5::INTEGER AS k)           -- <-- change 5 to any K you need
-- -----------------------------------------------------------------------------

/* ---------------------------------------------------------------------------
   1.  Build the ordered activity sequence (“variant”) for every case
   ------------------------------------------------------------------------- */
, per_case AS (
    SELECT
        case_id,
        -- concatenate the activities in timestamp order into one string
        string_agg(activity, '  ' ORDER BY timestamp) AS variant
    FROM event_log
    GROUP BY case_id
)

/* ---------------------------------------------------------------------------
   2.  Count how many cases follow each variant
   ------------------------------------------------------------------------- */
, variant_stats AS (
    SELECT
        variant,
        COUNT(*) AS n_cases
    FROM per_case
    GROUP BY variant
    ORDER BY n_cases DESC
    LIMIT (SELECT k FROM params)                -- keep only the top-K variants
)

/* ---------------------------------------------------------------------------
   3.  Keep only cases that belong to one of those top-K variants
   ------------------------------------------------------------------------- */
, top_cases AS (
    SELECT pc.case_id
    FROM per_case        pc
    JOIN variant_stats   vs  ON pc.variant = vs.variant
)

/* ---------------------------------------------------------------------------
   4.  Return all original events that belong to the selected cases
   ------------------------------------------------------------------------- */
SELECT  e.*
FROM    event_log e
JOIN    top_cases  t  USING (case_id)
ORDER BY e.case_id, e.timestamp;                -- optional: nicely ordered output
```

What each block does  
1. `per_case`: For every `case_id`, `string_agg` concatenates the `activity` values **in timestamp order**, yielding that case’s complete ordered path (its “variant”).  
2. `variant_stats`: Counts how many cases have each distinct `variant`, orders them by `n_cases`, and keeps only the top K.  
3. `top_cases`: Identifies the `case_id`s whose variant is in the previously selected top K set.  
4. Final `SELECT`: Returns every event row from `event_log` whose `case_id` is in `top_cases`, thereby excluding all cases that do not belong to one of the K most frequent process variants.