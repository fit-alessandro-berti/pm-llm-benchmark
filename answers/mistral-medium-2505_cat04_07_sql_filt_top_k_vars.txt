# DuckDB SQL Query for Process Variant Analysis

Here's a comprehensive DuckDB SQL query that accomplishes all the tasks in your benchmark:

```sql
WITH
-- Step 1: Extract ordered sequences of activities per case
ordered_sequences AS (
    SELECT
        case_id,
        LIST(activity ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

-- Step 2: Group cases by their complete activity sequence and count occurrences
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count,
        LIST(case_id) AS case_ids
    FROM ordered_sequences
    GROUP BY activity_sequence
    ORDER BY case_count DESC
),

-- Step 3: Get the top K variants (using K=5 as example, can be parameterized)
top_variants AS (
    SELECT activity_sequence
    FROM variant_counts
    LIMIT 5  -- Replace 5 with your desired K value
),

-- Step 4: Get all case_ids that belong to top K variants
top_case_ids AS (
    SELECT UNNEST(LIST(
        SELECT UNNEST(case_ids)
        FROM variant_counts
        WHERE activity_sequence IN (SELECT activity_sequence FROM top_variants)
    )) AS case_id
)

-- Step 5: Return all events from cases that belong to top K variants
SELECT e.*
FROM event_log e
WHERE e.case_id IN (SELECT case_id FROM top_case_ids)
ORDER BY e.case_id, e.timestamp;
```

## Explanation:

1. **Ordered Sequences Extraction**:
   - The first CTE (`ordered_sequences`) groups events by `case_id` and creates an ordered list of activities using `LIST(activity ORDER BY timestamp)`.

2. **Variant Identification**:
   - The second CTE (`variant_counts`) groups these sequences to identify unique variants, counts how many cases follow each variant, and collects the case IDs for each variant.

3. **Top K Selection**:
   - The third CTE (`top_variants`) selects the top K most frequent variants (using LIMIT 5 as an example).

4. **Case Filtering**:
   - The fourth CTE (`top_case_ids`) extracts all case IDs that belong to these top K variants.

5. **Final Result**:
   - The main query returns all events from the original log that belong to cases in the top K variants, ordered by case and timestamp.

## Parameterization Note:

To make the query more flexible, you can replace the hardcoded `LIMIT 5` with a parameter. In DuckDB, you could use a prepared statement or a variable:

```sql
-- For parameterized K value
PREPARE get_top_variants AS
WITH ... (same query as above, but with ? instead of 5)
FROM variant_counts
LIMIT ?;

EXECUTE get_top_variants(5);  -- Pass your desired K value here
```

This query efficiently handles all the requirements while maintaining proper ordering and filtering.