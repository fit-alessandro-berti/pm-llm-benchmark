Here is an example of a DECLARE model for a hypothetical Purchase-to-Pay process:

```python
declare_model = {
    'existence': {
        'Place Order': {'support': 1.0, 'confidence': 1.0},
        'Receive Invoice': {'support': 1.0, 'confidence': 1.0},
        'Pay Invoice': {'support': 1.0, 'confidence': 1.0},
        'Receive Goods': {'support': 1.0, 'confidence': 1.0},
        'Update Inventory': {'support': 1.0, 'confidence': 1.0}
    },
    'absence': {},
    'exactly_one': {},
    'init': {
        'Place Order': {'support': 1.0, 'confidence': 1.0}
    },
    'responded_existence': {
        ('Place Order', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Invoice', 'Pay Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Goods', 'Update Inventory'): {'support': 1.0, 'confidence': 1.0}
    },
    'coexistence': {},
    'response': {
        ('Place Order', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Invoice', 'Pay Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Goods', 'Update Inventory'): {'support': 1.0, 'confidence': 1.0}
    },
    'precedence': {
        ('Place Order', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Invoice', 'Pay Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Goods', 'Update Inventory'): {'support': 1.0, 'confidence': 1.0}
    },
    'succession': {
        ('Place Order', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Invoice', 'Pay Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Goods', 'Update Inventory'): {'support': 1.0, 'confidence': 1.0}
    },
    'altresponse': {},
    'altprecedence': {},
    'altsuccession': {},
    'chainresponse': {
        ('Place Order', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Invoice', 'Pay Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Goods', 'Update Inventory'): {'support': 1.0, 'confidence': 1.0}
    },
    'chainprecedence': {
        ('Place Order', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Invoice', 'Pay Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Goods', 'Update Inventory'): {'support': 1.0, 'confidence': 1.0}
    },
    'chainsuccession': {
        ('Place Order', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Invoice', 'Pay Invoice'): {'support': 1.0, 'confidence': 1.0},
        ('Receive Goods', 'Update Inventory'): {'support': 1.0, 'confidence': 1.0}
    },
    'noncoexistence': {},
    'nonsuccession': {
        ('Pay Invoice', 'Place Order'): {'support': 1.0, 'confidence': 1.0},
        ('Update Inventory', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0}
    },
    'nonchainsuccession': {
        ('Pay Invoice', 'Place Order'): {'support': 1.0, 'confidence': 1.0},
        ('Update Inventory', 'Receive Invoice'): {'support': 1.0, 'confidence': 1.0}
    }
}
```

This DECLARE model specifies that the Purchase-to-Pay process must contain the activities 'Place Order', 'Receive Invoice', 'Pay Invoice', 'Receive Goods', and 'Update Inventory'. The 'Place Order' activity must be the initial activity of the process. The activities 'Place Order' and 'Receive Invoice', 'Receive Invoice' and 'Pay Invoice', and 'Receive Goods' and 'Update Inventory' have a response, precedence, and succession relationship. Additionally, the 'Pay Invoice' and 'Place Order' activities and the 'Update Inventory' and 'Receive Invoice' activities have a non-succession relationship. This means that the 'Pay Invoice' activity should not follow the 'Place Order' activity and the 'Update Inventory' activity should not follow the 'Receive Invoice' activity. Finally, the 'Pay Invoice' and 'Place Order' activities and the 'Update Inventory' and 'Receive Invoice' activities have a non-chain succession relationship. This means that the 'Pay Invoice' activity should not directly follow the 'Place Order' activity and the 'Update Inventory' activity should not directly follow the 'Receive Invoice' activity.