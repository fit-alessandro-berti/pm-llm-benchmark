## Optimizing IT Service Desk Resource Assignment at TechSolve Solutions using Process Mining

TechSolve Solutions is facing critical operational challenges stemming from inefficient resource assignment within its multi-tiered IT service desk. By leveraging process mining on the detailed incident event log, we can diagnose the root causes of SLA breaches, frequent reassignments, and uneven workload distribution, and subsequently develop data-driven strategies for optimization.

---

### 1. Analyzing Resource Behavior and Assignment Patterns

To understand the current resource dynamics, we must move beyond simple averages and analyze the actual interactions and performance across the tiers and individual agents.

#### Metric Focus:

| Scope | Metric | Purpose |
| :--- | :--- | :--- |
| **Agent/Tier** | **Workload Distribution Index (WDI)** | Measures the standard deviation of open/active tickets or total processing time across agents within a tier. High WDI indicates uneven workload. |
| **L1 Tier** | **First Call Resolution (FCR) Rate per Agent/Category** | Percentage of incidents resolved by L1 without escalation. Low FCR, especially for specific categories/priorities, indicates L1 skill gaps or insufficient empowerment. |
| **Individual Agent** | **Processing Time vs. Wait Time Ratio** | Identifies agents who spend more time waiting for tickets than actually working, or vice versa (potential overload). |
| **Tier/Skill** | **Activity Throughput Time** | Average time spent resolving incidents that require a specific skill (e.g., 'Networking-Firewall'). High throughput time might indicate a skill shortage or bottleneck. |
| **Handovers** | **Reassignment Rate (Internal/External)** | Percentage of tickets reassigned within a tier (internal) or escalated/de-escalated (external). Measures flow friction. |

#### Process Mining Techniques for Pattern Discovery:

1.  **Resource Interaction Analysis (Social Network Mining):**
    *   **Technique:** Construct a social graph where nodes are agents (Resource ID) and edges represent the handover of a case (e.g., from `Agent A05` to `Agent B12`). The thickness of the edge represents the frequency of this specific handover.
    *   **Insight:** This reveals the *actual* flow of work, highlighting "hot potato" tickets (frequently reassigned) and identifying agents who are disproportionately involved in escalating or reassigning work. It allows us to compare the *intended* L1 $\rightarrow$ L2 flow against the *actual* flow, which might involve L2 $\rightarrow$ L1 de-escalations, or cross-L2 reassignments (`Agent B12` to `Agent B15`).

2.  **Role Discovery (Based on Skill & Activity):**
    *   **Technique:** Group agents based on the actual activities they perform and the ticket attributes (Category, Required Skill) they handle, rather than their documented tier.
    *   **Insight:** We can identify if certain L1 agents consistently handle tasks requiring specialized skills (suggesting they are effectively L1.5), or if L2 agents frequently handle tasks resolvable by L1 (skill underutilization/over-specialization). This helps define the *actual* operational roles versus the formal hierarchy.

3.  **Utilization of Specific Skills:**
    *   **Analysis:** Filter the event log to track activities where the `Required Skill` matches an agent's `Agent Skills`. We calculate the percentage of an L2/L3 specialist's time spent on tickets *matching* their highest-level skill versus time spent on generic `Basic-Troubleshoot` tasks or simpler categories (e.g., Access Management).
    *   **Result:** If `Agent B12` (Database-SQL expert) spends 40% of their time on generic L1 tasks, this quantifies the extent of specialist underutilization, leading to increased costs and slower resolution for actual complex database issues.

---

### 2. Identifying Resource-Related Bottlenecks and Issues

By applying the metrics and techniques above, we can move from general observations to quantified problems.

| Resource-Related Problem | Detection Method (Process Mining) | Quantification Example |
| :--- | :--- | :--- |
| **Bottlenecks due to Skill Scarcity** | Throughput time analysis filtered by `Required Skill` (e.g., Networking-Firewall). Long queue wait times for tickets requiring rare skills. | Average waiting time for tickets requiring 'Networking-Firewall' skill is 4 hours, compared to 30 minutes for 'App-CRM'. |
| **Unnecessary Reassignments/Escalations** | Analyze all reassignments (Activity='Reassign' or 'Escalate'). Identify sequential handovers (A $\rightarrow$ B $\rightarrow$ C) before resolution. Use Decision Mining to see if the skill of the first assigned agent matched the final resolving agent. | 35% of P3 tickets initially assigned to L1 agents who lack the required skill are later reassigned (Delay caused: avg. 45 minutes per reassignment). |
| **Incorrect Initial Assignment (L1/Dispatcher)** | Compare the `Required Skill` logged at Ticket Creation/Assignment against the `Agent Skills` of the first assigned agent. Focus on cases that result in rapid (under 10 minutes) escalation. | 22% of all P2 tickets requiring specialized skills are wrongly directed to L1 agents without those skills, contributing directly to 60% of P2 SLA breaches. |
| **Agent Overload/Underutilization** | WDI and Activity Processing Time per agent. Analyze time gaps between `Work Start` activities for overloaded agents (low gap) versus underutilized agents (high gap). | Agent C01 (L3) processes 50% more P1 incidents than Agent C02, despite having similar skills, resulting in C01's average P1 resolution time being 2 hours longer. |
| **Correlation to SLA Breaches** | Align process maps of breached tickets (SLA Time $>$ Resolution Time) with resource interaction networks. Filter breaches by the last agent activity before the breach point. | For P2 breaches, 75% involve at least two internal L2 reassignments, indicating skill-based queue friction is a primary cause. |

---

### 3. Root Cause Analysis for Assignment Inefficiencies

Process mining provides powerful methods for establishing the *why* behind the inefficiencies.

#### Potential Root Causes:

1.  **Deficiencies in Assignment Rules:** If the current system uses round-robin within a tier, it completely ignores the crucial variables: **Required Skill, Agent Skills, Priority, and Current Workload.**
2.  **Inaccurate Agent Skill Profiles:** If an L2 agent's profile lists 'App-CRM' but they lack proficiency, they will accept the ticket and immediately reassign it, generating churn (as seen in the log snippet: `INC-1001` reassigned by `Agent B12` for needing a different skill).
3.  **Poor Initial Identification:** L1 agents or the dispatcher might categorize tickets poorly at creation, leading to the wrong initial skill assignment. (E.g., a "system slow" ticket is categorized as Software-OS when it should be Network).
4.  **Lack of Real-Time Visibility:** The dispatcher may assign tickets to an L2 agent who is currently tied up in a long-running P1 issue, causing the newly assigned P3 ticket to sit in a queue, leading to delays (`INC-1001` delay noted as "Delay due to queue").
5.  **Insufficient L1 Empowerment/Training:** If L1 agents escalate too readily, even for issues they *could* resolve, it burdens higher tiers.

#### Decision Mining and Variant Analysis:

*   **Variant Analysis:** We compare two sets of incident case variants:
    *   **Variant A (Efficient):** Resolved by the first assigned agent, met SLA, minimal activity steps.
    *   **Variant B (Inefficient):** Resolved after $\ge 3$ reassignments/escalations, breached SLA.
    *   **Analysis:** By comparing the initial assignment variables (`Ticket Category`, `Required Skill`, and the first agent's `Agent Tier`/`Agent Skills`) between Variant A and B, we can identify the specific circumstances (e.g., ticket priority, required skill combination) that lead to inefficient flows.

*   **Decision Mining:** This technique models the dispatcher/agent choice (e.g., "Escalate to L2" vs. "Resolve L1") as a decision point.
    *   **Input:** Variables include Ticket Priority, Required Skill, L1 Processing Time, and L1 Agent Skill Match.
    *   **Output:** The outcome (Resolution vs. Escalation).
    *   **Insight:** Decision mining generates rules (e.g., "If Category = Network AND Required Skill = Firewall, then Escalate L2") and quantifies the accuracy of these decisions. It can show that 80% of escalations for 'Access Management' issues were unnecessary, pointing directly to a training gap in L1.

---

### 4. Developing Data-Driven Resource Assignment Strategies

Based on the analysis of skill utilization, reassignment frequency, and bottlenecks, we propose three specific strategies to overhaul the assignment logic:

#### Strategy 1: Skill-Based Routing with Proficiency Weighting

This addresses the issue of **incorrect initial assignments** and **unnecessary reassignments** (Root Cause 2, 3).

*   **Leveraged Insight:** The identification of which specific skill mismatches (via Variant Analysis) cause the most reassignments, and the quantification of specialist underutilization (Section 1).
*   **Data Required:**
    1.  Verified Agent Skill Matrix, including a **Proficiency Score** (1-5) for each skill.
    2.  Accurate, real-time mapping of `Required Skill` based on ticket categorization/keywords.
*   **Logic:** Instead of dispatching purely by tier, the system matches the ticket's `Required Skill` against the proficiency matrix.
    *   Tier assignment is dynamic: A complex P3 ticket requiring 'App-CRM' might bypass L1 and go straight to an L2 agent with a Proficiency Score of 4 in 'App-CRM'.
    *   Within the target pool, assignment goes to the agent with the highest proficiency level who is available.
*   **Expected Benefits:** Significant reduction in L1 misdirection and subsequent escalations; faster mean time to resolution (MTTR) by placing the ticket directly with the most qualified resource.

#### Strategy 2: Dynamic Workload and Availability-Aware Assignment

This addresses the issues of **agent overload** and **queue-based delays** (Root Cause 4).

*   **Leveraged Insight:** WDI analysis revealed uneven workload (Section 1). Queue analysis highlighted excessive waiting times for tickets assigned to agents already burdened (Section 2).
*   **Data Required:**
    1.  Real-time **Active Ticket Count** per agent (weighted by Priority).
    2.  Real-time **Agent Availability Status** (e.g., 'In Meeting', 'On Break', 'Active').
    3.  **Estimated Time Remaining (ETR)** for currently active tickets (requires machine learning derived from historical activity times).
*   **Logic:** When a new ticket arrives, the dispatcher identifies the qualified pool (using Strategy 1, Skill-Based Routing). The final assignment is given to the qualified agent with the lowest calculated **Load Score**, which is a function of:
    $$\text{Load Score} = (\sum \text{Active Ticket Priority Weights}) + (\text{Time in Queue of Agent's Current Tasks})$$
*   **Expected Benefits:** Even distribution of workload, eliminating bottlenecks caused by overloaded specialists, and reducing queue-related delays (like the one observed for INC-1001).

#### Strategy 3: Predictive Escalation/Tier Bypass

This addresses **unnecessary L1 processing** for complex issues and **L1 training/empowerment deficiencies** (Root Cause 5).

*   **Leveraged Insight:** Decision mining clearly identified the ticket attributes (Category, Priority, Keywords) that almost always result in a necessary L2/L3 escalation regardless of L1 effort.
*   **Data Required:** Historical data on ticket outcomes (resolved vs. escalated) correlated with initial keywords and category.
*   **Logic:** Based on the Decision Mining rules, a Machine Learning model is trained to flag tickets that have a $>90\%$ probability of requiring L2 intervention.
    *   **Tier Bypass:** These highly complex tickets (e.g., P2 Network incidents involving specific IP ranges) skip L1 entirely and are immediately routed to the appropriate L2 specialist (using Strategies 1 & 2 for assignment within L2).
    *   **L1 Empowerment Refinement:** For issues with a high but not guaranteed escalation rate (e.g., P3 Access Management), L1 is provided specific, data-backed runbooks that define the maximum allowed processing time (e.g., 15 minutes) before mandatory escalation, preventing unproductive L1 resource sinkholes.
*   **Expected Benefits:** Maximizes L1 FCR for appropriate tickets while protecting L2/L3 resources from unnecessary initial handovers, improving P2/P3 SLA compliance.

---

### 5. Simulation, Implementation, and Monitoring

#### Business Process Simulation

Before deploying the new assignment logic, simulation is crucial for risk mitigation and impact assessment.

1.  **Model Creation:** Use the discovered process model (from the event log) as the baseline blueprint.
2.  **Resource Profile Calibration:** Input the newly defined resource pools (based on verified skills/proficiency) and their actual processing time distributions extracted from the event log.
3.  **Scenario Testing:** Run thousands of incident arrivals (simulated based on historical volume/priority distribution) through three scenarios:
    *   **Baseline (Current Logic):** Round-robin/Manual Escalation.
    *   **Scenario A:** Implementing Strategy 1 (Skill-Based Routing).
    *   **Scenario B:** Implementing Strategies 1, 2, and 3 combined (Full Optimization).
4.  **Evaluation:** Compare the output metrics across scenarios, focusing on:
    *   SLA Compliance Rate (P2, P3).
    *   Average Number of Reassignments per Ticket.
    *   Average Waiting Time per Tier.
    *   Specialist Utilization Rate.

Simulation provides quantitative proof that the optimized logic (Scenario B) reduces P2 reassignment rates by $X\%$ and improves P2 SLA compliance by $Y\%$ before any changes are made to the live system.

#### Implementation and Monitoring

Post-implementation, continuous process mining is required to ensure the new strategies perform as expected and to adapt to changing operational demands (Drift Detection).

**Monitoring KPIs and Process Views:**

| KPI/Metric | Purpose | Monitoring Frequency |
| :--- | :--- | :--- |
| **Assignment Accuracy Rate** | Percentage of tickets assigned to the correct agent (no reassignment required) on the first attempt. (Measures Strategy 1 & 3 effectiveness) | Daily |
| **Agent Load Score Stability** | Track the WDI (Workload Distribution Index) to ensure Strategy 2 maintains even load across skilled agents. | Hourly |
| **Handover Matrix (Social Network)** | Track the frequency of specific agent-to-agent and tier-to-tier handovers. Any increase in reassignments indicates drift or a new skill gap. | Weekly |
| **Skill Throughput Time per Tier** | Monitor resolution time for tickets requiring critical skills. An upward trend suggests a bottleneck in that specific skill pool. | Weekly |
| **SLA Compliance vs. Assignment Type** | Dashboard correlating SLA compliance with the assignment method (Skill-Based Route vs. Fallback Route). | Real-time / Daily |

By continuously monitoring these KPIs, TechSolve can detect process deviations, identify when skill profiles need updating, or determine if the dynamic workload balancing algorithm requires recalibration, ensuring the service desk remains optimized and efficient.