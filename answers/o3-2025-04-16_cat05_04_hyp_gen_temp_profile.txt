Anomalies observed

1. Receive  Approve  
   • Mean  25 h (90 000 s) but stdev only 1 h (3 600 s).  
   • An unusually tight spread around a long interval hints at a rigid, possibly artificial schedule or a nightly/nextday batch job.

2. Approve  Notify  
   • Mean 7 days (604 800 s) with stdev 2 days (172 800 s).  
   • Very long and very erratic; could be backlog, manual mailing, or waiting for external confirmation.

3. Assign  Close  
   • Mean 2 h (7 200 s).  Closing directly after assignment implies that Evaluate and/or Approve are sometimes skipped.

4. Evaluate  Notify  
   • Mean 5 min (300 s) with stdev 1 min.  Almost instantaneous after evaluation; may be an automated notification that ignores the Approve step.

5. Receive  Evaluate vs. Receive  Approve  
   • Evaluate happens one day after receive, but Approve happens only one hour later than Evaluate.  The sequencing looks compressed and could indicate that the Evaluate time stamp is written late (catchup entry).

Typical hypotheses

A. Batch or scheduled jobs  
   • Approvals may run once per day at a fixed hour.  
   • Notifications may be issued weekly or when a queue reaches a certain size.

B. Missing or backdated events  
   • Adjusters may record E or P after the fact, so the real elapsed time is hidden and R–P seems constant.

C. Bypassed steps for lowvalue claims  
   • Small claims might be autoapproved and autoclosed right after assignment.

D. Resource bottlenecks / vacations  
   • When particular adjusters or regions have high load the PN gap grows.

E. Different channels  
   • Online claims could flow faster (auto messages) while phone/mail claims wait for manual work.

Verification ideas (PostgreSQL)

1. Claims whose Receive  Approve time lies outside the “normal” 25 h ± 2 h window

WITH rp AS (
  SELECT claim_id,
         MIN(timestamp) FILTER (WHERE activity = 'R') AS r_time,
         MIN(timestamp) FILTER (WHERE activity = 'P') AS p_time
  FROM claim_events
  GROUP BY claim_id
  HAVING COUNT(*) FILTER (WHERE activity IN ('R','P')) = 2
)
SELECT claim_id,
       EXTRACT(EPOCH FROM (p_time - r_time)) AS secs_r_p
FROM rp
WHERE EXTRACT(EPOCH FROM (p_time - r_time)) NOT BETWEEN 82800 AND 97200; -- 90 000 ± 7 200

2. Claims closed  2 h after assignment and missing Evaluate or Approve

WITH ac AS (
  SELECT claim_id,
         MIN(timestamp) FILTER (WHERE activity = 'A') AS a_time,
         MIN(timestamp) FILTER (WHERE activity = 'C') AS c_time,
         BOOL_OR(activity = 'E') AS has_e,
         BOOL_OR(activity = 'P') AS has_p
  FROM claim_events
  GROUP BY claim_id
)
SELECT claim_id,
       EXTRACT(EPOCH FROM (c_time - a_time)) AS secs_a_c,
       has_e, has_p
FROM ac
WHERE a_time IS NOT NULL
  AND c_time IS NOT NULL
  AND EXTRACT(EPOCH FROM (c_time - a_time)) < 7200;

3. Long Approve  Notify gaps and their adjusters / claim types

WITH pn AS (
  SELECT ce.claim_id,
         MIN(timestamp) FILTER (WHERE activity = 'P') AS p_time,
         MIN(timestamp) FILTER (WHERE activity = 'N') AS n_time
  FROM claim_events ce
  GROUP BY ce.claim_id
  HAVING COUNT(*) FILTER (WHERE activity IN ('P','N')) = 2
)
SELECT p.claim_id,
       c.claim_type,
       a.adjuster_id,
       EXTRACT(EPOCH FROM (n_time - p_time))/86400 AS days_p_n
FROM pn p
JOIN claims c USING (claim_id)
LEFT JOIN (
    SELECT claim_id, -- adjuster attached through the Assign event
           MAX(resource)::INT AS adjuster_id
    FROM claim_events
    WHERE activity = 'A'
    GROUP BY claim_id
) a USING (claim_id)
WHERE (n_time - p_time) > INTERVAL '5 days';

4. Distribution of Evaluate  Notify delays by region

WITH en AS (
  SELECT ce.claim_id,
         MIN(timestamp) FILTER (WHERE activity = 'E') AS e_time,
         MIN(timestamp) FILTER (WHERE activity = 'N') AS n_time
  FROM claim_events ce
  GROUP BY ce.claim_id
  HAVING COUNT(*) FILTER (WHERE activity IN ('E','N')) = 2
)
SELECT ad.region,
       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY EXTRACT(EPOCH FROM (n_time - e_time))) AS median_secs_en,
       AVG(EXTRACT(EPOCH FROM (n_time - e_time)))                                    AS mean_secs_en,
       STDDEV_SAMP(EXTRACT(EPOCH FROM (n_time - e_time)))                            AS stdev_secs_en
FROM en
JOIN (
    SELECT claim_id, MAX(resource)::INT AS adjuster_id
    FROM claim_events
    WHERE activity = 'A'
    GROUP BY claim_id
) aa USING (claim_id)
JOIN adjusters ad ON ad.adjuster_id = aa.adjuster_id
GROUP BY ad.region
ORDER BY mean_secs_en DESC;

5. Variance check for Receive  Approve over time (are approvals queued for a daily run?)

WITH rp AS (
  SELECT claim_id,
         DATE_TRUNC('day', MIN(timestamp) FILTER (WHERE activity = 'R')) AS r_day,
         EXTRACT(EPOCH FROM (MIN(timestamp) FILTER (WHERE activity = 'P')
                           - MIN(timestamp) FILTER (WHERE activity = 'R'))) AS secs_r_p
  FROM claim_events
  GROUP BY claim_id
  HAVING COUNT(*) FILTER (WHERE activity IN ('R','P')) = 2
)
SELECT r_day,
       AVG(secs_r_p)  AS avg_secs,
       STDDEV_POP(secs_r_p) AS stdev_secs,
       COUNT(*)       AS claims_that_day
FROM rp
GROUP BY r_day
ORDER BY r_day;

How to use the output

• If RP stdev is near zero every day, investigate an automated overnight job or late data entry.  
• If rapid AC cases cluster on small claim amounts, consider businessrule exceptions.  
• If long PN gaps correlate with certain regions or adjusters, look for staffing issues or manual mailing steps.  
• Mark claims returned by the queries for auditing; compare logs or user actions to confirm whether steps were skipped or backdated.