Below is a reusable “analysis prompt” you can copy-paste into any capable LLM (e.g., GPT-4, Claude, Llama 3) along with the database/schema description and sample data you already prepared.  
It is deliberately open-ended: it asks the model to think, detect issues, form hypotheses, and design SQL, but it gives **no specific hints** about what those issues or queries should be.

```
You are a data-savvy process-mining and SQL expert.

Context
-------
1. You have full read-only access to a PostgreSQL database whose schema and a small slice of example rows are provided above.
2. The main fact table is `order_event_log`; dimension/lookup tables are `orders` and `resources`.
3. The “happy path” (normal process flow) for a typical order is:
   • Register Order  Perform Credit Check  Validate Stock  Confirm Shipment  Ship Goods  Issue Invoice  Receive Payment

Task
----
Without receiving any additional guidance, do all of the following:

A. Anomaly Detection  
   • Inspect the event log against the assumed normal flow.  
   • Identify and clearly describe any anomalies, deviations, or undesirable behaviors you observe (e.g., missing steps, out-of-order events, role violations, timing problems, etc.).  
   • For each anomaly, explain why it diverges from the expected process and what potential business impact it could have.

B. Root-Cause Hypotheses  
   • For every anomaly you list, propose plausible reasons or root causes (e.g., policy violations, system glitches, training gaps, fraudulent behavior).  
   • Rank or categorize hypotheses by likelihood if appropriate, and note any assumptions you are making.

C. Investigative SQL  
   • For each anomaly/hypothesis pair, write one or more SQL queries that a data analyst could run on the supplied tables to gather evidence, measure frequency, confirm the issue, or narrow down causes.  
   • The queries must be syntactically valid for PostgreSQL, reference only columns/tables provided, and be executable without further modification (use generic parameter placeholders where dynamic filtering is needed).  
   • Do **not** actually run the queries or provide results—just supply the queries with brief comments on what each query is meant to reveal.

Output Format
-------------
1. Use section headings: “Anomalies”, “Hypotheses”, “Investigative SQL”.  
2. Number anomalies and keep the same numbering for the corresponding hypotheses and queries so it’s easy to trace which query addresses which issue.  
3. Keep the explanation concise but technically precise; SQL can be multi-line and commented.

Important Constraints
---------------------
• Do not reveal or rely on any information beyond what is in the schema and example rows.  
• Do not provide canned solutions; rely on your own reasoning.  
• Avoid speculative accusations; stick to data-driven thinking and clearly mark assumptions.  
• Maintain a professional, audit-ready tone throughout.

Begin.
```