```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="insurance_claim_process")

# Places
p_claim_arrived = PetriNet.Place(name="Claim Arrived")
p_claim_registered = PetriNet.Place(name="Claim Registered")
p_documents_verified = PetriNet.Place(name="Documents Verified")
p_fraud_checked = PetriNet.Place(name="Fraud Checked")
p_claim_assessed = PetriNet.Place(name="Claim Assessed")
p_claim_approved = PetriNet.Place(name="Claim Approved")
p_payment_done = PetriNet.Place(name="Payment Done")
p_notified = PetriNet.Place(name="Notified")
p_claim_closed = PetriNet.Place(name="Claim Closed")
p_re_document_submission = PetriNet.Place(name="Re-Document Submission")
p_in_depth_investigation = PetriNet.Place(name="In-depth Investigation")


net.places.update({p_claim_arrived, p_claim_registered, p_documents_verified, p_fraud_checked,
                   p_claim_assessed, p_claim_approved, p_payment_done, p_notified, p_claim_closed,
                   p_re_document_submission, p_in_depth_investigation})

# Transitions
t_claim_registration = PetriNet.Transition(name="CR", label="Claim Registration")
t_document_verification = PetriNet.Transition(name="DV", label="Document Verification")
t_fraud_check = PetriNet.Transition(name="FC", label="Fraud Check")
t_claim_assessment = PetriNet.Transition(name="CA", label="Claim Assessment")
t_approval = PetriNet.Transition(name="AP", label="Approval")
t_payment = PetriNet.Transition(name="P", label="Payment")
t_notification = PetriNet.Transition(name="N", label="Notification")
t_closure = PetriNet.Transition(name="CL", label="Closure")
t_re_document_submission = PetriNet.Transition(name="RDS", label="Re-Document Submission")
t_in_depth_investigation = PetriNet.Transition(name="II", label="In-depth Investigation")

net.transitions.update({t_claim_registration, t_document_verification, t_fraud_check,
                       t_claim_assessment, t_approval, t_payment, t_notification, t_closure,
                       t_re_document_submission, t_in_depth_investigation})

# Arcs
petri_utils.add_arc_from_to(p_claim_arrived, t_claim_registration, net)
petri_utils.add_arc_from_to(t_claim_registration, p_claim_registered, net)
petri_utils.add_arc_from_to(p_claim_registered, t_document_verification, net)
petri_utils.add_arc_from_to(t_document_verification, p_documents_verified, net)
petri_utils.add_arc_from_to(p_documents_verified, t_fraud_check, net)
petri_utils.add_arc_from_to(t_fraud_check, p_fraud_checked, net)
petri_utils.add_arc_from_to(p_fraud_checked, t_claim_assessment, net)
petri_utils.add_arc_from_to(t_claim_assessment, p_claim_assessed, net)
petri_utils.add_arc_from_to(p_claim_assessed, t_approval, net)
petri_utils.add_arc_from_to(t_approval, p_claim_approved, net)
petri_utils.add_arc_from_to(p_claim_approved, t_payment, net)
petri_utils.add_arc_from_to(t_payment, p_payment_done, net)
petri_utils.add_arc_from_to(p_payment_done, t_notification, net)
petri_utils.add_arc_from_to(t_notification, p_notified, net)
petri_utils.add_arc_from_to(p_notified, t_closure, net)
petri_utils.add_arc_from_to(t_closure, p_claim_closed, net)

# Loops
petri_utils.add_arc_from_to(p_documents_verified, t_re_document_submission, net)
petri_utils.add_arc_from_to(t_re_document_submission, p_claim_registered, net) # Loop back to document verification

petri_utils.add_arc_from_to(p_fraud_checked, t_in_depth_investigation, net)
petri_utils.add_arc_from_to(t_in_depth_investigation, p_fraud_checked, net) # Loop back to fraud check


# Markings
im = Marking()
im[p_claim_arrived] = 1

fm = Marking()
fm[p_claim_closed] = 1

print("Petri Net Created Successfully!")

# You can further process or visualize the Petri net here using pm4py functions.
# For example, to visualize:
# from pm4py.visualization.petri_net import visualizer as pn_visualizer
# gviz = pn_visualizer.apply(net, im, fm)
# pn_visualizer.view(gviz)
```
