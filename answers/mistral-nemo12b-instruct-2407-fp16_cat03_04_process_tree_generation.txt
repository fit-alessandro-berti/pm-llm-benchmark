Here's a Python script using `pm4py` to create a process tree for a simplified Purchase-to-Pay (P2P) process. This example includes activities like 'Request Purchase', 'Approve Purchase', 'Receive Goods', and 'Pay Invoice'. I've also added loops for situations where goods might need to be received multiple times before the invoice is paid.

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Create the root node with a parallel operator
root = ProcessTree(operator=Operator.PARALLEL)

# Node for Request Purchase activity
req_purchase = ProcessTree(label="Request Purchase", parent=root)

# Node for Purchase Approval subprocess
approval_seq = ProcessTree(operator=Operator.SEQUENCE, parent=root)
approve_purchase = ProcessTree(label="Approve Purchase", parent=approval_seq)
reject_purchase = ProcessTree(label="Reject Purchase (loop back)", parent=approval_seq)
approval_loop = ProcessTree(operator=Operator.LOOP, children=[reject_purchase], parent=approval_seq)

# Node for Goods Receiving subprocess with a loop
receive_goods_loop = ProcessTree(operator=Operator.LOOP, parent=root)
receive_goods = ProcessTree(label="Receive Goods", parent=receive_goods_loop)
good_received = ProcessTree(label="Good Received (loop back)", parent=receive_goods_loop)

# Node for Pay Invoice activity
pay_invoice = ProcessTree(label="Pay Invoice", parent=root)

# Add children to their respective parents and connect them as required by the process flow
approval_seq.children.append(approve_purchase)
approval_seq.children.append(approval_loop)
approval_loop.children.append(reject_purchase)

receive_goods_loop.children.append(receive_goods)
receive_goods Loop.children.append(good_received)

root.children = [req_purchase, approval_seq, receive_goods_loop, pay_invoice]

print(root)
```

This script will create a process tree for the described P2P process. The `print(root)` statement at the end helps visualize the created process tree.

To use this code, make sure you have installed the `pm4py` package:

```
pip install pm4py
```