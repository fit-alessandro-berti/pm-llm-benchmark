Here's a Python script using the `pm4py.objects.process_tree.obj` module to create a ProcessTree representing a simplified Purchase-to-Pay process. This example includes activities like 'Request Purchase', 'Approve Purchase', 'Order Goods', 'Receive Goods', 'Invoice Verification', and 'Payment'.

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# Create root node with parallel operator
root = ProcessTree(operator=Operator.PARALLEL)

# Create 'Request Purchase' leaf node and add it as a child of the root
request_purchase = ProcessTree(label="Request Purchase", parent=root)
root.children.append(request_purchase)

# Create sequence for approval process
approval_seq = ProcessTree(operator=Operator.SEQUENCE, parent=root)
approve_purchase = ProcessTree(label="Approve Purchase", parent=approval_seq)
order_goods = ProcessTree(label="Order Goods", parent=approval_seq)
approval_seq.children.append(approve_purchase)
approval_seq.children.append(order_goods)
root.children.append(approval_seq)

# Create sequence for goods receipt and invoice verification
receipt_invoice_seq = ProcessTree(operator=Operator.SEQUENCE, parent=root)
receive_goods = ProcessTree(label="Receive Goods", parent=receipt_invoice_seq)
invoice_verification = ProcessTree(label="Invoice Verification", parent=receipt_invoice_seq)
receipt_invoice_seq.children.append(receive_goods)
receipt_invoice_seq.children.append(invoice_verification)
root.children.append(receipt_invoice_seq)

# Create 'Payment' leaf node and add it as a child of the root, with an exclusive choice between 'Request Purchase' and 'Invoice Verification'
payment_choice = ProcessTree(operator=Operator.XOR, parent=root)
payment = ProcessTree(label="Payment", parent=payment_choice)
payment_choice.children.append(request_purchase)
payment_choice.children.append(invoice_verification)
payment_choice.children.append(payment)
root.children.append(payment_choice)

# Create loop for reordering goods
reorder_loop = ProcessTree(operator=Operator.LOOP, parent=root)
reorder_goods = ProcessTree(label="Reorder Goods", parent=reorder_loop)
reorder_loop.children.append(order_goods)
reorder_loop.children.append(reorder_goods)
root.children.append(reorder_loop)

print(root)
```

This script creates a process tree where:

1. 'Request Purchase' and the approval process (Approve Purchase -> Order Goods) run in parallel.
2. The goods receipt and invoice verification also run in parallel with the above processes.
3. There's an exclusive choice between making a payment after requesting a purchase or after verifying the invoice.
4. A loop is created for reordering goods if needed, which runs in parallel with the other processes.

You can adjust this example to fit your specific Purchase-to-Pay process by adding, removing, or modifying activities and their relationships.