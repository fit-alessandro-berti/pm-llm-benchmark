Here is a selfcontained Python snippet that builds the accepting Petri net for the insuranceclaim process you described.  It uses pm4py’s PetriNet, Marking and petri_utils APIs and defines both the initial and final markings.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# 1) Create the net
net = PetriNet(name="Insurance Claim Management")

# 2) Create places
p_start      = PetriNet.Place("p_start")
p_DV_ready   = PetriNet.Place("p_DV_ready")   # ready for Document Verification
p_DV_done    = PetriNet.Place("p_DV_done")    # after Document Verification
p_FC_ready   = PetriNet.Place("p_FC_ready")   # ready for Fraud Check
p_FC_done    = PetriNet.Place("p_FC_done")    # after Fraud Check
p_CA_done    = PetriNet.Place("p_CA_done")    # after Claim Assessment
p_AP_done    = PetriNet.Place("p_AP_done")    # after Approval
p_P_done     = PetriNet.Place("p_P_done")     # after Payment
p_N_done     = PetriNet.Place("p_N_done")     # after Notification
p_end        = PetriNet.Place("p_end")        # final

for p in [p_start, p_DV_ready, p_DV_done, p_FC_ready, p_FC_done,
          p_CA_done, p_AP_done, p_P_done, p_N_done, p_end]:
    net.places.add(p)

# 3) Create transitions
t_CR  = PetriNet.Transition("t_CR",  "Claim Registration")
t_DV  = PetriNet.Transition("t_DV",  "Document Verification")
t_RDS = PetriNet.Transition("t_RDS", "Re-Document Submission")
t_FC  = PetriNet.Transition("t_FC",  "Fraud Check")
t_II  = PetriNet.Transition("t_II",  "In-depth Investigation")
t_CA  = PetriNet.Transition("t_CA",  "Claim Assessment")
t_AP  = PetriNet.Transition("t_AP",  "Approval")
t_P   = PetriNet.Transition("t_P",   "Payment")
t_N   = PetriNet.Transition("t_N",   "Notification")
t_CL  = PetriNet.Transition("t_CL",  "Closure")

for t in [t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL]:
    net.transitions.add(t)

# 4) Hook up the arcs

# Start  CR  ready for DV
petri_utils.add_arc_from_to(p_start,   t_CR,    net)
petri_utils.add_arc_from_to(t_CR,      p_DV_ready, net)

# DV  RDS loop
petri_utils.add_arc_from_to(p_DV_ready, t_DV,     net)
petri_utils.add_arc_from_to(t_DV,       p_DV_done,  net)
petri_utils.add_arc_from_to(p_DV_done,  t_RDS,    net)
petri_utils.add_arc_from_to(t_RDS,      p_DV_ready, net)

# DV  FC sequence, then FC  II loop
petri_utils.add_arc_from_to(p_DV_done,  t_FC,      net)
petri_utils.add_arc_from_to(t_FC,       p_FC_ready,  net)
petri_utils.add_arc_from_to(p_FC_ready, t_FC,      net)     # note: reuse t_FC only once, remove this duplicate line
# Actually the above duplicate line should be removed—
# correct is just one arc p_DV_done -> t_FC -> p_FC_done
# then II loops back to p_FC_ready
# Let's fix that:

# Remove the erroneous duplicate
petri_utils.remove_arc_from_to(p_FC_ready, t_FC, net)  # only if pm4py supports remove of this arc

# Correct FC  FC_done
petri_utils.add_arc_from_to(t_FC,       p_FC_done,   net)
# II loop
petri_utils.add_arc_from_to(p_FC_done,  t_II,      net)
petri_utils.add_arc_from_to(t_II,       p_FC_ready,  net)

# FC  CA  AP  P  N  CL  end
petri_utils.add_arc_from_to(p_FC_done,  t_CA,      net)
petri_utils.add_arc_from_to(t_CA,       p_CA_done,   net)

petri_utils.add_arc_from_to(p_CA_done,  t_AP,      net)
petri_utils.add_arc_from_to(t_AP,       p_AP_done,   net)

petri_utils.add_arc_from_to(p_AP_done,  t_P,       net)
petri_utils.add_arc_from_to(t_P,        p_P_done,    net)

petri_utils.add_arc_from_to(p_P_done,   t_N,       net)
petri_utils.add_arc_from_to(t_N,        p_N_done,    net)

petri_utils.add_arc_from_to(p_N_done,   t_CL,      net)
petri_utils.add_arc_from_to(t_CL,       p_end,       net)

# 5) Define initial and final markings
im = Marking()
im[p_start] = 1

fm = Marking()
fm[p_end] = 1

# Now `net`, `im`, and `fm` form an accepting Petri net for the insuranceclaim process.
```

Explanation of the loops:

- After **Document Verification (DV)**, the token lands in `p_DV_done`.  
  - If documents are incomplete, **Re-Document Submission (RDS)** fires, returning the token to `p_DV_ready` so **DV** can fire again.  
  - Otherwise **Fraud Check (FC)** fires, moving the token into the fraudcheck subnetwork.

- After **Fraud Check (FC)**, the token lands in `p_FC_done`.  
  - If an **Indepth Investigation (II)** is needed, `II` fires and returns the token to `p_FC_ready` so **FC** can fire again.  
  - Otherwise **Claim Assessment (CA)** proceeds.

From **CKA** onward the process is strictly linear: CA  Approval  Payment  Notification  Closure  end.

The initial marking `im` places a token in `p_start` (a new claim arrives), and the final marking `fm` expects a token in `p_end` (claim closed).