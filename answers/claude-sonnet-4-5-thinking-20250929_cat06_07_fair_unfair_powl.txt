# POWL Models for GlobalTeq Solutions Hiring Process

Below are two POWL models representing the hiring process described. The first model includes a potential source of unfairness (the XOR branch for community affiliation checks), while the second model eliminates this bias by ensuring all applicants follow the same evaluation path.

---

## **Model 1: POWL Model WITH Potential Unfairness**

This model includes an XOR branch after the skill assessment where applicants can either go through a standard cultural fit evaluation OR a community affiliation check that provides implicit advantages.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
receive_app = Transition(label="ReceiveApplication")
resume_parsing = Transition(label="ResumeParsing")
request_more_info = Transition(label="RequestMoreInfo")
skill_assessment = Transition(label="SkillAssessment")
cultural_fit_check = Transition(label="CulturalFitCheck")
community_affiliation_check = Transition(label="CommunityAffiliationCheck")
managerial_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# Create loop for data completeness check
# Loop between ResumeParsing (do part) and RequestMoreInfo (redo part)
data_completeness_loop = OperatorPOWL(operator=Operator.LOOP, children=[resume_parsing, request_more_info])

# Create XOR for cultural fit evaluation (BIAS POINT)
# Either standard cultural fit OR community affiliation check
cultural_evaluation_xor = OperatorPOWL(operator=Operator.XOR, children=[cultural_fit_check, community_affiliation_check])

# Create the main process flow with potential unfairness
model_with_bias = StrictPartialOrder(nodes=[
    receive_app, 
    data_completeness_loop, 
    skill_assessment, 
    cultural_evaluation_xor, 
    managerial_review, 
    final_decision
])

# Define the sequential order
model_with_bias.order.add_edge(receive_app, data_completeness_loop)
model_with_bias.order.add_edge(data_completeness_loop, skill_assessment)
model_with_bias.order.add_edge(skill_assessment, cultural_evaluation_xor)
model_with_bias.order.add_edge(cultural_evaluation_xor, managerial_review)
model_with_bias.order.add_edge(managerial_review, final_decision)
```

**Key Features:**
- **Loop:** `*(ResumeParsing, RequestMoreInfo)` ensures data completeness
- **XOR (BIAS):** `X(CulturalFitCheck, CommunityAffiliationCheck)` creates two evaluation paths where one provides preferential treatment
- **Sequential Flow:** Application  Data Check Loop  Skill Assessment  Cultural Evaluation (XOR)  Managerial Review  Final Decision

---

## **Model 2: POWL Model WITHOUT Unfairness**

This model removes the XOR branch and ensures all applicants undergo the same cultural fit evaluation, eliminating the source of potential bias.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
receive_app = Transition(label="ReceiveApplication")
resume_parsing = Transition(label="ResumeParsing")
request_more_info = Transition(label="RequestMoreInfo")
skill_assessment = Transition(label="SkillAssessment")
cultural_fit_check = Transition(label="CulturalFitCheck")
managerial_review = Transition(label="ManagerialReview")
final_decision = Transition(label="FinalDecision")

# Create loop for data completeness check
# Loop between ResumeParsing (do part) and RequestMoreInfo (redo part)
data_completeness_loop = OperatorPOWL(operator=Operator.LOOP, children=[resume_parsing, request_more_info])

# Create the main process flow WITHOUT the XOR bias branch
model_without_bias = StrictPartialOrder(nodes=[
    receive_app, 
    data_completeness_loop, 
    skill_assessment, 
    cultural_fit_check, 
    managerial_review, 
    final_decision
])

# Define the sequential order
model_without_bias.order.add_edge(receive_app, data_completeness_loop)
model_without_bias.order.add_edge(data_completeness_loop, skill_assessment)
model_without_bias.order.add_edge(skill_assessment, cultural_fit_check)
model_without_bias.order.add_edge(cultural_fit_check, managerial_review)
model_without_bias.order.add_edge(managerial_review, final_decision)
```

**Key Features:**
- **Loop:** `*(ResumeParsing, RequestMoreInfo)` ensures data completeness (same as Model 1)
- **No XOR:** All applicants go through the same `CulturalFitCheck` activity
- **Sequential Flow:** Application  Data Check Loop  Skill Assessment  Cultural Fit Check  Managerial Review  Final Decision

---

## **Summary of Differences**

| Aspect | Model 1 (WITH Unfairness) | Model 2 (WITHOUT Unfairness) |
|--------|---------------------------|------------------------------|
| **Cultural Evaluation** | XOR choice between standard check and community affiliation check | Single standard cultural fit check for all |
| **Bias Point** | Community affiliation provides preferential path | No preferential treatment based on affiliations |
| **Fairness** | Potentially unfair due to selective advantages | Fair process with uniform evaluation |

The removal of the XOR branch in Model 2 ensures that all candidates are evaluated using the same criteria, eliminating the subtle bias that could arise from community affiliations or local resident status.