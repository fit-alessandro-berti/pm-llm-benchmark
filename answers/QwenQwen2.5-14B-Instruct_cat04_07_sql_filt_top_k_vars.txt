To achieve the task outlined, we need to follow a step-by-step approach in DuckDB SQL. Here’s the complete SQL query that fulfills all the requirements:

1. First, we need to construct a query that extracts the sequence of activities for each `case_id` and orders them by the `timestamp`.
2. Then, we need to group these sequences to find unique process variants.
3. We count the number of cases per variant and filter to find the top K variants.
4. Finally, we return the events corresponding to these top K variants.

Here is the detailed SQL query:

```sql
WITH
-- Step 1: Order activities per case by timestamp
ordered_activities AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS seq_num
    FROM
        event_log
),
-- Step 2: Generate a string for each case_id representing the ordered sequence of activities
activity_sequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY seq_num) AS sequence
    FROM
        ordered_activities
    GROUP BY
        case_id
),
-- Step 3: Count the number of cases for each unique activity sequence
variant_counts AS (
    SELECT
        sequence,
        COUNT(*) AS count
    FROM
        activity_sequences
    GROUP BY
        sequence
),
-- Step 4: Find the top K variants by their frequency
top_k_variants AS (
    SELECT
        sequence
    FROM
        variant_counts
    ORDER BY
        count DESC
    LIMIT
        K
),
-- Step 5: Join the top K variants back to the original event log to filter events
filtered_cases AS (
    SELECT
        ea.*
    FROM
        event_log ea
    INNER JOIN
        ordered_activities oa ON ea.case_id = oa.case_id
    INNER JOIN
        top_k_variants tv ON tv.sequence = (
            SELECT
                STRING_AGG(activity, ' -> ' ORDER BY seq_num)
            FROM
                ordered_activities
            WHERE
                ordered_activities.case_id = ea.case_id
        )
)
-- Step 6: Return the filtered events
SELECT
    *
FROM
    filtered_cases;
```

### Explanation:

1. **ordered_activities:** This CTE (Common Table Expression) adds a sequential number (`seq_num`) to each event within a `case_id` based on the `timestamp`.

2. **activity_sequences:** This CTE concatenates the activities of each `case_id` into a single string, representing the ordered sequence of activities for that case.

3. **variant_counts:** This CTE groups the sequences and counts the number of cases (process instances) per sequence to identify unique variants.

4. **top_k_variants:** This CTE selects the top K variants based on the frequency (count) of each variant.

5. **filtered_cases:** This CTE filters the events from the original `event_log` to include only those belonging to the top K variants.

6. The final `SELECT` statement retrieves the filtered events.

### Note:
- Replace `K` with the actual number of top variants you want to retrieve.
- Ensure the `event_log` table is correctly defined and accessible in your DuckDB environment.
- This solution assumes `event_log` is the name of the table and the columns are as provided in the prompt. Adjust the table and column names as necessary.