<think>
Okay, let's tackle this problem step by step. The user wants an accepting Petri net for an insurance claim process. I need to model all the steps, including possible loops for document re-submission and fraud investigation. 

First, I'll outline the steps and their relations. The process starts with a new claim (C), then proceeds through various stages. The key points are the loops: after Document Verification (DV), if documents are incomplete, there's Re-Document Submission (RDS), which loops back. Similarly, Fraud Check (FC) might lead to In-depth Investigation (II), which can repeat.

So, the places need to represent the states between transitions. For example, after C (Claims Registration), the next is DV. Then, depending on the outcome, either proceed to FC or go to RDS. Wait, but how to model the loop? For RDS, after submitting again, it goes back to DV for re-verification. So between DV and RDS, there's a loop. Similarly for FC and II.

Let me think about the structure:

Start -> C -> DV -> [RDS loop] -> FC -> [II loop] -> CA -> [Approval (AP) if needed] -> P -> N -> CL.

But approval is conditional. The problem states that approval is needed only if the amount surpasses a threshold. Hmm, how to model that in the Petri net? Since Petri nets don't have conditional statements, maybe AP is a transition that's sometimes executed. But how? Maybe after CA, there's a choice: if approval is needed, go through AP, else skip. But without guards, perhaps the Petri net allows both paths. Wait, but the problem says "must be approved by a senior manager if the amount surpasses a certain threshold." So in the model, CA leads to AP only when needed, but since Petri nets model possible behaviors, maybe the AP transition is optional. However, the model should include AP as a possible step. But how to enforce that AP is only taken when required? That's tricky. Maybe the problem allows AP to be part of the model, but the actual logic (the condition) can't be modeled here. So perhaps the Petri net includes AP as a transition that can be fired after CA, but the firing depends on the condition. Since we can't model conditions in the net structure, maybe we just include AP as a possible step that is part of the path when needed.

But the problem says "the claim must be approved if the amount surpasses a threshold." So in the Petri net, the transition AP would need to be taken in those cases. But how to model that? Maybe the net allows both paths (with and without AP), but the accepting condition (final marking) requires that all possible paths are considered. Wait, but the problem says "constructing an accepting Petri net" which is a Petri net with initial and final markings. The final marking is when the process is closed. So perhaps the AP is part of the mandatory path when needed, but the Petri net model includes AP as a possible transition. However, since the model should capture all possible valid executions, perhaps the net includes AP as an optional step. But the problem states that approval is required if the threshold is surpassed. So maybe the net must have AP as a necessary step after CA in some cases. But without conditions, how to model that? Maybe the model includes AP as a transition that can be fired after CA, but the problem's description implies that AP is part of the process when needed. Since the user probably expects the Petri net to have AP as a transition that is part of the possible flow, perhaps the net includes AP as a transition that can be taken after CA, but the actual condition isn't modeled here. So the Petri net would have a transition from CA to AP, and then from AP to P. But also, maybe a direct transition from CA to P if no approval is needed. Wait, but the problem says "must be approved if the amount surpasses a threshold." So in the model, CA could lead to AP (if needed) or directly to P (if not). But how to model that choice? Since Petri nets can have multiple arcs, perhaps after CA, there are two transitions: one leading to AP and another leading directly to P. But that's not correct because the choice depends on the condition. However, in Petri net terms, this would model both possible paths. So the net would allow both sequences: CA  AP  P and CA  P. But according to the problem statement, the latter is only valid when the threshold isn't exceeded. Since the Petri net can't enforce that, perhaps the model includes both possibilities, and the accepting condition (final marking) is reached regardless of the path taken, as long as the process completes.

So, moving forward, the steps are:

1. Create the Petri net with all necessary places and transitions.
2. Model the loops for RDS and II.
3. Ensure the initial marking has a token in the start place, and the final marking has a token in the end place (CL).

Let's list all the transitions and places.

Transitions (activities):

- C: Claim Registration
- DV: Document Verification
- RDS: Re-Document Submission
- FC: Fraud Check
- II: In-depth Investigation
- CA: Claim Assessment
- AP: Approval
- P: Payment
- N: Notification
- CL: Closure

Places (states between transitions):

Between start and C: start_place
After C: after_C
Between DV and RDS loop: after_DV, before_RDS, after_RDS (but RDS loops back to DV)
Wait, perhaps after DV, if re-submission is needed, RDS is done, then back to DV. So the places would be:

start  C  after_C  DV  [RDS loop]  after_DV  FC  [II loop]  after_FC  CA  [AP if needed]  after_CA  P  after_P  N  after_N  CL.

Wait, but the RDS loop would be: after DV, if documents are incomplete, transition to RDS, which then leads back to DV. So the places for the RDS loop would be:

after_DV  RDS  after_RDS (which loops back to DV's input place).

Wait, maybe the structure is:

C  after_C  DV  (decision: re-submit or proceed)

If re-submit, then RDS  after_RDS (which is the same as after_DV?), then back to DV.

So the places would be:

after_C  DV  after_DV (if proceed) or  RDS  after_RDS (same as after_DV?)  DV again.

Hmm, perhaps the RDS loop is modeled with a place that allows DV to be re-executed. So:

After DV, there's a decision. If re-submit needed, then RDS is executed, which leads back to the state before DV. So the places would be:

after_C  DV  (place X)  [either proceed to FC or RDS]

If RDS is taken, then after RDS, back to X, which then leads to DV again.

Wait, perhaps:

C  after_C  DV  after_DV (place)

From after_DV, there are two transitions: one leading to FC (if documents are complete), and another leading to RDS.

RDS  after_RDS (place)  back to DV.

So the loop is after_DV  RDS  after_RDS  DV.

But how to model that? Let's see:

- Transition DV is followed by place after_DV.
- From after_DV, there's a transition to FC (if okay) and a transition to RDS (if not).
- RDS transition leads to after_RDS place.
- After_RDS place has a transition back to DV.

So the RDS loop is:

after_DV  RDS  after_RDS  DV.

Similarly for the FC and II loop:

After FC, if in-depth investigation is needed, then II is done, which loops back to FC.

So:

after_FC  II  after_II  FC.

So the structure would be:

FC  after_FC (place)

From after_FC, transition to CA (if no fraud) or II (if fraud suspected).

II  after_II (place)  FC.

So the II loop is after_FC  II  after_II  FC.

Now, the approval step: after CA, if approval is needed, transition to AP, else directly to P.

But how to model that? Since the Petri net can't have conditions, perhaps there are two paths from CA: one to AP and one to P. But according to the problem statement, AP is mandatory if the threshold is exceeded. However, the model can't enforce that. So perhaps the net includes both possibilities, and the final marking is reached regardless. But the problem says "the claim must be approved if the amount surpasses a threshold." So in the model, the path through AP is required in those cases, but the net can't enforce that. So the model includes AP as a possible transition, and the final marking is reached when the process ends, regardless of the path taken.

So, the transitions after CA would be:

CA  after_CA (place)

From after_CA, two transitions: one to AP and one to P.

But that's not correct, because the problem states that AP is required when the amount is over the threshold. However, since the net can't model that condition, perhaps the model includes AP as a necessary step in some cases. Wait, but the problem says "must be approved", so the model should enforce that AP is taken when needed. But how? Since we can't model conditions, perhaps the net is designed such that AP is part of the mandatory path. Wait, maybe the approval is always required. Wait, the problem says "must be approved by a senior manager if the amount surpasses a certain threshold." So if the amount is below, then AP is skipped. But how to model that in the net? It's not possible with standard Petri nets. So perhaps the problem expects that AP is part of the model, but the net allows both paths (with and without AP), and the final marking is reached in either case.

Alternatively, maybe the problem expects that AP is a mandatory step after CA, but that's not the case according to the problem statement. So perhaps the correct approach is to model AP as an optional step. But how?

Alternatively, perhaps the problem expects that the approval is part of the process, but the model includes it as a transition that can be fired when needed. So after CA, there's a transition to AP, and after AP, to P. Also, a direct transition from CA to P. But that would allow both paths, which may not be correct. However, given the constraints of Petri nets, this might be the way to model it.

But the problem says "the claim must be approved if the amount surpasses a threshold." So in the model, the path through AP is required in those cases. But since the model can't enforce that, perhaps the problem expects that AP is part of the mandatory flow. Wait, maybe the problem's description implies that approval is always required. Let me check the scenario again.

The scenario says: "Approval (AP): The claim must be approved by a senior manager if the amount surpasses a certain threshold." So AP is conditional. Therefore, the model should allow the process to proceed from CA to P directly if no approval is needed, but must go through AP if needed. However, since Petri nets can't model conditions, the model will have both paths. The final marking is achieved when the process reaches CL, regardless of the path taken.

So, the transitions after CA would be:

CA  after_CA

From after_CA, two transitions: one to AP and one to P.

But that's two separate paths. However, in reality, only one path is valid based on the condition. But the Petri net model can't enforce that. So the model includes both possibilities.

So, the code would create transitions AP and P, both enabled after CA.

But how to model this in the net? Let's proceed.

Now, let's outline all the places and transitions.

Places:

1. start_place (initial marking)
2. after_C
3. after_DV
4. after_RDS (same as after_DV?)
Wait, after RDS, the process goes back to DV. So after_RDS would be the same place as after_DV? Because after submitting documents again, the system re-verifies. So the place after RDS would be the same as the place before DV. So perhaps after_RDS is the same as after_C? No, because after C is the state after Claim Registration. Wait, no. Let's think again.

The process after C is DV. So after C, the place is after_C. Then DV is executed, leading to after_DV. If RDS is needed, then RDS is executed, leading back to after_DV (so that DV can be re-performed). Wait, no. If RDS is done, then the documents are re-submitted, so the next step is to re-verify (DV again). So the place after RDS would lead back to DV. So the structure would be:

after_C  DV  after_DV  (if re-submit) RDS  after_RDS  DV.

So after_RDS is a place that connects back to DV. So after_RDS is a new place, and DV is preceded by after_RDS in the loop.

Wait, perhaps:

after_C  DV  after_DV

From after_DV, two options: proceed to FC or RDS.

If RDS is taken:

after_DV  RDS  after_RDS  DV.

So after_RDS is a place that connects back to DV.

So the loop is RDS  after_RDS  DV.

Similarly for II:

after_FC  II  after_II  FC.

So the II loop is II  after_II  FC.

So the places for the loops are:

For RDS: after_DV  RDS  after_RDS  DV.

For II: after_FC  II  after_II  FC.

Now, the approval step:

after_CA  AP  after_AP  P.

Or after_CA  P.

So two paths.

Then P  after_P  N  after_N  CL.

So the final marking is CL.

Now, let's list all the places and transitions.

Transitions:

C, DV, RDS, FC, II, CA, AP, P, N, CL.

Wait, CL is a transition? Or is it a place? No, the final marking is a place. The process ends when the token reaches the final place. So CL is a place. Wait, the problem says the final marking represents a closed claim. So the final place is CL.

So transitions are:

C (Claim Registration), DV, RDS, FC, II, CA, AP, P, N.

Places:

start_place, after_C, after_DV, after_RDS, after_FC, after_II, after_CA, after_AP, after_P, after_N, CL.

Wait, perhaps:

The places are:

- start_place (initial)
- after_C (after Claim Registration)
- after_DV (after Document Verification, before deciding RDS or proceed)
- after_RDS (after Re-Document Submission, leading back to DV)
- after_FC (after Fraud Check, before deciding II or proceed)
- after_II (after In-depth Investigation, leading back to FC)
- after_CA (after Claim Assessment, before approval or payment)
- after_AP (after Approval)
- after_P (after Payment)
- after_N (after Notification)
- CL (final place)

So the transitions and their connections:

1. C: start_place  after_C
2. DV: after_C  after_DV
3. RDS: after_DV  after_RDS  DV (loop)
Wait, no. RDS is a transition. So after_DV has an arc to RDS, and RDS has an arc to after_RDS. Then after_RDS has an arc back to DV.

So:

after_DV  RDS  after_RDS  DV.

So DV is a transition that is enabled when after_RDS has a token.

Similarly for II:

after_FC  II  after_II  FC.

So FC is a transition that can be re-executed after II.

Then, after FC (after_FC place), the process proceeds to CA.

CA is a transition from after_FC to after_CA.

After_CA has two options: AP or P.

AP leads to after_AP, then to P.

P leads to after_P, then to N, then to after_N, then to CL.

So the transitions:

AP: after_CA  after_AP

P (first path): after_CA  after_P

P (second path, after AP): after_AP  after_P

But wait, AP is a transition. So after_CA has an arc to AP, and AP has an arc to after_AP. Then after_AP has an arc to P.

Alternatively, after_CA can have two transitions: one to AP and one to P.

So:

after_CA  AP  after_AP  P  after_P  N  after_N  CL.

and

after_CA  P  after_P  N  after_N  CL.

But then P would be a transition that can be fired from after_CA directly or via AP.

But in the problem statement, P is payment, which is after approval (if needed). So the correct flow is:

CA  AP  P (if approval needed)

CA  P (if not needed)

But how to model that? The Petri net can have two separate paths from CA.

So the transitions would be:

AP: after_CA  after_AP

P1: after_CA  after_P (bypassing AP)

P2: after_AP  after_P

But that's redundant. Alternatively, P is a single transition that can be fired from after_CA (directly) or from after_AP.

Wait, but transitions are labeled. So P is a single transition. So perhaps after_CA has two outgoing arcs: one to AP and one to P. But that would allow P to be fired without AP, which is correct if approval is not needed.

But then, after AP, P is fired. So AP  after_AP  P.

So the correct structure is:

after_CA  AP  after_AP  P  after_P  ...

and

after_CA  P  after_P  ...

So P can be fired from after_CA (no approval) or after_AP (with approval).

But that would require P to have two incoming arcs: one from after_CA and one from after_AP.

But in Petri nets, a transition can have multiple input places. So yes, that's possible.

So the payment transition P can be enabled from after_CA (if no approval needed) or after_AP (if approval was done).

So the code would add arcs from after_ca to ap, ap to after_ap, after_ap to p, and after_ca to p.

But wait, that would mean that P can be fired directly from after_ca, bypassing AP. Which aligns with the problem statement.

So the transitions and places:

Now, let's list all the places and transitions.

Places:

1. start_place
2. after_c
3. after_dv
4. after_rds
5. after_fc
6. after_ii
7. after_ca
8. after_ap
9. after_p
10. after_n
11. cl  # final place

Transitions:

1. c (Claim Registration)
2. dv (Document Verification)
3. rds (Re-Document Submission)
4. fc (Fraud Check)
5. ii (In-depth Investigation)
6. ca (Claim Assessment)
7. ap (Approval)
8. p (Payment)
9. n (Notification)

Now, the connections:

- start_place  c  after_c
- after_c  dv  after_dv
- after_dv  rds  after_rds  dv (loop)
   - So rds is a transition from after_dv to after_rds.
   - Then after_rds  dv (transition dv is enabled when after_rds has a token)
- after_dv  fc (if no re-submit needed)
   - So after_dv has an arc to fc.
- fc  after_fc
- after_fc  ii  after_ii  fc (loop)
   - ii is a transition from after_fc to after_ii.
   - after_ii  fc (transition fc is enabled when after_ii has a token)
- after_fc  ca  after_ca
- after_ca  ap  after_ap  p  after_p  n  after_n  cl
- after_ca  p  after_p  n  after_n  cl

Wait, but after_ca can have two outgoing transitions: ap and p. So p can be fired from after_ca directly (no approval) or via ap (with approval).

So the payment transition p has two input places: after_ca and after_ap.

So the code would need to add arcs from after_ca to p, and from after_ap to p.

But how to model that in pm4py?

Now, let's outline the code steps.

First, create the PetriNet.

Then, add all places and transitions.

Then, connect them with arcs.

Initial marking: start_place has 1 token.

Final marking: cl has 1 token.

Now, let's code this step by step.

Create the net:

net = PetriNet(name="insurance_claim_process")

Add places:

start_place = net.places.add(PetriNet.Place("start"))
after_c = net.places.add(PetriNet.Place("after_c"))
after_dv = net.places.add(PetriNet.Place("after_dv"))
after_rds = net.places.add(PetriNet.Place("after_rds"))
after_fc = net.places.add(PetriNet.Place("after_fc"))
after_ii = net.places.add(PetriNet.Place("after_ii"))
after_ca = net.places.add(PetriNet.Place("after_ca"))
after_ap = net.places.add(PetriNet.Place("after_ap"))
after_p = net.places.add(PetriNet.Place("after_p"))
after_n = net.places.add(PetriNet.Place("after_n"))
cl = net.places.add(PetriNet.Place("cl"))

Transitions:

c = net.transitions.add(PetriNet.Transition("Claim Registration"))
dv = net.transitions.add(PetriNet.Transition("Document Verification"))
rds = net.transitions.add(PetriNet.Transition("Re-Document Submission"))
fc = net.transitions.add(PetriNet.Transition("Fraud Check"))
ii = net.transitions.add(PetriNet.Transition("In-depth Investigation"))
ca = net.transitions.add(PetriNet.Transition("Claim Assessment"))
ap = net.transitions.add(PetriNet.Transition("Approval"))
p = net.transitions.add(PetriNet.Transition("Payment"))
n = net.transitions.add(PetriNet.Transition("Notification"))

Now, connect the transitions with arcs.

Start with start_place  c  after_c:

petri_utils.add_arc_from_to(start_place, c, net)
petri_utils.add_arc_from_to(c, after_c, net)

After_c  dv  after_dv:

petri_utils.add_arc_from_to(after_c, dv, net)
petri_utils.add_arc_from_to(dv, after_dv, net)

after_dv has two options: rds or fc.

For rds loop:

after_dv  rds  after_rds  dv.

So:

petri_utils.add_arc_from_to(after_dv, rds, net)
petri_utils.add_arc_from_to(rds, after_rds, net)
petri_utils.add_arc_from_to(after_rds, dv, net)

For fc (if no re-submit):

petri_utils.add_arc_from_to(after_dv, fc, net)

fc  after_fc:

petri_utils.add_arc_from_to(fc, after_fc, net)

after_fc  ii loop:

after_fc  ii  after_ii  fc.

So:

petri_utils.add_arc_from_to(after_fc, ii, net)
petri_utils.add_arc_from_to(ii, after_ii, net)
petri_utils.add_arc_from_to(after_ii, fc, net)

after_fc also proceeds to ca:

petri_utils.add_arc_from_to(after_fc, ca, net)

ca  after_ca:

petri_utils.add_arc_from_to(ca, after_ca, net)

after_ca has two options: ap or p.

after_ca  ap  after_ap  p  after_p.

and

after_ca  p  after_p.

So:

petri_utils.add_arc_from_to(after_ca, ap, net)
petri_utils.add_arc_from_to(ap, after_ap, net)
petri_utils.add_arc_from_to(after_ap, p, net)

petri_utils.add_arc_from_to(after_ca, p, net)

Then p  after_p  n  after_n  cl.

petri_utils.add_arc_from_to(p, after_p, net)
petri_utils.add_arc_from_to(after_p, n, net)
petri_utils.add_arc_from_to(n, after_n, net)
petri_utils.add_arc_from_to(after_n, cl, net)

Wait, but after_p is connected to n, which then connects to after_n, then to cl.

Yes.

Now, initial marking (im) is start_place with 1 token.

im = Marking({start_place: 1})

Final marking (fm) is cl with 1 token.

fm = Marking({cl: 1})

But wait, in the example given, they had to delete the sink place and adjust the marking. But in this case, cl is the final place, so fm should have cl:1.

So putting it all together.

But wait, let's check for possible errors.

For example, the RDS loop: after_dv  rds  after_rds  dv.

So when after_dv has a token, firing rds consumes it, produces after_rds. Then firing dv (which is enabled when after_rds has a token) consumes after_rds and produces after_dv again. So the loop is possible.

Similarly for II.

The approval path: after_ca can fire ap or p. If ap is fired, then after_ap is produced, then p can be fired from after_ap. If p is fired directly from after_ca, then after_p is produced.

Then payment leads to notification, etc.

Now, code:

But in pm4py, when adding arcs, the transitions and places must be properly referenced.

So the code would look like:

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="insurance_claim_net")

# Create places
start = net.places.add(PetriNet.Place("start"))
after_c = net.places.add(PetriNet.Place("after_c"))
after_dv = net.places.add(PetriNet.Place("after_dv"))
after_rds = net.places.add(PetriNet.Place("after_rds"))
after_fc = net.places.add(PetriNet.Place("after_fc"))
after_ii = net.places.add(PetriNet.Place("after_ii"))
after_ca = net.places.add(PetriNet.Place("after_ca"))
after_ap = net.places.add(PetriNet.Place("after_ap"))
after_p = net.places.add(PetriNet.Place("after_p"))
after_n = net.places.add(PetriNet.Place("after_n"))
cl = net.places.add(PetriNet.Place("cl"))

# Create transitions
c = net.transitions.add(PetriNet.Transition("Claim Registration"))
dv = net.transitions.add(PetriNet.Transition("Document Verification"))
rds = net.transitions.add(PetriNet.Transition("Re-Document Submission"))
fc = net.transitions.add(PetriNet.Transition("Fraud Check"))
ii = net.transitions.add(PetriNet.Transition("In-depth Investigation"))
ca = net.transitions.add(PetriNet.Transition("Claim Assessment"))
ap = net.transitions.add(PetriNet.Transition("Approval"))
p = net.transitions.add(PetriNet.Transition("Payment"))
n = net.transitions.add(PetriNet.Transition("Notification"))

# Add arcs
petri_utils.add_arc_from_to(start, c, net)
petri_utils.add_arc_from_to(c, after_c, net)

petri_utils.add_arc_from_to(after_c, dv, net)
petri_utils.add_arc_from_to(dv, after_dv, net)

# RDS loop
petri_utils.add_arc_from_to(after_dv, rds, net)
petri_utils.add_arc_from_to(rds, after_rds, net)
petri_utils.add_arc_from_to(after_rds, dv, net)

# Proceed to FC
petri_utils.add_arc_from_to(after_dv, fc, net)

petri_utils.add_arc_from_to(fc, after_fc, net)

# II loop
petri_utils.add_arc_from_to(after_fc, ii, net)
petri_utils.add_arc_from_to(ii, after_ii, net)
petri_utils.add_arc_from_to(after_ii, fc, net)

# Proceed to CA
petri_utils.add_arc_from_to(after_fc, ca, net)

petri_utils.add_arc_from_to(ca, after_ca, net)

# Approval path
petri_utils.add_arc_from_to(after_ca, ap, net)
petri_utils.add_arc_from_to(ap, after_ap, net)
petri_utils.add_arc_from_to(after_ap, p, net)

# Direct payment path
petri_utils.add_arc_from_to(after_ca, p, net)

petri_utils.add_arc_from_to(p, after_p, net)
petri_utils.add_arc_from_to(after_p, n, net)
petri_utils.add_arc_from_to(n, after_n, net)
petri_utils.add_arc_from_to(after_n, cl, net)

# Initial and final markings
im = Marking({start: 1})
fm = Marking({cl: 1})

But wait, in the example, they used del fm[sink] after removing the place. But here, cl is the final place and remains. So fm is correctly set.

Now, check for possible errors. For example, the II loop: after_fc  ii  after_ii  fc. So when after_fc has a token, firing ii consumes it, produces after_ii. Then firing fc (which is enabled when after_ii has a token) consumes after_ii and produces after_fc again. So the loop is possible.

Similarly for RDS.

The approval path allows both with and without AP.

The final marking is cl with 1 token.

This should model the scenario correctly.
</think>

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create Petri net instance
net = PetriNet(name="insurance_claim_net")

# Create places
start = net.places.add(PetriNet.Place("start"))
after_c = net.places.add(PetriNet.Place("after_c"))
after_dv = net.places.add(PetriNet.Place("after_dv"))
after_rds = net.places.add(PetriNet.Place("after_rds"))
after_fc = net.places.add(PetriNet.Place("after_fc"))
after_ii = net.places.add(PetriNet.Place("after_ii"))
after_ca = net.places.add(PetriNet.Place("after_ca"))
after_ap = net.places.add(PetriNet.Place("after_ap"))
after_p = net.places.add(PetriNet.Place("after_p"))
after_n = net.places.add(PetriNet.Place("after_n"))
cl = net.places.add(PetriNet.Place("cl"))

# Create transitions
c = net.transitions.add(PetriNet.Transition("Claim Registration"))
dv = net.transitions.add(PetriNet.Transition("Document Verification"))
rds = net.transitions.add(PetriNet.Transition("Re-Document Submission"))
fc = net.transitions.add(PetriNet.Transition("Fraud Check"))
ii = net.transitions.add(PetriNet.Transition("In-depth Investigation"))
ca = net.transitions.add(PetriNet.Transition("Claim Assessment"))
ap = net.transitions.add(PetriNet.Transition("Approval"))
p = net.transitions.add(PetriNet.Transition("Payment"))
n = net.transitions.add(PetriNet.Transition("Notification"))

# Build the net structure
petri_utils.add_arc_from_to(start, c, net)
petri_utils.add_arc_from_to(c, after_c, net)

petri_utils.add_arc_from_to(after_c, dv, net)
petri_utils.add_arc_from_to(dv, after_dv, net)

# Re-document submission loop
petri_utils.add_arc_from_to(after_dv, rds, net)
petri_utils.add_arc_from_to(rds, after_rds, net)
petri_utils.add_arc_from_to(after_rds, dv, net)

petri_utils.add_arc_from_to(after_dv, fc, net)

petri_utils.add_arc_from_to(fc, after_fc, net)

# In-depth investigation loop
petri_utils.add_arc_from_to(after_fc, ii, net)
petri_utils.add_arc_from_to(ii, after_ii, net)
petri_utils.add_arc_from_to(after_ii, fc, net)

petri_utils.add_arc_from_to(after_fc, ca, net)

petri_utils.add_arc_from_to(ca, after_ca, net)

# Approval path and direct payment path
petri_utils.add_arc_from_to(after_ca, ap, net)
petri_utils.add_arc_from_to(ap, after_ap, net)
petri_utils.add_arc_from_to(after_ap, p, net)

petri_utils.add_arc_from_to(after_ca, p, net)

petri_utils.add_arc_from_to(p, after_p, net)
petri_utils.add_arc_from_to(after_p, n, net)
petri_utils.add_arc_from_to(n, after_n, net)
petri_utils.add_arc_from_to(after_n, cl, net)

# Define markings
im = Marking({start: 1})
fm = Marking({cl: 1})
```