1. Issues with the current model  
   - By placing “Create PO”, “Receive Goods”, “Receive Invoice”, “Match Invoice” and “Pay Invoice” under an AND (parallel) operator, the model allows them in *any* order.  
     - You could “Pay Invoice” before you ever “Receive Invoice” or “Receive Goods.”  
     - You could “Match Invoice” before creating the PO, etc.  
   - In reality every one of those five steps must happen *in strict sequence*.  
   - Only after you have paid the invoice do you “Close Case.”

2. Corrected Process-Tree (enforces a single, strict sequence)  
```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# leaf nodes
create_req      = ProcessTree(label="Create_Purchase_Requisition")
approve_req     = ProcessTree(label="Approve_Purchase_Requisition")
create_po       = ProcessTree(label="Create_Purchase_Order")
receive_goods   = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice   = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice     = ProcessTree(label="Pay_Invoice")
close_case      = ProcessTree(label="Close_Case")

# strict sequence through all steps
root = ProcessTree(
    operator=Operator.SEQUENCE,
    children=[
        create_req,
        approve_req,
        create_po,
        receive_goods,
        receive_invoice,
        match_invoice,
        pay_invoice,
        close_case
    ]
)
```

3. Why this fixes the problem  
   - We replaced the one big parallel block with a single SEQUENCE operator.  
   - Now each activity can only fire once its predecessor has completed.  
     - You cannot “Receive_Goods” until the PO exists.  
     - You cannot “Pay_Invoice” until you have both received and matched that invoice.  
     - You cannot “Close_Case” until the invoice is paid.  
   - This exactly mirrors the standard Procure-to-Pay flow and forbids any out-of-order or premature steps.