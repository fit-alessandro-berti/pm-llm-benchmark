To model the order fulfillment process using a Log Skeleton, we define constraints based on the described workflow. Each activity occurs exactly once, and the process follows a strict sequential flow. Here's the Log Skeleton representation:

```python
log_skeleton = {
    'equivalence': {('IC', 'RP')},
    'always_before': {
        ('CA', 'RO'),
        ('RI', 'CA'),
        ('PI', 'RI'),
        ('QC', 'PI'),
        ('PO', 'QC'),
        ('GSL', 'PO'),
        ('D', 'GSL'),
        ('IC', 'D'),
        ('RP', 'IC')
    },
    'always_after': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    },
    'never_together': set(),
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {1}
    },
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    }
}
```

**Explanation:**

- **Equivalence:** `IC` (Invoice Customer) and `RP` (Record Payment) must occur the same number of times (once each).
- **Always Before:** Each activity requires the previous step to have occurred (e.g., `CA` requires `RO` to have happened first).
- **Always After:** Each activity must be followed by its subsequent step (e.g., `RO` must be followed by `CA`).
- **Never Together:** No activities are mutually exclusive.
- **Activity Occurrences:** All activities occur exactly once per case.
- **Directly-Follows Constraints:** Enforces the strict sequential order of activities (e.g., `RO` is directly followed by `CA`).