```python
"""
POWL model for the “Corporate Network Provisioning” process
-----------------------------------------------------------

Legend of business activities
SR  : Service Request verification
CS  : Contract Setup
DA  : Datacenter Allocation
ACI : AccessControl Initialization
BNC : Base Network Configuration                LOOP
D&R : Debug & Reconfigure                       (iterate until stable)
CD  : Containerized Deployment                 XOR
MD  : Monolithic  Deployment                   (choose one)
QA  : QualityAssurance tests
SA  : Security Audit
GLA : GoLive Approval
"""

from pm4py.objects.powl.obj import (
    StrictPartialOrder, OperatorPOWL,
    Transition, SilentTransition           # SilentTransition imported for completeness
)
from pm4py.objects.process_tree.obj import Operator

# ---------------------------------------------------------------------
# 1. Atomic (labeled) transitions
# ---------------------------------------------------------------------
SR  = Transition(label="SR")    # Service Request verification
CS  = Transition(label="CS")    # Contract Setup
DA  = Transition(label="DA")    # Datacenter Allocation
ACI = Transition(label="ACI")   # AccessControl Initialization
BNC = Transition(label="BNC")   # Base Network Configuration
DR  = Transition(label="D&R")   # Debug & Reconfigure
CD  = Transition(label="CD")    # Containerized Deployment
MD  = Transition(label="MD")    # Monolithic Deployment
QA  = Transition(label="QA")    # QualityAssurance tests
SA  = Transition(label="SA")    # Security Audit
GLA = Transition(label="GLA")   # GoLive Approval

# ---------------------------------------------------------------------
# 2. Controlflow operators
# ---------------------------------------------------------------------
# 2.1 Loop: execute BNC once, then optionally (D&R + BNC) repeatedly
loop_conf_phase = OperatorPOWL(
    operator=Operator.LOOP,
    children=[BNC, DR]
)

# 2.2 XOR: choose exactly one deployment strategy
deployment_choice = OperatorPOWL(
    operator=Operator.XOR,
    children=[CD, MD]
)

# ---------------------------------------------------------------------
# 3. Global (root) partialorder structure
# ---------------------------------------------------------------------
root_nodes = [
    SR, CS,                 # upfront activities
    DA, ACI,                # parallel environment preparation
    loop_conf_phase,        # looped configuration
    deployment_choice,      # exclusive deployment
    QA, SA,                 # postdeployment checks
    GLA                     # final approval
]

root = StrictPartialOrder(nodes=root_nodes)

# ---------------------------------------------------------------------
# 4. Precedence relations (edges) – read as “source    target”
# ---------------------------------------------------------------------
# Basic startup
root.order.add_edge(SR, CS)

# Environment preparation (parallel DA and ACI after CS)
root.order.add_edge(CS, DA)
root.order.add_edge(CS, ACI)

# Enter configuration loop only after both DA and ACI finished
root.order.add_edge(DA, loop_conf_phase)
root.order.add_edge(ACI, loop_conf_phase)

# Deployment choice starts after stable configuration
root.order.add_edge(loop_conf_phase, deployment_choice)

# Quality checks after deployment (QA and SA can run concurrently)
root.order.add_edge(deployment_choice, QA)
root.order.add_edge(deployment_choice, SA)

# Final approval requires both QA and SA
root.order.add_edge(QA,  GLA)
root.order.add_edge(SA,  GLA)

# ---------------------------------------------------------------------
# The object `root` now holds the full POWL representation of the
# complex provisioning process and can be used by any pm4py routine
# expecting a POWL model.
# ---------------------------------------------------------------------
```
