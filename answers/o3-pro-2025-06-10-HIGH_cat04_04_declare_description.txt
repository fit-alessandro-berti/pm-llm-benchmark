Below is a practitioner-friendly walk-through of the loan-approval process that can be derived from the DECLARE model you supplied.  Each numbered step shows what the customer, the back-office, or the system is doing; underneath each step you will see the constraint(s) that enforce it, the real-life reason the rule exists, and what could go wrong if the rule were broken.


1. Receive Application  
   • The customer submits an application on-line or in person; the case is created in the loan-processing system.  

   Guard rails in the model  
   • init(Receive_Application) – it is always the first recorded event.  
   • existence(Receive_Application) – at least one such event must be present in every case.  
   • noncoexistence(Transfer_Funds, Receive_Application) – funds cannot be disbursed in the same trace in which an application is still being “received”. In practice this means the instance must move out of the “application” phase before money can leave the bank.  

   Motivation  
   • Regulatory audit trails start with the formal intake of a request.  
   • Anti-fraud systems rely on a unique application identifier created right here.  

   What if it were skipped or misplaced?  
   • No legal basis for processing personal data.  
   • Downstream activities would have no application ID to reference, creating reconciliation nightmares.


2. Preliminary Credit Check (exactly once, and early)  
   • An automated bureau query and/or internal score calculation is run.

   Guard rails  
   • response(Receive_Application  Preliminary_Credit_Check) – guarantees it happens after each application.  
   • exactly_one(Preliminary_Credit_Check) – prevents multiple, potentially inconsistent, credit pulls.  
   • chainprecedence(Authorize_Contract_Terms  Preliminary_Credit_Check) – every contract authorization must be immediately preceded by the same credit check result, ensuring that the credit profile used for the decision is the one that feeds final approval.  
   • nonsuccession(Notify_Customer  Preliminary_Credit_Check) – once the customer is notified, no last-minute credit check can be performed, protecting them from “bait-and-switch” decisions.

   Motivation  
   • Consumer-credit regulation requires a documented, immutable credit decision basis.  
   • “Exactly once” avoids multiple hard inquiries that would lower the applicant’s score.

   Violation consequences  
   • Multiple checks could be interpreted as “shopping for a score”, which is viewed negatively by regulators.  
   • Skipping the check exposes the bank to unquantified risk of default.


3. Gather Additional Documents  
   • The customer uploads pay slips, IDs, tax returns, etc.

   Guard rails  
   • succession(Preliminary_Credit_Check  Gather_Additional_Documents) – the bank asks for evidence only after the applicant looks broadly eligible (good CX and lower document handling costs).  
   • existence(Gather_Additional_Documents) – at least one document-collection step is mandatory.  
   • coexistence(Gather_Additional_Documents  Authorize_Contract_Terms) – if we collect documents we must eventually reach (or have reached) authorization; conversely, no contract can be authorized unless the required evidence has been gathered.  
   • altsuccession(Gather_Additional_Documents  Quality_Assurance_Review) – every time we collect documents we are obliged, at some point, to have a QA look at the file.

   Motivation  
   • Anti-money-laundering (AML) and Know-Your-Customer (KYC) laws require hard evidence of identity and income.  
   • Asking only eligible customers to submit paperwork avoids frustration and drop-outs.

   Violation consequences  
   • Authorizing without documents can invalidate the contract and trigger regulatory fines.  
   • Collecting documents before eligibility wastes effort and annoys prospects.


4. Assemble Loan Offer Package  
   • A formal term sheet is prepared: principal, rate, schedule, covenants, disclosures.

   Guard rails  
   • responded_existence(Assemble  Quality_Assurance_Review) – packaging the deal automatically creates an obligation for QA to review it.  
   • chainresponse(Assemble  Transfer_Funds) – once the package is assembled, the next recorded action must be fund transfer. (Interpretation: the technical job that “assembles” the package is the same micro-service that queues the disbursement transaction, so no unrelated step is allowed to sneak in between.)

   Motivation  
   • Ensures the commercial terms used for disbursement are exactly the ones that were reviewed—no shadow editing in between.  

   Violation consequences  
   • If something else could slip in, a malicious actor might change the payment instructions after the package was approved.


5. Quality Assurance Review  
   • A second-pair-of-eyes or automated rule engine verifies pricing, regulatory clauses, and completeness of the documentation set.

   Guard rails  
   • precedence(Quality_Assurance_Review  Authorize_Contract_Terms) – authorization cannot be granted before QA signs off.  
   • chainsuccession(Quality_Assurance_Review  Assemble_Loan_Offer_Package) – QA must be followed immediately by package (or re-package) assembly, ensuring any fixes found by QA are captured in the final version.  
   • altsuccession(earlier) ensures QA is eventually triggered whenever documents are gathered.

   Motivation  
   • Compliance with internal credit policy, interest rate rules, and consumer-protection disclosure requirements.  
   • Four-eyes principle mitigates operational mistakes and insider fraud.

   Violation consequences  
   • Granting a loan that violates policy could require costly remediation or contract rescission.  
   • Missing disclosures may lead to class-action lawsuits.


6. Authorize Contract Terms  
   • A credit-officer (or rules engine for small loans) commits the institution to the loan.

   Guard rails  
   • coexistence with Gather_Additional_Documents (see step 3).  
   • precedence enforced by QA (must happen after QA).  
   • chainprecedence with Preliminary Credit Check (must immediately follow the credit snapshot that justified the deal), eliminating the risk that conditions changed in between.

   Motivation  
   • Ensures the approval is both data-driven and quality-checked.

   Violation consequences  
   • Approving before QA or without live credit data can void risk models and force additional capital provisioning under Basel guidelines.


7. Transfer Funds  
   • The disbursement file is sent to the payments system; money hits the customer’s account.

   Guard rails  
   • chainresponse(Assemble  Transfer_Funds) – direct hand-off from packaging ensures the wiring details are the QA-approved ones.  
   • altresponse(Transfer_Funds  Notify_Customer) – every disbursement triggers a customer notice sooner or later.  
   • noncoexistence(Transfer_Funds, Receive_Application) – conceptually, by the time we disburse, the “application” stage is closed; no new application event should coexist in the same trace (the real system splits the case ID at this boundary).

   Motivation  
   • Consumer-protection and PSD2 rules demand near-real-time customer information on funds availability.  
   • The bank cannot legally charge interest until the money is in the customer’s hands.

   Violation consequences  
   • Premature funding without authorization or QA may expose the bank to immediate loss.  
   • Funding with no subsequent notification breaches e-signature laws that require a copy of the executed contract to be delivered.


8. Notify Customer  
   • Email/SMS/app push with “Your loan has been funded, here’s your repayment schedule”.

   Guard rails  
   • altprecedence(Notify_Customer  Transfer_Funds) – a notification must always be preceded (at some point) by the actual transfer; prevents “false positive” messages.  
   • nonsuccession(Notify_Customer  Preliminary_Credit_Check) – once the customer has been notified, no further credit-check activity may occur inside the same case, shielding them from post-approval adverse actions.  
   • nonchainsuccession(Authorize_Contract_Terms  Notify_Customer) – notification cannot follow authorization immediately; at least one event (the fund transfer) must intervene, ensuring that we only notify after we truly executed the deal.

   Motivation  
   • Transparent, timely customer communication is mandated in most jurisdictions and is critical for satisfaction and trust.

   Violation consequences  
   • Notifying too early may create liability if the deal falls through.  
   • Not notifying at all violates fair-lending disclosure rules and opens the door to complaints.


9. Forbidden activity: Proceed_Without_Compliance  
   • absence(Proceed_Without_Compliance) – this activity must never occur, representing a hard-stop breach (e.g., overriding controls).  
   • The rule is a sentinel for process-mining dashboards: its mere existence in a log slice will flag a red-alert case.

   Consequences if it appears  
   • Immediate regulatory breach, potential criminal liability for employees, and reputational damage.


Putting it all together – a typical happy-path trace  
Receive_Application  Preliminary_Credit_Check  Gather_Additional_Documents  Quality_Assurance_Review  Assemble_Loan_Offer_Package  Transfer_Funds  Notify_Customer  

(Authorize_Contract_Terms can be embedded just after the credit check or, in some organizations, between QA and Assembly, as long as all declarative rules are satisfied.)


What could go wrong if rules are ignored?  
• Skipping Preliminary_Credit_Check: unquantified credit risk; possible violation of “responsible lending” laws.  
• Gathering documents before the credit check: customer frustration, unnecessary handling cost, potential privacy complaints.  
• Authorizing before QA: policy breaches discovered only after disbursement, forcing costly post-hoc remediation.  
• Transferring funds before authorization or QA: pure operational risk—money could leave the bank without a binding contract.  
• Failing to notify: fines under consumer-protection laws; increase in inbound support calls.  
• Performing Proceed_Without_Compliance: triggers audit findings, supervisory sanctions, and possibly personal liability for managers.


Summary  
The DECLARE model enforces critical control points (initiation, credit decision, document evidence, QA, authorization, disbursement, customer communication) without dictating exactly how teams schedule their work.  Its declarative nature allows flexibility—activities can be parallelised or repeated where not explicitly constrained—yet every path that ends in a funded loan is guaranteed to satisfy regulatory, risk, and customer-experience requirements.