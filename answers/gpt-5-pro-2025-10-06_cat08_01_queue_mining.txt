Section 1 — Queue identification and characterization

How to compute waiting (queue) time
- For a given visit (case), sort events by timestamp and lifecycle (START/COMPLETE).
- Service time of activity b: STb = COMPLETEb  STARTb.
- Waiting time before activity b: WTb = STARTb  max(COMPLETE of the immediately preceding activity(ies) for that visit).
  - For linear sequences, “preceding” is the previous completed activity.
  - For activities with multiple prerequisites (e.g., Doctor after both Registration and Nurse Assessment), use the latest COMPLETE among those prerequisites actually observed in that case (from the directly-follows path in the event log).
  - Truncate negative values to 0 to handle logging jitter.
- First-activity wait:
  - If an Arrival/Check-in timestamp exists, WTfirst = STARTfirst  Arrival.
  - If not, treat Registration START as first touch (cannot calculate pre-arrival waiting). If appointment time is available, you can additionally calculate pre-appointment waiting: STARTfirst  scheduled_time (do not mix internal and pre-appointment waits in the same KPI; track separately).

Queue constructs to analyze
- Activity-level queues: waits between specific activity pairs (e.g., Registration  Nurse Assessment).
- Resource-level queues: waits to specific resource or resource pool (e.g., Dr. Smith; “Registration Clerks” as pooled servers; “ECG Room 3”).
- Specialty/variant queues: waits along common variants (e.g., Registration  Nurse Assessment  Doctor (Cardio)  ECG  Checkout).

Key metrics per queue (overall and sliced by time-of-day, day-of-week, patient type, urgency, specialty)
- Central tendency and spread: mean, median, standard deviation, 75th/90th/95th percentiles, max.
- Volume: number of cases through the queue; total waiting hours accumulated.
- Frequency of excessive waits: share of cases exceeding service-level targets (e.g., wait to nurse 15 min, wait to doctor 30 min).
- Queue length over time: average and 90th percentile queue size; % time queue length > threshold.
- Resource utilization (per time bucket): total busy time / staffed capacity; for pooled servers,  = demand/(c × service rate).
- Variability drivers: arrival CV (C_a) per stage (inter-arrival variation), service-time CV (C_s) per stage and per resource.
- Flow efficiency: processing time / total flow time, per stage and end-to-end.

How to identify the most critical queues
- Use a composite severity ranking and a Pareto view:
  - Primary: total waiting hours contributed by the queue (volume × mean wait).
  - Secondary: 90th percentile wait and % over SLA (captures patient experience).
  - Tertiary: strategic impact slices (e.g., urgent patients, new visits, specific specialty).
- Flag queues with high utilization (>85%), high arrival variability (C_a > 1), or large peaks at specific hours.
- Visualize a queue heatmap (edges between activities/resources sized by total waiting hours) and time-of-day profiles to isolate where and when waits are worst.


Section 2 — Root cause analysis

Typical root causes to test with the event log
- Resource bottlenecks and misaligned capacity:
  - High utilization and long waits at specific hours (e.g., 9–11 am, 2–4 pm).
  - Single-point constraints: one ECG room, one clerk at check-out, one sub-specialist.
  - Short-staffed windows due to breaks/meetings overlapping peaks.
- Handover and dependency delays:
  - Doctor cannot start until nurse completes intake; nurse pool peaks create cascading delays.
  - Diagnostics not pre-scheduled; patients queue after doctor orders labs/imaging.
- Variability in service times:
  - New patient consults much longer than follow-ups; high variance across certain doctors or nurses.
  - Documentation-heavy steps extend service times, creating tail risk.
- Scheduling policy issues:
  - Wave scheduling that drops multiple patients at the top of the hour to a single station (e.g., registration or nurse intake).
  - Slot lengths not reflecting predicted service time; new/follow-up mixed without capacity buffer.
  - No reserved “catch-up” slots for diagnostics or check-out.
- Arrival patterns:
  - Early-morning and postlunch spikes; late arrivals bunching behind on-time arrivals.
  - Urgent walk-ins preempt scheduled flow.
- Patient-type differences:
  - New vs follow-up; high-urgency bypass rules disrupting queues; special pathways driving rework.

Process mining techniques to pinpoint causes
- Bottleneck analysis on the process map: color by mean and 90th percentile wait and by total waiting hours to highlight stage-level constraints.
- Resource analysis:
  - Per-resource utilization, service-time distributions, and performance spread (identify outlier slow or overburdened resources).
  - Social network/handover analysis to find handoff pairs with large delays (e.g., Nurse  Doctor).
- Variant analysis:
  - Identify high-wait variants (e.g., patients requiring both ECG and X-ray vs ECG only).
  - Compare “fast-track” vs “standard” variants for similar patient types.
- Time-slicing:
  - Heatmaps by hour/day to see cyclical peaks and mismatch to staffing rosters.
- Queue reconstruction:
  - Build time series of arrivals-to-queue and service-starts for each pooled resource; compute dynamic queue length, starvation/idle time, and spillover.
- Conformance checking:
  - Compare as-designed pathway to as-executed; detect rework loops and missing pre-visit steps that lead to downstream congestion.


Section 3 — Data-driven optimization strategies

Strategy 1: Demand–capacity alignment by stage and time-of-day
- Target queues: Registration, Nurse Assessment, Checkout, high-demand diagnostics (e.g., ECG), and any doctor pools with sustained utilization >85%.
- Root cause addressed: Capacity at key stages is lower than demand during predictable peaks.
- Data support:
  - From logs, compute hourly arrival rate to each stage and stage service-time distributions; estimate  by hour and the relationship between  and Wq (queue waits rise sharply as 1).
  - Identify specific 60–90 minute windows causing 60–80% of total waiting hours.
- Actions:
  - Micro-shift staffing: add 0.5–1.0 FTE equivalent during peak windows; stagger breaks to avoid everyone off at the half-hour.
  - Pooling where clinically permissible (e.g., cross-train MAs to support multiple specialties during peaks; pool check-out clerks).
  - For tests with room constraints, add flexible overflow capacity (shared room/time blocks) during peaks.
- Expected impact:
  - Reducing peak-stage utilization from ~90–95% to ~75–85% often halves average queue waits and cuts the 90th percentile by 30–50% for that stage, with minimal increase in total hours if concentrated in peaks.

Strategy 2: Slot design that reflects predicted service time and downstream load
- Target queues: Nurse  Doctor handoff and Doctor  Diagnostics.
- Root cause addressed: Mismatch between slot length and actual service time; top-of-hour bunching.
- Data support:
  - From logs, estimate service-time distributions by patient type, urgency, doctor, and visit reason; fit predictive model or rules (e.g., new cardiology visit needs 40 minutes; follow-up 20; visits with ECG add 10 minutes downstream).
  - Derive target slot-lengths and maximum arrivals-per-5 minutes at Registration and Nurse.
- Actions:
  - Introduce templated variable slot lengths by patient type and doctor.
  - Use “blended wave” scheduling that staggers starts (e.g., one new patient plus two follow-ups per 10-minute interval) to limit simultaneous arrivals to Registration/Nurse.
  - Gate downstream: when a visit type typically requires ECG, auto-reserve an ECG slot within a time window aligned with expected doctor finish to avoid a secondary queue.
- Expected impact:
  - 15–30% reduction in wait to nurse and doctor; 20–40% reduction in post-consult diagnostics wait; fewer extreme tails (lower 90th/95th percentiles).

Strategy 3: Pre-visit digital check-in and nurse e-triage
- Target queues: Registration and Nurse Assessment; indirectly reduces wait to Doctor.
- Root cause addressed: Long/variable front-end service times due to data entry, consent, medication reconciliation starting at arrival.
- Data support:
  - Log-derived Registration ST and Nurse ST; identify tasks suitable for pre-completion.
- Actions:
  - Enable pre-visit forms (demographics, insurance, history, PROMs) 24–48 hours prior; kiosk or mobile check-in with verification rather than full data entry.
  - For predictable labs or vitals, allow pre-visit vitals/labs or express triage lane for follow-ups with no changes.
- Expected impact:
  - 20–40% reduction in Registration and Nurse service times, translating to 20–35% lower waits at these stages and shorter handover delays to doctors, especially at morning peaks.

Strategy 4: Parallelize and pre-allocate diagnostics
- Target queues: Doctor  ECG/X-ray/bloods; subsequent Checkout.
- Root cause addressed: Diagnostics ordered post-consult with no reserved capacity; single-room bottlenecks.
- Data support:
  - Identify variants where diagnostics are predictably ordered; quantify post-consult diagnostic waits and their share of total visit time.
- Actions:
  - For high-likelihood tests (based on visit reason), pre-hold diagnostic slots within a window; release automatically if not needed by a cutoff.
  - Where clinical policy allows, lab work before consult for chronic disease follow-ups; or a “pull system” where nurse can initiate ECG from protocol before doctor enters.
  - Create a small “swing” diagnostic capacity block during peak hours to absorb variability.
- Expected impact:
  - 25–50% reduction in diagnostic waits; 10–20% reduction in total visit duration for affected variants.

Strategy 5: Real-time flow management with alerts
- Target queues: Any stage when live queue length or ETT (estimated time to be seen) breaches thresholds.
- Root cause addressed: Variability and unanticipated surges not covered by templates.
- Data support:
  - Stream the same event types; compute live arrivals-to-queue vs service starts; predict near-term queue length using recent throughput.
- Actions:
  - Dashboards with red/amber/green per stage; automatic pages for a floater MA/clerk; dynamic rerouting to pooled resources; initiate “fast-track” protocol for eligible follow-ups when ETT to doctor > X minutes.
- Expected impact:
  - 10–20% reduction in peak queue lengths and fewer SLA breaches; protects patient experience during spikes.

Optional complementary actions (data-backed)
- Cross-training and standard work to reduce staff-to-staff variation in service time.
- Documentation support (templates/scribes) to reduce doctor service-time variability.
- Separate flow for urgent walk-ins with dedicated capacity buffers to protect the scheduled pathway.


Section 4 — Trade-offs and constraints

- Cost vs wait reduction:
  - Adding peak capacity reduces waits but risks lower utilization off-peak. Mitigate by micro-shifts, floaters, and cross-training so added capacity is flexible.
- Bottleneck shifting:
  - Fixing Registration may push the bottleneck to Nurse or Diagnostics. Monitor all downstream queues after changes; expect the constraint to move.
- Care quality and safety:
  - Parallelization or protocol-driven pre-tests must be clinically appropriate; include guardrails and physician oversight.
- Equity and patient experience:
  - Digital pre-check-in can disadvantage patients without access; maintain on-site alternatives and assistance.
- Staff workload and change fatigue:
  - Stagger transitions; use pilots; involve staff in co-design; measure workload fairness.
- Schedule complexity:
  - Variable slot lengths and pre-held diagnostics increase scheduling complexity; ensure tooling supports automation and exception handling.
- Space/equipment constraints:
  - Physical room limits cap gains from staffing; where rooms/equipment are the true constraints, consider reconfigurations or small capital investments targeted by queue data.


Section 5 — Measuring success

Operational and experience KPIs (track baseline vs post-change, and continuously)
- End-to-end visit duration: mean, median, 90th percentile.
- Total waiting time per visit and by stage; flow efficiency (% of time in value-adding service).
- Stage SLAs:
  - % seen by nurse within 15 minutes of Registration complete.
  - % seen by doctor within 30 minutes of nurse complete.
  - % completing diagnostics within 20 minutes of order.
- Queue health:
  - Average and 90th percentile queue length per stage; % time above threshold.
  - Time-bucketed utilization and variability (C_a, C_s) per stage.
- Throughput and access:
  - Visits completed per clinic hour; no-show and late arrival rates; rework/return rates due to missed tests.
- Staff and cost:
  - Overtime hours, schedule adherence, cross-coverage activations; cost per visit.
- Patient-reported:
  - Satisfaction scores specific to waits (front desk, nurse, doctor, tests); complaints related to delays.

Monitoring approach
- Build a continuous queue-mining pipeline from the same event log:
  - Daily/weekly performance dashboards and control charts for key queues and SLAs.
  - Time-of-day/day-of-week heatmaps to validate demand–capacity fit.
  - Alerting for live breaches when implementing real-time flow management.
- Experimentation and sustainment:
  - Pilot changes in one specialty or time window; use A/B or stepped-wedge designs.
  - Predefine success criteria (e.g., 90th percentile wait to doctor 25 min with no increase in overtime).
  - After rollout, revisit monthly to re-balance templates as seasonality and demand mix evolve.
- Data quality checks:
  - Lifecycle completeness (START/COMPLETE), event ordering, clock sync; filter outliers and annotate special days.

How to get started next week
- Clean and enrich the log (arrival/scheduled times, resource rosters, room mapping, patient attributes).
- Build the queue matrix and severity ranking to select top 3–5 queues by total waiting hours.
- For each, produce time-of-day profiles, utilization, and variability diagnostics.
- Co-design one scheduling change (Strategy 2) and one capacity tweak (Strategy 1) for a 4–6 week pilot, with pre-held diagnostics (Strategy 4) if relevant to that specialty.
- Stand up a simple monitoring dashboard and define SLAs before go-live.

This approach uses the event log to quantify where waiting occurs, why it occurs, and which targeted, low-cost interventions will produce the largest, sustained improvements in patient flow and experience.