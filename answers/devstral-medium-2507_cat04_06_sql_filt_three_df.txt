To achieve the desired result, we need to follow these steps:

1. Identify cases that contain the specified sequence of activities in direct succession.
2. Filter those cases further to include only those where the time elapsed between 'Create Order' and 'Confirm Order' is more than 5 days.
3. Exclude events from these cases in the final result.

Here's the DuckDB SQL query to accomplish this:

```sql
WITH SequenceCheck AS (
    SELECT
        case_id,
        activity,
        timestamp,
        LEAD(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
        LEAD(timestamp) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_timestamp
    FROM
        event_log
),
FilteredCases AS (
    SELECT
        case_id
    FROM
        SequenceCheck
    WHERE
        activity = 'Approve Purchase Requisition'
        AND next_activity = 'Create Order'
        AND next_next_activity = 'Confirm Order'
        AND (next_next_timestamp - next_timestamp) > INTERVAL '5 days'
)
SELECT
    e.*
FROM
    event_log e
WHERE
    e.case_id NOT IN (SELECT case_id FROM FilteredCases)
ORDER BY
    e.case_id, e.timestamp;
```

### Explanation:

1. **SequenceCheck CTE**:
   - This Common Table Expression (CTE) uses the `LEAD` window function to look ahead at the next and the next-next activities and their timestamps for each case.
   - It partitions the data by `case_id` and orders it by `timestamp` to ensure the sequence is checked correctly.

2. **FilteredCases CTE**:
   - This CTE filters the cases that have the specified sequence of activities in direct succession.
   - It also checks if the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.

3. **Final SELECT**:
   - The final query selects all events from the `event_log` table where the `case_id` is not in the list of filtered cases.
   - The results are ordered by `case_id` and `timestamp` to maintain the chronological order of events within each case.

This query ensures that only events from cases that do not meet the specified sequence and timing criteria are included in the final result.