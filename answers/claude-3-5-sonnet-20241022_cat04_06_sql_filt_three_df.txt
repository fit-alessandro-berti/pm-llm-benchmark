Here's a DuckDB SQL query that solves this problem:

```sql
WITH sequential_events AS (
    -- Number events within each case to identify sequences
    SELECT 
        *,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) as next_activity,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) as next_activity_2,
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) as next_timestamp,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) as next_timestamp_2
    FROM event_log
),
matching_cases AS (
    -- Identify cases with the specific sequence and timing condition
    SELECT DISTINCT case_id
    FROM sequential_events
    WHERE activity = 'Approve Purchase Requisition'
    AND next_activity = 'Create Order'
    AND next_activity_2 = 'Confirm Order'
    AND DATEDIFF('day', next_timestamp, next_timestamp_2) > 5
)
-- Return all events except those from matched cases
SELECT e.*
FROM event_log e
WHERE e.case_id NOT IN (
    SELECT case_id 
    FROM matching_cases
)
ORDER BY case_id, timestamp;
```

This query works as follows:

1. The first CTE (`sequential_events`):
   - Uses window functions to look ahead at the next two activities and their timestamps for each event within each case
   - This allows us to identify sequences of three activities in direct succession

2. The second CTE (`matching_cases`):
   - Identifies cases where:
     - The three activities appear in the exact specified order
     - The time between 'Create Order' and 'Confirm Order' is more than 5 days
   - Uses DISTINCT to get unique case IDs that match these criteria

3. The main query:
   - Excludes all events from the cases identified in `matching_cases`
   - Returns all other events from the original event log
   - Orders the results by case_id and timestamp for readability

Key features of this solution:

- Uses window functions (LEAD) to check for sequential activities efficiently
- Handles the timing condition using DATEDIFF
- Maintains proper event ordering within cases
- Excludes entire cases that match both the sequence and timing criteria
- Returns all events from non-matching cases
- Preserves the original event data structure in the output

The query will return all events from cases that either:
- Don't contain the specified sequence of activities in direct succession, or
- Contain the sequence but the time between 'Create Order' and 'Confirm Order' is 5 days or less