Below is a business-oriented narrative that faithfully respects every constraint encoded in the DECLARE model.  Read it as the “playbook” an operations manager could hand to a new employee to explain how a single loan-application case must unfold.

----------------------------------------------------------------
1.  Receive the application (init, existence)  
   • The very first event in every case is the formal intake of the customer’s request (“Receive Application”).  
   • The activity must occur at least once and may never be skipped because the whole case is meaningless without it.  

2.  Run one – and only one – Preliminary Credit Check (exactly_one, response)  
   • The model says “exactly_one Preliminary_Credit_Check” plus a “response” constraint that ties it to the intake.  
   • Translation: after you receive the application you must check the customer’s credit, and you may do that once – no retries, no duplicates.  
   • Real-world reason: regulators (and sound risk management) demand a documented, reproducible credit-worthiness decision; repeated checks invite inconsistencies and audit findings.  

3.  Collect supporting paperwork (succession)  
   • The succession rule “Preliminary_Credit_Check  Gather_Additional_Documents” forces the document collection to happen after (not before) the credit check.  
   • Why?  You only ask for what you truly need.  The credit profile tells you which proofs of income, collateral statements or identity confirmations are still missing, thereby limiting customer friction.  

4.  Guarantee the presence of downstream activities (coexistence)  
   • Because “Gather_Additional_Documents” coexists with “Authorize_Contract_Terms”, once you start collecting documents you are implicitly committing to reach formal authorization later in the same case.  
   • This prevents wasteful document chasing in cases that would otherwise be declined early.  

5.  Immediate Quality-Assurance check followed by packaging the offer (chainsuccession, responded_existence, precedence)  
   • Every offer package must be quality-checked first (“precedence Quality_Assurance_Review  Authorize_Contract_Terms”).  
   • Furthermore, whenever QA happens it must be followed immediately (chainsuccession) by “Assemble_Loan_Offer_Package”; conversely, “Assemble_Loan_Offer_Package” is only allowed if a QA review was done (responded_existence).  
   • Motivation: separating the compliance gate (QA) from the commercial packaging step, but ensuring they are back-to-back so nothing slips in between that could invalidate QA’s verdict.  

6.  Authorize the contract – but only when the pre-requisites sit in the right order (chainprecedence, coexistence, nonchainsuccession)  
   • “Authorize_Contract_Terms” must be immediately preceded by the single Preliminary Credit Check (chainprecedence), guaranteeing that the credit data feeding the authorization decision is up-to-date.  
   • It also coexists with the earlier document-gathering step (see point 4), ensuring no authorization without a complete file.  
   • A further safeguard (“nonchainsuccession”) forbids notifying the customer in the very next step; the idea is that a final, internal consistency check or funding step should intervene before any communication.  

7.  Disburse funds right after the offer package (chainresponse)  
   • As soon as the offer package is assembled, the funds must be transferred immediately (“chainresponse Assemble_Loan_Offer_Package  Transfer_Funds”).  
   • Business logic: once everybody has signed off on the exact loan terms, delaying payment only harms customer experience and exposes the bank to rate-lock risks.  

8.  Notify the customer – but in a controlled relationship with the transfer (altresponse and altprecedence)  
   • Two alternating constraints bind “Transfer_Funds” and “Notify_Customer”.  
     – altresponse: every transfer eventually triggers exactly one notification.  
     – altprecedence: if a notification occurs, it must have been preceded at some point by a transfer.  
   • Net effect: every case can show the pair in either order, but never both orders, and never duplicates (e.g., you may send the notice first with “funds will arrive today” or you may wire the money first and then confirm reception – but not both).  
   • Operational reason: some jurisdictions require customer advice before settlement, others after settlement; the model leaves room for both variants while blocking contradictory double-messages.  

9.  Forbidden or mutually exclusive situations (absence, noncoexistence, nonsuccession)  
   • “Proceed_Without_Compliance” is absolutely prohibited (absence).  The system must not even log such an event – it would constitute a compliance breach.  
   • “Noncoexistence Transfer_Funds  Receive_Application” prevents the extreme edge case where an operator initiates funding during the same millisecond the application is received (helpful in asynchronous event logs).  
   • “Nonsuccession Notify_Customer  Preliminary_Credit_Check” bars any possibility of going back to the beginning of the risk process after the customer has already been informed.  

----------------------------------------------------------------
Putting it all together – a typical “happy-path” timeline

1. Receive Application  
2. Preliminary Credit Check  
3. Gather Additional Documents  
4. Quality Assurance Review  
5. Assemble Loan Offer Package  
6. Transfer Funds  
7. Notify Customer  
8. Authorize Contract Terms  (alternatively, Authorize may appear earlier provided it is immediately after the credit check; the coexistence rules ensure it always appears somewhere in the case)  

Variations that still satisfy the model are possible (e.g., Authorization could be inserted between steps 4 and 5), but the constraints guarantee that every mandatory activity appears, appears at most the allowed number of times, and always in a risk-controlled ordering.

----------------------------------------------------------------
Why these rules matter in real life

• Regulatory compliance:  Banking supervisors insist on a documented credit decision, proof of customer due diligence, and a clear audit trail.  Declare constraints translate those obligations into machine-checkable rules.  
• Fraud prevention & risk management:  Sequential gates (credit check  document gathering  QA) make it harder for fraudulent dossiers or clerical errors to pass unnoticed.  
• Customer satisfaction:  Exactly-once checks and immediate funding after package assembly cut waiting times and duplicate information requests.  
• Operational best practice:  Alternating constraints give the business flexibility to respect different market or time-zone conventions without rewriting the whole process model.  

----------------------------------------------------------------
What could go wrong if the constraints are violated?

• Skipping the Preliminary Credit Check or doing it twice:  exposes the bank to bad debt or creates conflicting risk ratings, leading to potential write-offs and heavy audit penalties.  
• Gathering documents before credit scoring:  frustrates customers who must deliver paperwork for applications likely to be declined anyway – and wastes staff time.  
• Transferring funds before QA/authorization:  clear breach of internal controls; could trigger claw-back procedures, reputational damage, and regulator fines.  
• Notifying the customer before the funds are cleared (when the jurisdiction demands the opposite):  may generate complaints, legal exposure, and angry social-media posts.  
• Executing the forbidden “Proceed_Without_Compliance”:  immediate regulatory reportable event, possible suspension of lending licence, and senior-management liability.  

By encoding these risks as hard constraints with 100 % support and confidence, the DECLARE model does not merely document the desired flow – it becomes an executable guard-rail that an automated process-mining engine can use to check every real execution log for conformance, long before any regulator or unhappy customer does.