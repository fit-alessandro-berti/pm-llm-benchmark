Below is a “walkthrough” of the model, moving from the singleactivity cardinality rules to the more complex temporal constraints.  For every rule type I first recall – in one sentence – what the template means, then explain what it achieves in the loan domain and why a bank or regulator would care.

-------------------------------------------------
1. Purecardinality rules (what must or must not happen)
-------------------------------------------------
• existence( A = Receive Application )  
  Meaning: at least one A must occur.  
  Practice: no case is opened unless a formal application is logged.  
  Goal / regulation: creates an auditable starting point for KYC / GDPR records.

• existence( C = Gather Additional Documents )  
  At least one C must occur.  
  Practice: each file must contain supporting evidence (pay slips, IDs, etc.).  
  Goal: satisfy antimoneylaundering (AML) and incomeverification duties.

• absence( Z = Proceed Without Compliance )  
  Z is forbidden.  
  Practice: “shortcut” behaviour is blocked by design; if it appears the case is automatically noncompliant.  
  Goal: zerotolerance rule demanded by regulators and internal audit.

• exactly_one( B = Preliminary Credit Check )  
  Exactly one B.  
  Practice: the scoring engine may only be triggered once; multiple executions could mask manual tampering.  
  Goal: Basel/IFRS9 models assume the first score is stored; repeat scoring would jeopardise audit trails.

• init( A )  
  The very first event must be Receive Application.  
  Practice: prevents backdated actions (e.g., gathering documents) before the client is officially onboarded.  
  Goal: chronological integrity of the file.

-------------------------------------------------
2. Onetoone “pair” constraints
-------------------------------------------------
• responded_existence( D  E )  
  If Assemble Loan Offer Package happens, a Quality Assurance Review must also appear (anytime).  
  Practice: every prepared offer must be reviewed by a second line of defence.  
  Goal: foureyes principle, consumerprotection legislation.

• coexistence( C  F )  
  If C occurs, F must occur somewhere, and viceversa.  
  Practice: collecting extra documents implies that a formal authorisation step later needs to take them into account, and authorising terms without ever gathering documents would be impossible.  
  Goal: traceability between documentation and approval.

• noncoexistence( G, A )  
  G = Transfer Funds, A = Receive Application may not both occur in the same trace.  
  Practice: disbursement cannot happen in the same case in which an application is still in “intake” mode – effectively it forces the process to spawn a new “contract” case before paying out.  
  Goal: financial segregation between origination and disbursement ledgers.

-------------------------------------------------
3. Causal templates (ordering, but not necessarily directly adjacent)
-------------------------------------------------
• response( A  B )  
  After every application, eventually a preliminary credit check must follow.  
  Practice: no file can stay unscored.  
  Goal: align with fairlending regulation that every applicant is assessed.

• precedence( E  F )  
  F is only allowed if preceded by E.  
  Practice: contract terms may not be signed off until QA has stamped the package.  
  Goal: SOXlike internalcontrol requirement.

• succession( B  C )  
  Whenever B occurs, C must follow later; conversely, C implies B occurred earlier.  
  Practice: once the score is produced, extra documents are always requested; and you cannot hand in documents unless someone already ran the score.  
  Goal: the scoring model determines which documents are needed.

• altresponse( G  H )  
  If G (Transfer Funds) happens, the system must eventually perform H (Notify Customer) OR some alternative; here only H is listed, so effectively it becomes a normal response.  
  Practice: customers are always informed about the payout.  
  Goal: transparency, contractual duty to inform.

• altprecedence( H  G )  
  H (Notify Customer) is only allowed if G OR one of its alternatives occurred before.  
  Practice: you cannot tell the customer “money sent” without having really sent it.  
  Goal: avoid misleading communication.

• altsuccession( C  E )  
  Every C must be followed by E OR an alternative; and E implies C before.  
  Practice: once documents arrive, the QA review (or a substitute) must check them; and QA means there were documents to review.  
  Goal: completeness of the review cycle.

-------------------------------------------------
4. Chain templates (activities must be immediately adjacent)
-------------------------------------------------
• chainresponse( D  G )  
  Right after assembling a package, the next event must be the fund transfer.  
  Practice: once the final offer is produced, the system automatically triggers disbursement in the very next log entry (e.g., a straightthroughprocessing path).  
  Goal: minimise turnaround time once everything is approved.

• chainprecedence( F  B )  
  F (Authorise Terms) is only allowed if the immediately previous event is B (Preliminary Credit Check).  
  Practice: the authoriser opens the scoring report on screen and signs off right away; if anything else happened in between, a fresh credit check is required.  
  Goal: guarantee that the decision is based on the most recent score (no stale data).

• chainsuccession( E  D )  
  E must be directly followed by D and viceversa.  
  Practice: QA review is logged at time t, then at time t+1 the package is assembled, and there can be nothing in between.  
  Goal: lock the record so that no undocumented changes creep in after QA has spoken.

• nonchainsuccession( F  H )  
  After F, H (Notify Customer) must NOT be the immediately next event.  
  Practice: some internal booking (e.g., booking interest accrual) has to occur between authorising terms and communicating them.  
  Goal: ensures separation of internal and external communications.

-------------------------------------------------
5. Putting the net together – what behaviour is enforced?
-------------------------------------------------
A valid case must therefore look roughly like:

1. Receive Application (init, existence)  
2. Preliminary Credit Check (exactly once, response)  
3. Gather Additional Documents (succession)  
4. Quality Assurance Review (altsuccession)  
5. Assemble Loan Offer Package (responded_existence)  
6. Transfer Funds (chainresponse)  
7. Notify Customer (altresponse, altprecedence)  

No trace may contain:
• Proceed Without Compliance at any point (absence)  
• Transfer Funds in the same trace that still contains the intake (noncoexistence)  
• Notify Customer immediately after Authorise Contract Terms (nonchainsuccession)  

-------------------------------------------------
6. Business motives behind the stringency
-------------------------------------------------
1. Regulatory compliance  
   - AML / KYC: mandatory document gathering before any monetary movement.  
   - Fairlending laws: every applicant must be creditscored exactly once.  
   - Consumerprotection statutes: foureyes QA and formal notifications.  
   - Basel / IFRS9: model governance & auditability of the scoring step.

2. Risk management  
   - Prevents fund release prior to critical controls (noncoexistence, precedence).  
   - Ensures that any offer is built on the freshest data (chainprecedence).  
   - Forces a deterministic order, making deviations immediately detectable.

3. Operational excellence  
   - Immediate chainresponse from offer to payout enables sameday funding for approved customers—competitive advantage.  
   - Clear handoffs reduce rework and internal backandforth emails.

4. Transparency & audit trail  
   - Every mandatory activity (existence rules) guarantees artefacts in the logfile that an auditor can inspect.  
   - Forbidden shortcuts (absence) and forbidden sequences (nontemplates) raise red flags in processmining dashboards.

-------------------------------------------------
7. Why DECLARE is a good fit here
-------------------------------------------------
• Flexibility: the model allows parallelism (e.g., documents can still arrive after the credit check) while preventing prohibited patterns.  
• Compliancebydesign: rules are explicitly stated and can be monitored automatically.  
• Evolvability: new constraints (e.g., ESG scoring) can be added without redesigning a full BPMN flow.

-------------------------------------------------
In short, the network of DECLARE constraints formalises typical banking “threelinesofdefence” practice: make sure every loan starts clean (init/existence), undergoes the required risk assessments (response, succession), is checked by an independent reviewer (responded_existence), and is only communicated and paid out in a tightly controlled order (chaintemplates, nontemplates).  By encoding these expectations declaratively, the institution gains a live compliance monitor and a clear story to tell regulators and auditors about how quality and customer fairness are continuously enforced.