POWL representation of the global manufacturing & distribution process
=====================================================================

Legend  
– Transition(label="…")  = activity node  
– SilentTransition()     =  (empty-label)  
– OperatorPOWL(…, …)     = control-flow operator  
– StrictPartialOrder(…)  = root that fixes the (partial) execution order  
–                       = edge in the partial-order relation

-----------------------------------------------------------------------
1. Atomic activities (transitions)

OR  = Transition(label="OR")   # Order Received  
MS  = Transition(label="MS")   # Material Sourcing  
QS  = Transition(label="QS")   # Quality Screening  
AS  = Transition(label="AS")   # Assembly  
IQC = Transition(label="IQC")  # In-line Quality Check  
TST = Transition(label="TST")  # Testing  
RT  = Transition(label="RT")   # Re-Testing  
PK  = Transition(label="PK")   # Packaging  
LB  = Transition(label="LB")   # Labeling  
DP  = Transition(label="DP")   # Distribution Planning  
D   = Transition(label="D")    # Dispatch  
   = SilentTransition()       # skip-node, used to model “no labeling”

-----------------------------------------------------------------------
2. Control-flow structures detected in the log

a) Assembly / in-line quality loop  
   AssemblyLoop = *(AS, IQC)        # execute AS once, then
                                    # (exit | IQC  AS)

b) Testing / re-testing loop  
   TestingLoop  = *(TST, RT)        # execute TST once, then
                                    # (exit | RT  TST)

c) Optional labeling  
   LabelChoice  = X(LB, )          # either LB or nothing

-----------------------------------------------------------------------
3. Overall process as one StrictPartialOrder

RootPOWL = PO = (nodes = {  
    OR, MS, QS, AssemblyLoop, TestingLoop,  
    PK, LabelChoice, DP, D }  
)

Execution constraints (edges)

OR            MS  
MS            QS  
QS            AssemblyLoop  
AssemblyLoop  TestingLoop  
TestingLoop   PK  
PK            LabelChoice  
LabelChoice   DP  
DP            D

All other pairs are *not* ordered, hence concurrent execution is allowed only where no path of edges exists (none is needed for this process).

-----------------------------------------------------------------------
4. Compact Python-like definition (no execution)

```python
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# 1) transitions
OR  = Transition("OR")
MS  = Transition("MS")
QS  = Transition("QS")
AS  = Transition("AS")
IQC = Transition("IQC")
TST = Transition("TST")
RT  = Transition("RT")
PK  = Transition("PK")
LB  = Transition("LB")
DP  = Transition("DP")
D   = Transition("D")
tau = SilentTransition()

# 2) operators
AssemblyLoop = OperatorPOWL(operator=Operator.LOOP, children=[AS, IQC])
TestingLoop  = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])
LabelChoice  = OperatorPOWL(operator=Operator.XOR,  children=[LB, tau])

# 3) partial order
root = StrictPartialOrder(nodes=[
    OR, MS, QS, AssemblyLoop,
    TestingLoop, PK, LabelChoice,
    DP, D
])

root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, AssemblyLoop)
root.order.add_edge(AssemblyLoop, TestingLoop)
root.order.add_edge(TestingLoop, PK)
root.order.add_edge(PK, LabelChoice)
root.order.add_edge(LabelChoice, DP)
root.order.add_edge(DP, D)
```

This POWL model exactly captures:

• the mandatory sequential backbone OR  MS  QS  Assembly  Testing  PK  (optional LB)  DP  D;  
• the possible repetition of “AS followed by optional IQC” any number of times (including none) via the first LOOP;  
• the possible repetition of “TST followed by RT” any number of times (including none) via the second LOOP;  
• the fact that labeling (LB) may be skipped, expressed as an XOR with a -transition.

The model is consistent with every observed trace in the event log and allows the same variations (loops, skips) seen in practice.