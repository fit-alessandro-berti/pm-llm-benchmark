```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet('Insurance Claim Process')

# Create places
p_start = PetriNet.Place('p_start')
p_after_claim = PetriNet.Place('p_after_claim')
p_after_reg = PetriNet.Place('p_after_reg')
p_dv_done = PetriNet.Place('p_dv_done')
p_fc_before = PetriNet.Place('p_fc_before')
p_fc_done = PetriNet.Place('p_fc_done')
p_ca_before = PetriNet.Place('p_ca_before')
p_ca_done = PetriNet.Place('p_ca_done')
p_p_before = PetriNet.Place('p_p_before')
p_after_p = PetriNet.Place('p_after_p')
p_after_n = PetriNet.Place('p_after_n')
p_end = PetriNet.Place('p_end')

# Add places to the net
net.places.add(p_start)
net.places.add(p_after_claim)
net.places.add(p_after_reg)
net.places.add(p_dv_done)
net.places.add(p_fc_before)
net.places.add(p_fc_done)
net.places.add(p_ca_before)
net.places.add(p_ca_done)
net.places.add(p_p_before)
net.places.add(p_after_p)
net.places.add(p_after_n)
net.places.add(p_end)

# Create transitions
t_c = PetriNet.Transition('t_insurance_claim', label='Insurance Claim')
t_cr = PetriNet.Transition('t_claim_registration', label='Claim Registration')
t_dv = PetriNet.Transition('t_document_verification', label='Document Verification')
t_rds = PetriNet.Transition('t_re_document_submission', label='Re-Document Submission')
t_dv_ok = PetriNet.Transition('t_dv_ok', label=None)
t_fc = PetriNet.Transition('t_fraud_check', label='Fraud Check')
t_ii = PetriNet.Transition('t_in_depth_investigation', label='In-depth Investigation')
t_fc_ok = PetriNet.Transition('t_fc_ok', label=None)
t_ca = PetriNet.Transition('t_claim_assessment', label='Claim Assessment')
t_ap = PetriNet.Transition('t_approval', label='Approval')
t_no_ap = PetriNet.Transition('t_no_ap', label=None)
t_p = PetriNet.Transition('t_payment', label='Payment')
t_n = PetriNet.Transition('t_notification', label='Notification')
t_cl = PetriNet.Transition('t_closure', label='Closure')

# Add transitions to the net
net.transitions.add(t_c)
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_rds)
net.transitions.add(t_dv_ok)
net.transitions.add(t_fc)
net.transitions.add(t_ii)
net.transitions.add(t_fc_ok)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_no_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)

# Add arcs
petri_utils.add_arc_from_to(p_start, t_c, net)
petri_utils.add_arc_from_to(t_c, p_after_claim, net)
petri_utils.add_arc_from_to(p_after_claim, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_after_reg, net)
petri_utils.add_arc_from_to(p_after_reg, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_dv_done, net)
petri_utils.add_arc_from_to(p_dv_done, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p_after_reg, net)
petri_utils.add_arc_from_to(p_dv_done, t_dv_ok, net)
petri_utils.add_arc_from_to(t_dv_ok, p_fc_before, net)
petri_utils.add_arc_from_to(p_fc_before, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p_fc_done, net)
petri_utils.add_arc_from_to(p_fc_done, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p_fc_before, net)
petri_utils.add_arc_from_to(p_fc_done, t_fc_ok, net)
petri_utils.add_arc_from_to(t_fc_ok, p_ca_before, net)
petri_utils.add_arc_from_to(p_ca_before, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_ca_done, net)
petri_utils.add_arc_from_to(p_ca_done, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_p_before, net)
petri_utils.add_arc_from_to(p_ca_done, t_no_ap, net)
petri_utils.add_arc_from_to(t_no_ap, p_p_before, net)
petri_utils.add_arc_from_to(p_p_before, t_p, net)
petri_utils.add_arc_from_to(t_p, p_after_p, net)
petri_utils.add_arc_from_to(p_after_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_after_n, net)
petri_utils.add_arc_from_to(p_after_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# Define initial and final markings
im = Marking({p_start: 1})
fm = Marking({p_end: 1})
```