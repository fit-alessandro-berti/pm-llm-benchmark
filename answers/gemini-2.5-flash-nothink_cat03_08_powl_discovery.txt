```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define all individual activities as Transitions
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()

# Identify loop structures
# 1. IQC can be repeated with AS
# The pattern is AS -> IQC -> AS -> IQC ... or AS -> IQC (and exit to TST)
# This suggests a loop where the "do" part is IQC and the "then A again" part is AS.
# Or, more simply, (AS, IQC) can be repeated.
# Looking at the logs, it seems to be AS, then optionally IQC. If IQC happens, AS follows, and then IQC can happen again.
# A simpler interpretation: After AS, there can be a loop of (IQC -> AS). This loop can be skipped.
# Case 4 shows AS -> TST without IQC.
# Case 1, 2, 3, 5 show AS -> IQC -> AS.
# So, the sequence (IQC -> AS) is the repeatable part.
# Let's consider a loop that performs (IQC then AS) and can then repeat or exit.
# The entry point to this "assembly check" section is AS, and the exit is to TST.
# It seems "AS" itself can be part of the loop, or the loop happens AFTER AS.
# Given "AS, then IQC, then AS again...", it's a loop on (IQC, AS).
# This means: "Execute AS, then enter a loop: (IQC -> AS), then either exit or repeat (IQC -> AS)".
# So, AS is followed by a loop: *(IQC, AS).
loop_iqc_as = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])

# 2. RT (Re-Testing) leads back to TST
# The pattern is TST -> RT -> TST -> RT ... or TST -> (exit)
# This is a classic loop structure: *(TST, RT).
# However, the loop definition says: execute A, then either exit, or execute B then A again.
# So, *(TST, RT) means: execute TST, then either exit, or execute RT then TST again. This fits perfectly.
loop_tst_rt = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Identify choice structures
# 1. LB (Labeling) can be skipped (Case 2 vs others)
# This is an exclusive choice between LB and a silent transition (skip).
xor_lb_skip = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

# Define the overall partial order
# Based on the sequence: OR -> MS -> QS -> (AS, then optional IQC/AS loop) -> (TST, then optional RT/TST loop) -> PK -> (LB or skip) -> DP -> D

# Let's define the main nodes for the StrictPartialOrder
# The flow is generally sequential, but with internal loops and choices.

# The "assembly process" block starts with an initial AS, then potentially enters the IQC/AS loop.
# It's AS -> (IQC -> AS) repeated.
# The definition of loop * (A, B) is execute A, then either exit, or execute B then A again.
# If we define `loop_iqc_as = *(IQC, AS)`, it means first IQC, then AS, then loop. This is not what we want.
# We want AS, then potentially (IQC, AS) repeatedly.
# Let's rethink the IQC-AS interaction.
# Case 4: AS -> TST. No IQC.
# Case 1: AS -> IQC -> AS -> TST.
# Case 3: AS -> IQC -> AS -> IQC -> AS -> TST.
# This looks like: AS, followed by an optional sequence of (IQC, AS).
# So, it's (AS) followed by a loop of (IQC, AS) that can be exited immediately.
# Let's call the `IQC_AS_sequence = PO(nodes={IQC, AS}, order={IQC-->AS})`.
# Then the loop is `*(IQC_AS_sequence, silent_transition_to_exit_or_continue)`.
# The loop structure is `*(A, B)`: A is executed, then exit or execute B and A again.
# If we define `AS_loop_part = OperatorPOWL(operator=Operator.LOOP, children=[PO(nodes=[IQC, AS], order=[IQC->AS]), skip])`
# This means: execute (IQC then AS), then exit, or execute skip (nothing), then (IQC then AS) again. This is still awkward.

# A more suitable representation for "AS then optionally (IQC then AS repeated)" might be:
# AS followed by an optional loop.
# What is the loop of? It's `*(IQC, AS)`. The `AS` in `*(IQC, AS)` implies AS is done *after* IQC inside the loop body.
# So, `AS` activity.
# Then, the "IQC and repeat AS" part. This is `loop_iqc_as = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])`.
# The loop definition `*(A, B)` says: execute A, then either exit the loop, or execute B and then A again.
# So, `*(IQC, AS)` means: execute IQC, then either exit the loop, or execute AS and then IQC again.
# This fits the pattern: IQC then AS (if continuing), then IQC again.
# The problem is that AS is also a start point for the IQC repetition, not just a 'B' part.
# The most accurate way to model "AS, then optionally loop (IQC, AS)" is:
# We need an initial AS.
# Then, a choice: either go straight to TST, or go into a loop of (IQC, AS).
# If we go into the loop: first IQC, then AS (to repeat the loop), or exit to TST.
# So, it's `AS` -> `X(to_TST, loop_tst_part)` where `loop_tst_part = *(IQC, AS)`.
# This implies that after AS, you can go into a loop `*(IQC, AS)`.
# `*(IQC, AS)` means `IQC`, then `X(exit, (AS then IQC again))`.
# This fits the logs: AS (initial) -> (IQC -> AS -> IQC -> AS ... -> TST)
# The `AS` after `IQC` is part of the loop.
# So, we have an initial `AS_initial = Transition(label="AS_initial")`.
# Then, a loop that performs `IQC`, then `AS_repeated`.
# `loop_iqc_as_repeated = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])`
# The main flow would be: `AS_initial` -> `X(loop_iqc_as_repeated, TST)`? No.
# `AS` is always done before `IQC`. `IQC` can be skipped (Case 4).
# If `IQC` is done, `AS` follows.
# This means the "IQC followed by AS" is the repeatable unit.
# So, after an initial `AS`, we can optionally enter into a loop of `(IQC then AS)`.
# Let's consider `AS_initial` as the first AS.
# Then there is a choice: either proceed to `TST` OR execute `IQC_then_AS_loop`.
# The `IQC_then_AS_loop` itself means: `IQC`, then `AS`, and then the choice to repeat or exit.
# This translates to: `IQC_then_AS_loop = *(IQC, AS)`.
# The flow looks like: `AS` -> `X(skip, *(IQC, AS))`.
# Let's define `IQC_AS_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])`
# This means `IQC` is done, then optionally `AS` is done, then repeat `IQC`. This is not right.
# The definition of `*(A, B)` is: `A` then `(X(skip, B then A))`.
# So `*(IQC, AS)` means `IQC` then `X(skip, AS then IQC)`.
# This is `IQC -> AS -> IQC -> AS ...`. This looks good for the internal loop.
# But how to handle the initial AS and the optional nature of the IQC loop?
# Option 1: AS, then a choice between 'exit' (to TST) or 'enter loop of (IQC, AS)'.
# If 'enter loop of (IQC, AS)' is chosen, then IQC, then AS, then IQC (if looping), etc.
# This would be `AS` then `X(TST, IQC_AS_loop_entrance)`.
# `IQC_AS_loop_entrance` itself would contain `IQC_AS_loop = *(IQC, AS)`.
# But `X` takes *POWL models*.
# Let's model the "IQC and AS repeat" as a single block:
# `repeat_iqc_as = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])`
# This means `IQC` is executed, then choice: `exit` or `AS` and `IQC` again.
# The overall "Assembly and Quality Check" part is:
# `AS` followed by an optional `repeat_iqc_as`.
# `AS_optional_IQC_loop = PO(nodes=[AS, repeat_iqc_as, TST], order=[AS-->X(skip, repeat_iqc_as), X(skip, repeat_iqc_as)-->TST, AS-->TST])`
# This is getting overly complex for a `StrictPartialOrder`.
# The example `PO=(nodes={NODE1, NODE2, NODE3, X ( NODE4, NODE5 )}, order={NODE1-->NODE2, NODE1-->X ( NODE4, NODE5 ), NODE2-->X ( NODE4, NODE5 )})`
# implies that the `X` operator can be a node itself.

# Let's reconsider the flow with the given operators.
# Sequential flow: OR -> MS -> QS -> [Assembly & In-line QC] -> [Testing] -> PK -> [Labeling] -> DP -> D

# Block 1: [Assembly & In-line QC]
# This block starts with AS.
# After AS, there can be 0 or more (IQC -> AS) sequences.
# This means after AS, you can choose to do IQC, then AS, and then loop back to IQC again, or exit to TST.
# A simpler way to model "0 or more (IQC then AS) after an initial AS":
# It's an initial AS.
# Then, a loop that first does IQC, then can optionally do AS and repeat IQC, or exit.
# `IQC_AS_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])`
# This loop means: execute `IQC`. Then, either exit, or execute `AS` and then `IQC` again.
# So, `IQC -> (X(exit, AS -> IQC))`. This is exactly the `IQC -> AS -> IQC -> AS ...` pattern.
# The initial `AS` comes before this `IQC_AS_loop`.
# And from the `IQC_AS_loop` (or the initial `AS` if the loop is skipped), we go to `TST`.
# So, `AS` (initial) is followed by a choice: either `TST` or `IQC_AS_loop`.
# If `IQC_AS_loop` is chosen, then after `IQC_AS_loop` completes, it goes to `TST`.
# `AS_block_part = StrictPartialOrder(nodes=[AS, TST, IQC_AS_loop], order=[AS --> X(skip, IQC_AS_loop), IQC_AS_loop --> TST, AS --> TST])`
# This captures: AS leads to TST directly, OR AS leads to a part that contains the IQC loop, which eventually leads to TST.
# The `X(skip, IQC_AS_loop)` represents the optional nature.
# So, `AS` is a direct predecessor of both `X(skip, IQC_AS_loop)` and `TST`.
# And `X(skip, IQC_AS_loop)` is a direct predecessor of `TST`.
# Let's define the optional IQC part as `optional_iqc_loop_block`.
optional_iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])
choice_to_iqc_loop = OperatorPOWL(operator=Operator.XOR, children=[optional_iqc_loop, skip])

# Block 2: [Testing]
# TST -> (RT -> TST) repeated. This is a simple loop: `*(TST, RT)`.
testing_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# Block 3: [Labeling]
# LB can be skipped. This is an exclusive choice: `X(LB, skip)`.
labeling_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

# Now, assemble the main process using StrictPartialOrder.
# The main flow is sequential: OR -> MS -> QS -> (AS, then optional IQC loop) -> (Testing loop) -> PK -> (Labeling choice) -> DP -> D

# The sequence is:
# 1. OR
# 2. MS
# 3. QS
# 4. AS
# 5. The choice for the IQC loop, which implies a path to TST.
#    Let's refine the "AS, then optional IQC loop" part.
#    It's `AS` -> `(X(skip, *(IQC, AS)))` -> `TST`.
#    This means `AS` completes. Then, you either `skip` (go to TST) or enter `*(IQC, AS)`.
#    If `*(IQC, AS)` is entered, it completes, then also goes to `TST`.
#    So, `AS` is a predecessor to `X_IQC_loop`.
#    And `X_IQC_loop` is a predecessor to `TST`.
#    Also, `AS` can directly go to `TST`.
#    This is not a simple linear flow.
#    The `X` operator chooses between paths *immediately*.
#    The overall flow for Assembly & Testing needs careful construction.

# Let's define the nodes involved in the main flow.
# Initial activities: OR, MS, QS
# Core activities: AS, IQC, TST, RT, PK, LB, DP, D, skip

# Define the complex parts as sub-POWL models:
# 1. Assembly and In-line Quality Check Block:
# This block starts with AS.
# After AS, we may loop through (IQC -> AS).
# This is an initial AS, followed by an optional sequence of (IQC then AS) repeatedly.
# The sequence: AS, then X(skip, *(IQC, AS)).
# Let's use `X_optional_iqc_loop_after_as = OperatorPOWL(operator=Operator.XOR, children=[optional_iqc_loop, skip])` where `optional_iqc_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])`
# This means: `IQC` then `(X(exit, AS then IQC))`.
# This is `IQC -> AS -> IQC -> AS ...`. This fits the repeated `IQC-AS` part.

# So the structure from AS to TST is:
# Node `AS_node = Transition(label="AS")`
# Node `X_to_IQC_or_skip = OperatorPOWL(operator=Operator.XOR, children=[optional_iqc_loop, skip])`
# Node `TST_node = Transition(label="TST")`
# The partial order: `AS_node --> X_to_IQC_or_skip`, `AS_node --> TST_node` (for cases where IQC is skipped entirely)
# `X_to_IQC_or_skip --> TST_node`.
# This defines the "Assembly and In-line Quality Check" block and its transition to Testing.

# However, the loop `*(A,B)` has A being executed first.
# So `*(IQC, AS)` starts with IQC.
# Case 4 shows `AS` then `TST`. No IQC.
# Case 1, 2, 3, 5 show `AS` then `IQC` then `AS` (potentially multiple times) then `TST`.
# So it's: `AS` -> (optional `IQC_then_AS_loop`) -> `TST`.
# The `IQC_then_AS_loop` is essentially `*(IQC, AS)`.
# Let `IQC_AS_LOOP = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])`
# The optional part is `X(IQC_AS_LOOP, skip)`. Let's call this `OPT_IQC_AS_LOOP`.
# So, the sequence is `AS` -> `OPT_IQC_AS_LOOP` -> `TST`.
# This makes sense. `AS` is always done first. Then *optionally* the `IQC-AS` loop. Then `TST`.

# Refined structure for Assembly/IQC:
opt_iqc_as_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])
# This represents `IQC` followed by choice `(exit OR AS then IQC again)`.
# This matches `IQC -> AS -> IQC -> AS ...` pattern.

# Now, define the overall process structure.
# The process is largely sequential with a few flexible parts.
# Sequential nodes: OR, MS, QS, PK, DP, D.
# Complex nodes:
# 1. Assembly and In-line Quality Check: `AS` followed by `X(opt_iqc_as_loop, skip)`
#    Let's combine these: `AS_then_IQC_part = StrictPartialOrder(nodes=[AS, X(opt_iqc_as_loop, skip)], order={AS --> X(opt_iqc_as_loop, skip)})`
#    This does not capture the exit to TST.
#    A better way is to define a flow: `AS` -> `CHOICE_IQC_OR_SKIP` -> `TST`.
#    `CHOICE_IQC_OR_SKIP` has two options: `opt_iqc_as_loop` or `skip`.
#    `opt_iqc_as_loop` completes and then flows to `TST`. `skip` completes and flows to `TST`.
#    This implies that `TST` has two predecessors from this block: `opt_iqc_as_loop` and `skip`.
#    Let's name them:
    activity_or = Transition(label="OR")
    activity_ms = Transition(label="MS")
    activity_qs = Transition(label="QS")
    activity_as = Transition(label="AS")
    activity_tst = Transition(label="TST")
    activity_pk = Transition(label="PK")
    activity_dp = Transition(label="DP")
    activity_d = Transition(label="D")

    # In-line Quality Check Loop (IQC -> AS -> IQC -> ...)
    iqc_loop_body = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])
    # This means: execute IQC, then either exit, or execute AS and then IQC again.

    # Optional IQC/AS loop after initial AS: X(iqc_loop_body, skip)
    # This choice is what comes *after* the initial AS, before TST.
    # So, AS is followed by this choice, and the choice leads to TST.
    # Also, AS can directly lead to TST (Case 4).
    # This means the node `TST` can be reached from `AS` OR from `iqc_loop_body`.
    # Let's use `X_after_AS` to represent the choice between entering the IQC loop or skipping it.
    X_after_AS = OperatorPOWL(operator=Operator.XOR, children=[iqc_loop_body, skip])

    # Testing and Re-Testing Loop (TST -> RT -> TST -> ...)
    tst_rt_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])
    # This means: execute TST, then either exit, or execute RT and then TST again.

    # Labeling Choice (LB or skip)
    lb_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

    # Construct the main POWL model using StrictPartialOrder
    # The nodes list will contain all individual activities and the complex POWL models.
    # The relationships define the flow.

    # Nodes in the top-level StrictPartialOrder:
    # - OR, MS, QS, AS, X_after_AS, tst_rt_loop, PK, lb_choice, DP, D
    # Note: TST activity is part of `tst_rt_loop`. IQC, AS are part of `iqc_loop_body`. LB is part of `lb_choice`.

    root_powl = StrictPartialOrder(nodes=[
        activity_or,
        activity_ms,
        activity_qs,
        activity_as,
        X_after_AS,       # This is the point where the IQC loop is chosen or skipped.
        tst_rt_loop,      # This includes TST and RT, starting with TST.
        activity_pk,
        lb_choice,        # This includes LB or skip.
        activity_dp,
        activity_d
    ])

    # Define the order between these top-level components

    # 1. OR -> MS
    root_powl.order.add_edge(activity_or, activity_ms)

    # 2. MS -> QS
    root_powl.order.add_edge(activity_ms, activity_qs)

    # 3. QS -> AS
    root_powl.order.add_edge(activity_qs, activity_as)

    # 4. AS -> X_after_AS (meaning, after AS, you decide whether to enter the IQC loop)
    root_powl.order.add_edge(activity_as, X_after_AS)

    # 5. AS -> tst_rt_loop (for cases where AS directly leads to TST, bypassing the IQC loop)
    #    This path is taken when the `skip` option is chosen within `X_after_AS`.
    #    The loop `tst_rt_loop` starts with `TST`.
    #    So, the exit point from the `AS` -> `X_after_AS` block is `TST`.
    #    This means both `AS` and `X_after_AS` can be predecessors of `TST`.
    #    However, `TST` is the first element of `tst_rt_loop`.
    #    So, we need `AS` to precede `tst_rt_loop` and `X_after_AS` to precede `tst_rt_loop`.
    root_powl.order.add_edge(activity_as, tst_rt_loop)
    root_powl.order.add_edge(X_after_AS, tst_rt_loop)

    # 6. tst_rt_loop -> PK
    #    The `tst_rt_loop` completes when `TST` (the first element) executes and the choice to exit is taken.
    root_powl.order.add_edge(tst_rt_loop, activity_pk)

    # 7. PK -> lb_choice
    root_powl.order.add_edge(activity_pk, lb_choice)

    # 8. lb_choice -> DP
    root_powl.order.add_edge(lb_choice, activity_dp)

    # 9. DP -> D
    root_powl.order.add_edge(activity_dp, activity_d)

    # Final POWL model structure representation (as Python code):

# Define individual activities
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")
skip = SilentTransition()

# Define complex POWL sub-models

# 1. In-line Quality Check Loop: *(IQC, AS)
# This means: Execute IQC, then either exit the loop, or execute AS and then IQC again.
# This captures the pattern IQC -> AS -> IQC -> AS ...
iqc_as_loop = OperatorPOWL(operator=Operator.LOOP, children=[IQC, AS])

# 2. Testing and Re-Testing Loop: *(TST, RT)
# This means: Execute TST, then either exit the loop, or execute RT and then TST again.
# This captures the pattern TST -> RT -> TST -> RT ...
tst_rt_loop = OperatorPOWL(operator=Operator.LOOP, children=[TST, RT])

# 3. Labeling Choice: X(LB, skip)
# This means: Exclusively choose between executing LB or a silent transition (skipping LB).
lb_choice = OperatorPOWL(operator=Operator.XOR, children=[LB, skip])

# Define the overall process structure using StrictPartialOrder
# The main flow is sequential: OR -> MS -> QS -> (AS then optional IQC/AS loop) -> (TST/RT loop) -> PK -> (LB or skip) -> DP -> D

# The challenge is how to model "AS, then optional IQC/AS loop".
# Logs show: AS, then (IQC, AS) 0 or more times, then TST.
# So, it's AS -> (X(iqc_as_loop, skip)) -> TST.
# The `iqc_as_loop` itself starts with IQC. If `skip` is chosen, we go directly from AS to TST.
# So, the component that "takes" the flow from AS to TST needs to handle this.
# The structure `X(A,B)` means either A or B is executed.
# `AS` precedes `X(iqc_as_loop, skip)`.
# Both `iqc_as_loop` and `skip` (as outcomes of the XOR) need to precede `tst_rt_loop`.
# Let's define the overall root POWL model:
root_powl = StrictPartialOrder(nodes=[
    OR,
    MS,
    QS,
    AS,
    # The choice between entering the IQC/AS loop or skipping it.
    # This node conceptually sits between AS and TST.
    OperatorPOWL(operator=Operator.XOR, children=[iqc_as_loop, skip]),
    tst_rt_loop,
    PK,
    lb_choice,
    DP,
    D
])

# Define the partial order relationships (edges)

# OR -> MS
root_powl.order.add_edge(OR, MS)

# MS -> QS
root_powl.order.add_edge(MS, QS)

# QS -> AS
root_powl.order.add_edge(QS, AS)

# AS -> (The XOR choice for IQC loop or skip)
# Let's refer to the XOR node directly for clarity
xor_iqc_skip = root_powl.nodes[4] # Accessing the X(iqc_as_loop, skip) node from the list

root_powl.order.add_edge(AS, xor_iqc_skip)

# (The XOR choice) -> tst_rt_loop
# This means after completing the IQC loop (if chosen) or skipping it, we proceed to TST.
root_powl.order.add_edge(xor_iqc_skip, tst_rt_loop)

# Also, AS can directly lead to TST (captured by Case 4 where no IQC happens).
# This is problematic for the strictly sequential interpretation AS -> XOR -> TST.
# If AS can directly lead to TST *and* AS can lead to XOR which leads to TST,
# then TST has two predecessors: AS and XOR.
# This means: (AS AND (AS -> XOR)) -> TST is not quite right.
# It's more like: AS, then either (IQC->AS)* (from XOR path), or directly TST.
# This implies TST can be executed after AS, OR after the IQC loop completes.
# So, TST (which is the first activity of `tst_rt_loop`) should have `AS` and `xor_iqc_skip` as predecessors.
root_powl.order.add_edge(AS, tst_rt_loop) # AS directly to TST (first part of tst_rt_loop)

# tst_rt_loop -> PK
root_powl.order.add_edge(tst_rt_loop, PK)

# PK -> lb_choice
root_powl.order.add_edge(PK, lb_choice)

# lb_choice -> DP
root_powl.order.add_edge(lb_choice, DP)

# DP -> D
root_powl.order.add_edge(DP, D)
```