# DuckDB SQL Query to Filter Cases Based on Activity Sequence and Timing

Here's a DuckDB SQL query that identifies cases with the specified activity sequence and timing condition, then excludes all events from those cases:

```sql
WITH
-- First, identify all sequences of three consecutive events for each case
event_sequences AS (
    SELECT
        case_id,
        activity,
        timestamp,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity_1,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity_2,
        LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp_1,
        LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp_2
    FROM event_log
),

-- Then find cases that have the exact sequence we're looking for
cases_with_sequence AS (
    SELECT DISTINCT case_id
    FROM event_sequences
    WHERE activity = 'Approve Purchase Requisition'
      AND next_activity_1 = 'Create Order'
      AND next_activity_2 = 'Confirm Order'
),

-- For those cases, calculate the time between 'Create Order' and 'Confirm Order'
cases_with_long_delay AS (
    SELECT DISTINCT e.case_id
    FROM event_sequences e
    JOIN cases_with_sequence c ON e.case_id = c.case_id
    WHERE e.activity = 'Create Order'
      AND e.next_activity_1 = 'Confirm Order'
      AND (julianday(e.next_timestamp_1) - julianday(e.timestamp)) > 5
)

-- Finally, return all events except those from cases that match both conditions
SELECT e.*
FROM event_log e
WHERE e.case_id NOT IN (
    SELECT case_id FROM cases_with_long_delay
)
ORDER BY e.case_id, e.timestamp;
```

## Explanation:

1. **event_sequences CTE**: Uses window functions to look ahead at the next two events for each case, ordered by timestamp.

2. **cases_with_sequence CTE**: Identifies cases that have the exact sequence of:
   - 'Approve Purchase Requisition'
   - followed directly by 'Create Order'
   - followed directly by 'Confirm Order'

3. **cases_with_long_delay CTE**: Further filters those cases to only include ones where:
   - The time between 'Create Order' and 'Confirm Order' is more than 5 days
   - (using julianday() to calculate the difference in days)

4. **Final query**: Returns all events from the original table except those belonging to cases identified in the previous step.

The query ensures proper ordering and filtering to meet all the specified requirements.