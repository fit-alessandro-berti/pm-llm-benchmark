To achieve this, we will first identify the `case_id`s that meet both conditions specified in the prompt (sequence of activities and a time difference greater than 5 days). Then, we will exclude events from those cases. Here's the DuckDB SQL query:

```sql
WITH SequenceCases AS (
    -- Step 1: Find all cases containing the specific sequence of activities
    SELECT
        el1.case_id,
        el1.timestamp AS approve_requisition_time,
        el2.timestamp AS create_order_time,
        el3.timestamp AS confirm_order_time
    FROM
        event_log el1
    JOIN
        event_log el2
        ON el1.case_id = el2.case_id
        AND el1.activity = 'Approve Purchase Requisition'
        AND el2.activity = 'Create Order'
        AND el1.timestamp < el2.timestamp
    JOIN
        event_log el3
        ON el2.case_id = el3.case_id
        AND el2.activity = 'Create Order'
        AND el3.activity = 'Confirm Order'
        AND el2.timestamp < el3.timestamp
),
FilteredCases AS (
    -- Step 2: Restrict to cases where the time difference between 'Create Order'
    -- and 'Confirm Order' is more than 5 days
    SELECT
        case_id
    FROM
        SequenceCases
    WHERE
        julianday(confirm_order_time) - julianday(create_order_time) > 5
),
ExcludedEvents AS (
    -- Step 3: Extract all events belonging to the cases identified above
    SELECT
        *
    FROM
        event_log
    WHERE
        case_id IN (SELECT case_id FROM FilteredCases)
)
-- Step 4: Exclude the identified events from the result set
SELECT
    *
FROM
    event_log
WHERE
    case_id NOT IN (SELECT case_id FROM FilteredCases)
ORDER BY
    case_id, timestamp;
```

### Explanation:

1. **`SequenceCases CTE`:**  
   - This Common Table Expression (CTE) identifies cases (`case_id`) where the activities `'Approve Purchase Requisition'`, `'Create Order'`, and `'Confirm Order'` appear in the required order for the same `case_id`.
   - It ensures that `'Approve Purchase Requisition'` happens before `'Create Order'` and `'Create Order'` happens before `'Confirm Order'` using `timestamp` comparisons.

2. **`FilteredCases CTE`:**  
   - This CTE filters those cases where the time difference between `'Create Order'` and `'Confirm Order'` exceeds 5 days. The `julianday` function is used here to calculate the difference in days between the timestamps.

3. **`ExcludedEvents CTE`:**  
   - This CTE identifies all events (`case_id` and additional columns) from the cases that are found in the `FilteredCases` result.

4. **Final Query:**  
   - The main query retrieves all events from `event_log` except those belonging to the `case_id`s identified in `FilteredCases`. This ensures that all events linked to cases satisfying both the sequence and timing condition are excluded from the final output.

The result is all events from `event_log` for cases that do **not** meet both the activity sequence condition and the timing condition.