Here’s the DuckDB SQL query that implements the filtering logic based on your requirements:

```sql
WITH SequentialCases AS (
    -- Identify cases that contain the specified sequence in direct succession
    SELECT 
        e1.case_id,
        e1.timestamp AS approve_time,
        e2.timestamp AS create_time,
        e3.timestamp AS confirm_time
    FROM event_log e1
    JOIN event_log e2 
        ON e1.case_id = e2.case_id 
        AND e2.timestamp = (SELECT MIN(timestamp) FROM event_log WHERE case_id = e1.case_id AND timestamp > e1.timestamp)
    JOIN event_log e3 
        ON e2.case_id = e3.case_id 
        AND e3.timestamp = (SELECT MIN(timestamp) FROM event_log WHERE case_id = e2.case_id AND timestamp > e2.timestamp)
    WHERE 
        e1.activity = 'Approve Purchase Requisition'
        AND e2.activity = 'Create Order'
        AND e3.activity = 'Confirm Order'
),
FilteredCases AS (
    -- Filter cases where the time difference between 'Create Order' and 'Confirm Order' exceeds 5 days
    SELECT case_id
    FROM SequentialCases
    WHERE (julianday(confirm_time) - julianday(create_time)) > 5
)
-- Return all events from cases that are NOT in the filtered list
SELECT * 
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM FilteredCases);
```

### Explanation:
1. **`SequentialCases` CTE**:
   - Identifies cases where the three activities occur in direct succession.
   - Ensures that 'Create Order' follows 'Approve Purchase Requisition' immediately, and 'Confirm Order' follows 'Create Order' immediately within each case.
   - Uses `JOIN` conditions where each activity’s timestamp is the next minimum timestamp after the previous activity.

2. **`FilteredCases` CTE**:
   - Filters out cases where the time elapsed between 'Create Order' and 'Confirm Order' is greater than 5 days.

3. **Final Query**:
   - Retrieves all events from `event_log`, excluding cases found in `FilteredCases`.

This ensures only events from cases that **do not** match both conditions are returned.