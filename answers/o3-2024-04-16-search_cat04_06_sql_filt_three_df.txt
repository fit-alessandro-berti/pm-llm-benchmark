Here is one concise way to do it with pure DuckDB SQL.

```sql
/* 1) Number events inside every case in their chronological order
   2) Look at every “Confirm Order” event together with its two
      immediate predecessors inside the same case
   3) Keep the case_id if the three activities are exactly
      Approve Purchase Requisition    Create Order    Confirm Order
      and the lag-1 / current timestamps are more than 5 days apart
   4) Discard every event that belongs to one of those case_ids         */
WITH ordered AS (          -- events in the right order
    SELECT
        case_id,
        activity,
        "timestamp",
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY "timestamp") AS rn
    FROM event_log
),

flagged_cases AS (         -- cases to be removed
    SELECT DISTINCT case_id
    FROM (
        SELECT
            case_id,
            activity,
            "timestamp",
            LAG(activity, 1)  OVER (PARTITION BY case_id ORDER BY "timestamp") AS act_lag1,
            LAG(activity, 2)  OVER (PARTITION BY case_id ORDER BY "timestamp") AS act_lag2,
            LAG("timestamp")  OVER (PARTITION BY case_id ORDER BY "timestamp") AS ts_lag1
        FROM ordered
    ) t
    WHERE activity  = 'Confirm Order'
      AND act_lag1  = 'Create Order'
      AND act_lag2  = 'Approve Purchase Requisition'
      AND ("timestamp" - ts_lag1) > INTERVAL '5 days'
)

/* 5) Return every event that is NOT in one of the flagged cases       */
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM flagged_cases)
ORDER BY case_id, "timestamp";
```

What it does  

• `ordered` gives every event a reliable position inside its `case_id`.  
• In the sub-query of `flagged_cases` each `Confirm Order` row is checked together with its two immediate predecessors (`LAG` 1 and 2).  
• If the activities match the exact succession and the gap between the `Create Order` time (`ts_lag1`) and the `Confirm Order` time is greater than 5 days, that `case_id` is collected.  
• The outer query returns all events that do **not** belong to any `flagged_cases`, giving you the full log minus the unwanted cases.