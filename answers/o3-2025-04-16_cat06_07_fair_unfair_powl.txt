Below are two selfcontained Python snippets that build the requested POWL models with pm4py.  
Simply copy a snippet into a Python session where pm4py is available and run it; the variable
unfair_root (first snippet) and fair_root (second snippet) will hold the respective POWL objects.

------------------------------------------------------------
1. POWL model that CAN introduce unfairness
------------------------------------------------------------
```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.powl.obj import SilentTransition
from pm4py.objects.process_tree.obj import Operator

# --------------------------------------------------
# atomic activities
# --------------------------------------------------
ReceiveApplication        = Transition(label="ReceiveApplication")
ResumeParsing             = Transition(label="ResumeParsingAndDataCheck")
RequestMoreInfo           = Transition(label="RequestMoreInfo")
SkillAssessment           = Transition(label="SkillAssessment")
CulturalFitCheck          = Transition(label="CulturalFitCheck")           # regular path
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")  # biased path
ManagerialReview          = Transition(label="ManagerialReview")
FinalDecision             = Transition(label="FinalDecision")

# --------------------------------------------------
# loop for data completeness (resume parsing <-> rerequest)
# --------------------------------------------------
loop_data = OperatorPOWL(
    operator=Operator.LOOP,
    children=[ResumeParsing, RequestMoreInfo]
)

# --------------------------------------------------
# XOR branch where unfairness may creep in
# --------------------------------------------------
xor_culture = OperatorPOWL(
    operator=Operator.XOR,
    children=[CulturalFitCheck, CommunityAffiliationCheck]
)

# --------------------------------------------------
# Build overall partial order
# --------------------------------------------------
unfair_root = StrictPartialOrder(nodes=[
    ReceiveApplication,
    loop_data,
    SkillAssessment,
    xor_culture,
    ManagerialReview,
    FinalDecision
])

unfair_root.order.add_edge(ReceiveApplication, loop_data)
unfair_root.order.add_edge(loop_data, SkillAssessment)
unfair_root.order.add_edge(SkillAssessment, xor_culture)
unfair_root.order.add_edge(xor_culture, ManagerialReview)
unfair_root.order.add_edge(ManagerialReview, FinalDecision)
```

In this model everybody reaches the XOR node after the skill test.  
If the right branch “CommunityAffiliationCheck” is taken, an applicant gains a
(soft) advantage, reflecting the potential bias.

------------------------------------------------------------
2. POWL model WITHOUT the unfair branch
------------------------------------------------------------
```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.powl.obj import SilentTransition
from pm4py.objects.process_tree.obj import Operator

# --------------------------------------------------
# atomic activities  (same labels where applicable)
# --------------------------------------------------
ReceiveApplication  = Transition(label="ReceiveApplication")
ResumeParsing       = Transition(label="ResumeParsingAndDataCheck")
RequestMoreInfo     = Transition(label="RequestMoreInfo")
SkillAssessment     = Transition(label="SkillAssessment")
CulturalFitCheck    = Transition(label="CulturalFitCheck")   # single, uniform step
ManagerialReview    = Transition(label="ManagerialReview")
FinalDecision       = Transition(label="FinalDecision")

# --------------------------------------------------
# loop for data completeness
# --------------------------------------------------
loop_data = OperatorPOWL(
    operator=Operator.LOOP,
    children=[ResumeParsing, RequestMoreInfo]
)

# --------------------------------------------------
# Build overall partial order (no XOR, no special path)
# --------------------------------------------------
fair_root = StrictPartialOrder(nodes=[
    ReceiveApplication,
    loop_data,
    SkillAssessment,
    CulturalFitCheck,
    ManagerialReview,
    FinalDecision
])

fair_root.order.add_edge(ReceiveApplication, loop_data)
fair_root.order.add_edge(loop_data, SkillAssessment)
fair_root.order.add_edge(SkillAssessment, CulturalFitCheck)
fair_root.order.add_edge(CulturalFitCheck, ManagerialReview)
fair_root.order.add_edge(ManagerialReview, FinalDecision)
```

Here every applicant follows the exact same culturalfit activity, so
the special communitybased uplift (and its implicit bias) has been removed.