```sql
WITH Ordered_Activities AS (
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
),
Variant_Counts AS (
    SELECT
        activity_sequence,
        COUNT(case_id) AS case_count
    FROM
        Ordered_Activities
    GROUP BY
        activity_sequence
),
Top_Variants AS (
    SELECT
        activity_sequence
    FROM
        Variant_Counts
    WHERE
        case_count >= (SELECT PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY case_count) FROM Variant_Counts)
)
SELECT
    e.*
FROM
    event_log e
JOIN
    Ordered_Activities oa
ON
    e.case_id = oa.case_id
JOIN
    Top_Variants tv
ON
    oa.activity_sequence = tv.activity_sequence;
```

### Explanation:
1. **Ordered_Activities CTE:**  
   This CTE calculates the ordered sequence of activities for each `case_id` by aggregating the activities in the order of their `timestamp`. The `STRING_AGG` function concatenates the activities, separated by ' -> '.

2. **Variant_Counts CTE:**  
   This CTE counts the number of cases for each unique activity sequence derived in the previous step.

3. **Top_Variants CTE:**  
   This CTE selects the activity sequences that belong to the top K variants, based on the 95th percentile of the frequency distribution of the counts. This ensures we capture the most frequent variants.

4. **Final SELECT Statement:**  
   The final query selects all events from the original `event_log` that belong to the cases part of the top K variants by joining the event log with the `Ordered_Activities` and `Top_Variants` CTEs based on `case_id` and `activity_sequence`.

This solution dynamically adjusts the threshold for top K variants based on the 95th percentile of the count distribution, ensuring the most common process variants are captured.