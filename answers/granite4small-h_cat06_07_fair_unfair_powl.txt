Below are two **POWL** (Partially Ordered Workflow Language) models that capture the hiring process described in the text.  

Both workflows share a common prefix:

* `ReceiveApplication`  datacompleteness check with loops (`DataCompletenessCheck`, `RequestMoreInfo`)  
* Followed by a skill test (`SkillAssessment`) whose result determines whether an applicant continues.

From that point onward, the two models diverge in how they treat **cultural fit** and any possible community affiliation advantage:

| Model | How culturalfit / affiliation is handled |
|-------|-------------------------------------------|
| **POWL1 – Potential Unfairness** | After `SkillAssessment` an exclusive OR (`XOR`) decides the path: either a *standard* `CulturalFitCheck` **or** a special `CommunityAffiliationCheck`. The latter can give applicants belonging to “Global Business Leaders Club” or local groups a subtle score boost. |
| **POWL2 – Without Unfairness** | All candidates go through the same `CulturalFitCheck`. No XOR branch exists, so communityaffiliation information is never used to modify scores (the optional affiliation fields remain in the record but are not linked to any decision advantage). |

Below each diagram you will find a concise textual description of every node and edge.

---

##  Model1 – POWL with Potential Unfairness  

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

# --------------------------------------------------------------
# Common prefix (datacompleteness loop)
# --------------------------------------------------------------
receive_app = Transition(label="ReceiveApplication")
data_check   = Transition(label="DataCompletenessCheck")

request_info = Transition(label="RequestMoreInfo")          # silent activity: loops back
loop_prefix  = OperatorPOWL(operator=Operator.LOOP, children=[data_check, request_info])

po1 = StrictPartialOrder(nodes=[receive_app, loop_prefix])
po1.order.add_edge(receive_app, data_check)                 # receive  completeness check
po1.order.add_edge(data_check, request_info)                # if incomplete  ask for more info (loop)
# --------------------------------------------------------------

# --------------------------------------------------------------
# Skill assessment – same for all applicants
# --------------------------------------------------------------
skill_assess = Transition(label="SkillAssessment")
po1.order.add_edge(request_info, skill_assess)

# --------------------------------------------------------------
# XOR branching: either standard cultural fit OR communityaffiliation advantage
# --------------------------------------------------------------
xor_choice   = OperatorPOWL(
    operator=Operator.XOR,
    children=[
        # ----  Standard Cultural Fit Path (no bias) -----------------
        Transition(label="CulturalFitCheck"),
        # ----  Community Affiliation Advantage Path ---------------
        # This branch may incorporate a “subjective uplift” in the cultural score.
        Transition(label="CommunityAffiliationCheck")
    ]
)
po1.order.add_edge(skill_assess, xor_choice)

# --------------------------------------------------------------
# Managerial review – same for all applicants (regardless of branch taken)
# --------------------------------------------------------------
manager_review = Transition(label="ManagerialReview")
po1.order.add_edge(xor_choice, manager_review)   # both paths converge here

# --------------------------------------------------------------
# Final hiring decision
# --------------------------------------------------------------
final_decision = Transition(label="FinalDecision")
po1.order.add_edge(manager_review, final_decision)

# --------------------------------------------------------------

print(po1)
```

### Textual Walkthrough (Model1)

| Step | Activity label | What it does |
|------|----------------|--------------|
| 1    | `ReceiveApplication` | Collects CV & optional affiliation data. |
| 2–3  | Loop (`DataCompletenessCheck`, `RequestMoreInfo`) | Guarantees a complete resume before proceeding (reasks if mandatory fields are missing). |
| 4    | `SkillAssessment` | Domainspecific test; score determines eligibility to continue. |
| **5**| **XOR Branch (`xor_choice`)**<br> `CulturalFitCheck` – standard evaluation.<br> `CommunityAffiliationCheck` – gives a *subjective* boost if the applicant belongs to a known local group (e.g., “Global Business Leaders Club”). | This exclusive choice is where unfair advantage can appear. |
| 6    | `ManagerialReview` | Human reviewer examines borderline or highscoring candidates; may be subconsciously influenced by affiliation cues in branch. |
| 7    | `FinalDecision` | Either hires the candidate or rejects them. |

*The unfairness arises because **branch** is not equally accessible to every applicant, and its subjective uplift can bias outcomes.*

---

##  Model2 – POWL Without Unfairness  

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition

# --------------------------------------------------------------
# Common prefix (datacompleteness loop) – identical to model 1
# --------------------------------------------------------------
receive_app = Transition(label="ReceiveApplication")
data_check   = Transition(label="DataCompletenessCheck")

request_info = Transition(label="RequestMoreInfo")          # silent activity: loops back
loop_prefix  = OperatorPOWL(operator=Operator.LOOP, children=[data_check, request_info])

po2 = StrictPartialOrder(nodes=[receive_app, loop_prefix])
po2.order.add_edge(receive_app, data_check)
po2.order.add_edge(data_check, request_info)

# --------------------------------------------------------------
# Skill assessment – identical to model 1
# --------------------------------------------------------------
skill_assess = Transition(label="SkillAssessment")
po2.order.add_edge(request_info, skill_assess)

# --------------------------------------------------------------
# **No XOR branch** – all candidates go through the same culturalfit check.
# --------------------------------------------------------------
cultural_fit = Transition(label="CulturalFitCheck")
po2.order.add_edge(skill_assess, cultural_fit)   # uniform path for everyone

# --------------------------------------------------------------
# Managerial review (may still have implicit bias due to human perception,
# but no systematic advantage is built into the workflow)
# --------------------------------------------------------------
manager_review = Transition(label="ManagerialReview")
po2.order.add_edge(cultural_fit, manager_review)

# --------------------------------------------------------------
# Final hiring decision
# --------------------------------------------------------------
final_decision = Transition(label="FinalDecision")
po2.order.add_edge(manager_review, final_decision)

print(po2)
```

### Textual Walkthrough (Model2)

| Step | Activity label | What it does |
|------|----------------|--------------|
| 1    | `ReceiveApplication` | Same as before. |
| 2–3  | Loop (`DataCompletenessCheck`, `RequestMoreInfo`) | Guarantees data completeness; loop is identical to Model1. |
| 4    | `SkillAssessment` | Identical skill test for all applicants. |
| **5**| `CulturalFitCheck` (uniform) | All candidates undergo the same culturalfit evaluation—no affiliationbased shortcut exists here. |
| 6    | `ManagerialReview` | Human reviewer proceeds with a consistent set of inputs; any subjective bias would be independent of workflow structure. |
| 7    | `FinalDecision` | Hires or rejects based on the combined outputs above. |

*By removing the XOR branch, **Model2** guarantees that every applicant is treated equally at this stage of the process.*

---

###  How to Choose Between the Two Models

- **Use Model1** when you deliberately want to experiment with or embed a communityaffiliation boost (e.g., for affirmativeaction pilots). Be aware that it introduces an intentional source of bias.
- **Deploy Model2 in production** if your organization’s policy mandates fairness and equal opportunity. It enforces a uniform evaluation path, eliminating the explicit “XOR advantage” present in Model1.

Both models retain the essential structure (loops for data completeness  skill assessment  cultural fit  managerial review  final decision) while differing only at the **branching point** that can affect fairness.