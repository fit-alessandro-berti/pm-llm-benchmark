To achieve the tasks outlined, we need to follow a series of steps in DuckDB SQL. Here is a detailed breakdown of the solution:

1. **Extract the ordered sequence of activities per case.**
2. **Group cases by their complete activity sequence to identify unique process variants.**
3. **Count how many cases correspond to each variant and determine the top K variants by their frequency.**
4. **Return all events from the original event log that belong only to cases which are part of these top K variants.**

Here is the complete SQL query to accomplish this:

```sql
WITH ordered_activities AS (
    SELECT
        case_id,
        STRING_AGG(activity, ',') WITHIN GROUP (ORDER BY timestamp) AS activity_sequence
    FROM
        event_log
    GROUP BY
        case_id
),
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM
        ordered_activities
    GROUP BY
        activity_sequence
),
top_k_variants AS (
    SELECT
        activity_sequence
    FROM
        variant_counts
    ORDER BY
        case_count DESC
    LIMIT K  -- Replace K with the desired number of top variants
),
filtered_cases AS (
    SELECT
        case_id
    FROM
        ordered_activities
    WHERE
        activity_sequence IN (SELECT activity_sequence FROM top_k_variants)
)
SELECT
    e.*
FROM
    event_log e
JOIN
    filtered_cases fc
ON
    e.case_id = fc.case_id;
```

### Explanation:

1. **ordered_activities CTE:**
   - This Common Table Expression (CTE) extracts the ordered sequence of activities for each `case_id`. It uses `STRING_AGG` to concatenate activities in the order of their `timestamp`.

2. **variant_counts CTE:**
   - This CTE groups the sequences of activities to identify unique process variants and counts the number of cases for each variant.

3. **top_k_variants CTE:**
   - This CTE selects the top K variants by their frequency. The `LIMIT K` clause should be replaced with the desired number of top variants.

4. **filtered_cases CTE:**
   - This CTE filters the `case_id`s that belong to the top K variants.

5. **Final SELECT:**
   - The final query joins the original `event_log` with the `filtered_cases` to return all events from the cases that are part of the top K variants.

### Notes:
- Ensure that the `K` value is replaced with the actual number of top variants you want to consider.
- The `STRING_AGG` function is used to concatenate activities in the order of their timestamps. This assumes that the activities are unique within each case and that the order is preserved correctly.

This query should give you the desired results, filtering the event log to include only the cases that belong to the top K process variants.