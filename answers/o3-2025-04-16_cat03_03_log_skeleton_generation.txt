```python
log_skeleton = {

    # 1.  If PO appears in a case, GSL appears the same number of times and viceversa
    'equivalence': {
        ('PO', 'GSL')
    },

    # 2.  Precedence relations ( “always_before” )
    #     If the first activity occurs, the second must already have happened
    'always_before': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('IC', 'RP'),

        # transitive / more general precedence that frequently holds
        ('RO', 'RI'), ('RO', 'PI'), ('RO', 'QC'),
        ('RO', 'PO'), ('RO', 'GSL'), ('RO', 'D'),
        ('RO', 'IC'), ('RO', 'RP')
    },

    # 3.  Response relations ( “always_after” )
    #     The reverse of the precedence set above
    'always_after': {
        ('CA', 'RO'),
        ('RI', 'CA'), ('RI', 'RO'),
        ('PI', 'RI'), ('PI', 'RO'),
        ('QC', 'PI'), ('QC', 'RO'),
        ('PO', 'QC'), ('PO', 'RO'),
        ('GSL', 'PO'), ('GSL', 'RO'),
        ('D',  'GSL'), ('D',  'RO'),
        ('IC', 'RO'),
        ('RP', 'IC'), ('RP', 'RO')
    },

    # 4.  Mutually exclusive activities (not observed in this process)
    'never_together': set(),

    # 5.  Allowed number of occurrences per case
    #        – Every activity is expected exactly once,
    #          except that the payment may not have been received yet.
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D' : {1},
        'IC': {1},
        'RP': {0, 1}
    },

    # 6.  Directly–follows relations that always hold
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D',  'IC'),
        ('IC', 'RP')
    }
}
```