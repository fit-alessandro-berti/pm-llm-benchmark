```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
OR = Transition(label="OR")
MS = Transition(label="MS")
QS = Transition(label="QS")
AS = Transition(label="AS")
IQC = Transition(label="IQC")
TST = Transition(label="TST")
RT = Transition(label="RT")
PK = Transition(label="PK")
LB = Transition(label="LB")
DP = Transition(label="DP")
D = Transition(label="D")

# Define the POWL model

# Initial partial order
root = StrictPartialOrder(nodes=[OR, MS, QS, AS, IQC, TST, RT, PK, LB, DP, D])

# Define the partial ordering
root.order.add_edge(OR, MS)
root.order.add_edge(MS, QS)
root.order.add_edge(QS, AS)
root.order.add_edge(AS, IQC)
root.order.add_edge(IQC, TST)
root.order.add_edge(TST, RT)
root.order.add_edge(RT, TST)  # Re-testing loops back to testing
root.order.add_edge(TST, PK)
root.order.add_edge(PK, LB)
root.order.add_edge(LB, DP)
root.order.add_edge(DP, D)

# Define the loop for In-line Quality Check (IQC)
loop_iqc = OperatorPOWL(operator=Operator.LOOP, children=[IQC, TST])
root.order.add_edge(AS, loop_iqc)  # IQC loop after Assembly
root.order.add_edge(loop_iqc, AS)   #  Loop back to AS

# Define the choice for Labeling (LB)
choice_lb = OperatorPOWL(operator=Operator.XOR, children=[AS, PK])  #LB is an alternative path after AS
root.order.add_edge(PK, choice_lb) # After PK we can choose to apply labeling or not.
root.order.add_edge(choice_lb, DP)



#The following represents cases where IQC does not have a loop
#root.order.add_edge(AS,OperatorPOWL(operator=Operator.LOOP, children=[IQC,TST]))


# Define an option to skip Labeling
skip_lb = SilentTransition()
root.order.add_edge(PK,OperatorPOWL(operator=Operator.XOR, children=[choice_lb, skip_lb]))
root.order.add_edge(skip_lb, DP)

#The final structure is as follows:
# root.order.add_edge(OR, MS)
# root.order.add_edge(MS, QS)
# root.order.add_edge(QS, AS)
# root.order.add_edge(AS, IQC)
# root.order.add_edge(IQC, TST)
# root.order.add_edge(TST, RT)
# root.order.add_edge(RT, TST)
# root.order.add_edge(TST, PK)
# root.order.add_edge(PK, LB)
# root.order.add_edge(LB, DP)
# root.order.add_edge(DP, D)
# root.order.add_edge(AS, loop_iqc)
# root.order.add_edge(loop_iqc, AS)
# root.order.add_edge(PK, choice_lb)
# root.order.add_edge(choice_lb, DP)
# root.order.add_edge(PK,OperatorPOWL(operator=Operator.XOR, children=[choice_lb, skip_lb]))
# root.order.add_edge(skip_lb, DP)
```