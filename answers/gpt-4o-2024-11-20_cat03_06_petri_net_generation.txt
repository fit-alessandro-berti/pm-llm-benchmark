Here is the Python code to construct an accepting Petri net for the described insurance claim management process. The Petri net includes all activities, transitions, places, and arcs, along with possible loops for re-documentation submission and in-depth investigation. It also defines the initial and final markings.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create an empty Petri net
net = PetriNet(name="Insurance Claim Management Process")

# Define places
start = PetriNet.Place(name="start")
after_cr = PetriNet.Place(name="after_cr")
after_dv = PetriNet.Place(name="after_dv")
after_fc = PetriNet.Place(name="after_fc")
after_rds = PetriNet.Place(name="after_rds")
after_ii = PetriNet.Place(name="after_ii")
after_ca = PetriNet.Place(name="after_ca")
after_ap = PetriNet.Place(name="after_ap")
after_payment = PetriNet.Place(name="after_payment")
after_notification = PetriNet.Place(name="after_notification")
end = PetriNet.Place(name="end")

# Add places to the net
net.places.add(start)
net.places.add(after_cr)
net.places.add(after_dv)
net.places.add(after_fc)
net.places.add(after_rds)
net.places.add(after_ii)
net.places.add(after_ca)
net.places.add(after_ap)
net.places.add(after_payment)
net.places.add(after_notification)
net.places.add(end)

# Define transitions
claim_registration = PetriNet.Transition(name="CR", label="Claim Registration")
document_verification = PetriNet.Transition(name="DV", label="Document Verification")
fraud_check = PetriNet.Transition(name="FC", label="Fraud Check")
claim_assessment = PetriNet.Transition(name="CA", label="Claim Assessment")
approval = PetriNet.Transition(name="AP", label="Approval")
payment = PetriNet.Transition(name="P", label="Payment")
notification = PetriNet.Transition(name="N", label="Notification")
closure = PetriNet.Transition(name="CL", label="Closure")
re_document_submission = PetriNet.Transition(name="RDS", label="Re-Document Submission")
in_depth_investigation = PetriNet.Transition(name="II", label="In-depth Investigation")

# Add transitions to the net
net.transitions.add(claim_registration)
net.transitions.add(document_verification)
net.transitions.add(fraud_check)
net.transitions.add(claim_assessment)
net.transitions.add(approval)
net.transitions.add(payment)
net.transitions.add(notification)
net.transitions.add(closure)
net.transitions.add(re_document_submission)
net.transitions.add(in_depth_investigation)

# Add arcs: Define the sequence of workflow
petri_utils.add_arc_from_to(start, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, after_cr, net)
petri_utils.add_arc_from_to(after_cr, document_verification, net)
petri_utils.add_arc_from_to(document_verification, after_dv, net)
petri_utils.add_arc_from_to(after_dv, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, after_fc, net)
petri_utils.add_arc_from_to(after_fc, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, after_ca, net)
petri_utils.add_arc_from_to(after_ca, approval, net)
petri_utils.add_arc_from_to(approval, after_ap, net)
petri_utils.add_arc_from_to(after_ap, payment, net)
petri_utils.add_arc_from_to(payment, after_payment, net)
petri_utils.add_arc_from_to(after_payment, notification, net)
petri_utils.add_arc_from_to(notification, after_notification, net)
petri_utils.add_arc_from_to(after_notification, closure, net)
petri_utils.add_arc_from_to(closure, end, net)

# Loops for re-document submission (RDS) and in-depth investigation (II)
petri_utils.add_arc_from_to(after_dv, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, after_rds, net)
petri_utils.add_arc_from_to(after_rds, document_verification, net)

petri_utils.add_arc_from_to(after_fc, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, after_ii, net)
petri_utils.add_arc_from_to(after_ii, fraud_check, net)

# Define the initial marking (im)
im = Marking()
im[start] = 1

# Define the final marking (fm)
fm = Marking()
fm[end] = 1

# The Petri net, along with its initial and final markings, represents an "accepting Petri net".
```

### Explanation:
1. **Places and Transitions**: Each state/activity in the process is represented by a place and/or transition. For example:
   - `start` to `CR` transition represents the beginning of the process with claim registration.
   - Loops are modeled to handle document re-submissions (`RDS`) and in-depth investigations (`II`).

2. **Arcs**: Arcs connect places and transitions to represent the logical flow of the process.

3. **Initial Marking**: Token is placed in the `start` place to represent a new claim entering the system.

4. **Final Marking**: Token arrives at the `end` place once the process reaches completion (claim closure).

This model reflects your described insurance claim management process, including all activities, branching points, and loops.