To fulfill your task, you'll need to write a SQL query that utilizes a combination of aggregate functions and a HAVING clause. DuckDB, being an advanced SQL engine, will be able to handle your query efficiently.

Here's an example of a DuckDB SQL query that can accomplish this:

```sql
WITH RankedEventLog AS (
  SELECT
    case_id,
    activity,
    timestamp,
    COUNT(*) OVER (PARTITION BY case_id) AS event_count
  FROM event_log
),
FilteredEventLog AS (
  SELECT
    case_id,
    activity,
    timestamp
  FROM RankedEventLog
  WHERE event_count <= 6
)
SELECT case_id, activity, timestamp
FROM FilteredEventLog
ORDER BY case_id, timestamp;
```

Let's break this query down:

1. In the `RankedEventLog` Common Table Expression (CTE), we create a temporary table where each `case_id` has an additional column `event_count` that counts the number of events grouped by `case_id` using the `COUNT(*) OVER (PARTITION BY case_id)` function.
   
2. In the `FilteredEventLog` CTE, we utilize a `WHERE` clause to filter out cases that have more than six events, using `event_count <= 6`.
   
3. The final `SELECT` statement from `FilteredEventLog` simply retrieves the filtered rows, ordering them by `case_id` and `timestamp` (though the ordering is not essential for the task and could be adjusted according to other requirements).

This query ensures that only the events coming from cases with six or fewer events are returned in your analysis or downstream application.