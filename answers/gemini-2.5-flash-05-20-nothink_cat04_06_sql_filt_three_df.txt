```sql
WITH RankedEvents AS (
    -- Assign a row number to each event within its case, ordered by timestamp
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS rn
    FROM
        event_log
),
IdentifiedSequences AS (
    -- Find cases that contain the direct sequence: 'Approve Purchase Requisition' -> 'Create Order' -> 'Confirm Order'
    SELECT
        t1.case_id,
        t1.timestamp AS approve_ts,
        t2.timestamp AS create_ts,
        t3.timestamp AS confirm_ts
    FROM
        RankedEvents t1
    JOIN
        RankedEvents t2 ON t1.case_id = t2.case_id
                         AND t1.rn + 1 = t2.rn -- direct succession
    JOIN
        RankedEvents t3 ON t2.case_id = t3.case_id
                         AND t2.rn + 1 = t3.rn -- direct succession
    WHERE
        t1.activity = 'Approve Purchase Requisition'
        AND t2.activity = 'Create Order'
        AND t3.activity = 'Confirm Order'
),
CasesToExclude AS (
    -- Filter the identified sequences based on the time elapsed between 'Create Order' and 'Confirm Order'
    SELECT
        case_id
    FROM
        IdentifiedSequences
    WHERE
        (confirm_ts - create_ts) > INTERVAL '5 day'
)
-- Select all events from event_log EXCEPT those belonging to the cases identified in CasesToExclude
SELECT
    el.case_id,
    el.activity,
    el.timestamp
FROM
    event_log el
WHERE
    el.case_id NOT IN (SELECT case_id FROM CasesToExclude)
ORDER BY
    el.case_id,
    el.timestamp;

```