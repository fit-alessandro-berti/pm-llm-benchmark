Hereâ€™s the DuckDB SQL query that satisfies the prompt:

```sql
-- Step 1: Identify cases with the specific sequence and time condition
WITH SequenceMatches AS (
    SELECT
        el1.case_id,
        MIN(el1.timestamp) AS approve_pr_timestamp,
        MIN(el2.timestamp) AS create_order_timestamp,
        MIN(el3.timestamp) AS confirm_order_timestamp
    FROM 
        event_log el1
    JOIN 
        event_log el2
        ON el1.case_id = el2.case_id
        AND el1.timestamp < el2.timestamp
    JOIN 
        event_log el3
        ON el1.case_id = el3.case_id
        AND el2.timestamp < el3.timestamp
    WHERE 
        el1.activity = 'Approve Purchase Requisition'
        AND el2.activity = 'Create Order'
        AND el3.activity = 'Confirm Order'
    GROUP BY 
        el1.case_id
    HAVING 
        JULIANDAY(MIN(el3.timestamp)) - JULIANDAY(MIN(el2.timestamp)) > 5
),
-- Step 2: Exclude events from matching cases
ExcludedCases AS (
    SELECT 
        case_id
    FROM 
        SequenceMatches
)
-- Step 3: Return all events not belonging to excluded cases
SELECT 
    *
FROM 
    event_log
WHERE 
    case_id NOT IN (SELECT case_id FROM ExcludedCases)
ORDER BY 
    case_id, timestamp;
```

### Explanation:

1. **`SequenceMatches` CTE**:
   - Identifies cases where the sequence of activities occurs in the exact specified order (`Approve Purchase Requisition`, `Create Order`, `Confirm Order`).
   - Uses self-joins on `event_log` to match events in sequence for the same `case_id`.
   - Filters to only include cases where the time elapsed between `Create Order` and `Confirm Order` is more than 5 days using `JULIANDAY`.

2. **`ExcludedCases` CTE**:
   - Extracts the `case_id` of the cases that match both the sequence and the time condition.

3. **Final Query**:
   - Filters out events where the `case_id` is in the excluded list.
   - Orders the results by `case_id` and `timestamp` for clarity.

This query ensures you exclude only the specific cases that meet both conditions, returning all other events from the log.