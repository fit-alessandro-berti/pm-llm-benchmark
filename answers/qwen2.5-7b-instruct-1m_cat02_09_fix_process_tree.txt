```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# Define activities
create_req = ProcessTree(label="Create_Purchase_Requisition")
approve_req = ProcessTree(label="Approve_Purchase_Requisition")
create_po = ProcessTree(label="Create_Purchase_Order")
receive_goods = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice = ProcessTree(label="Pay_Invoice")
close_case = ProcessTree(label="Close_Case")

# Corrected structure:
# Strict sequence for requisition creation and approval.
# A sequence for creating the PO, receiving goods and invoice, and matching the invoice to the PO.
# Finally, pay the invoice and close the case.
root = ProcessTree(operator=Operator.SEQUENCE, children=[
    create_req,
    approve_req,
    ProcessTree(operator=Operator.SEQUENCE, children=[
        create_po,
        receive_goods,
        receive_invoice,
        match_invoice,
        pay_invoice
    ]),
    close_case
])

# Explanation:
# The corrected model ensures that the requisition is created and approved in the initial sequence.
# Then, the activities related to creating the purchase order, receiving goods and invoice, and matching the invoice to the PO are all part of a single sequence.
# This sequence ensures that these activities follow one after the other, as they logically depend on the previous step.
# Finally, the invoice is paid and the case is closed, completing the process.
```

This solution enforces the correct sequence of events in the "Procure-to-Pay" process, ensuring that each activity happens in the intended order and only after its prerequisites. The use of `Operator.SEQUENCE` ensures that activities are completed in the specified order, and there are no unintended parallel executions or out-of-sequence actions.