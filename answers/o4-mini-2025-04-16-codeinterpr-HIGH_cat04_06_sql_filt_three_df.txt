Here’s one way to do it in DuckDB using windowfunctions and CTEs:

```sql
WITH sequenced AS (
  SELECT
    case_id,
    activity,
    timestamp,
    -- look ahead 1 and 2 rows (within each case, ordered by time)
    LEAD(activity, 1)   OVER w AS next_act,
    LEAD(activity, 2)   OVER w AS next2_act,
    LEAD(timestamp, 1)  OVER w AS ts_next,
    LEAD(timestamp, 2)  OVER w AS ts_next2
  FROM event_log
  WINDOW w AS (PARTITION BY case_id ORDER BY timestamp)
),
to_exclude AS (
  -- find the cases where the three activities occur back-to-back
  -- and the time between Create Order and Confirm Order is >5 days
  SELECT DISTINCT case_id
  FROM sequenced
  WHERE
    activity   = 'Approve Purchase Requisition'
    AND next_act  = 'Create Order'
    AND next2_act = 'Confirm Order'
    -- ts_next is the timestamp of Create Order,
    -- ts_next2 is the timestamp of Confirm Order
    AND (ts_next2 > ts_next + INTERVAL '5 days')
)
-- finally, select all events whose case_id is NOT in our exclusion list
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM to_exclude)
ORDER BY case_id, timestamp;
```

Explanation of the steps:

1. **sequenced**  
   Partition the log by `case_id` and order by `timestamp`.  
   Use `LEAD(…,1)` and `LEAD(…,2)` to peek ahead at the next two activities and their timestamps.

2. **to_exclude**  
   Keep only those rows where:  
   - the current activity is ‘Approve Purchase Requisition’  
   - the very next is ‘Create Order’  
   - the one after that is ‘Confirm Order’  
   - and the elapsed time from Create  Confirm exceeds 5 days.  
   We then grab the distinct `case_id`(s) of all such sequences.

3. **Final SELECT**  
   Pull every event from `event_log` except those whose `case_id` appears in `to_exclude`.  
   You end up with all events belonging only to the “good” cases.