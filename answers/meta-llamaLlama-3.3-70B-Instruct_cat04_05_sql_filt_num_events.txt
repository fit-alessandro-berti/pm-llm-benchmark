To solve the task described, we can use a combination of the `GROUP BY` clause to count the number of events per `case_id` and a `WHERE` clause within a subquery to filter out the `case_id`s with more than six events. Then, we join this filtered set of `case_id`s with the original `event_log` table to retrieve all events for the `case_id`s that meet the condition.

Here's a DuckDB SQL query that accomplishes this:

```sql
SELECT el.*
FROM event_log el
WHERE el.case_id IN (
  SELECT case_id
  FROM event_log
  GROUP BY case_id
  HAVING COUNT(*) <= 6
);
```

This query works as follows:

1. **Subquery**: It first selects `case_id`s from the `event_log` table where the count of events per `case_id` is six or fewer. This is done by grouping the events by `case_id` and using the `HAVING COUNT(*) <= 6` condition.

2. **Main Query**: It then selects all columns (`*`) from the `event_log` table where the `case_id` is in the set of `case_id`s returned by the subquery. This effectively filters out any events belonging to cases with more than six events.

This approach ensures that you only retrieve events from cases that have six or fewer events in total, as required. It is efficient because it uses standard SQL features that are well-optimized in DuckDB, such as `GROUP BY` and `IN` with a subquery, making it suitable for event logs of varying sizes.