```sql
WITH ordered_sequences AS (
    -- For each case_id, build the activity sequence ordered by timestamp
    SELECT
        case_id,
        string_agg(activity, '->' ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),
variant_counts AS (
    -- Count the number of cases per unique activity sequence
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM ordered_sequences
    GROUP BY activity_sequence
),
top_k_variants AS (
    -- Identify the top K variants by number of cases
    SELECT
        activity_sequence
    FROM variant_counts
    ORDER BY case_count DESC
    LIMIT K  -- Replace K with your desired number
),
top_cases AS (
    -- Collect case_ids belonging to the top K variants
    SELECT
        os.case_id
    FROM ordered_sequences os
    JOIN top_k_variants tk
        ON os.activity_sequence = tk.activity_sequence
)
-- Retrieve all events from event_log belonging to the top K variant cases
SELECT e.*
FROM event_log e
JOIN top_cases tc
    ON e.case_id = tc.case_id;
```

Replace `K` with the desired number of top variants to extract.  
This query:  

- Assembles activity sequences per case using `string_agg` ordered by `timestamp`.  
- Finds the frequency of each unique sequence.  
- Picks the top K variants by case frequency.  
- Filters `event_log` to only cases matching those variants.