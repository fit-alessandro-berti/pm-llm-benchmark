# Building an Accepting Petri Net for Insurance Claim Management

I'll create an accepting Petri net that models the insurance claim process with the required loops for document re-submission and in-depth investigation.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance Claim Process")

# Create places representing different states in the process
p_start = PetriNet.Place(name="p_start")  # Start place (new claim)
p_after_C = PetriNet.Place(name="p_after_C")  # After claim filing
p_after_CR = PetriNet.Place(name="p_after_CR")  # After claim registration
p_after_DV = PetriNet.Place(name="p_after_DV")  # After document verification
p_after_FC = PetriNet.Place(name="p_after_FC")  # After fraud check
p_after_CA = PetriNet.Place(name="p_after_CA")  # After claim assessment
p_after_AP = PetriNet.Place(name="p_after_AP")  # After approval
p_after_P = PetriNet.Place(name="p_after_P")  # After payment
p_after_N = PetriNet.Place(name="p_after_N")  # After notification
p_end = PetriNet.Place(name="p_end")  # End place (closed claim)

# Add places to the Petri net
net.places.add(p_start)
net.places.add(p_after_C)
net.places.add(p_after_CR)
net.places.add(p_after_DV)
net.places.add(p_after_FC)
net.places.add(p_after_CA)
net.places.add(p_after_AP)
net.places.add(p_after_P)
net.places.add(p_after_N)
net.places.add(p_end)

# Create transitions with activity labels
C = PetriNet.Transition(name="C", label="Insurance Claim (C)")
CR = PetriNet.Transition(name="CR", label="Claim Registration (CR)")
DV = PetriNet.Transition(name="DV", label="Document Verification (DV)")
RDS = PetriNet.Transition(name="RDS", label="Re-Document Submission (RDS)")
FC = PetriNet.Transition(name="FC", label="Fraud Check (FC)")
II = PetriNet.Transition(name="II", label="In-depth Investigation (II)")
CA = PetriNet.Transition(name="CA", label="Claim Assessment (CA)")
AP = PetriNet.Transition(name="AP", label="Approval (AP)")
P = PetriNet.Transition(name="P", label="Payment (P)")
N = PetriNet.Transition(name="N", label="Notification (N)")
CL = PetriNet.Transition(name="CL", label="Closure (CL)")

# Add transitions to the Petri net
net.transitions.add(C)
net.transitions.add(CR)
net.transitions.add(DV)
net.transitions.add(RDS)
net.transitions.add(FC)
net.transitions.add(II)
net.transitions.add(CA)
net.transitions.add(AP)
net.transitions.add(P)
net.transitions.add(N)
net.transitions.add(CL)

# Create arcs for the main flow
petri_utils.add_arc_from_to(p_start, C, net)
petri_utils.add_arc_from_to(C, p_after_C, net)
petri_utils.add_arc_from_to(p_after_C, CR, net)
petri_utils.add_arc_from_to(CR, p_after_CR, net)
petri_utils.add_arc_from_to(p_after_CR, DV, net)
petri_utils.add_arc_from_to(DV, p_after_DV, net)
petri_utils.add_arc_from_to(p_after_DV, FC, net)
petri_utils.add_arc_from_to(FC, p_after_FC, net)
petri_utils.add_arc_from_to(p_after_FC, CA, net)
petri_utils.add_arc_from_to(CA, p_after_CA, net)
petri_utils.add_arc_from_to(p_after_CA, AP, net)
petri_utils.add_arc_from_to(AP, p_after_AP, net)
petri_utils.add_arc_from_to(p_after_AP, P, net)
petri_utils.add_arc_from_to(P, p_after_P, net)
petri_utils.add_arc_from_to(p_after_P, N, net)
petri_utils.add_arc_from_to(N, p_after_N, net)
petri_utils.add_arc_from_to(p_after_N, CL, net)
petri_utils.add_arc_from_to(CL, p_end, net)

# Create arcs for special flows: document re-submission and in-depth investigation
petri_utils.add_arc_from_to(p_after_DV, RDS, net)
petri_utils.add_arc_from_to(RDS, p_after_CR, net)  # After RDS, document verification happens again
petri_utils.add_arc_from_to(p_after_FC, II, net)
petri_utils.add_arc_from_to(II, p_after_DV, net)  # After II, fraud check happens again

# Define initial and final markings
im = Marking()
im[p_start] = 1  # One token in the start place

fm = Marking()
fm[p_end] = 1  # One token in the end place
```

## Explanation

This Petri net models the insurance claim process with the following components:

1. **Places**: Representing states between activities (e.g., after claim registration, after document verification)
2. **Transitions**: Representing activities in the process (e.g., Insurance Claim, Document Verification)
3. **Arcs**: Connecting places and transitions to define the flow of the process
4. **Markings**: Defining the initial state (a token in p_start) and final state (a token in p_end)

### Main Process Flow
The main sequence follows: Claim (C)  Registration (CR)  Document Verification (DV)  Fraud Check (FC)  Assessment (CA)  Approval (AP)  Payment (P)  Notification (N)  Closure (CL)

### Special Loops
1. **Document Re-submission Loop**: If documents are incomplete after verification:
   - p_after_DV  RDS  p_after_CR  DV  p_after_DV
   
2. **In-depth Investigation Loop**: If fraud is suspected:
   - p_after_FC  II  p_after_DV  FC  p_after_FC

This model allows for multiple iterations of both loops as specified in the requirements, and ensures the process reaches the final marking (closed claim) only after completing all required steps.