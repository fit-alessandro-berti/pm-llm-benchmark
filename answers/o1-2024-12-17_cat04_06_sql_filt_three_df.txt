Below is an example DuckDB SQL query that implements all the required steps. The query uses window functions to identify the specific sequence of three consecutive activities and calculates the time difference between the 'Create Order' and 'Confirm Order' steps. It then filters out any cases that contain the sequence where the time difference is greater than 5 days.

```sql
WITH ordered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        LAG(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_m2,
        LAG(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS activity_m1,
        LAG(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS timestamp_m1
    FROM event_log
),
cases_to_exclude AS (
    SELECT DISTINCT case_id
    FROM ordered_events
    WHERE activity_m2 = 'Approve Purchase Requisition'
      AND activity_m1 = 'Create Order'
      AND activity = 'Confirm Order'
      AND DATE_DIFF('day', timestamp_m1, timestamp) > 5
)

SELECT *
FROM event_log
WHERE case_id NOT IN (
    SELECT case_id FROM cases_to_exclude
)
ORDER BY case_id, timestamp;
```

**Explanation of the Steps:**

1. **Identify the sequence of three activities**:  
   In the `ordered_events` CTE, we use window functions (`LAG`) to look at the current event and the two immediately preceding events within the same case, in chronological order. If we find a row where `activity_m2 = 'Approve Purchase Requisition'`, `activity_m1 = 'Create Order'`, and the current `activity = 'Confirm Order'`, then we have found the desired sequence of three consecutive events.

2. **Check the time difference for the identified sequence**:  
   Still in `ordered_events`, we have `timestamp_m1` which corresponds to the timestamp of the 'Create Order' event. If the time difference between `timestamp` of the current row (the 'Confirm Order' event) and `timestamp_m1` (the 'Create Order' event) is more than 5 days, that means this sequence meets the timing condition.

3. **Mark cases to exclude**:  
   The `cases_to_exclude` CTE extracts the distinct `case_id` values that have the identified sequence and meet the time-difference condition. These are the cases we do not want to include in our final result.

4. **Exclude identified cases from final result**:  
   Finally, we select all rows from `event_log` except those whose `case_id` appears in `cases_to_exclude`. This ensures that the returned result set only includes events from cases that do not meet both the sequence and the timing criteria.