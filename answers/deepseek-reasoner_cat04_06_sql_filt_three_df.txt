To solve this problem, we need to identify cases that contain a specific sequence of activities and meet a timing condition, then exclude all events from those cases. The solution involves using window functions to detect the sequence and timing, and then filtering out the relevant cases.

### Approach
1. **Identify Excluded Cases**: Use window functions (`LEAD`) to check for consecutive activities and calculate the time difference between the 'Create Order' and 'Confirm Order' events.
2. **Filter Events**: Exclude all events belonging to the identified cases from the final result.

### Solution Code
```sql
WITH excluded_cases AS (
    SELECT DISTINCT case_id
    FROM (
        SELECT 
            case_id,
            activity,
            LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
            LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
            LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS create_order_time,
            LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS confirm_order_time
        FROM event_log
    ) sub
    WHERE 
        activity = 'Approve Purchase Requisition'
        AND next_activity = 'Create Order'
        AND next_next_activity = 'Confirm Order'
        AND (confirm_order_time - create_order_time) > INTERVAL 5 DAYS
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM excluded_cases);
```

### Explanation
1. **Common Table Expression (CTE) - `excluded_cases`**:
   - This CTE identifies cases that meet both the sequence and timing conditions.
   - The inner subquery uses `LEAD` window functions to look ahead at the next two activities and their timestamps for each event.
   - The `WHERE` clause filters rows where the current activity is 'Approve Purchase Requisition', the next is 'Create Order', the one after is 'Confirm Order', and the time between 'Create Order' and 'Confirm Order' exceeds 5 days.

2. **Main Query**:
   - Selects all events from the `event_log` table where the `case_id` is not in the list of excluded cases identified by the CTE.
   - This effectively filters out all events from cases that meet the specified criteria, returning only the events from cases that do not.

This approach efficiently identifies and excludes the relevant cases using window functions and a CTE, ensuring the final result meets the problem requirements.