To solve this problem, we need to identify and exclude cases from the event log that meet specific criteria related to the sequence of activities and the time elapsed between two of those activities. The solution involves using window functions to detect consecutive activities and filter cases based on the time condition.

### Approach
1. **Identify Consecutive Activities**: Use the `LEAD` window function to check for the sequence of activities 'Approve Purchase Requisition', 'Create Order', and 'Confirm Order' in direct succession within each case.
2. **Check Time Condition**: Calculate the time difference between the 'Create Order' and 'Confirm Order' events. If this difference exceeds 5 days, the case should be excluded.
3. **Exclude Cases**: Retrieve all events from the event log, excluding those cases that meet both the sequence and time conditions.

### Solution Code
```sql
WITH excluded_cases AS (
  SELECT DISTINCT case_id
  FROM (
    SELECT
      case_id,
      activity,
      LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
      LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
      LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS create_order_time,
      LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS confirm_order_time
    FROM event_log
  ) AS sub
  WHERE
    activity = 'Approve Purchase Requisition'
    AND next_activity = 'Create Order'
    AND next_next_activity = 'Confirm Order'
    AND (confirm_order_time - create_order_time) > INTERVAL 5 DAYS
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM excluded_cases)
ORDER BY case_id, timestamp;
```

### Explanation
1. **Window Functions**: The `LEAD` function is used to look at the next activities and their timestamps within each case, ordered by timestamp. This allows us to check if the required sequence of activities occurs consecutively.
2. **Filtering Conditions**: The subquery filters rows where the current activity is 'Approve Purchase Requisition', the next is 'Create Order', and the one after that is 'Confirm Order'. Additionally, it checks if the time between 'Create Order' and 'Confirm Order' exceeds 5 days.
3. **Exclusion of Cases**: The main query retrieves all events from the event log, excluding those cases identified in the `excluded_cases` CTE. This ensures that only events from cases not meeting the exclusion criteria are returned.

This approach efficiently identifies and excludes the specified cases using window functions and temporal filtering, ensuring the result set meets the problem requirements.