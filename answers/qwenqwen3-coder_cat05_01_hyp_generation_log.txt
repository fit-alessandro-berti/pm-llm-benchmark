Based on the provided event log data and schema, here are several **anomalies** and **undesirable behaviors** observed in the process execution. For each, a **hypothesis** is proposed, followed by a **SQL query** to investigate further.

---

##  Anomaly 1: Out-of-Order Activities

###  Observation:
In some cases, activities occur in an order that deviates from the assumed process flow.

#### Example:
- **Case ID 1002**: `Confirm Shipment` occurs before `Perform Credit Check`.
- **Case ID 1003**: `Ship Goods` occurs before `Validate Stock`.
- **Case ID 1004**: `Receive Payment` occurs before both `Issue Invoice` and `Confirm Shipment`.

###  Hypothesis:
This could be due to:
- Manual override or bypass of standard workflows.
- System misconfiguration or data entry errors.
- Rushed processing for high-priority orders.

###  SQL Query:
```sql
WITH ordered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_order
    FROM order_event_log
),
expected_flow AS (
    SELECT 'Register Order' AS activity, 1 AS expected_order
    UNION ALL SELECT 'Perform Credit Check', 2
    UNION ALL SELECT 'Validate Stock', 3
    UNION ALL SELECT 'Confirm Shipment', 4
    UNION ALL SELECT 'Ship Goods', 5
    UNION ALL SELECT 'Issue Invoice', 6
    UNION ALL SELECT 'Receive Payment', 7
)
SELECT
    oe.case_id,
    oe.activity,
    oe.timestamp,
    ef.expected_order,
    oe.event_order
FROM ordered_events oe
JOIN expected_flow ef ON oe.activity = ef.activity
WHERE oe.event_order != ef.expected_order
ORDER BY oe.case_id, oe.event_order;
```

---

##  Anomaly 2: Missing Key Activities

###  Observation:
Some orders are missing critical steps like `Validate Stock`, which should precede shipment.

#### Example:
- **Case ID 1003**: No `Validate Stock` activity recorded before shipping.

###  Hypothesis:
Could indicate:
- Premature shipment due to urgency or pressure.
- Omission due to system failure or human oversight.
- Improper logging of the event.

###  SQL Query:
```sql
SELECT DISTINCT o.case_id
FROM orders o
WHERE NOT EXISTS (
    SELECT 1
    FROM order_event_log oel
    WHERE oel.case_id = o.case_id
      AND oel.activity = 'Validate Stock'
);
```

---

##  Anomaly 3: Early Payment Receipt

###  Observation:
Payments are received before invoices are issued (e.g., Case ID 1004).

###  Hypothesis:
Could suggest:
- Data entry timing issues (invoice generated after payment).
- Misuse of activity definitions or manual adjustments.
- System bugs or integration issues between modules.

###  SQL Query:
```sql
SELECT p.case_id
FROM order_event_log p
JOIN order_event_log i ON p.case_id = i.case_id
WHERE p.activity = 'Receive Payment'
  AND i.activity = 'Issue Invoice'
  AND p.timestamp < i.timestamp;
```

---

##  Anomaly 4: Same Resource Performing Conflicting Roles

###  Observation:
A single resource performs activities typically done by different roles.

#### Example:
If a resource performs both `Register Order` and `Perform Credit Check`.

###  Hypothesis:
May indicate:
- Cross-training or role overlap.
- Unauthorized access or misuse of systems.
- Poor segregation of duties.

###  SQL Query:
```sql
SELECT
    oel.resource,
    COUNT(DISTINCT r.role) AS distinct_roles_performed
FROM order_event_log oel
JOIN resources r ON oel.resource = r.resource_id
GROUP BY oel.resource
HAVING COUNT(DISTINCT r.role) > 1;
```

---

##  Anomaly 5: Repeated Activity with No Clear Reason

###  Observation:
The same activity is repeated multiple times for the same case.

#### Example:
Not directly visible in sample data, but possible.

###  Hypothesis:
Could be caused by:
- Retry mechanisms or failed attempts.
- Duplicate submissions.
- User error or confusion.

###  SQL Query:
```sql
SELECT
    case_id,
    activity,
    COUNT(*) AS repetition_count
FROM order_event_log
GROUP BY case_id, activity
HAVING COUNT(*) > 1;
```

---

##  Anomaly 6: High Priority Orders Not Following Process Strictly

###  Observation:
Priority orders may skip or reorder steps.

#### Example:
Check if priority orders have more deviations.

###  Hypothesis:
May reflect:
- Expedited handling at the cost of compliance.
- Inconsistent enforcement of process rules.

###  SQL Query:
```sql
SELECT
    o.case_id,
    o.order_type,
    COUNT(oel.event_id) AS total_events,
    STRING_AGG(oel.activity, ' -> ' ORDER BY oel.timestamp) AS actual_flow
FROM orders o
LEFT JOIN order_event_log oel ON o.case_id = oel.case_id
GROUP BY o.case_id, o.order_type
HAVING o.order_type = 'priority';
```

---

##  Anomaly 7: Delay Between Shipment and Invoice

###  Observation:
There's a significant delay between `Ship Goods` and `Issue Invoice`.

#### Example:
Compare timestamps for these two activities.

###  Hypothesis:
May indicate:
- Inefficient billing workflows.
- Delays in system integration.
- Manual invoice generation lag.

###  SQL Query:
```sql
SELECT
    s.case_id,
    s.timestamp AS shipped_at,
    i.timestamp AS invoiced_at,
    EXTRACT(EPOCH FROM (i.timestamp - s.timestamp))/3600 AS hours_diff
FROM order_event_log s
JOIN order_event_log i ON s.case_id = i.case_id
WHERE s.activity = 'Ship Goods'
  AND i.activity = 'Issue Invoice'
ORDER BY hours_diff DESC;
```

---

## Summary of Investigative Queries

| Anomaly | Purpose | Query |
|--------|---------|-------|
| Out-of-order events | Detect deviations from standard workflow | Query 1 |
| Missing Validate Stock | Find orders without required step | Query 2 |
| Premature payment | Identify payments before invoice | Query 3 |
| Multi-role resources | Detect role overlaps | Query 4 |
| Duplicated activities | Find repeated actions | Query 5 |
| Priority order flow | Analyze expedited handling | Query 6 |
| Shipment-invoice delay | Measure processing lags | Query 7 |

These queries help identify and analyze process anomalies using the available tables (`order_event_log`, `orders`, `resources`). You can use them as-is or modify them to include filters, aggregations, or visualizations depending on your analysis tooling.