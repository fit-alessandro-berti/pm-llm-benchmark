# Analysis and Fix for Procure-to-Pay Process Tree

## 1. Issues with the Current Model

The current model has a critical flaw in its use of the `PARALLEL` operator for activities 3–7:

| Issue | Impact |
|-------|--------|
| **Parallel execution of dependent steps** | Activities like `Pay_Invoice` can occur before `Receive_Goods` or `Receive_Invoice`, violating business logic |
| **No enforcement of matching before payment** | `Pay_Invoice` can happen without `Match_Invoice_to_PO` being completed |
| **Goods receipt independence** | `Receive_Goods` and `Receive_Invoice` are independent in timing but logically related (both must occur before matching) |
| **Missing strict sequencing** | The domain requires a clear chain: Requisition  Approval  PO  (Goods & Invoice in parallel)  Matching  Payment  Close |

**Domain Requirements Analysis:**
-  Steps 1–2: Strict sequence (Create  Approve requisition)
-  Steps 3–5: Flexible but constrained (PO must come first; then Goods & Invoice can arrive in any order)
-  Steps 6–8: Strict sequence (Match  Pay  Close)

---

## 2. Corrected Process Tree Model

```python
from pm4py.objects.process_tree.obj import Operator, ProcessTree

# Define activities
create_req = ProcessTree(label="Create_Purchase_Requisition")
approve_req = ProcessTree(label="Approve_Purchase_Requisition")
create_po = ProcessTree(label="Create_Purchase_Order")
receive_goods = ProcessTree(label="Receive_Goods")
receive_invoice = ProcessTree(label="Receive_Invoice")
match_invoice = ProcessTree(label="Match_Invoice_to_PO")
pay_invoice = ProcessTree(label="Pay_Invoice")
close_case = ProcessTree(label="Close_Case")

# Phase 1: Requisition workflow (strict sequence)
requisition_phase = ProcessTree(operator=Operator.SEQUENCE, children=[
    create_req,
    approve_req
])

# Phase 2: Goods and Invoice receipt (parallel, both must complete before matching)
# Both Receive_Goods and Receive_Invoice can happen in any order, but both are required
receipt_phase = ProcessTree(operator=Operator.PARALLEL, children=[
    receive_goods,
    receive_invoice
])

# Phase 3: PO creation followed by receipt phase
procurement_phase = ProcessTree(operator=Operator.SEQUENCE, children=[
    create_po,
    receipt_phase
])

# Phase 4: Invoice matching and payment (strict sequence)
payment_phase = ProcessTree(operator=Operator.SEQUENCE, children=[
    match_invoice,
    pay_invoice
])

# Phase 5: Complete workflow (all phases in strict sequence)
root = ProcessTree(operator=Operator.SEQUENCE, children=[
    requisition_phase,
    procurement_phase,
    payment_phase,
    close_case
])
```

---

## 3. How the Fixed Model Ensures Conformance

### **Sequence Enforcement:**

| Step | Constraint | Mechanism |
|------|-----------|-----------|
| 1  2 | Requisition must be approved before PO | `SEQUENCE[Create_Req, Approve_Req]` |
| 2  3 | Approval must precede PO creation | Phase sequencing |
| 3  (4,5) | PO must exist before goods/invoice received | `SEQUENCE[Create_PO, PARALLEL[Receive_Goods, Receive_Invoice]]` |
| (4,5)  6 | Both goods and invoice must be received before matching | `PARALLEL` ensures synchronization |
| 6  7 | Matching must complete before payment | `SEQUENCE[Match_Invoice, Pay_Invoice]` |
| 7  8 | Payment must complete before case closure | Final `SEQUENCE` step |

### **Prevented Invalid Behaviors:**

 **Before:** `Pay_Invoice` could execute immediately after `Approve_Requisition`  
 **After:** `Pay_Invoice` is blocked until all prior phases complete

 **Before:** `Match_Invoice_to_PO` could occur before `Receive_Goods`  
 **After:** `Match_Invoice_to_PO` is gated by parallel receipt completion

 **Before:** `Close_Case` could happen anytime after `Approve_Requisition`  
 **After:** `Close_Case` can only execute as the final step

### **Allowed Flexible Behavior:**

 **Goods and Invoice can arrive in any order** (parallel execution)  
   - `Receive_Goods`  `Receive_Invoice`  Match  
   - `Receive_Invoice`  `Receive_Goods`  Match  
   - Both simultaneously  

 **Realistic procure-to-pay flow:** Activities reflect real-world timing where goods shipments and invoices arrive independently but both are prerequisites for reconciliation.

---

## 4. Validation

**Test Trace 1 (Valid):**
```
Create_Req  Approve_Req  Create_PO  Receive_Goods  Receive_Invoice  Match_Invoice  Pay_Invoice  Close_Case
```
 **Accepted** (matches sequence exactly)

**Test Trace 2 (Valid):**
```
Create_Req  Approve_Req  Create_PO  Receive_Invoice  Receive_Goods  Match_Invoice  Pay_Invoice  Close_Case
```
 **Accepted** (goods and invoice order swapped, allowed by PARALLEL)

**Test Trace 3 (Invalid):**
```
Create_Req  Approve_Req  Pay_Invoice  Create_PO  ...
```
 **Rejected** (payment before PO)

**Test Trace 4 (Invalid):**
```
Create_Req  Create_PO  Approve_Req  Receive_Goods  ...
```
 **Rejected** (PO created before approval)