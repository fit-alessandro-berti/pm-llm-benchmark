```sql
-- Replace K with the desired number of top variants
WITH RankedVariants AS (
    SELECT
        -- Construct the ordered sequence of activities for each case
        string_agg(activity, '->' ORDER BY timestamp) AS variant_sequence,
        COUNT(DISTINCT case_id) AS variant_count
    FROM event_log
    GROUP BY case_id
),
TopKVariants AS (
    SELECT
        variant_sequence,
        variant_count
    FROM RankedVariants
    ORDER BY variant_count DESC
    LIMIT K -- Specify your desired K here
)
SELECT
    el.case_id,
    el.activity,
    el.timestamp
FROM event_log el
JOIN TopKVariants tv
    ON string_agg(el.activity, '->' ORDER BY el.timestamp) = tv.variant_sequence
GROUP BY el.case_id, el.activity, el.timestamp -- Necessary for string_agg within the main query
ORDER BY el.case_id, el.timestamp;
```

**Explanation:**

1.  **`RankedVariants` CTE (Common Table Expression):**
    *   `string_agg(activity, '->' ORDER BY timestamp)`: This is the core of identifying the process variant. For each `case_id`, it concatenates all `activity` values into a single string, separated by `'->'`, and critically, it orders these activities based on their `timestamp`. This effectively creates a unique string representation of the process flow for each case.
    *   `COUNT(DISTINCT case_id)`: This counts the number of unique cases that exhibit a particular `variant_sequence`.
    *   `GROUP BY case_id`: This ensures that the `string_agg` function operates on all events belonging to a single case.

2.  **`TopKVariants` CTE:**
    *   `SELECT variant_sequence, variant_count FROM RankedVariants`: We select the generated variant sequences and their counts.
    *   `ORDER BY variant_count DESC`: We sort the variants in descending order based on how frequently they occur.
    *   `LIMIT K`: This clause filters the results to keep only the top `K` most frequent process variants. **Remember to replace `K` with your desired integer value.**

3.  **Final `SELECT` Statement:**
    *   `FROM event_log el`: We start by selecting from the original `event_log` table, aliased as `el`.
    *   `JOIN TopKVariants tv ON string_agg(el.activity, '->' ORDER BY el.timestamp) = tv.variant_sequence`: This is the crucial join. We re-calculate the `variant_sequence` for each event in the `event_log` and join it with the `TopKVariants` CTE. This effectively filters the `event_log` to include only those events that belong to cases whose complete activity sequence matches one of the top `K` variants.
    *   `GROUP BY el.case_id, el.activity, el.timestamp`: This `GROUP BY` clause is necessary because `string_agg` is used again in the `ON` clause. DuckDB requires all non-aggregated columns in the `SELECT` list (or used in the `ON` clause of a join) to be present in the `GROUP BY` clause when an aggregate function is also present.
    *   `ORDER BY el.case_id, el.timestamp`: This ensures the output is organized by case and then chronologically within each case, making it easier to read and verify.

This query efficiently identifies process variants, counts their occurrences, and then retrieves all the original event data associated with cases belonging to the most frequent variants.