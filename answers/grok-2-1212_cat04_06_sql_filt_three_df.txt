To solve this problem, we'll need to use a combination of window functions, common table expressions (CTEs), and filtering. Let's break down the solution into steps:

1. Identify cases with the specified sequence of activities.
2. Filter those cases to only include ones where the time between 'Create Order' and 'Confirm Order' is more than 5 days.
3. Exclude events from cases that meet both criteria.

Here's the DuckDB SQL query that accomplishes this:

```sql
-- CTE to identify cases with the specified sequence
WITH sequence_cases AS (
    SELECT
        case_id,
        activity,
        timestamp,
        LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
        LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity
    FROM
        event_log
),

-- CTE to identify cases meeting both sequence and timing criteria
filtered_cases AS (
    SELECT DISTINCT
        case_id
    FROM
        sequence_cases sc1
    JOIN
        sequence_cases sc2 ON sc1.case_id = sc2.case_id
    JOIN
        sequence_cases sc3 ON sc1.case_id = sc3.case_id
    WHERE
        sc1.activity = 'Approve Purchase Requisition'
        AND sc2.activity = 'Create Order'
        AND sc3.activity = 'Confirm Order'
        AND sc2.next_activity = 'Confirm Order'
        AND sc1.next_activity = 'Create Order'
        AND sc1.next_next_activity = 'Confirm Order'
        AND sc3.timestamp - sc2.timestamp > INTERVAL '5 days'
)

-- Final query to return all events except those from filtered cases
SELECT
    el.*
FROM
    event_log el
LEFT JOIN
    filtered_cases fc ON el.case_id = fc.case_id
WHERE
    fc.case_id IS NULL
ORDER BY
    el.case_id, el.timestamp;
```

Let's break down the query:

1. The `sequence_cases` CTE uses window functions (`LEAD`) to look ahead and identify the sequence of activities within each case.

2. The `filtered_cases` CTE joins the `sequence_cases` CTE to itself three times, ensuring that:
   - The activities appear in the correct order ('Approve Purchase Requisition', 'Create Order', 'Confirm Order')
   - The activities appear in direct succession (using the `next_activity` and `next_next_activity` columns)
   - The time difference between 'Create Order' and 'Confirm Order' is more than 5 days

3. The final SELECT statement joins the original `event_log` table with the `filtered_cases` CTE. It returns all events where the `case_id` does not appear in the `filtered_cases` CTE (i.e., cases that don't meet both the sequence and timing criteria).

4. The results are ordered by `case_id` and `timestamp` to provide a clear view of the remaining events.

This query will return all events from the `event_log` table, excluding any events from cases that meet both the specified sequence of activities and the timing condition between 'Create Order' and 'Confirm Order'.