### Identified Anomalies and Hypotheses

#### **Anomaly 1: Activities Out of Sequence**
- **Example:**  
  - Case 1002: `Confirm Shipment`  `Ship Goods`  `Perform Credit Check` (credit check after shipping).
  - Case 1003: `Ship Goods`  `Confirm Shipment` (confirmation after shipping).
  - Case 1004: `Receive Payment`  `Issue Invoice` (payment before invoicing).

- **Hypotheses:**  
  - Policy violations (e.g., expedited shipping without checks).
  - System workflow misconfiguration (no enforcement of activity order).
  - Human error (manual override or lack of training).

#### **Anomaly 2: Missing Mandatory Activities**
- **Example:**  
  - Case 1003: No `Validate Stock` event.
  - Case 1004: Missing `Perform Credit Check` and `Validate Stock`.

- **Hypotheses:**  
  - System bypass (e.g., manual order processing skipping steps).
  - Data logging failures (events not recorded).
  - Policy exceptions (e.g., trusted customers bypass checks).

#### **Anomaly 3: Suspicious Resource Involvement**
- **Example:**  
  - Case 1004: `Receive Payment` by `FinanceTeam_02` (Cashier) *before* `Issue Invoice` by `FinanceTeam_01` (Accountant).

- **Hypotheses:**  
  - Role misconfiguration (cashiers processing payments without invoices).
  - Fraudulent activity (e.g., payment without valid invoice).

---

### SQL Queries for Investigation

#### **1. Detect Orders with Critical Steps Out of Sequence**
```sql
-- Check for "Ship Goods" before "Perform Credit Check" or "Validate Stock"
SELECT DISTINCT oel.case_id
FROM order_event_log oel
WHERE EXISTS (
  SELECT 1
  FROM order_event_log oel_ship
  WHERE oel_ship.case_id = oel.case_id
    AND oel_ship.activity = 'Ship Goods'
    AND EXISTS (
      SELECT 1
      FROM order_event_log oel_check
      WHERE oel_check.case_id = oel.case_id
        AND oel_check.activity IN ('Perform Credit Check', 'Validate Stock')
        AND oel_check.timestamp > oel_ship.timestamp
    )
);
```

#### **2. Identify Missing Mandatory Steps**
```sql
-- Find orders missing "Perform Credit Check" or "Validate Stock"
SELECT o.case_id, o.order_type,
       COUNT(CASE WHEN oel.activity = 'Perform Credit Check' THEN 1 END) AS has_credit_check,
       COUNT(CASE WHEN oel.activity = 'Validate Stock' THEN 1 END) AS has_stock_check
FROM orders o
LEFT JOIN order_event_log oel 
  ON o.case_id = oel.case_id
  AND oel.activity IN ('Perform Credit Check', 'Validate Stock')
GROUP BY o.case_id, o.order_type
HAVING COUNT(CASE WHEN oel.activity = 'Perform Credit Check' THEN 1 END) = 0
   OR COUNT(CASE WHEN oel.activity = 'Validate Stock' THEN 1 END) = 0;
```

#### **3. Detect Payment Before Invoice**
```sql
-- Find cases where "Receive Payment" precedes "Issue Invoice"
SELECT oel_payment.case_id
FROM order_event_log oel_payment
JOIN order_event_log oel_invoice
  ON oel_payment.case_id = oel_invoice.case_id
  AND oel_payment.activity = 'Receive Payment'
  AND oel_invoice.activity = 'Issue Invoice'
WHERE oel_payment.timestamp < oel_invoice.timestamp;
```

#### **4. Validate Resource-Department Alignment**
```sql
-- Check if non-Logistics resources perform "Ship Goods" or "Confirm Shipment"
SELECT oel.case_id, oel.resource, r.department, oel.activity
FROM order_event_log oel
JOIN resources r ON oel.resource = r.resource_id
WHERE oel.activity IN ('Ship Goods', 'Confirm Shipment')
  AND r.department != 'Logistics';
```

#### **5. Investigate Additional Info Flags**
```sql
-- Find cases with explicit overrides (e.g., "attempted_early=Y")
SELECT case_id, activity, additional_info
FROM order_event_log
WHERE additional_info LIKE '%attempted_early=Y%'
   OR additional_info LIKE '%late_confirmation=Y%'
   OR additional_info LIKE '%shipment_scheduled=N%';
```

#### **6. Analyze Priority Orders for Unusual Patterns**
```sql
-- Compare activity completeness for "priority" vs "standard" orders
SELECT o.order_type,
       COUNT(DISTINCT CASE WHEN oel.activity = 'Perform Credit Check' THEN o.case_id END) * 100.0 / COUNT(DISTINCT o.case_id) AS credit_check_coverage,
       COUNT(DISTINCT CASE WHEN oel.activity = 'Validate Stock' THEN o.case_id END) * 100.0 / COUNT(DISTINCT o.case_id) AS stock_check_coverage
FROM orders o
LEFT JOIN order_event_log oel 
  ON o.case_id = oel.case_id
  AND oel.activity IN ('Perform Credit Check', 'Validate Stock')
GROUP BY o.order_type;
```

---

### Follow-Up Actions
1. **Prioritize Case 1004** for audit (payment before invoice, missing checks).
2. **Review resource training** if non-compliant activity sequences persist.
3. **Check workflow engine logs** to confirm if skipped steps were system-enforced or manual overrides.