**Temporal Profile Construction for Global Supply Chain Process**
===========================================================

Here's a Python solution to construct the temporal profile for the global supply chain process:

```python
def calculate_temporal_profile():
    """
    Construct the temporal profile for the global supply chain process.
    
    Returns:
        dict: A dictionary representing the temporal profile, where each key is a tuple of activity labels,
              and each value is a tuple of (average_time, standard_deviation).
    """
    # Define the activity pairs with estimated average times and standard deviations
    # These values are assumed based on various factors like supplier lead times, manufacturing complexity, etc.
    # In a real-world scenario, these would be estimated using event logs or other data sources.
    temporal_profile = {
        ('SS', 'OP'): (43200, 2880),  # Supplier Selection to Order Placement: 12 days with 2 days standard deviation
        ('OP', 'RC'): (86400, 3600),  # Order Placement to Receive Components: 1 day with 1 hour standard deviation
        ('RC', 'QI'): (7200, 960),   # Receive Components to Quality Inspection: 2 hours with 15 minutes standard deviation
        ('QI', 'CA'): (21600, 1440),  # Quality Inspection to Component Assembly: 6 hours with 2 hours standard deviation
        ('CA', 'PT'): (21600, 1440),  # Component Assembly to Product Testing: 6 hours with 2 hours standard deviation
        ('PT', 'PK'): (86400, 3600),  # Product Testing to Packaging: 1 day with 1 hour standard deviation
        ('PK', 'WS'): (86400, 3600),  # Packaging to Warehouse Storage: 1 day with 1 hour standard deviation
        ('WS', 'DT'): (28800, 1440),  # Warehouse Storage to Distribution: 8 hours with 2 hours standard deviation
        ('DT', 'AS'): (43200, 2880),  # Distribution to After-Sales Support: 12 days with 2 days standard deviation
        ('SS', 'RC'): (43200, 2880),  # Supplier Selection to Receive Components: 12 days with 2 days standard deviation
        ('QI', 'DT'): (28800, 1440),  # Quality Inspection to Distribution: 8 hours with 2 hours standard deviation
        ('CA', 'AS'): (43200, 2880),  # Component Assembly to After-Sales Support: 12 days with 2 days standard deviation
        ('PT', 'AS'): (28800, 1440),  # Product Testing to After-Sales Support: 8 hours with 2 hours standard deviation
        ('PK', 'AS'): (43200, 2880),  # Packaging to After-Sales Support: 12 days with 2 days standard deviation
    }

    return temporal_profile

# Example usage:
temporal_profile = calculate_temporal_profile()
print(temporal_profile)
```

This code constructs the temporal profile by defining the activity pairs with estimated average times and standard deviations. The `calculate_temporal_profile` function returns a dictionary representing the temporal profile, where each key is a tuple of activity labels, and each value is a tuple of `(average_time, standard_deviation)`.

The example usage demonstrates how to call the `calculate_temporal_profile` function and print the resulting temporal profile.