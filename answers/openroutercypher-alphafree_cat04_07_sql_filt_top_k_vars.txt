To solve this problem with DuckDB SQL, you'll need to construct a query that handles both ordering and aggregation tasks, and finally filters to obtain only the events from the top K variants. Here is the step-by-step SQL query to achieve this:

1. **Constructing the ordered sequence per `case_id`**:
   Using `STRING_AGG` to concatenate the activities in timestamp order within each case.

2. **Grouping by process variants and counting cases**:
   After generating the sequence strings, we aggregate them to detect unique process variants and count how many cases follow each variant.

3. **Filtering down to top K variants by their frequency**:
   Ordering by the count and using the `LIMIT` clause to select the top K variants.

4. **Returning the corresponding events from those cases**:
   By joining the original event logs with the derived top variants.

Assuming `K` is provided as a fixed parameter, here's the complete DuckDB SQL query to achieve the desired output:

```sql
WITH ordered_sequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY timestamp) AS variant
    FROM
        event_log
    GROUP BY
        case_id
),
variant_counts AS (
    SELECT
        variant,
        COUNT(*) AS case_count
    FROM
        ordered_sequences
    GROUP BY
        variant
    ORDER BY
        case_count DESC
    LIMIT K
)
SELECT
    e.*
FROM
    event_log e
JOIN
    ordered_sequences os ON e.case_id = os.case_id
WHERE
    os.variant IN (SELECT variant FROM variant_counts)
ORDER BY
    e.case_id,
    e.timestamp;
```

### Explanation:

1. **`ordered_sequences` CTE**:
   - The `STRING_AGG` function is used to concatenate `activity` values, ordered by their `timestamp`, into a single string for every `case_id`, resulting in the sequential order of activities.
  
2. **`variant_counts` CTE**:
   - We group by the variants formed and count how many `case_id` belong to each variant.
   - We then sort these counts in descending order and limit the results to the top K variants using `LIMIT K`.

3. **Final SELECT**:
   - The main SELECT statement joins the original event log (`event_log`) with the `ordered_sequences` on `case_id`.
   - Only cases (`case_id`) where the variant sequence (`variant`) is in the top K as determined by `variant_counts` are included.
   - Results are returned and ordered by `case_id` and `timestamp` to ensure the sequences are presented in chronological order.

Replace `K` with the actual number of top variants you want to retrieve for the final output. Adjust the logic for different `K` values or parameters as needed for your use case.