Below is an illustrative DECLARE model for the product-design / launch scenario.  
For brevity, every rule is assumed to have full support (1.0).  
The confidence I set to 0.90 for “recommended/normal” rules and 1.00 for rules that must always hold in every valid trace (Init, Exactly-one Final Launch, etc.).  
If you want to fine-tune the confidence values you can, of course, change the second number of any (support, confidence) pair.

```python
declare_model = {
    # -------------  Unary templates -------------
    "existence": {
        # Every activity must happen at least once in a complete project
        "IG": (1.0, 0.90),
        "DD": (1.0, 0.90),
        "TFC": (1.0, 0.90),
        "CE":  (1.0, 0.90),
        "PC":  (1.0, 0.90),
        "LT":  (1.0, 0.90),
        "UT":  (1.0, 0.90),
        "AG":  (1.0, 0.90),
        "MP":  (1.0, 0.90),
        "FL":  (1.0, 0.90)
    },

    "absence": {
        # No absence rules in this example
    },

    "exactly_one": {
        # The product is launched exactly once
        "FL": (1.0, 1.00)
    },

    "init": {
        # Idea Generation must be the first event
        "IG": (1.0, 1.00)
    },

    # -------------  Binary templates -------------
    # Note: the key is a tuple (A, B).

    # If A occurs, B must also occur (order not imposed)
    "responded_existence": {
        ("PC", "LT"): (1.0, 0.95),   # A prototype implies lab testing somewhere
        ("PC", "UT"): (1.0, 0.95)    # and also user testing
    },

    # A and B must eventually both occur – strong coupling
    "coexistence": {
        ("LT", "UT"): (1.0, 0.95)
    },

    # Whenever A happens, B must eventually follow in the same case
    "response": {
        ("DD",  "TFC"): (1.0, 0.95),
        ("TFC", "CE"):  (1.0, 0.95),
        ("CE",  "PC"):  (1.0, 0.95),
        ("PC",  "AG"):  (1.0, 0.95),
        ("AG",  "MP"):  (1.0, 0.95),
        ("MP",  "FL"):  (1.0, 0.95)
    },

    # B must occur before A, but other events may intervene
    "precedence": {
        ("MP", "AG"): (1.0, 0.95),
        ("FL", "AG"): (1.0, 0.95)
    },

    # A occurs  B eventually follows AND B occurs  A must have happened before
    "succession": {
        ("DD", "TFC"): (1.0, 0.95),
        ("TFC", "CE"): (1.0, 0.95),
        ("CE", "PC"):  (1.0, 0.95)
    },

    # -------------  “Alternate” variants (skipped) -------------
    "altresponse":       {},
    "altprecedence":     {},
    "altsuccession":     {},

    # -------------  “Chain” (immediate) variants -------------
    # A must be followed immediately by B every time A occurs
    "chainresponse": {
        ("IG", "DD"): (1.0, 0.90)
    },

    # B must occur immediately before A
    "chainprecedence": {
        ("DD", "IG"): (1.0, 0.90)
    },

    # Immediate two-way coupling
    "chainsuccession": {
        ("AG", "MP"): (1.0, 0.90)
    },

    # -------------  Negative templates (none in this example) -------------
    "noncoexistence":      {},
    "nonsuccession":       {},
    "nonchainsuccession":  {}
}
```

How to read a few rules  
• `("DD","TFC")` in “response” means: “Every time a Design Draft (DD) occurs, a Technical Feasibility Check (TFC) must eventually follow.”  
• `("PC","LT")` in “responded_existence” means: “If a Prototype is created, Laboratory Testing must also take place (at some point).”  
• `("AG","MP")` in “chainsuccession” means: “Immediately after the Approval Gate (AG) the Marketing Plan (MP) event must occur.”  

You can now load `declare_model` directly in PM4Py’s DECLARE-analysis utilities (e.g., conformance checking, simulation, model visualization, etc.).