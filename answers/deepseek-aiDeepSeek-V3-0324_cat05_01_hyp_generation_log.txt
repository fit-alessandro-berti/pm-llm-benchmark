# Analysis of Order Event Log Anomalies

Based on the provided data, I've identified several anomalies and deviations from the normal process flow. Here's my analysis:

## 1. Out-of-Sequence Activities

**Anomaly:** Several cases show activities occurring in an unexpected order:
- Case 1002: Shipment was confirmed (event 9) and goods were shipped (event 10) *before* credit check (event 11) and stock validation (event 12)
- Case 1003: Goods were shipped (event 17) *before* shipment confirmation (event 19)
- Case 1004: Payment was received (event 22) *before* invoice was issued (event 23)

**Potential Causes:**
- System allowing steps to be performed out of sequence
- Human error in recording events
- Process exceptions being handled incorrectly
- Possible fraud attempts (especially for case 1004 where payment came before invoice)

**Investigation Query:**
```sql
SELECT 
    o.case_id,
    o.order_type,
    o.order_value,
    string_agg(e.activity, ' -> ' ORDER BY e.event_id) AS activity_sequence
FROM 
    order_event_log e
JOIN 
    orders o ON e.case_id = o.case_id
GROUP BY 
    o.case_id, o.order_type, o.order_value
ORDER BY 
    o.case_id;
```

## 2. Early Shipment Confirmation

**Anomaly:** Case 1002 shows "Confirm Shipment" occurring just 5 minutes after order registration, which seems unusually fast.

**Potential Causes:**
- System automatically confirming shipments without proper checks
- Resource (LogisticsMgr_2) bypassing normal procedures
- Possible data entry error in timestamps

**Investigation Query:**
```sql
SELECT 
    e1.case_id,
    e1.activity AS first_activity,
    e1.timestamp AS first_timestamp,
    e2.activity AS second_activity,
    e2.timestamp AS second_timestamp,
    EXTRACT(EPOCH FROM (e2.timestamp - e1.timestamp))/60 AS minutes_diff
FROM 
    order_event_log e1
JOIN 
    order_event_log e2 ON e1.case_id = e2.case_id AND e1.event_id < e2.event_id
WHERE 
    e1.activity = 'Register Order' 
    AND e2.activity = 'Confirm Shipment'
ORDER BY 
    minutes_diff ASC;
```

## 3. Late Shipment Confirmation

**Anomaly:** Case 1003 shows "Confirm Shipment" occurring *after* "Ship Goods" with a "late_confirmation=Y" flag.

**Potential Causes:**
- Backdating of confirmation
- System allowing goods to ship without confirmation
- Process exception handling

**Investigation Query:**
```sql
SELECT 
    case_id,
    activity,
    timestamp,
    additional_info
FROM 
    order_event_log
WHERE 
    additional_info LIKE '%late%' 
    OR additional_info LIKE '%early%'
ORDER BY 
    case_id, event_id;
```

## 4. Payment Before Invoice

**Anomaly:** Case 1004 shows payment received before invoice was issued.

**Potential Causes:**
- Pre-payment arrangement
- Data entry error
- Possible fraudulent activity

**Investigation Query:**
```sql
SELECT 
    e1.case_id,
    e1.activity AS first_activity,
    e1.timestamp AS first_timestamp,
    e2.activity AS second_activity,
    e2.timestamp AS second_timestamp,
    o.order_value,
    o.order_type
FROM 
    order_event_log e1
JOIN 
    order_event_log e2 ON e1.case_id = e2.case_id AND e1.event_id < e2.event_id
JOIN 
    orders o ON e1.case_id = o.case_id
WHERE 
    e1.activity = 'Receive Payment' 
    AND e2.activity = 'Issue Invoice'
ORDER BY 
    e1.timestamp;
```

## 5. Missing Process Steps

**Anomaly:** Case 1004 is missing the "Perform Credit Check" and "Validate Stock" steps entirely.

**Potential Causes:**
- Process steps skipped for high-value customers
- Data not recorded properly
- System exception handling

**Investigation Query:**
```sql
SELECT 
    o.case_id,
    o.order_type,
    o.order_value,
    COUNT(DISTINCT e.activity) AS distinct_activities,
    string_agg(DISTINCT e.activity, ', ') AS activities_present
FROM 
    orders o
LEFT JOIN 
    order_event_log e ON o.case_id = e.case_id
GROUP BY 
    o.case_id, o.order_type, o.order_value
HAVING 
    COUNT(DISTINCT e.activity) < 7
ORDER BY 
    o.case_id;
```

## 6. Resource Role Violations

**Anomaly:** Need to check if activities are being performed by resources with inappropriate roles.

**Investigation Query:**
```sql
SELECT 
    e.case_id,
    e.activity,
    e.resource,
    r.role,
    r.department
FROM 
    order_event_log e
JOIN 
    resources r ON e.resource = r.resource_id
WHERE 
    (e.activity = 'Perform Credit Check' AND r.department != 'Finance') OR
    (e.activity = 'Validate Stock' AND r.department != 'Logistics') OR
    (e.activity = 'Ship Goods' AND r.department != 'Logistics') OR
    (e.activity = 'Issue Invoice' AND r.department != 'Finance') OR
    (e.activity = 'Receive Payment' AND r.department != 'Finance')
ORDER BY 
    e.case_id, e.event_id;
```

These queries should help identify the root causes of the observed anomalies and determine whether they represent system issues, policy violations, or data quality problems.