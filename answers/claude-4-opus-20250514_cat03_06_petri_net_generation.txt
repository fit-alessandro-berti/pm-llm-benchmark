I'll construct an accepting Petri net for the insurance claim management process with all the specified activities and loops.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="insurance_claim_process")

# Create places
p_start = PetriNet.Place(name="start")
p1 = PetriNet.Place(name="p1")  # After Claim
p2 = PetriNet.Place(name="p2")  # After Claim Registration
p3 = PetriNet.Place(name="p3")  # After Document Verification
p4 = PetriNet.Place(name="p4")  # After Re-Document Submission (loop back to DV)
p5 = PetriNet.Place(name="p5")  # After Fraud Check
p6 = PetriNet.Place(name="p6")  # After In-depth Investigation (loop back to FC)
p7 = PetriNet.Place(name="p7")  # After Claim Assessment
p8 = PetriNet.Place(name="p8")  # After Approval
p9 = PetriNet.Place(name="p9")  # After Payment
p10 = PetriNet.Place(name="p10")  # After Notification
p_end = PetriNet.Place(name="end")  # Final place

# Add places to the net
net.places.add(p_start)
net.places.add(p1)
net.places.add(p2)
net.places.add(p3)
net.places.add(p4)
net.places.add(p5)
net.places.add(p6)
net.places.add(p7)
net.places.add(p8)
net.places.add(p9)
net.places.add(p10)
net.places.add(p_end)

# Create transitions
t_c = PetriNet.Transition(name="t_c", label="Insurance Claim (C)")
t_cr = PetriNet.Transition(name="t_cr", label="Claim Registration (CR)")
t_dv = PetriNet.Transition(name="t_dv", label="Document Verification (DV)")
t_dv_ok = PetriNet.Transition(name="t_dv_ok", label=None)  # Silent transition for complete documents
t_dv_incomplete = PetriNet.Transition(name="t_dv_incomplete", label=None)  # Silent transition for incomplete documents
t_rds = PetriNet.Transition(name="t_rds", label="Re-Document Submission (RDS)")
t_fc = PetriNet.Transition(name="t_fc", label="Fraud Check (FC)")
t_fc_ok = PetriNet.Transition(name="t_fc_ok", label=None)  # Silent transition for no fraud
t_fc_doubtful = PetriNet.Transition(name="t_fc_doubtful", label=None)  # Silent transition for doubtful cases
t_ii = PetriNet.Transition(name="t_ii", label="In-depth Investigation (II)")
t_ca = PetriNet.Transition(name="t_ca", label="Claim Assessment (CA)")
t_ap = PetriNet.Transition(name="t_ap", label="Approval (AP)")
t_p = PetriNet.Transition(name="t_p", label="Payment (P)")
t_n = PetriNet.Transition(name="t_n", label="Notification (N)")
t_cl = PetriNet.Transition(name="t_cl", label="Closure (CL)")

# Add transitions to the net
net.transitions.add(t_c)
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_dv_ok)
net.transitions.add(t_dv_incomplete)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_fc_ok)
net.transitions.add(t_fc_doubtful)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)

# Add arcs for the main flow
petri_utils.add_arc_from_to(p_start, t_c, net)
petri_utils.add_arc_from_to(t_c, p1, net)
petri_utils.add_arc_from_to(p1, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p2, net)
petri_utils.add_arc_from_to(p2, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p3, net)

# Document verification branch
petri_utils.add_arc_from_to(p3, t_dv_ok, net)  # Documents complete
petri_utils.add_arc_from_to(p3, t_dv_incomplete, net)  # Documents incomplete
petri_utils.add_arc_from_to(t_dv_incomplete, p4, net)
petri_utils.add_arc_from_to(p4, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p2, net)  # Loop back to document verification

# Continue main flow after document verification
petri_utils.add_arc_from_to(t_dv_ok, p5, net)
petri_utils.add_arc_from_to(p5, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p5, net)  # Return to same place for choice

# Fraud check branch
petri_utils.add_arc_from_to(p5, t_fc_ok, net)  # No fraud detected
petri_utils.add_arc_from_to(p5, t_fc_doubtful, net)  # Doubtful case
petri_utils.add_arc_from_to(t_fc_doubtful, p6, net)
petri_utils.add_arc_from_to(p6, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p5, net)  # Loop back to fraud check

# Continue main flow after fraud check
petri_utils.add_arc_from_to(t_fc_ok, p7, net)
petri_utils.add_arc_from_to(p7, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p8, net)
petri_utils.add_arc_from_to(p8, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p9, net)
petri_utils.add_arc_from_to(p9, t_p, net)
petri_utils.add_arc_from_to(t_p, p10, net)
petri_utils.add_arc_from_to(p10, t_n, net)
petri_utils.add_arc_from_to(t_n, p_end, net)
petri_utils.add_arc_from_to(p_end, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)  # Final place remains marked

# Define initial marking
im = Marking()
im[p_start] = 1

# Define final marking
fm = Marking()
fm[p_end] = 1

print("Petri net created successfully!")
print(f"Number of places: {len(net.places)}")
print(f"Number of transitions: {len(net.transitions)}")
print(f"Initial marking: {im}")
print(f"Final marking: {fm}")
```

This Petri net models the insurance claim management process with the following key features:

1. **Sequential Flow**: The main activities flow in the specified order from claim filing to closure.

2. **Document Re-submission Loop**: After Document Verification (DV), if documents are incomplete, the process goes through Re-Document Submission (RDS) and loops back to DV.

3. **Fraud Investigation Loop**: After Fraud Check (FC), if there are doubts, an In-depth Investigation (II) is performed, which can loop back to FC multiple times.

4. **Silent Transitions**: I used silent (unlabeled) transitions to handle the branching logic for document verification outcomes and fraud check outcomes.

5. **Initial and Final Markings**: 
   - Initial marking has one token in the start place
   - Final marking has one token in the end place after closure

The net ensures that every claim goes through all mandatory steps while allowing for the specified loops when needed.