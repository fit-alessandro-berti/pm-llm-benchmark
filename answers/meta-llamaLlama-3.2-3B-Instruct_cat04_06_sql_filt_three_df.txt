Here's the DuckDB SQL query that solves the problem:

```sql
SELECT *
FROM event_log
WHERE case_id NOT IN (
  SELECT case_id
  FROM (
    SELECT 
      case_id,
      LAG(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS prev_activity,
      LEAD(activity) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity
    FROM event_log
  ) AS subquery
  WHERE 
    prev_activity = 'Approve Purchase Requisition' 
    AND next_activity = 'Confirm Order'
    AND TIMESTAMPDIFF(DAY, next_activity.timestamp, (SELECT MIN(timestamp) FROM event_log WHERE case_id = subquery.case_id)) > 5
)
ORDER BY timestamp;
```

Explanation:

The subquery in the `NOT IN` clause selects all cases (`case_id`) where the sequence of three activities is found. It does this by utilizing `LAG` and `LEAD` window functions to get the previous and next activity for each case.

The main query then selects all events from `event_log` that do not have a matching sequence in the subquery.

Note: This query assumes that the `timestamp` column is of datetime type, and `TIMESTAMPDIFF` function is available in DuckDB. 

If you are not using a function like `TIMESTAMPDIFF`, you might need to calculate the difference in days manually.