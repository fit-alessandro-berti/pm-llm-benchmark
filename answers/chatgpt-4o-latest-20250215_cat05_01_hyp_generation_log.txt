## **Anomalies and Undesirable Behaviors in the Event Log**

By analyzing the event log data, several anomalies and deviations from the expected process flow emerge:

### **1. Out-of-Order Activities**
- **Case 1002:** "Confirm Shipment" (Event 9) occurred before "Perform Credit Check" (Event 11) and "Validate Stock" (Event 12).  
  **Potential Issues:**  
  - Shipment was attempted before verifying the orderâ€™s financial and inventory status.  
  - Possible miscommunication or system automation issue.  

- **Case 1003:** "Ship Goods" (Event 17) happened before "Confirm Shipment" (Event 19).  
  **Potential Issues:**  
  - The shipment was dispatched without formal confirmation.  
  - A process control failure in logistics.  

### **2. Missing Activities**
- **Case 1004:** The following standard activities are missing:
  - "Perform Credit Check"  
  - "Validate Stock"  
  **Potential Issues:**  
  - This order bypassed crucial financial and inventory checks.  
  - It could be a prepaid order, explaining the immediate "Receive Payment" (Event 22).  
  - Policy deviations or fraudulent processing.  

### **3. Early or Unusual Payments**
- **Case 1004:** "Receive Payment" (Event 22) occurred immediately after "Register Order" (Event 21), before an invoice was issued.  
  **Potential Issues:**  
  - This contradicts the normal flow where an invoice is generated first.  
  - Could indicate prepayment, internal account adjustments, or an error in the invoicing system.  

### **4. Late Confirmations**
- **Case 1003:** "Confirm Shipment" (Event 19) was logged after "Ship Goods" (Event 17).  
  **Potential Issues:**  
  - Indicates a misalignment in shipment authorization.  
  - Could be due to a delay in updating records or a procedural violation.  

---

## **Hypotheses and Investigations**

To analyze these issues further, the following hypotheses and corresponding SQL queries are suggested:

### **1. Orders Where Shipment Was Confirmed Before Credit Check or Stock Validation**
```sql
SELECT oel.case_id, 
       MIN(oel.timestamp) AS shipment_confirmation_time, 
       MAX(oel.timestamp) AS latest_check_time
FROM order_event_log oel
WHERE oel.activity IN ('Confirm Shipment', 'Perform Credit Check', 'Validate Stock')
GROUP BY oel.case_id
HAVING MIN(CASE WHEN activity = 'Confirm Shipment' THEN timestamp END) 
       < MAX(CASE WHEN activity IN ('Perform Credit Check', 'Validate Stock') THEN timestamp END);
```
**Purpose:** Detects cases where shipments were confirmed before financial and stock validations.

---

### **2. Orders Missing Required Steps (Credit Check, Stock Validation)**
```sql
SELECT o.case_id, o.customer_id, o.order_type, o.order_value
FROM orders o
LEFT JOIN order_event_log oel_credit ON o.case_id = oel_credit.case_id 
     AND oel_credit.activity = 'Perform Credit Check'
LEFT JOIN order_event_log oel_stock ON o.case_id = oel_stock.case_id 
     AND oel_stock.activity = 'Validate Stock'
WHERE oel_credit.case_id IS NULL OR oel_stock.case_id IS NULL;
```
**Purpose:** Identifies cases where key process steps were skipped.

---

### **3. Payments Recorded Before Invoices**
```sql
SELECT oel1.case_id, oel1.timestamp AS payment_time, oel2.timestamp AS invoice_time
FROM order_event_log oel1
JOIN order_event_log oel2 ON oel1.case_id = oel2.case_id
WHERE oel1.activity = 'Receive Payment' 
  AND oel2.activity = 'Issue Invoice' 
  AND oel1.timestamp < oel2.timestamp;
```
**Purpose:** Identifies cases where payments were received before invoices were issued.

---

### **4. Orders Where Shipments Were Logged Before Confirmation**
```sql
SELECT oel.case_id
FROM order_event_log oel
WHERE oel.activity = 'Ship Goods'
AND NOT EXISTS (
    SELECT 1 FROM order_event_log oel2
    WHERE oel.case_id = oel2.case_id
    AND oel2.activity = 'Confirm Shipment'
    AND oel2.timestamp <= oel.timestamp
);
```
**Purpose:** Finds cases where goods were shipped without prior confirmation.

---

### **5. Employees Performing Unusual Actions**
```sql
SELECT oel.resource, r.role, oel.activity, COUNT(*) AS activity_count
FROM order_event_log oel
JOIN resources r ON oel.resource = r.resource_id
GROUP BY oel.resource, r.role, oel.activity
HAVING (r.role = 'Credit Analyst' AND oel.activity NOT LIKE 'Perform Credit Check')
    OR (r.role = 'Sales Executive' AND oel.activity NOT LIKE 'Register Order');
```
**Purpose:** Identifies resources performing activities outside their expected roles.

---

## **Conclusions**
- The process contains deviations such as **out-of-sequence events, missing checks, premature shipments, and early payments**.
- The proposed SQL queries help uncover **process violations, potential fraud, and automation issues**.
- Further investigation should involve **reviewing policies, system automation rules, and employee training** to determine whether these are procedural violations or intended business process variations.