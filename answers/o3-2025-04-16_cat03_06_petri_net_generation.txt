```python
"""
Insuranceclaim management – accepting Petri net
------------------------------------------------
The model contains

* one initial place  (p_start)   with a token in the initial marking,
* one final   place  (p_end)     with a token in the final marking,
* visible transitions for every real activity of the process,
* invisible () transitions that:
        – close the “documents O.K.” branch,
        – close the “fraudcheck O.K.” branch,
        – bypass the optional managerial approval,
* two selfloops:
        – DV    RDS  (missing documents),
        – FC    II   (extra investigation).

All objects come from pm4py.
"""

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# -------------------------------------------------------------------
# net, places, transitions
# -------------------------------------------------------------------
net = PetriNet("Insurance_Claim_Process")

# places ------------------------------------------------------------
p_start      = PetriNet.Place("p_start")
p_after_C    = PetriNet.Place("p_after_C")
p_after_CR   = PetriNet.Place("p_after_CR")
p_after_DV   = PetriNet.Place("p_after_DV")
p_before_FC  = PetriNet.Place("p_before_FC")
p_after_FC   = PetriNet.Place("p_after_FC")
p_before_CA  = PetriNet.Place("p_before_CA")
p_after_CA   = PetriNet.Place("p_after_CA")
p_before_P   = PetriNet.Place("p_before_P")
p_after_P    = PetriNet.Place("p_after_P")
p_after_N    = PetriNet.Place("p_after_N")
p_end        = PetriNet.Place("p_end")

for pl in [p_start, p_after_C, p_after_CR, p_after_DV, p_before_FC,
           p_after_FC, p_before_CA, p_after_CA, p_before_P,
           p_after_P, p_after_N, p_end]:
    net.places.add(pl)

# transitions -------------------------------------------------------
t_C          = PetriNet.Transition("C",  "Insurance Claim")
t_CR         = PetriNet.Transition("CR", "Claim Registration")
t_DV         = PetriNet.Transition("DV", "Document Verification")
t_RDS        = PetriNet.Transition("RDS","ReDocument Submission")

t_tau_doc_ok = PetriNet.Transition("tau_docs_ok", None)             # invisible

t_FC         = PetriNet.Transition("FC", "Fraud Check")
t_II         = PetriNet.Transition("II", "Indepth Investigation")
t_tau_fc_ok  = PetriNet.Transition("tau_fc_ok", None)               # invisible

t_CA         = PetriNet.Transition("CA", "Claim Assessment")
t_AP         = PetriNet.Transition("AP", "Approval")
t_tau_skipAP = PetriNet.Transition("tau_skip_ap", None)             # invisible

t_P          = PetriNet.Transition("P",  "Payment")
t_N          = PetriNet.Transition("N",  "Notification")
t_CL         = PetriNet.Transition("CL", "Closure")

for tr in [t_C, t_CR, t_DV, t_RDS, t_tau_doc_ok,
           t_FC, t_II, t_tau_fc_ok,
           t_CA, t_AP, t_tau_skipAP,
           t_P, t_N, t_CL]:
    net.transitions.add(tr)

# -------------------------------------------------------------------
# arcs
# -------------------------------------------------------------------
# claim arrives -----------------------------------------------------
petri_utils.add_arc_from_to(p_start,   t_C,        net)
petri_utils.add_arc_from_to(t_C,       p_after_C,  net)

# registration ------------------------------------------------------
petri_utils.add_arc_from_to(p_after_C, t_CR,       net)
petri_utils.add_arc_from_to(t_CR,      p_after_CR, net)

# document verification + possible resubmission ---------------------
petri_utils.add_arc_from_to(p_after_CR, t_DV,         net)
petri_utils.add_arc_from_to(t_DV,       p_after_DV,   net)

# – documents complete
petri_utils.add_arc_from_to(p_after_DV, t_tau_doc_ok, net)
petri_utils.add_arc_from_to(t_tau_doc_ok, p_before_FC, net)

# – documents missing    resubmission loop
petri_utils.add_arc_from_to(p_after_DV, t_RDS,       net)
petri_utils.add_arc_from_to(t_RDS,      p_after_CR,  net)   # back to DV

# fraud check + investigation loop ---------------------------------
petri_utils.add_arc_from_to(p_before_FC, t_FC,        net)
petri_utils.add_arc_from_to(t_FC,        p_after_FC,  net)

# – fraud check OK
petri_utils.add_arc_from_to(p_after_FC,  t_tau_fc_ok, net)
petri_utils.add_arc_from_to(t_tau_fc_ok, p_before_CA, net)

# – investigation required  (loop)
petri_utils.add_arc_from_to(p_after_FC,  t_II,        net)
petri_utils.add_arc_from_to(t_II,        p_before_FC, net)

# claim assessment --------------------------------------------------
petri_utils.add_arc_from_to(p_before_CA, t_CA,      net)
petri_utils.add_arc_from_to(t_CA,        p_after_CA, net)

# optional managerial approval --------------------------------------
# – path where approval IS required
petri_utils.add_arc_from_to(p_after_CA,  t_AP,        net)
petri_utils.add_arc_from_to(t_AP,        p_before_P,  net)
# – path where approval is NOT required
petri_utils.add_arc_from_to(p_after_CA,  t_tau_skipAP, net)
petri_utils.add_arc_from_to(t_tau_skipAP, p_before_P,  net)

# payment -----------------------------------------------------------
petri_utils.add_arc_from_to(p_before_P,  t_P,       net)
petri_utils.add_arc_from_to(t_P,         p_after_P, net)

# customer notification --------------------------------------------
petri_utils.add_arc_from_to(p_after_P,   t_N,       net)
petri_utils.add_arc_from_to(t_N,         p_after_N, net)

# closure -----------------------------------------------------------
petri_utils.add_arc_from_to(p_after_N,   t_CL,      net)
petri_utils.add_arc_from_to(t_CL,        p_end,     net)

# -------------------------------------------------------------------
# initial / final markings
# -------------------------------------------------------------------
im = Marking();  im[p_start] = 1           # token in the start place
fm = Marking();  fm[p_end]   = 1           # token in the end   place
```

The variables `net`, `im`, and `fm` now form the requested accepting Petri net
that faithfully models the insuranceclaim management process, including the
two possible loops and the optional approval step.