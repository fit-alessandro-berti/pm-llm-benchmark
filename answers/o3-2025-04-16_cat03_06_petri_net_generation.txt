```python
"""
Accepting Petri net for the insurance-claim process that contains
 – a re-submission loop between Document Verification (DV) and 
   Re-Document Submission (RDS)
 – an investigation loop between Fraud Check (FC) and 
   In-depth Investigation (II)

                       +-------------------+
                       |   Re-submission   |
                       |  (RDS)  loop on   |
                       |     p_dv          |
                       +-------------------+
 p_start C> p_c CR> p_cr DV> p_dv
                                           
                                           
                                                             
                                               +----------------------+
                                               | Investigation loop   |
                                               | (II) on p_fc         |
                                               +----------------------+
 p_dv FC> p_fc
 p_fc CA> p_ca AP> p_ap P> p_p N> p_n CL> p_final
"""

from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# ------------------------------------------------------------------
# 1. create the net object
# ------------------------------------------------------------------
net = PetriNet(name="Insurance-Claim-Process")

# ------------------------------------------------------------------
# 2. create places
# ------------------------------------------------------------------
p_start   = PetriNet.Place("p_start")     # new claim arrives
p_c       = PetriNet.Place("p_after_C")   # after (C) Insurance Claim
p_cr      = PetriNet.Place("p_after_CR")  # after Claim Registration
p_dv      = PetriNet.Place("p_after_DV")  # after Document Verification
p_fc      = PetriNet.Place("p_after_FC")  # after Fraud Check
p_ca      = PetriNet.Place("p_after_CA")  # after Claim Assessment
p_ap      = PetriNet.Place("p_after_AP")  # after Approval
p_p       = PetriNet.Place("p_after_P")   # after Payment
p_n       = PetriNet.Place("p_after_N")   # after Notification
p_final   = PetriNet.Place("p_final")     # closed claim (final)

net.places.update(
    {p_start, p_c, p_cr, p_dv, p_fc, p_ca, p_ap, p_p, p_n, p_final}
)

# ------------------------------------------------------------------
# 3. create transitions (label = activity name)
# ------------------------------------------------------------------
t_C   = PetriNet.Transition("C",  "Insurance Claim (C)")
t_CR  = PetriNet.Transition("CR", "Claim Registration (CR)")
t_DV  = PetriNet.Transition("DV", "Document Verification (DV)")
t_RDS = PetriNet.Transition("RDS","Re-Document Submission (RDS)")
t_FC  = PetriNet.Transition("FC", "Fraud Check (FC)")
t_II  = PetriNet.Transition("II", "In-depth Investigation (II)")
t_CA  = PetriNet.Transition("CA", "Claim Assessment (CA)")
t_AP  = PetriNet.Transition("AP", "Approval (AP)")
t_P   = PetriNet.Transition("P",  "Payment (P)")
t_N   = PetriNet.Transition("N",  "Notification (N)")
t_CL  = PetriNet.Transition("CL", "Closure (CL)")

net.transitions.update(
    {t_C, t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL}
)

# ------------------------------------------------------------------
# 4. connect everything with arcs
# ------------------------------------------------------------------
# linear sequence
petri_utils.add_arc_from_to(p_start, t_C,  net); petri_utils.add_arc_from_to(t_C,  p_c,   net)
petri_utils.add_arc_from_to(p_c,     t_CR, net); petri_utils.add_arc_from_to(t_CR, p_cr,  net)
petri_utils.add_arc_from_to(p_cr,    t_DV, net); petri_utils.add_arc_from_to(t_DV, p_dv,  net)
petri_utils.add_arc_from_to(p_dv,    t_FC, net); petri_utils.add_arc_from_to(t_FC, p_fc,  net)
petri_utils.add_arc_from_to(p_fc,    t_CA, net); petri_utils.add_arc_from_to(t_CA, p_ca,  net)
petri_utils.add_arc_from_to(p_ca,    t_AP, net); petri_utils.add_arc_from_to(t_AP, p_ap,  net)
petri_utils.add_arc_from_to(p_ap,    t_P,  net); petri_utils.add_arc_from_to(t_P,  p_p,   net)
petri_utils.add_arc_from_to(p_p,     t_N,  net); petri_utils.add_arc_from_to(t_N,  p_n,   net)
petri_utils.add_arc_from_to(p_n,     t_CL, net); petri_utils.add_arc_from_to(t_CL, p_final, net)

# DV  RDS loop (documents incomplete)
petri_utils.add_arc_from_to(p_dv, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_dv, net)   # returns to DV state

# FC  II loop (investigation)
petri_utils.add_arc_from_to(p_fc, t_II, net)
petri_utils.add_arc_from_to(t_II, p_fc, net)    # returns to FC state

# ------------------------------------------------------------------
# 5. initial and final markings
# ------------------------------------------------------------------
im = Marking()
im[p_start] = 1            # one token when a claim arrives

fm = Marking()
fm[p_final] = 1            # one token when the claim is closed

# ------------------------------------------------------------------
# 6. (optional) show some information
# ------------------------------------------------------------------
print("Number of places   :", len(net.places))
print("Number of transitions:", len(net.transitions))
print("Initial marking    :", im)
print("Final marking      :", fm)

# The variables `net`, `im`, and `fm` now constitute the accepting Petri net.
```

Running the script yields an accepting Petri net whose initial marking puts one token in `p_start` (“new claim”) and whose final marking expects the token in `p_final` (“closed claim”).  
Two self-loops model the possible re-submission of documents and repeated in-depth investigations before the process proceeds.