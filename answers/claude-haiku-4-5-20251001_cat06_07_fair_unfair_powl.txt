# POWL Models for GlobalTeq Solutions Hiring Process

## Model 1: POWL with Potential Unfairness

This model represents the biased hiring process where community affiliation can provide an advantage through a separate evaluation branch.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define individual activities
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")

# Cultural Fit evaluation paths (standard vs. biased)
StandardCulturalFit = Transition(label="StandardCulturalFit")
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")

# Final stages
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Define the loop for data completeness
# Loop: DataCompletenessCheck -> RequestMoreInfo -> back to DataCompletenessCheck (or exit)
data_completeness_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

# Define the XOR choice for cultural fit evaluation
# This is the bias point: applicants can either go through standard evaluation
# or through community affiliation check (which gives implicit advantages)
cultural_fit_xor = OperatorPOWL(
    operator=Operator.XOR,
    children=[StandardCulturalFit, CommunityAffiliationCheck]
)

# Build the partial order: sequence of stages with the biased XOR branch
biased_hiring_process = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        data_completeness_loop,
        SkillAssessment,
        cultural_fit_xor,
        ManagerialReview,
        FinalDecision
    ]
)

# Define the ordering (sequence)
biased_hiring_process.order.add_edge(ReceiveApplication, data_completeness_loop)
biased_hiring_process.order.add_edge(data_completeness_loop, SkillAssessment)
biased_hiring_process.order.add_edge(SkillAssessment, cultural_fit_xor)
biased_hiring_process.order.add_edge(cultural_fit_xor, ManagerialReview)
biased_hiring_process.order.add_edge(ManagerialReview, FinalDecision)

print("Model 1 (Biased Process) constructed successfully")
print("Key bias point: XOR choice between StandardCulturalFit and CommunityAffiliationCheck")
```

**Explanation of Model 1:**

- **ReceiveApplication**: Entry point where applications are submitted
- **data_completeness_loop**: A loop that ensures all required information is present; applicants can be asked for additional details (**RequestMoreInfo**) and re-checked until complete
- **SkillAssessment**: All applicants take the same skill test
- **cultural_fit_xor**: **THE BIAS POINT** — An exclusive choice (XOR) where:
  - One branch leads to **StandardCulturalFit** evaluation (objective assessment)
  - The other branch leads to **CommunityAffiliationCheck** (which implicitly favors applicants with local/community affiliations)
  - The selection between these branches is not transparent and can be influenced by hidden community affiliation flags from the application questionnaire
- **ManagerialReview**: Human review of borderline cases (where bias may be reinforced)
- **FinalDecision**: Final hiring decision

---

## Model 2: POWL without Unfairness

This model represents a fair hiring process where all applicants follow the same evaluation path without community-based advantages.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define individual activities
ReceiveApplication = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo = Transition(label="RequestMoreInfo")
SkillAssessment = Transition(label="SkillAssessment")
CulturalFitCheck = Transition(label="CulturalFitCheck")
ManagerialReview = Transition(label="ManagerialReview")
FinalDecision = Transition(label="FinalDecision")

# Define the loop for data completeness (same as Model 1)
data_completeness_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

# Build the partial order: simple sequential process with NO XOR branching
fair_hiring_process = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        data_completeness_loop,
        SkillAssessment,
        CulturalFitCheck,
        ManagerialReview,
        FinalDecision
    ]
)

# Define the ordering (sequence) - all applicants follow the same path
fair_hiring_process.order.add_edge(ReceiveApplication, data_completeness_loop)
fair_hiring_process.order.add_edge(data_completeness_loop, SkillAssessment)
fair_hiring_process.order.add_edge(SkillAssessment, CulturalFitCheck)
fair_hiring_process.order.add_edge(CulturalFitCheck, ManagerialReview)
fair_hiring_process.order.add_edge(ManagerialReview, FinalDecision)

print("Model 2 (Fair Process) constructed successfully")
print("No bias point: All applicants undergo identical CulturalFitCheck evaluation")
```

**Explanation of Model 2:**

- **ReceiveApplication**: Entry point where applications are submitted
- **data_completeness_loop**: Same loop as Model 1 for ensuring data completeness
- **SkillAssessment**: All applicants take the same skill test (identical to Model 1)
- **CulturalFitCheck**: **FAIR EVALUATION** — A single, uniform activity applied to ALL applicants without exception
  - No XOR branching means no separate "community affiliation" pathway
  - All candidates are evaluated against the same objective criteria
  - Community affiliation data is not used as an evaluation factor
- **ManagerialReview**: Human review of borderline cases (without community affiliation cues influencing the decision)
- **FinalDecision**: Final hiring decision based purely on merit and cultural fit alignment

---

## Comparison Summary

| Aspect | Model 1 (Biased) | Model 2 (Fair) |
|--------|------------------|----------------|
| **Data Completeness** | Loop: Check  Request More Info | Loop: Check  Request More Info |
| **Skill Assessment** | Single path for all applicants | Single path for all applicants |
| **Cultural Fit Evaluation** | **XOR choice**: StandardCulturalFit vs. CommunityAffiliationCheck | **Single path**: Uniform CulturalFitCheck for all |
| **Bias Mechanism** | XOR branch allows implicit advantages based on community affiliations | No selective branching; all treated equally |
| **Fairness** |  Potential for unfair advantage |  Equal treatment for all applicants |
| **Key Difference** | Hidden pathway that rewards local/affiliated candidates | Transparent, uniform evaluation criteria |

The critical difference is the **XOR operator in Model 1**, which creates a fork where some applicants receive preferential treatment through the **CommunityAffiliationCheck** branch, while others go through the standard evaluation. Model 2 eliminates this bias by having all applicants follow the same **CulturalFitCheck** activity, ensuring fairness and transparency.