To solve this problem, we need to write a SQL query that identifies the specific sequence of events, checks the time condition, and then excludes those cases from the final result. Here's a step-by-step approach using DuckDB SQL:

```sql
WITH sequence_cases AS (
  SELECT 
    e1.case_id,
    e2.timestamp AS create_order_time,
    e3.timestamp AS confirm_order_time
  FROM event_log e1
  JOIN event_log e2 ON e1.case_id = e2.case_id AND e2.timestamp > e1.timestamp
  JOIN event_log e3 ON e2.case_id = e3.case_id AND e3.timestamp > e2.timestamp
  WHERE e1.activity = 'Approve Purchase Requisition'
    AND e2.activity = 'Create Order'
    AND e3.activity = 'Confirm Order'
    AND NOT EXISTS (
      SELECT 1
      FROM event_log e_between
      WHERE e_between.case_id = e1.case_id
        AND e_between.timestamp > e1.timestamp
        AND e_between.timestamp < e2.timestamp
    )
    AND NOT EXISTS (
      SELECT 1
      FROM event_log e_between
      WHERE e_between.case_id = e2.case_id
        AND e_between.timestamp > e2.timestamp
        AND e_between.timestamp < e3.timestamp
    )
),
filtered_cases AS (
  SELECT case_id
  FROM sequence_cases
  WHERE DATEDIFF('day', create_order_time, confirm_order_time) > 5
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM filtered_cases)
ORDER BY case_id, timestamp;
```

Let's break down this query:

1. The `sequence_cases` CTE identifies cases with the specific sequence of events:
   - It joins the `event_log` table with itself three times to find the three activities in order.
   - The `NOT EXISTS` clauses ensure there are no other events between these three activities for the same case.

2. The `filtered_cases` CTE further refines the selection:
   - It filters the `sequence_cases` to only include those where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.
   - We use the `DATEDIFF` function to calculate the number of days between these events.

3. The main query then selects all events from the `event_log` table:
   - It excludes the cases identified in `filtered_cases` using a `NOT IN` clause.
   - The results are ordered by `case_id` and `timestamp` for clarity.

This query will return all events from the `event_log` table, except those belonging to cases that have the specified sequence of activities with more than 5 days between 'Create Order' and 'Confirm Order'[1][2][3][5].

Note that this query assumes that the `timestamp` column in the `event_log` table is of a datetime type. If it's stored in a different format, you might need to adjust the `DATEDIFF` function accordingly[6].

Also, be aware that this query may be computationally intensive for large datasets. In such cases, you might want to consider indexing the `case_id`, `activity`, and `timestamp` columns for better performance[4].