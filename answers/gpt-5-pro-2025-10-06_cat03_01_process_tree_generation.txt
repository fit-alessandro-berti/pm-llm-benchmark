Process tree (single expression):
-> ( 'A', 'RG', 'IA', 'TI', 'TC',
     X ( 'CE', 'FBP' ),
     * ( tau,
         -> ( 'SC',
              X ( 'TM', 'SPT' ),
              'RDT',
              X ( 'FCE', 'FBA' )
         )
     ),
     + ( 'AI', 'NC' ),
     'FAS', 'DDI',
     + ( 'BL', 'ICP', 'MRF' )
)

Notes:
- The loop uses tau as the “do” branch so the cycle can be skipped entirely when initial results are normal; otherwise, the redo branch executes SC, the exclusive treatment, then RDT followed by an exclusive follow-up test, and may repeat.

Python/pm4py construction (parents explicitly set):
from pm4py.objects.process_tree.obj import ProcessTree, Operator

root = ProcessTree(operator=Operator.SEQUENCE)

# Step 1–2
A = ProcessTree(label="A", parent=root)
RG = ProcessTree(label="RG", parent=root)
IA = ProcessTree(label="IA", parent=root)
TI = ProcessTree(label="TI", parent=root)
TC = ProcessTree(label="TC", parent=root)

# Step 3: initial diagnostic XOR
init_xor = ProcessTree(operator=Operator.XOR, parent=root)
CE = ProcessTree(label="CE", parent=init_xor)
FBP = ProcessTree(label="FBP", parent=init_xor)
init_xor.children.extend([CE, FBP])

# Step 4: loop (tau allows zero or more cycles)
loop = ProcessTree(operator=Operator.LOOP, parent=root)
do_tau = ProcessTree(label=None, parent=loop)  # tau
redo = ProcessTree(operator=Operator.SEQUENCE, parent=loop)

SC = ProcessTree(label="SC", parent=redo)
treat_xor = ProcessTree(operator=Operator.XOR, parent=redo)
TM = ProcessTree(label="TM", parent=treat_xor)
SPT = ProcessTree(label="SPT", parent=treat_xor)
treat_xor.children.extend([TM, SPT])

RDT = ProcessTree(label="RDT", parent=redo)
follow_xor = ProcessTree(operator=Operator.XOR, parent=redo)
FCE = ProcessTree(label="FCE", parent=follow_xor)
FBA = ProcessTree(label="FBA", parent=follow_xor)
follow_xor.children.extend([FCE, FBA])

redo.children.extend([SC, treat_xor, RDT, follow_xor])
loop.children.extend([do_tau, redo])

# Step 5: AI and NC in parallel
post_diag_parallel = ProcessTree(operator=Operator.PARALLEL, parent=root)
AI = ProcessTree(label="AI", parent=post_diag_parallel)
NC = ProcessTree(label="NC", parent=post_diag_parallel)
post_diag_parallel.children.extend([AI, NC])

# Step 6
FAS = ProcessTree(label="FAS", parent=root)
DDI = ProcessTree(label="DDI", parent=root)

# Step 7: final parallel block
final_parallel = ProcessTree(operator=Operator.PARALLEL, parent=root)
BL = ProcessTree(label="BL", parent=final_parallel)
ICP = ProcessTree(label="ICP", parent=final_parallel)
MRF = ProcessTree(label="MRF", parent=final_parallel)
final_parallel.children.extend([BL, ICP, MRF])

# Assemble root sequence
root.children.extend([
    A, RG, IA, TI, TC,
    init_xor,
    loop,
    post_diag_parallel,
    FAS, DDI,
    final_parallel
])

# 'root' is the complete process tree.