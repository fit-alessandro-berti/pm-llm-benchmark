```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

net = PetriNet(name="Insurance Claim Management Process")

# Define places
start = PetriNet.Place(name="Start")
C = PetriNet.Place(name="Insurance Claim (C)")
CR = PetriNet.Place(name="Claim Registration (CR)")
DV = PetriNet.Place(name="Document Verification (DV)")
RDS = PetriNet.Place(name="Re-Document Submission (RDS)")
FC = PetriNet.Place(name="Fraud Check (FC)")
II = PetriNet.Place(name="In-depth Investigation (II)")
CA = PetriNet.Place(name="Claim Assessment (CA)")
AP = PetriNet.Place(name="Approval (AP)")
P = PetriNet.Place(name="Payment (P)")
N = PetriNet.Place(name="Notification (N)")
CL = PetriNet.Place(name="Closure (CL)")

# Define transitions
CR_transition = PetriNet.Transition(name="Claim Registration (CR)", label="CR")
DV_transition = PetriNet.Transition(name="Document Verification (DV)", label="DV")
RDS_transition = PetriNet.Transition(name="Re-Document Submission (RDS)", label="RDS")
FC_transition = PetriNet.Transition(name="Fraud Check (FC)", label="FC")
II_transition = PetriNet.Transition(name="In-depth Investigation (II)", label="II")
CA_transition = PetriNet.Transition(name="Claim Assessment (CA)", label="CA")
AP_transition = PetriNet.Transition(name="Approval (AP)", label="AP")
P_transition = PetriNet.Transition(name="Payment (P)", label="P")
N_transition = PetriNet.Transition(name="Notification (N)", label="N")
CL_transition = PetriNet.Transition(name="Closure (CL)", label="CL")

# Add places and transitions to the Petri net
net.places.add(start)
net.places.add(C)
net.places.add(CR)
net.places.add(DV)
net.places.add(RDS)
net.places.add(FC)
net.places.add(II)
net.places.add(CA)
net.places.add(AP)
net.places.add(P)
net.places.add(N)
net.places.add(CL)

net.transitions.add(CR_transition)
net.transitions.add(DV_transition)
net.transitions.add(RDS_transition)
net.transitions.add(FC_transition)
net.transitions.add(II_transition)
net.transitions.add(CA_transition)
net.transitions.add(AP_transition)
net.transitions.add(P_transition)
net.transitions.add(N_transition)
net.transitions.add(CL_transition)

# Add arcs between places and transitions
petri_utils.add_arc_from_to(start, CR_transition, net)
petri_utils.add_arc_from_to(CR_transition, CR, net)
petri_utils.add_arc_from_to(CR, DV_transition, net)
petri_utils.add_arc_from_to(DV_transition, DV, net)
petri_utils.add_arc_from_to(DV, RDS_transition, net)
petri_utils.add_arc_from_to(DV, FC_transition, net)
petri_utils.add_arc_from_to(RDS_transition, DV_transition, net)
petri_utils.add_arc_from_to(DV, CA_transition, net)
petri_utils.add_arc_from_to(FC_transition, II_transition, net)
petri_utils.add_arc_from_to(II_transition, FC_transition, net)
petri_utils.add_arc_from_to(II_transition, CA_transition, net)
petri_utils.add_arc_from_to(CA_transition, AP_transition, net)
petri_utils.add_arc_from_to(AP_transition, P_transition, net)
petri_utils.add_arc_from_to(P_transition, N_transition, net)
petri_utils.add_arc_from_to(N_transition, CL_transition, net)

# Initial marking
im = Marking()
im[start] = 1

# Final marking
fm = Marking()
fm[CL] = 1
```