Process tree (algebraic form):
->('A',
   'RG',
   'IA',
   'TI',
   'TC',
   X('CE','FBP'),
   X(tau, *(->('SC', X('TM','SPT'), 'RDT', X('FCE','FBA')), tau)),
   +('AI','NC'),
   'FAS',
   'DDI',
   +('BL','ICP','MRF'))

Python (pm4py) construction:
from pm4py.objects.process_tree.obj import ProcessTree, Operator

root = ProcessTree(operator=Operator.SEQUENCE)

# Initial arrival, registration, intake, triage
A = ProcessTree(label="A", parent=root)
RG = ProcessTree(label="RG", parent=root)
IA = ProcessTree(label="IA", parent=root)
TI = ProcessTree(label="TI", parent=root)
TC = ProcessTree(label="TC", parent=root)
root.children.extend([A, RG, IA, TI, TC])

# Initial diagnostic (exclusive: CE or FBP)
diag_xor = ProcessTree(operator=Operator.XOR, parent=root)
CE = ProcessTree(label="CE", parent=diag_xor)
FBP = ProcessTree(label="FBP", parent=diag_xor)
diag_xor.children.extend([CE, FBP])
root.children.append(diag_xor)

# Optional loop after abnormal results: SC -> (TM xor SPT) -> RDT -> (FCE xor FBA); repeat until normal
skip_or_loop = ProcessTree(operator=Operator.XOR, parent=root)
tau_skip = ProcessTree(label=None, parent=skip_or_loop)  # tau

loop_node = ProcessTree(operator=Operator.LOOP, parent=skip_or_loop)
loop_body = ProcessTree(operator=Operator.SEQUENCE, parent=loop_node)

SC = ProcessTree(label="SC", parent=loop_body)

treat_xor = ProcessTree(operator=Operator.XOR, parent=loop_body)
TM = ProcessTree(label="TM", parent=treat_xor)
SPT = ProcessTree(label="SPT", parent=treat_xor)
treat_xor.children.extend([TM, SPT])

RDT = ProcessTree(label="RDT", parent=loop_body)

followup_xor = ProcessTree(operator=Operator.XOR, parent=loop_body)
FCE = ProcessTree(label="FCE", parent=followup_xor)
FBA = ProcessTree(label="FBA", parent=followup_xor)
followup_xor.children.extend([FCE, FBA])

loop_body.children.extend([SC, treat_xor, RDT, followup_xor])
tau_redo = ProcessTree(label=None, parent=loop_node)  # tau redo
loop_node.children.extend([loop_body, tau_redo])

skip_or_loop.children.extend([tau_skip, loop_node])
root.children.append(skip_or_loop)

# Parallel advanced imaging and nutritional counseling
par_ai_nc = ProcessTree(operator=Operator.PARALLEL, parent=root)
AI = ProcessTree(label="AI", parent=par_ai_nc)
NC = ProcessTree(label="NC", parent=par_ai_nc)
par_ai_nc.children.extend([AI, NC])
root.children.append(par_ai_nc)

# Final sequence: FAS -> DDI
FAS = ProcessTree(label="FAS", parent=root)
DDI = ProcessTree(label="DDI", parent=root)
root.children.extend([FAS, DDI])

# Final parallel block: BL || ICP || MRF
par_admin = ProcessTree(operator=Operator.PARALLEL, parent=root)
BL = ProcessTree(label="BL", parent=par_admin)
ICP = ProcessTree(label="ICP", parent=par_admin)
MRF = ProcessTree(label="MRF", parent=par_admin)
par_admin.children.extend([BL, ICP, MRF])
root.children.append(par_admin)

# root is the constructed process tree representing the whole process

Notes:
- tau is a silent step; in pm4py it is represented by a leaf with label=None.
- The XOR(tau, LOOP(...)) allows skipping the loop entirely when initial results are normal.
- The LOOP has body = SC -> (TM xor SPT) -> RDT -> (FCE xor FBA), and redo = tau.