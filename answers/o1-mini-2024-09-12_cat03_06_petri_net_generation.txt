Certainly! Below is the Python code that constructs an **Accepting Petri Net** for the described insurance claim management process using the `pm4py` library. The Petri net includes places representing the states between activities, transitions labeled with the activity names, and loops for re-document submission and in-depth investigations. The initial marking places a token in the start place, and the final marking represents a closed claim.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Initialize the Petri Net
net = PetriNet(name="Insurance Claim Management Process")

# Define Places
start = PetriNet.Place(name="start")
p_CR = PetriNet.Place(name="after_CR")
p_DV = PetriNet.Place(name="after_DV")
p_FC = PetriNet.Place(name="after_FC")
p_CA = PetriNet.Place(name="after_CA")
p_AP = PetriNet.Place(name="after_AP")
p_P = PetriNet.Place(name="after_P")
p_N = PetriNet.Place(name="after_N")
closure = PetriNet.Place(name="closure")

# Define Transitions
t_CR = PetriNet.Transition(name="Claim Registration (CR)", label="CR")
t_DV = PetriNet.Transition(name="Document Verification (DV)", label="DV")
t_RDS = PetriNet.Transition(name="Re-Document Submission (RDS)", label="RDS")
t_FC = PetriNet.Transition(name="Fraud Check (FC)", label="FC")
t_II = PetriNet.Transition(name="In-depth Investigation (II)", label="II")
t_CA = PetriNet.Transition(name="Claim Assessment (CA)", label="CA")
t_AP = PetriNet.Transition(name="Approval (AP)", label="AP")
t_P = PetriNet.Transition(name="Payment (P)", label="P")
t_N = PetriNet.Transition(name="Notification (N)", label="N")
t_CL = PetriNet.Transition(name="Closure (CL)", label="CL")

# Add Places to the Net
net.places.add(start)
net.places.add(p_CR)
net.places.add(p_DV)
net.places.add(p_FC)
net.places.add(p_CA)
net.places.add(p_AP)
net.places.add(p_P)
net.places.add(p_N)
net.places.add(closure)

# Add Transitions to the Net
net.transitions.add(t_CR)
net.transitions.add(t_DV)
net.transitions.add(t_RDS)
net.transitions.add(t_FC)
net.transitions.add(t_II)
net.transitions.add(t_CA)
net.transitions.add(t_AP)
net.transitions.add(t_P)
net.transitions.add(t_N)
net.transitions.add(t_CL)

# Connect Places and Transitions with Arcs

# Start to Claim Registration
petri_utils.add_arc_from_to(start, t_CR, net)
petri_utils.add_arc_from_to(t_CR, p_CR, net)

# Claim Registration to Document Verification
petri_utils.add_arc_from_to(p_CR, t_DV, net)
petri_utils.add_arc_from_to(t_DV, p_DV, net)

# Document Verification to Fraud Check
petri_utils.add_arc_from_to(p_DV, t_FC, net)
petri_utils.add_arc_from_to(t_FC, p_FC, net)

# Fraud Check to Claim Assessment
petri_utils.add_arc_from_to(p_FC, t_CA, net)
petri_utils.add_arc_from_to(t_CA, p_CA, net)

# Claim Assessment to Approval
petri_utils.add_arc_from_to(p_CA, t_AP, net)
petri_utils.add_arc_from_to(t_AP, p_AP, net)

# Approval to Payment
petri_utils.add_arc_from_to(p_AP, t_P, net)
petri_utils.add_arc_from_to(t_P, p_P, net)

# Payment to Notification
petri_utils.add_arc_from_to(p_P, t_N, net)
petri_utils.add_arc_from_to(t_N, p_N, net)

# Notification to Closure
petri_utils.add_arc_from_to(p_N, t_CL, net)
petri_utils.add_arc_from_to(t_CL, closure, net)

# Loops for Re-Document Submission (RDS)
# From Document Verification to Re-Document Submission and back to Document Verification
petri_utils.add_arc_from_to(p_DV, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS, p_DV, net)

# Loops for In-depth Investigation (II)
# From Fraud Check to In-depth Investigation and back to Fraud Check
petri_utils.add_arc_from_to(p_FC, t_II, net)
petri_utils.add_arc_from_to(t_II, p_FC, net)

# Define Initial Marking
im = Marking()
im[start] = 1

# Define Final Marking
fm = Marking()
fm[closure] = 1

# (Optional) Visualize the Petri Net
# from pm4py.visualization.petrinet import factory as pn_vis_factory
# gviz = pn_vis_factory.apply(net, im, fm)
# pn_vis_factory.view(gviz)

# Display the Petri Net Components (for verification)
print("Places:")
for place in net.places:
    print(f" - {place.name}")

print("\nTransitions:")
for transition in net.transitions:
    print(f" - {transition.label}")

print("\nInitial Marking:")
for place, tokens in im.items():
    print(f" - {place.name}: {tokens} token(s)")

print("\nFinal Marking:")
for place, tokens in fm.items():
    print(f" - {place.name}: {tokens} token(s)")
```

### Explanation of the Code

1. **Imports:**
   - `PetriNet` and `Marking` classes are imported to create the Petri net and define markings.
   - `petri_utils` provides utility functions to add arcs between places and transitions.

2. **Initialization:**
   - A new Petri net named `"Insurance Claim Management Process"` is created.

3. **Defining Places:**
   - Places represent the states between activities. For example, `start` is the initial place, `after_CR` represents the state after Claim Registration, and `closure` is the final place.

4. **Defining Transitions:**
   - Transitions are labeled with activity names such as `"Claim Registration (CR)"`, `"Document Verification (DV)"`, etc.

5. **Adding Places and Transitions to the Net:**
   - All defined places and transitions are added to the Petri net.

6. **Connecting Places and Transitions with Arcs:**
   - Arcs are added to define the flow between places and transitions.
   - For example, an arc from `start` to `t_CR` (Claim Registration) and from `t_CR` to `p_CR` (after_CR).
   - **Loops:**
     - **Re-Document Submission (RDS):** Connects `p_DV` back to itself via `t_RDS` to allow re-submission of documents if incomplete.
     - **In-depth Investigation (II):** Connects `p_FC` back to itself via `t_II` to allow multiple investigations if fraud is suspected.

7. **Defining Markings:**
   - **Initial Marking (`im`):** Places a token in the `start` place to represent the arrival of a new claim.
   - **Final Marking (`fm`):** Places a token in the `closure` place to represent the closure of the claim.

8. **Visualization (Optional):**
   - The visualization part is commented out. If you wish to visualize the Petri net, you can uncomment these lines and ensure you have the necessary visualization libraries installed.

9. **Verification:**
   - The final part of the code prints out all places, transitions, and the initial and final markings to verify the correctness of the Petri net construction.

### Running the Code

To execute this code:

1. **Install `pm4py`:**
   Ensure that you have the `pm4py` library installed. You can install it using pip:

   ```bash
   pip install pm4py
   ```

2. **Execute the Script:**
   Run the Python script in your environment. It will print the places, transitions, and markings of the constructed Petri net.

3. **Visualization (Optional):**
   If you wish to visualize the Petri net, ensure you have the necessary visualization dependencies and uncomment the visualization section.

### Summary

This Petri net accurately models the insurance claim management process with all specified activities, including loops for handling incomplete documents and potential fraud investigations. The initial and final markings represent the start and successful closure of a claim, respectively. This model can be used for further analysis, simulation, or process mining tasks.