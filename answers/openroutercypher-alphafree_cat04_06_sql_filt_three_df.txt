To write a DuckDB SQL query that meets the specifications provided—identifying cases that meet the sequence criteria and the timing condition, and then excluding those cases—follow these steps:

1. **Identify cases that meet the sequence criteria:**
   - Identify cases where 'Approve Purchase Requisition', followed by 'Create Order', and then 'Confirm Order' occur in quick succession.

2. **Check the time difference between 'Create Order' and 'Confirm Order':**
   - Identify cases where the time difference between 'Create Order' and 'Confirm Order' is more than 5 days.

3. **Exclude those cases from the final result:**
   - Only return events from cases that do not meet both criteria.

Here is a detailed query that implements the above logic:

```sql
WITH sequence_check AS (
    SELECT
        a.case_id
    FROM
        event_log a
    JOIN event_log b ON a.case_id = b.case_id AND a.timestamp < b.timestamp AND b.activity = 'Create Order'
    JOIN event_log c ON b.case_id = c.case_id AND b.timestamp < c.timestamp AND c.activity = 'Confirm Order'
    WHERE
        a.activity = 'Approve Purchase Requisition'
        AND NOT EXISTS (
            SELECT 1 
            FROM event_log e 
            WHERE e.case_id = a.case_id 
                AND e.timestamp > a.timestamp AND e.timestamp < b.timestamp
        )
        AND NOT EXISTS (
            SELECT 1 
            FROM event_log e 
            WHERE e.case_id = b.case_id 
                AND e.timestamp > b.timestamp AND e.timestamp < c.timestamp
        )
),
timing_check AS (
    SELECT DISTINCT
        a.case_id
    FROM
        event_log a
    JOIN event_log b ON a.case_id = b.case_id 
        AND b.activity = 'Confirm Order' 
        AND a.activity = 'Create Order'
        AND b.timestamp > a.timestamp + INTERVAL '5 days'
    WHERE
        a.activity = 'Create Order'
)
SELECT * 
FROM event_log
WHERE case_id NOT IN (
      SELECT case_id
      FROM sequence_check
      INTERSECT
      SELECT case_id 
      FROM timing_check
);
```

### Explanation:

1. **sequence_check:**
    - Joins the `event_log` table three times to find cases where the specific sequence is followed.
    - Ensures there are no other events between the activities in the sequence using `NOT EXISTS`.

2. **timing_check:**
    - Finds cases where 'Create Order' is followed by 'Confirm Order' more than 5 days later.

3. **Final selection:**
    - Retrieves all events except those from cases that appear both in `sequence_check` and `timing_check`.

This approach ensures that only the required cases are excluded from the final result, meeting all the given constraints and requirements.