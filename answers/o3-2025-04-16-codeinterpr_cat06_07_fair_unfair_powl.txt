Below are two self-contained POWL specifications that you can paste directly into a Python session in which pm4py is installed.  
Both workflows share the same steps until the cultural-fit stage; they differ only in how that stage is modeled.

--------------------------------------------------------------------
1. POWL model WITH a potential source of unfairness
--------------------------------------------------------------------
Here an XOR branch lets an applicant either take the regular “CulturalFitCheck” or, if the system notices a favourable community affiliation, the shorter “CommunityAffiliationCheck” that grants a hidden advantage.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# atomic activities ------------------------------------------------
ReceiveApplication          = Transition(label="ReceiveApplication")
DataCompletenessCheck       = Transition(label="DataCompletenessCheck")
RequestMoreInfo             = Transition(label="RequestMoreInfo")         # loop body
SkillAssessment             = Transition(label="SkillAssessment")
CulturalFitCheck            = Transition(label="CulturalFitCheck")        # unbiased path
CommunityAffiliationCheck   = Transition(label="CommunityAffiliationCheck")  # biased path
ManagerialReview            = Transition(label="ManagerialReview")
FinalDecision               = Transition(label="FinalDecision")

# loop for data completeness --------------------------------------
loop = OperatorPOWL(
        operator=Operator.LOOP,
        children=[DataCompletenessCheck, RequestMoreInfo])

# XOR for cultural-fit / affiliation check ------------------------
xor_affiliation = OperatorPOWL(
        operator=Operator.XOR,
        children=[CulturalFitCheck, CommunityAffiliationCheck])

# put everything in partial order ---------------------------------
model_with_bias = StrictPartialOrder(
        nodes=[ReceiveApplication, loop, SkillAssessment,
               xor_affiliation, ManagerialReview, FinalDecision])

model_with_bias.order.add_edge(ReceiveApplication, loop)
model_with_bias.order.add_edge(loop,               SkillAssessment)
model_with_bias.order.add_edge(SkillAssessment,    xor_affiliation)
model_with_bias.order.add_edge(xor_affiliation,    ManagerialReview)
model_with_bias.order.add_edge(ManagerialReview,   FinalDecision)
```

--------------------------------------------------------------------
2. POWL model WITHOUT the unfair branch
--------------------------------------------------------------------
Every applicant now follows the exact same cultural-fit assessment; the XOR that privileged certain candidates has been removed.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition
from pm4py.objects.process_tree.obj import Operator

# atomic activities ----------------------------------------------
ReceiveApplication        = Transition(label="ReceiveApplication")
DataCompletenessCheck     = Transition(label="DataCompletenessCheck")
RequestMoreInfo           = Transition(label="RequestMoreInfo")
SkillAssessment           = Transition(label="SkillAssessment")
CulturalFitCheck          = Transition(label="CulturalFitCheck")   # single, universal path
ManagerialReview          = Transition(label="ManagerialReview")
FinalDecision             = Transition(label="FinalDecision")

# identical data-completeness loop -------------------------------
loop = OperatorPOWL(
        operator=Operator.LOOP,
        children=[DataCompletenessCheck, RequestMoreInfo])

# build the straight-line flow -----------------------------------
model_without_bias = StrictPartialOrder(
        nodes=[ReceiveApplication, loop, SkillAssessment,
               CulturalFitCheck, ManagerialReview, FinalDecision])

model_without_bias.order.add_edge(ReceiveApplication, loop)
model_without_bias.order.add_edge(loop,               SkillAssessment)
model_without_bias.order.add_edge(SkillAssessment,    CulturalFitCheck)
model_without_bias.order.add_edge(CulturalFitCheck,   ManagerialReview)
model_without_bias.order.add_edge(ManagerialReview,   FinalDecision)
```

Key difference  
• `model_with_bias` contains `xor_affiliation = XOR(CulturalFitCheck, CommunityAffiliationCheck)` – the precise spot where preferential treatment can occur.  
• `model_without_bias` replaces that structure with a single `CulturalFitCheck`, guaranteeing identical treatment for all candidates while keeping every other control-flow aspect (loop, sequencing) intact.