Here's the DuckDB SQL query that achieves the desired result:

```sql
WITH case_variants AS (
  SELECT
    case_id,
    STRING_AGG(activity, ',' ORDER BY timestamp) AS variant
  FROM event_log
  GROUP BY case_id
),
variant_counts AS (
  SELECT
    variant,
    COUNT(*) AS variant_count
  FROM case_variants
  GROUP BY variant
),
top_k_variants AS (
  SELECT variant
  FROM variant_counts
  ORDER BY variant_count DESC
  LIMIT {K}
)
SELECT
  e.case_id,
  e.activity,
  e.timestamp
FROM event_log e
JOIN case_variants cv ON e.case_id = cv.case_id
WHERE cv.variant IN (SELECT variant FROM top_k_variants)
ORDER BY e.case_id, e.timestamp;
```

Breaking down the query:

1. The `case_variants` CTE (Common Table Expression) extracts the ordered sequence of activities for each `case_id`. It uses `STRING_AGG` to concatenate the activities in the order of their `timestamp`, resulting in a comma-separated string representing the variant.

2. The `variant_counts` CTE groups the cases by their complete activity sequence (variant) and counts the number of cases for each variant using `COUNT(*)`.

3. The `top_k_variants` CTE selects the top K variants based on their frequency. It orders the variants by their `variant_count` in descending order and limits the result to K rows.

4. The main query joins the `event_log` table with the `case_variants` CTE to retrieve all events that belong to the cases matching the top K variants. It filters the cases using the `IN` operator to check if the variant is present in the `top_k_variants` CTE.

5. Finally, the result is ordered by `case_id` and `timestamp` to maintain the order of events within each case.

Note: Replace `{K}` with the desired value for K in the `LIMIT` clause of the `top_k_variants` CTE.

This query correctly extracts the ordered sequence of activities per case, aggregates and counts cases per variant, filters down to the cases belonging to the top K variants, and returns the corresponding events from those filtered cases.