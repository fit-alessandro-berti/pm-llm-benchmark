```python
log_skeleton = {
    'equivalence': set(),
    'always_before': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    },
    'always_after': set(),
    'never_together': set(),
    'activ_freq': {
        'RO': {1},
        'CA': {1},
        'RI': {1},
        'PI': {1},
        'QC': {1},
        'PO': {1},
        'GSL': {1},
        'D': {1},
        'IC': {1},
        'RP': {1}
    },
    'directly_follows': {
        ('RO', 'CA'),
        ('CA', 'RI'),
        ('RI', 'PI'),
        ('PI', 'QC'),
        ('QC', 'PO'),
        ('PO', 'GSL'),
        ('GSL', 'D'),
        ('D', 'IC'),
        ('IC', 'RP')
    }
}

print(log_skeleton)
```

**Explanation:**

*   **Equivalence:**  There are no activities that must have the same number of occurrences as another activity in this process.
*   **Always Before:** The `always_before` set defines the strict order of activities.  For example, `('RO', 'CA')` means "Check Availability (CA)" *must* happen after "Receive Order (RO)".
*   **Always After:**  There are no activities that must always occur after another activity in this process.
*   **Never Together:** There are no activities that cannot occur in the same case.
*   **Activity Occurrences:** The `activ_freq` dictionary specifies that each activity occurs exactly once per case. This is a common assumption for a linear process like order fulfillment.
*   **Directly-Follows Constraints:** The `directly_follows` set enforces the immediate sequence of activities.  It's essentially the same as `always_before` in this scenario, indicating a direct and mandatory transition from one activity to the next.

This Log Skeleton captures the essential constraints of the order fulfillment process, ensuring that activities occur in the correct order and with the expected frequency.