Below is a self-contained Python snippet that builds an accepting Petri net for the insurance-claim scenario, including

• one start place that receives the initial token  
• one end (sink) place that contains the final token  
• all required activities as labelled transitions  
• two loops  
  – DV  RDS (re-submission of documents)  
  – FC  II  (in-depth investigation)  

Feel free to adapt the place/transition names, but the structure already fulfils the behavioural requirements described.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# ------------------------------------------------------------------
# 1. Net skeleton
# ------------------------------------------------------------------
net = PetriNet("Insurance-Claim-Process")

# ------------------------------------------------------------------
# 2. Places
# ------------------------------------------------------------------
p_start          = PetriNet.Place("p_start")           # token of a newly filed claim
p_after_C        = PetriNet.Place("p_after_C")
p_dv_pending     = PetriNet.Place("p_dv_pending")      # waiting for Document Verification
p_ready_for_FC   = PetriNet.Place("p_ready_for_FC")    # DV succeeded, ready for Fraud Check
p_after_FC       = PetriNet.Place("p_after_FC")        # FC passed, ready for Assessment
p_after_CA       = PetriNet.Place("p_after_CA")        # after Claim Assessment
p_after_AP       = PetriNet.Place("p_after_AP")        # after Approval
p_after_P        = PetriNet.Place("p_after_P")         # after Payment
p_after_N        = PetriNet.Place("p_after_N")         # after Notification
p_end            = PetriNet.Place("p_end")             # closed claim  (final marking)

net.places.update(
    {p_start, p_after_C, p_dv_pending, p_ready_for_FC,
     p_after_FC, p_after_CA, p_after_AP, p_after_P, p_after_N, p_end}
)

# ------------------------------------------------------------------
# 3. Transitions (label = activity name)
# ------------------------------------------------------------------
t_C   = PetriNet.Transition("C",  "Insurance Claim")
t_CR  = PetriNet.Transition("CR", "Claim Registration")
t_DV  = PetriNet.Transition("DV", "Document Verification")
t_RDS = PetriNet.Transition("RDS","Re-Document Submission")
t_FC  = PetriNet.Transition("FC", "Fraud Check")
t_II  = PetriNet.Transition("II", "In-depth Investigation")
t_CA  = PetriNet.Transition("CA", "Claim Assessment")
t_AP  = PetriNet.Transition("AP", "Approval")
t_P   = PetriNet.Transition("P",  "Payment")
t_N   = PetriNet.Transition("N",  "Notification")
t_CL  = PetriNet.Transition("CL", "Closure")

net.transitions.update(
    {t_C, t_CR, t_DV, t_RDS, t_FC, t_II, t_CA, t_AP, t_P, t_N, t_CL}
)

# ------------------------------------------------------------------
# 4. Arcs – sequential flow + loops
# ------------------------------------------------------------------
# Start and filing of claim
petri_utils.add_arc_from_to(p_start,  t_C,  net)
petri_utils.add_arc_from_to(t_C,      p_after_C, net)

# Claim registration
petri_utils.add_arc_from_to(p_after_C, t_CR, net)
petri_utils.add_arc_from_to(t_CR,      p_dv_pending, net)

# Document verification + possible re-submission loop
petri_utils.add_arc_from_to(p_dv_pending, t_DV,  net)
petri_utils.add_arc_from_to(t_DV,         p_ready_for_FC, net)

# If documents are incomplete  RDS  back to DV
petri_utils.add_arc_from_to(p_ready_for_FC, t_RDS, net)
petri_utils.add_arc_from_to(t_RDS,          p_dv_pending, net)

# Fraud check + possible investigation loop
petri_utils.add_arc_from_to(p_ready_for_FC, t_FC,  net)
petri_utils.add_arc_from_to(t_FC,           p_after_FC, net)

# If FC raises doubts  II  back to FC
petri_utils.add_arc_from_to(p_after_FC, t_II, net)
petri_utils.add_arc_from_to(t_II,       p_ready_for_FC, net)

# Normal forward path after FC
petri_utils.add_arc_from_to(p_after_FC, t_CA, net)
petri_utils.add_arc_from_to(t_CA,       p_after_CA, net)

# Approval, payment, notification, closure
petri_utils.add_arc_from_to(p_after_CA, t_AP, net)
petri_utils.add_arc_from_to(t_AP,       p_after_AP, net)

petri_utils.add_arc_from_to(p_after_AP, t_P,  net)
petri_utils.add_arc_from_to(t_P,        p_after_P, net)

petri_utils.add_arc_from_to(p_after_P,  t_N,  net)
petri_utils.add_arc_from_to(t_N,        p_after_N, net)

petri_utils.add_arc_from_to(p_after_N,  t_CL, net)
petri_utils.add_arc_from_to(t_CL,       p_end, net)

# ------------------------------------------------------------------
# 5. Initial and final markings
# ------------------------------------------------------------------
im = Marking()
im[p_start] = 1            # one token at the very beginning

fm = Marking()
fm[p_end] = 1              # one token when the claim is closed

# ------------------------------------------------------------------
# Done.  ‘net’, ‘im’ and ‘fm’ together form the required
#         accepting Petri net for the insurance-claim process.
# ------------------------------------------------------------------
```

Running this script yields a Petri net that

• starts with “Insurance Claim (C)”,  
• moves sequentially through CR  DV,  
• allows an arbitrary number of DV  RDS loops,  
• allows an arbitrary number of FC  II loops,  
• continues through CA, AP, P and N, and  
• reaches the final marking after “Closure (CL)”.