Below is a compact “mathematical” description of the entire patient-journey as ONE process-tree, followed by complete Python code that constructs exactly the same tree with pm4py.


Process-tree expression

->(                                                          		 global sequence  
    'A',                                                    		# Arrival  
    'RG',                                                   		# Registration  
    'IA',                                                   		# Intake assessment  
    ->( 'TI', 'TC' ),                                        		# Triage interview  classification  
    X( 'CE', 'FBP' ),                                        		# initial ECG xor Blood Panel  
                                                              		# «normal» vs «abnormal  repeat» decision  
    X(                                                       		# either stop () or enter the loop  
        ,                                                   		# results already normalskip the loop  
        *(                                                   		# loop: repeat 1…n times until results normal  
            ->(                                              		# loop body  
                'SC',                                        	# Specialist consultation  
                X( 'TM', 'SPT' ),                            	# Targeted-med xor Physical-therapy  
                X( 'FCE', 'FBA' )                            	# follow-up ECG xor Blood Analysis  
            ),  
                                                            		# “redo/exit”  (step that separates iterations)  
        )  
    ),  
    +( 'AI', 'NC' ),                                         		# Advanced-Imaging  Nutritional-Counselling  
    ->( 'FAS', 'DDI' ),                                      		# follow-up scheduling  discharge instructions  
    +( 'BL', 'ICP', 'MRF' )                                  		# Billing  Insurance  Records finalisation  
)                                                            		# end of global sequence  

•   (tau) is a silent step (leaf with label =None).  
•  The loop executes “SC  (Treatment)  (Re-diagnosis)” at least once when chosen, and may repeat
   any number of times; choosing  in the XOR just before it skips the loop entirely.


Executable pm4py construction

```python
from pm4py.objects.process_tree.obj import ProcessTree, Operator

# --------------- root (global SEQUENCE) ---------------
root = ProcessTree(operator=Operator.SEQUENCE)

# 1) Arrival – Registration – Intake assessment
A   = ProcessTree(label="A",  parent=root)
RG  = ProcessTree(label="RG", parent=root)
IA  = ProcessTree(label="IA", parent=root)

# 2) Triage sequence (TI  TC)
seq_triage = ProcessTree(operator=Operator.SEQUENCE, parent=root)
TI = ProcessTree(label="TI", parent=seq_triage)
TC = ProcessTree(label="TC", parent=seq_triage)
seq_triage.children.extend([TI, TC])

# 3) Initial diagnostic XOR (CE xor FBP)
xor_initial = ProcessTree(operator=Operator.XOR, parent=root)
CE  = ProcessTree(label="CE",  parent=xor_initial)
FBP = ProcessTree(label="FBP", parent=xor_initial)
xor_initial.children.extend([CE, FBP])

# 4) “Normal vs Loop” XOR
xor_norm_loop = ProcessTree(operator=Operator.XOR, parent=root)
tau_normal = ProcessTree(label=None, parent=xor_norm_loop)        #  branch (normal results)

# ---- Loop subtree ----
loop = ProcessTree(operator=Operator.LOOP, parent=xor_norm_loop)

# 4A) Loop body  (SC  (TM xor SPT)  (FCE xor FBA))
body = ProcessTree(operator=Operator.SEQUENCE, parent=loop)
SC = ProcessTree(label="SC", parent=body)

xor_treat = ProcessTree(operator=Operator.XOR, parent=body)
TM  = ProcessTree(label="TM",  parent=xor_treat)
SPT = ProcessTree(label="SPT", parent=xor_treat)
xor_treat.children.extend([TM, SPT])

xor_rediag = ProcessTree(operator=Operator.XOR, parent=body)
FCE = ProcessTree(label="FCE", parent=xor_rediag)
FBA = ProcessTree(label="FBA", parent=xor_rediag)
xor_rediag.children.extend([FCE, FBA])

body.children.extend([SC, xor_treat, xor_rediag])

redo_tau = ProcessTree(label=None, parent=loop)                   #  = redo / “do we loop again?”

loop.children.extend([body, redo_tau])
# ------------------------

xor_norm_loop.children.extend([tau_normal, loop])

# 5) Parallel: Advanced Imaging  Nutritional Counselling
para_post = ProcessTree(operator=Operator.PARALLEL, parent=root)
AI = ProcessTree(label="AI", parent=para_post)
NC = ProcessTree(label="NC", parent=para_post)
para_post.children.extend([AI, NC])

# 6) Final admin sequence  (FAS  DDI)
seq_admin = ProcessTree(operator=Operator.SEQUENCE, parent=root)
FAS = ProcessTree(label="FAS", parent=seq_admin)
DDI = ProcessTree(label="DDI", parent=seq_admin)
seq_admin.children.extend([FAS, DDI])

# 7) Parallel billing / insurance / records
para_fin = ProcessTree(operator=Operator.PARALLEL, parent=root)
BL  = ProcessTree(label="BL",  parent=para_fin)
ICP = ProcessTree(label="ICP", parent=para_fin)
MRF = ProcessTree(label="MRF", parent=para_fin)
para_fin.children.extend([BL, ICP, MRF])

# ----- add all top-level branches to the root sequence -----
root.children.extend([
    A, RG, IA,                 # 1
    seq_triage,                # 2
    xor_initial,               # 3
    xor_norm_loop,             # 4
    para_post,                 # 5
    seq_admin,                 # 6
    para_fin                   # 7
])

# `root` now holds the complete process tree for the complex hospital scenario
```

This tree exactly mirrors the narrative:

1. A  RG  IA  
2. TI  TC  
3. CE xor FBP  
4. (normal ) xor (repeatable loop of “SC  treatment  re-diagnosis”)  
5. AI  NC  
6. FAS  DDI  
7. BL  ICP  MRF  

All parent/child links are explicitly set, so the tree can immediately be used for mining, simulation, or conformance checking in pm4py.