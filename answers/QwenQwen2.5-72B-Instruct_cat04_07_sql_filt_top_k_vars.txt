To solve this task, we can break it down into several steps and use common table expressions (CTEs) to make the query more readable and maintainable. Here’s a step-by-step SQL query to achieve the desired result:

1. **Extract the ordered sequence of activities per case.**
2. **Group cases by their complete activity sequence to identify unique process variants.**
3. **Count how many cases correspond to each variant and determine the top K variants by their frequency.**
4. **Return all events from the original event log that belong only to cases which are part of these top K variants.**

Here is the SQL query:

```sql
WITH ordered_events AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_order
    FROM
        event_log
),
activity_sequences AS (
    SELECT
        case_id,
        STRING_AGG(activity, ' -> ' ORDER BY event_order) AS activity_sequence
    FROM
        ordered_events
    GROUP BY
        case_id
),
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS variant_count
    FROM
        activity_sequences
    GROUP BY
        activity_sequence
    ORDER BY
        variant_count DESC
    LIMIT :K
),
top_cases AS (
    SELECT
        DISTINCT case_id
    FROM
        activity_sequences
    WHERE
        activity_sequence IN (SELECT activity_sequence FROM variant_counts)
)
SELECT
    e.case_id,
    e.activity,
    e.timestamp
FROM
    event_log e
JOIN
    top_cases tc
ON
    e.case_id = tc.case_id
ORDER BY
    e.case_id,
    e.timestamp;
```

### Explanation:

1. **ordered_events CTE:**
   - This CTE adds a row number to each event within a case, ordered by the timestamp.
   - This ensures that the activities are in the correct order for each case.

2. **activity_sequences CTE:**
   - This CTE groups events by `case_id` and concatenates the activities in the order determined by the row number.
   - The `STRING_AGG` function is used to concatenate the activities with a delimiter `->`.

3. **variant_counts CTE:**
   - This CTE counts the number of cases for each unique activity sequence.
   - It orders the variants by their frequency in descending order and limits the result to the top K variants.

4. **top_cases CTE:**
   - This CTE selects the distinct `case_id` values that belong to the top K variants.

5. **Final SELECT:**
   - This part of the query joins the original `event_log` table with the `top_cases` CTE to filter out events that do not belong to the top K variants.
   - The result is ordered by `case_id` and `timestamp` to maintain the original order of events.

### Parameters:
- `:K` is a placeholder for the top K variants. You can replace it with a specific number or use a parameterized query to pass the value dynamically.

This query ensures that the process variants are correctly identified, counted, and the top K variants are used to filter the events from the original log.