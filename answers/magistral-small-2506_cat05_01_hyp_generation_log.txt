# Analysis of Order Process Event Logs

## Identified Anomalies and Undesirable Behaviors

### 1. Credit Check Timing Issue (Case 1002)
- **Observation**: In case 1002, the credit check (event 11) occurred after shipment confirmation (event 9) and even after shipping goods (event 10)
- **Severity**: High - This violates the assumed normal process flow where credit checks should happen before shipping

### 2. Late Shipment Confirmation (Case 1003)
- **Observation**: In case 1003, shipment confirmation (event 19) happened after goods were shipped (event 17)
- **Severity**: Medium - This is a documentation issue where confirmation happened post-facto

### 3. Payment Before Invoice (Case 1004)
- **Observation**: In case 1004, payment was received (event 22) before invoice was issued (event 23)
- **Severity**: Medium - This may indicate either:
  - Pre-payment process for trusted customers
  - Invoice generation delay
  - Data entry error

### 4. Inconsistent Shipment Status (Case 1004)
- **Observation**: In case 1004, shipment was scheduled as "N" (Not scheduled) in confirmation (event 24) but then shipped (event 25)
- **Severity**: Low - Likely documentation error

## Hypotheses for Anomalies

### Credit Check Timing (Case 1002):
1. **System Error**: Automatic credit check failed and was manually processed later
2. **Policy Violation**: Credit officer was overloaded and missed initial processing
3. **Process Shortcut**: Sales team may have expedited order to please customer

### Late Shipment Confirmation (Case 1003):
1. **Communication Delay**: Logistics team didn't immediately update system after shipment
2. **Manual Process**: Confirmation was done after verification of shipping documents

### Payment Before Invoice (Case 1004):
1. **Preferred Customer**: Long-standing customer with pre-approved credit
2. **System Integration Issue**: Finance system may have auto-generated invoice after payment
3. **Data Entry Error**: Events may have been recorded out of order

## Proposed SQL Queries for Further Investigation

```sql
-- Hypothesis 1: Check if credit checks are consistently happening after shipments
SELECT
    o.case_id,
    o.customer_id,
    o.order_value,
    oe1.timestamp AS credit_check_time,
    oe2.timestamp AS shipment_time,
    (oe1.timestamp - oe2.timestamp) AS time_diff_minutes
FROM
    order_event_log oe1
JOIN
    order_event_log oe2 ON oe1.case_id = oe2.case_id
JOIN
    orders o ON oe1.case_id = o.case_id
WHERE
    oe1.activity = 'Perform Credit Check'
    AND oe2.activity = 'Ship Goods'
    AND oe2.timestamp < oe1.timestamp
ORDER BY
    time_diff_minutes DESC;
```

```sql
-- Hypothesis 2: Check if late confirmation is a pattern for specific logistics managers
SELECT
    resource,
    COUNT(*) AS total_confirmations,
    SUM(CASE WHEN (SELECT timestamp FROM order_event_log oe2
                   WHERE oe2.case_id = oe1.case_id
                   AND oe2.activity = 'Ship Goods'
                   AND oe2.resource_id = oe1.resource_id
                   AND oe2.timestamp < oe1.timestamp) > 0 THEN 1 ELSE 0 END) AS late_confirmations
FROM
    order_event_log oe1
WHERE
    activity = 'Confirm Shipment'
GROUP BY
    resource
ORDER BY
    late_confirmations DESC;
```

```sql
-- Hypothesis 3: Check if payment before invoice is only happening for specific customers
SELECT
    o.customer_id,
    COUNT(DISTINCT o.case_id) AS order_count,
    SUM(CASE WHEN (SELECT timestamp FROM order_event_log oe2
                   WHERE oe2.case_id = oe1.case_id
                   AND oe2.activity = 'Receive Payment'
                   AND oe2.resource_id = oe1.resource_id
                   AND oe2.timestamp < (SELECT timestamp FROM order_event_log oe3
                                       WHERE oe3.case_id = oe1.case_id
                                       AND oe3.activity = 'Issue Invoice')) > 0 THEN 1 ELSE 0 END) AS early_payment_count
FROM
    order_event_log oe1
JOIN
    orders o ON oe1.case_id = o.case_id
GROUP BY
    o.customer_id
ORDER BY
    early_payment_count DESC;
```

```sql
-- Hypothesis 4: Check if specific resources are involved in multiple anomalies
WITH anomaly_resources AS (
    SELECT DISTINCT resource FROM order_event_log
    WHERE (resource, case_id) IN (
        -- Credit check after shipment
        SELECT resource, case_id FROM order_event_log oe1
        JOIN order_event_log oe2 ON oe1.case_id = oe2.case_id
        WHERE oe1.activity = 'Perform Credit Check'
        AND oe2.activity = 'Ship Goods'
        AND oe2.timestamp < oe1.timestamp

        UNION

        -- Confirmation after shipment
        SELECT resource, case_id FROM order_event_log oe1
        JOIN order_event_log oe2 ON oe1.case_id = oe2.case_id
        WHERE oe1.activity = 'Confirm Shipment'
        AND oe2.activity = 'Ship Goods'
        AND oe2.timestamp < oe1.timestamp

        UNION

        -- Payment before invoice
        SELECT resource, case_id FROM order_event_log oe1
        JOIN order_event_log oe2 ON oe1.case_id = oe2.case_id
        WHERE oe1.activity = 'Receive Payment'
        AND oe2.activity = 'Issue Invoice'
        AND oe1.timestamp < oe2.timestamp
    )
)
SELECT
    ar.resource,
    COUNT(DISTINCT ar.case_id) AS total_orders,
    COUNT(DISTINCT oe1.case_id) AS anomaly_orders,
    r.role,
    r.department
FROM
    anomaly_resources ar
JOIN
    order_event_log oe1 ON ar.resource = oe1.resource
JOIN
    resources r ON ar.resource = r.resource_id
GROUP BY
    ar.resource, r.role, r.department
ORDER BY
    anomaly_orders DESC;
```