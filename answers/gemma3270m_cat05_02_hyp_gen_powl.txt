```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define atomic activities
R = Transition(label="R") # Receive Claim
A = Transition(label="A") 
E = Transition(label="E")
P = Transition(label="P")
N = Transition(label="N")
C = Transition(label="C")
skip = SilentTransition()

# Create a loop structure that includes Evaluate and Approve.
# * (E, P) means: execute E (evaluate), then either exit the loop or execute P (approve) and then E again, repeatedly.
loop = OperatorPOWL(operator=Operator.LOOP, children=[E, P])

# Create an XOR that may omit customer notification.
xor = OperatorPOWL(operator=Operator.XOR, children=[N, skip])

# Create a partial order structure including the main phases:
# We have: R -> A -> loop -> xor -> C
# However, we will also introduce partial ordering anomalies:
# For example, we do not strictly enforce that A completes before loop.  Execution loop for the claim the Claim
#  The claim
Claim Claim Claim: The Claim Claim Claims Claim
ClaimClaim Claim Claim Claim
Claim Claim Claim Claim
ClaimClaimClaimClaimClaimClaim Claim ClaimClaimClaimClaim ClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaimClaim