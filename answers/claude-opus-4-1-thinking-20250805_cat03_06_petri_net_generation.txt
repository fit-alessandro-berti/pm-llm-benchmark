Looking at this insurance claim management process, I'll create a Petri net that captures the main flow with the two possible loops (document re-submission and in-depth investigation). Here's the Python code:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="insurance_claim_process")

# Create places (states between activities)
p_start = PetriNet.Place(name="p_start")  # Initial state
p1 = PetriNet.Place(name="p1")  # After claim filed, before registration
p2 = PetriNet.Place(name="p2")  # After registration, before document verification
p3 = PetriNet.Place(name="p3")  # After document verification, before fraud check
p4 = PetriNet.Place(name="p4")  # After fraud check, before claim assessment
p5 = PetriNet.Place(name="p5")  # After claim assessment, before approval
p6 = PetriNet.Place(name="p6")  # After approval, before payment
p7 = PetriNet.Place(name="p7")  # After payment, before notification
p8 = PetriNet.Place(name="p8")  # After notification, before closure
p_end = PetriNet.Place(name="p_end")  # Final state after closure

# Places for loops
p_rds = PetriNet.Place(name="p_rds")  # State for re-document submission loop
p_ii = PetriNet.Place(name="p_ii")  # State for in-depth investigation loop

# Add all places to the net
net.places.add(p_start)
net.places.add(p1)
net.places.add(p2)
net.places.add(p3)
net.places.add(p4)
net.places.add(p5)
net.places.add(p6)
net.places.add(p7)
net.places.add(p8)
net.places.add(p_end)
net.places.add(p_rds)
net.places.add(p_ii)

# Create transitions (activities)
t_c = PetriNet.Transition(name="t_c", label="Insurance Claim (C)")
t_cr = PetriNet.Transition(name="t_cr", label="Claim Registration (CR)")
t_dv = PetriNet.Transition(name="t_dv", label="Document Verification (DV)")
t_dv_incomplete = PetriNet.Transition(name="t_dv_incomplete", label="DV - Incomplete")
t_rds = PetriNet.Transition(name="t_rds", label="Re-Document Submission (RDS)")
t_fc = PetriNet.Transition(name="t_fc", label="Fraud Check (FC)")
t_fc_investigate = PetriNet.Transition(name="t_fc_investigate", label="FC - Needs Investigation")
t_ii = PetriNet.Transition(name="t_ii", label="In-depth Investigation (II)")
t_ca = PetriNet.Transition(name="t_ca", label="Claim Assessment (CA)")
t_ap = PetriNet.Transition(name="t_ap", label="Approval (AP)")
t_p = PetriNet.Transition(name="t_p", label="Payment (P)")
t_n = PetriNet.Transition(name="t_n", label="Notification (N)")
t_cl = PetriNet.Transition(name="t_cl", label="Closure (CL)")

# Add all transitions to the net
net.transitions.add(t_c)
net.transitions.add(t_cr)
net.transitions.add(t_dv)
net.transitions.add(t_dv_incomplete)
net.transitions.add(t_rds)
net.transitions.add(t_fc)
net.transitions.add(t_fc_investigate)
net.transitions.add(t_ii)
net.transitions.add(t_ca)
net.transitions.add(t_ap)
net.transitions.add(t_p)
net.transitions.add(t_n)
net.transitions.add(t_cl)

# Add arcs for the main flow
petri_utils.add_arc_from_to(p_start, t_c, net)
petri_utils.add_arc_from_to(t_c, p1, net)
petri_utils.add_arc_from_to(p1, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p2, net)
petri_utils.add_arc_from_to(p2, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p3, net)  # Normal flow after document verification
petri_utils.add_arc_from_to(p3, t_fc, net)
petri_utils.add_arc_from_to(t_fc, p4, net)  # Normal flow after fraud check
petri_utils.add_arc_from_to(p4, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p5, net)
petri_utils.add_arc_from_to(p5, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p6, net)
petri_utils.add_arc_from_to(p6, t_p, net)
petri_utils.add_arc_from_to(t_p, p7, net)
petri_utils.add_arc_from_to(p7, t_n, net)
petri_utils.add_arc_from_to(t_n, p8, net)
petri_utils.add_arc_from_to(p8, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_end, net)

# Add arcs for document re-submission loop
petri_utils.add_arc_from_to(p2, t_dv_incomplete, net)  # Alternative path from p2
petri_utils.add_arc_from_to(t_dv_incomplete, p_rds, net)
petri_utils.add_arc_from_to(p_rds, t_rds, net)
petri_utils.add_arc_from_to(t_rds, p2, net)  # Loop back to before document verification

# Add arcs for in-depth investigation loop
petri_utils.add_arc_from_to(p3, t_fc_investigate, net)  # Alternative path from p3
petri_utils.add_arc_from_to(t_fc_investigate, p_ii, net)
petri_utils.add_arc_from_to(p_ii, t_ii, net)
petri_utils.add_arc_from_to(t_ii, p3, net)  # Loop back to before fraud check

# Define initial marking (token in start place)
im = Marking()
im[p_start] = 1

# Define final marking (token in end place)
fm = Marking()
fm[p_end] = 1

# Print summary
print(f"Petri net created: {net.name}")
print(f"Number of places: {len(net.places)}")
print(f"Number of transitions: {len(net.transitions)}")
print(f"Initial marking: {im}")
print(f"Final marking: {fm}")
```

This Petri net models the insurance claim process with:

1. **Main Flow**: The standard path from claim filing through registration, verification, fraud check, assessment, approval, payment, notification, and closure.

2. **Document Re-submission Loop**: When documents are incomplete after verification (transition `t_dv_incomplete`), the process moves to a re-submission state (`p_rds`) and then back to before document verification (`p2`).

3. **In-depth Investigation Loop**: When the fraud check raises doubts (transition `t_fc_investigate`), the process moves to an investigation state (`p_ii`) and then back to before the fraud check (`p3`).

4. **Initial Marking**: Places one token in `p_start`, representing a new claim entering the system.

5. **Final Marking**: Expects one token in `p_end`, representing a successfully closed claim.

The net uses silent transitions (`t_dv_incomplete` and `t_fc_investigate`) to model the decision points where the process can either continue normally or enter a loop, making the model more realistic for complex business processes.