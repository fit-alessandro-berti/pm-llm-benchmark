```sql
SELECT
  e.*
FROM
  event_log e
WHERE
  e.case_id IN (
    SELECT
      case_id
    FROM (
      SELECT
        case_id,
        COUNT(*) AS event_count
      FROM
        event_log
      GROUP BY
        case_id
    ) AS case_counts
    WHERE
      event_count <= 6
  );
```

**Explanation:**

1. **Inner Subquery ( `SELECT case_id, COUNT(*) AS event_count FROM event_log GROUP BY case_id` ):**
   - This subquery calculates the number of events (`event_count`) for each `case_id` in the `event_log` table.
   - `GROUP BY case_id` groups the rows by `case_id`, so `COUNT(*)` counts the events within each group.
   - The result is a temporary table (aliased as `case_counts`) containing `case_id` and its corresponding event count.

2. **Outer Query ( `SELECT e.* FROM event_log e WHERE e.case_id IN (...)` ):**
   - This query selects all columns (`e.*`) from the `event_log` table (aliased as `e`).
   - `WHERE e.case_id IN (...)` filters the rows. It only includes rows where the `case_id` is present in the result set of the subquery.  This means only cases with an event count of 6 or fewer are included.

**How it works to achieve the desired result:**

The query first determines the number of events for each case. Then, it filters the entire `event_log` table to include only those rows belonging to cases where the event count is less than or equal to 6. This directly addresses the prompt's requirement to filter cases with more than six events and only return events from those with six or fewer.  The use of `IN` allows efficient filtering based on the results of the subquery.
