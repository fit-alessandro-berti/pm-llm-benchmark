The picture is really two things in one:

  1. On the left you have a little “toy” processflow (or workflow) laid out as a network of 9 activityboxes (a through z) and a handful of routing points (the little black dots on the lines).  Each box is a discrete task or step and each black dot is either a split (where one thread of control fans out into two or more) or a join (where two or more threads of control reconverge).

  2. On the right is the legend for those black dots.  It shows exactly how to interpret them as the six classical routing patterns:

     – XORsplit (exclusive choice)  
     – ANDsplit (parallel fork)  
     – ORsplit (generalized choice/fork)  
     – XORjoin (exclusive merge)  
     – ANDjoin (parallel join)  
     – ORjoin (generalized merge)  

If you follow the flow on the left you get something like this:

  • You start at “a – register request.”  
  • From there you split off into one or more of three examination tasks:  
     • b – examine thoroughly  
     • c – examine casually  
     • d – check ticket  

  (Those three arrows actually use an ORsplit, so you can do any nonempty combination of them.)

  • When you’ve finished all the exam tasks you did choose, their threads merge back into e – decide (this is an ORjoin, which waits for exactly those branches you actually took.)

  • Once “decide” is done you make an exclusive choice (an XORsplit): either go to g – pay compensation or to h – reject request.

  • Whichever you chose then flows into z – end (after merging back with an XORjoin).

  • There is also a loop back via f – reinitiate request.  If during “decide” you decide you need more information you can reinitiate and go back into the set of exam tasks (and even back to registration if needed).

In other words, it’s a very small process model that shows branching, parallelism, loops, and merges—together with a little inset that tells you how to read each kind of dot () as XOR, AND or OR, either splitting or joining.