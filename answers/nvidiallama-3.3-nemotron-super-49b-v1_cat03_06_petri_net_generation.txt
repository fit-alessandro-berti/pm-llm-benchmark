Below is the Python code for constructing the accepting Petri net for the described insurance claim management process. This implementation includes the main process flow, loops for re-document submission after **Document Verification (DV)**, and loops for **In-depth Investigation (II)** after **Fraud Check (FC)**.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking, Transition, Place
from pm4py.objects.petri_net.utils import petri_utils

# --- Create Petri Net ---
net = PetriNet(name="Insurance Claim Management")

# --- Create Places ---
start_place = net.add_place("start")  # Initial state
after_C = net.add_place("after_C")   # After Insurance Claim (C)
after_CR = net.add_place("after_CR") # After Claim Registration (CR)
after_DV = net.add_place("after_DV") # After Document Verification (DV)
rds_waiting = net.add_place("rds_waiting") # Waiting for Re-Document Submission (RDS)
after_RDS = net.add_place("after_RDS") # After Re-Document Submission (RDS)
after_FC = net.add_place("after_FC") # After Fraud Check (FC)
ii_waiting = net.add_place("ii_waiting") # Waiting for In-depth Investigation (II)
after_II = net.add_place("after_II") # After In-depth Investigation (II)
after_CA = net.add_place("after_CA") # After Claim Assessment (CA)
pre_approval = net.add_place("pre_approval") # Before Approval (AP)
after_AP = net.add_place("after_AP") # After Approval (AP)
after_P = net.add_place("after_P")   # After Payment (P)
after_N = net.add_place("after_N")   # After Notification (N)
end_place = net.add_place("end")     # Final state (Closure, CL) - implied by reaching this place

# --- Create Transitions ---
C = net.add_transition("C", "Insurance Claim")
CR = net.add_transition("CR", "Claim Registration")
DV = net.add_transition("DV", "Document Verification")
RDS = net.add_transition("RDS", "Re-Document Submission")
FC = net.add_transition("FC", "Fraud Check")
II = net.add_transition("II", "In-depth Investigation")
CA = net.add_transition("CA", "Claim Assessment")
AP = net.add_transition("AP", "Approval")
P = net.add_transition("P", "Payment")
N = net.add_transition("N", "Notification")
CL = net.add_transition("CL", "Closure")  # Though 'end_place' implies closure, this transition is for clarity

# --- Add Arcs to Model the Process Flow ---
# Initial to Claim Registration
petri_utils.add_arc_from_to(start_place, C, net)
petri_utils.add_arc_from_to(C, after_C, net)
petri_utils.add_arc_from_to(after_C, CR, net)

# Claim Registration to Document Verification
petri_utils.add_arc_from_to(CR, after_CR, net)
petri_utils.add_arc_from_to(after_CR, DV, net)

# Document Verification with Re-Submission Loop
petri_utils.add_arc_from_to(DV, after_DV, net)
petri_utils.add_arc_from_to(after_DV, RDS, net)  # Choice to re-submit
petri_utils.add_arc_from_to(RDS, after_RDS, net)
petri_utils.add_arc_from_to(after_RDS, DV, net)  # Loop back for re-verification
petri_utils.add_arc_from_to(after_DV, FC, net)  # Proceed if no re-submission

# Fraud Check with In-depth Investigation Loop
petri_utils.add_arc_from_to(FC, after_FC, net)
petri_utils.add_arc_from_to(after_FC, II, net)  # Choice for in-depth investigation
petri_utils.add_arc_from_to(II, after_II, net)
petri_utils.add_arc_from_to(after_II, FC, net)  # Loop back if needed
petri_utils.add_arc_from_to(after_FC, CA, net)  # Proceed if no investigation or after investigation

# Rest of the Process
petri_utils.add_arc_from_to(CA, after_CA, net)
petri_utils.add_arc_from_to(after_CA, AP, net)
petri_utils.add_arc_from_to(AP, after_AP, net)
petri_utils.add_arc_from_to(after_AP, P, net)
petri_utils.add_arc_from_to(P, after_P, net)
petri_utils.add_arc_from_to(after_P, N, net)
petri_utils.add_arc_from_to(N, after_N, net)
petri_utils.add_arc_from_to(after_N, CL, net)
petri_utils.add_arc_from_to(CL, end_place, net)

# For the approval threshold condition (pre_approval place added for clarity)
petri_utils.add_arc_from_to(after_CA, pre_approval, net)
petri_utils.add_arc_from_to(pre_approval, AP, net)  # Implicit condition check before approval

# --- Initial and Final Markings ---
im = Marking()
im[start_place] = 1  # Token in the start place

fm = Marking()
fm[end_place] = 1  # Token in the end place, indicating process completion

# --- Printing the Net for Verification (Optional) ---
# print(" Places: ", net.places)
# print(" Transitions: ", net.transitions)
# for p in net.places:
#     print("Place {}: Pre={}".format(p.name, p.pre), "Post={}".format(p.post))
```

**Key Points in the Implementation:**

- **Loops:**
  - **Re-Document Submission (RDS)**: After `DV`, there's a choice to go to `RDS`. After `RDS`, it loops back to `DV` for re-verification.
  - **In-depth Investigation (II)**: After `FC`, there's a choice to perform `II`, which loops back to `FC` if repeated investigations are needed.

- **Conditional Flows:**
  - **Approval (AP)**: Implemented with a `pre_approval` place for clarity, though the actual condition (threshold check) is not modeled in Petri nets directly and would typically be handled in the transition's labeling or in a more advanced model like colored Petri nets.

- **Initial and Final Markings:**
  - **Initial Marking (im)**: A token in `start_place`, representing a new claim.
  - **Final Marking (fm)**: A token in `end_place`, indicating the claim process has concluded (closed and archived).

**Note:** This Petri net focuses on the control flow. For modeling data flow (e.g., the approval threshold condition), consider using colored Petri nets or extending this model with additional place/transition logic to capture such specifics, if supported by the `pm4py` library in a manner not covered here. 

**Visualization Tip:** To visualize the constructed Petri net for better understanding, you can use `pm4py`'s visualization capabilities or export the net to a format (like PNML) that can be opened with Petri net editors like [CPN Tools](https://cpntools.org/) or [VisiPro](http://www.regis-boucher.fr-visipro/). Here’s a simple way to visualize using `pm4py`:

```python
from pm4py.visualization.petri_net import builder as petri_net_builder
from pm4py.visualization.petri_net import viewer as petri_net_viewer

# Build the visualization model
visual Hóa_model = petri_net_builder.apply(net)

# Show the visualization
petri_net_viewer.show(visual Hóa_model)
```

Ensure you have the necessary visualization dependencies installed (`graphviz` for the backend and possibly `pydot` or similar for rendering). If not, you can install them via pip:

```bash
pip install graphviz pydot
```

And for `graphviz` on your system (if not already installed), follow the instructions at https://graphviz.org/download/. 

Remember, the visualization might not perfectly capture the intent of all control flows without additional contextual understanding due to the complexity of the process. 

**Troubleshooting Visualization:**

- **Missing Graphviz:** Ensure Graphviz is installed on your system and its bin folder is added to the PATH environment variable.
- **Rendering Issues:** Try updating `graphviz` and `pydot` to the latest versions.
- **No Display:** If in a non-GUI environment, consider saving the visualization to a file using `petri_net_viewer.save(visual Hóa_model, "path/to/save.svg")` and viewing it locally.