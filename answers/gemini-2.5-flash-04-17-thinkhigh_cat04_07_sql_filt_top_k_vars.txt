```sql
-- This query assumes the event_log table is already created and populated in DuckDB.
-- Replace '10' with the desired value for K (the number of top variants).

WITH
-- Step 1: Determine the ordered sequence of activities for each case
case_variants AS (
    SELECT
        case_id,
        -- Use string_agg to concatenate activities, ordered by timestamp
        string_agg(activity, '->' ORDER BY timestamp) AS variant_string
    FROM
        event_log
    GROUP BY
        case_id
),

-- Step 2: Count cases per unique variant sequence
variant_counts AS (
    SELECT
        variant_string,
        COUNT(case_id) AS variant_count
    FROM
        case_variants
    GROUP BY
        variant_string
),

-- Step 3: Rank variants by frequency (count)
ranked_variants AS (
    SELECT
        variant_string,
        variant_count,
        -- Use RANK() to assign a rank based on the count in descending order.
        -- DENSE_RANK() could also be used if ties should receive consecutive ranks.
        RANK() OVER (ORDER BY variant_count DESC) as variant_rank
    FROM
        variant_counts
)

-- Step 4: Select all events from the original log for cases belonging to the top K variants
SELECT
    el.* -- Select all columns from the original event_log
FROM
    event_log el
JOIN
    case_variants cv ON el.case_id = cv.case_id -- Join event_log with case_variants to get the variant string for each event's case
JOIN
    ranked_variants rv ON cv.variant_string = rv.variant_string -- Join with ranked_variants to get the rank of the case's variant
WHERE
    rv.variant_rank <= 10 -- Filter for cases whose variant is among the top K (replace 10 with K)
ORDER BY
    el.case_id, -- Order the final output by case and timestamp for readability
    el.timestamp;
```

**Explanation:**

1.  **`case_variants` CTE:** This CTE processes the raw `event_log`. It groups events by `case_id` and uses `string_agg` to build the `variant_string` for each case. The crucial part here is `ORDER BY timestamp` *within* `string_agg`, which ensures activities are concatenated in the correct chronological order for each case.
2.  **`variant_counts` CTE:** This CTE takes the results from `case_variants` (each case mapped to its variant string) and groups by `variant_string` to count how many cases share the exact same sequence. This gives the frequency of each unique process variant.
3.  **`ranked_variants` CTE:** This CTE takes the variant counts and assigns a rank to each variant based on its `variant_count` in descending order. `RANK()` gives the same rank to tied variants and skips the subsequent rank numbers.
4.  **Final `SELECT` Statement:**
    *   It selects all columns (`el.*`) from the original `event_log` table (`el`).
    *   It joins `event_log` with `case_variants` on `case_id` to link each event back to the determined variant string of its case.
    *   It then joins this result with `ranked_variants` on `variant_string` to associate the variant's rank with each event.
    *   The `WHERE rv.variant_rank <= 10` clause filters the events, keeping only those whose corresponding case belongs to a variant ranked within the top 10 (or the specified K).
    *   Finally, the results are ordered by `case_id` and `timestamp` for clear presentation of the filtered event log.