To address this prompt, follow these steps in a structured DuckDB SQL query:

1. **Extract Ordered Sequence of Activities per Case:**
   We need to find the ordered sequence of activities for each `case_id`. This can be achieved by creating a window function that assigns an order number to events within each case sorted by their timestamp.

2. **Group Cases by Their Complete Activity Sequences (Process Variants):**
   After ordering each event, we group cases based on these ordered sequences to identify unique process variants.

3. **Count and Determine Top K Variants:**
   We need to count the number of cases for each variant and find the top K variants based on this frequency.

4. **Filter Down to Cases Belonging to Top K Variants:**
   Finally, we filter down to those cases that match the top K process variants.

5. **Return Corresponding Events from Filtered Cases:**
   We return only the events from the filtered cases, ensuring all other entries are excluded.

Here's the SQL query:

```sql
WITH OrderedCases AS (
    SELECT 
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_order
    FROM 
        event_log
),
Variants AS (
    SELECT 
        case_id, 
        GROUP_CONCAT(activity SEPARATOR '') AS variant_sequence,
        COUNT(*) AS cases_per_variant
    FROM 
        OrderedCases
    GROUP BY 
        case_id
)
-- Find the top K variants by their frequency (cases_per_variant)
SELECT TOP_K.variant_sequence
FROM Variants AS TOP_K
WHERE cases_per_variant IN (
    SELECT TOP_N.cases_per_variant
    FROM Variants AS TOP_N
    ORDER BY cases_per_variant DESC LIMIT 10 -- Replace 10 with your desired K value for top variants.
)
-- Include only the cases that belong to these top variants in the original event log
SELECT 
    e.*
FROM 
    OrderedCases AS e
JOIN 
    Variants AS v
ON 
    e.case_id = v.case_id AND e.variant_sequence = v.variant_sequence;
```

### Explanation:

1. **OrderedCases CTE:**
   - `ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp)` assigns a unique sequential number to each row within the same `case_id`, ordered by `timestamp`.

2. **Variants CTE:**
   - We use `GROUP_CONCAT(activity SEPARATOR '')` to concatenate activities into a single string for each case, forming an ordered sequence of activities.
   - The `COUNT(*) AS cases_per_variant` provides the count of events per variant.

3. **Finding Top K Variants:**
   - We select top K variants by their frequency (number of occurrences in the event log). Replace 10 with your desired value for K.

4. **Final Selection:**
   - The final selection retrieves all events from cases belonging to these top K variants, ensuring exclusion of other entries.

### Notes:
- Ensure that `TOP_K` and `TOP_N` are correctly defined before executing the query.
- If you use a different version of DuckDB or need specific syntax adjustments for your environment, please adjust accordingly.