Here's a concise DuckDB SQL query that accurately fulfills your stated requirements:

```sql
WITH sequenced_events AS (
  SELECT
    case_id,
    activity,
    timestamp,
    LEAD(activity, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_activity,
    LEAD(activity, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_activity,
    LEAD(timestamp, 1) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_timestamp,
    LEAD(timestamp, 2) OVER (PARTITION BY case_id ORDER BY timestamp) AS next_next_timestamp
  FROM event_log
),
cases_to_exclude AS (
  SELECT DISTINCT case_id
  FROM sequenced_events
  WHERE activity = 'Approve Purchase Requisition'
    AND next_activity = 'Create Order'
    AND next_next_activity = 'Confirm Order'
    AND DATE_DIFF('day', next_timestamp, next_next_timestamp) > 5
)
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM cases_to_exclude)
ORDER BY case_id, timestamp;
```

### Explanation

- The common table expression (`sequenced_events`) uses window functions to examine each event along with its next two succeeding events, enabling detection of a direct sequence of three specific activities.

- The `cases_to_exclude` CTE identifies all cases (`case_id`) which have the following exact sequence of events occurring directly in succession, without any additional events in between:
  - `'Approve Purchase Requisition'`, followed immediately by
  - `'Create Order'`, followed immediately by
  - `'Confirm Order'`.

  It further ensures that the duration between `'Create Order'` and `'Confirm Order'` exceeds 5 days.

- Finally, the main select statement excludes any event belonging to a `case_id` in the `cases_to_exclude` set, ensuring the query returns only cases that do not meet your specified criteria.