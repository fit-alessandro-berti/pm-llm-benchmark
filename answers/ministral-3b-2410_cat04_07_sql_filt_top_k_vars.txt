To achieve the task described, we need to perform several steps in our SQL query. Here's a comprehensive approach to solve the problem:

1. **Extract the ordered sequence of activities per case**: We need to order the activities within each `case_id` by their `timestamp`.
2. **Group cases by their complete activity sequence**: We need to create a unique sequence for each `case_id` and group them.
3. **Count how many cases correspond to each variant**: We need to count the number of cases for each unique process variant.
4. **Determine the top K variants by their frequency**: We need to find the top K variants based on the count of cases.
5. **Return all events from the original event log that belong only to cases which are part of these top K variants**: We need to filter the original event log to include only the events from the top K variants.

Here is the DuckDB SQL query to achieve this:

```sql
WITH OrderedEvents AS (
    SELECT
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS row_num
    FROM
        event_log
),
ProcessVariants AS (
    SELECT
        case_id,
        GROUP_CONCAT(activity ORDER BY timestamp) AS variant
    FROM
        OrderedEvents
    GROUP BY
        case_id
),
VariantCounts AS (
    SELECT
        variant,
        COUNT(*) AS count
    FROM
        ProcessVariants
    GROUP BY
        variant
),
TopKVariants AS (
    SELECT
        variant,
        count
    FROM
        VariantCounts
    ORDER BY
        count DESC
    LIMIT
        K
),
FilteredEvents AS (
    SELECT
        e.*
    FROM
        event_log e
    JOIN
        ProcessVariants p ON e.case_id = p.case_id
    JOIN
        TopKVariants t ON p.variant = t.variant
)
SELECT
    *
FROM
    FilteredEvents;
```

### Explanation:

1. **OrderedEvents CTE**:
   - This Common Table Expression (CTE) orders the activities within each `case_id` by their `timestamp` using the `ROW_NUMBER()` window function.

2. **ProcessVariants CTE**:
   - This CTE groups the ordered activities by `case_id` and concatenates the activities in the order they appear, creating a unique sequence for each `case_id`.

3. **VariantCounts CTE**:
   - This CTE counts the number of cases for each unique process variant.

4. **TopKVariants CTE**:
   - This CTE selects the top K variants based on their frequency (count of cases).

5. **FilteredEvents CTE**:
   - This CTE filters the original event log to include only the events from the top K variants.

6. **Final SELECT**:
   - This query selects all columns from the filtered events.

### Note:
- Replace `K` with the actual value of the top K variants you want to consider.
- Ensure that the DuckDB version you are using supports the `GROUP_CONCAT` function, as it is used to concatenate activities in the `ProcessVariants` CTE. If not, you might need to use a different approach to concatenate the activities.