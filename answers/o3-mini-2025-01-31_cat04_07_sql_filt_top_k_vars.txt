Below is one complete solution using common table expressions. In this example, we assume K is provided as a parameter (replace <K> with the desired number):

------------------------------------------------
-- Step 1: Compute the ordered activity sequence (process variant)
WITH case_variants AS (
  SELECT
    case_id,
    STRING_AGG(activity, '->' ORDER BY timestamp) AS variant
  FROM event_log
  GROUP BY case_id
),

-- Step 2: Count the number of cases for each variant and extract the top K variants
variant_counts AS (
  SELECT
    variant,
    COUNT(*) AS case_count
  FROM case_variants
  GROUP BY variant
),
top_variants AS (
  SELECT variant
  FROM variant_counts
  ORDER BY case_count DESC
  LIMIT <K>
),

-- Step 3: Filter to only include cases which belong to one of the top K variants
filtered_cases AS (
  SELECT cv.case_id
  FROM case_variants cv
  JOIN top_variants tv ON cv.variant = tv.variant
)

-- Step 4: Return all original events from the filtered cases.
SELECT el.*
FROM event_log el
WHERE el.case_id IN (SELECT case_id FROM filtered_cases);
------------------------------------------------

Explanation:

1. The CTE "case_variants" computes for each case_id an ordered sequence of activities using DuckDB’s STRING_AGG with an ORDER BY clause. The activities are concatenated using "->" as a delimiter (this delimiter is chosen for clarity but can be any separator).

2. The "variant_counts" CTE aggregates the counts of cases per unique variant.

3. The "top_variants" CTE selects the top K variants ordered by the count of cases.

4. Finally, the "filtered_cases" CTE gathers all case_ids that follow one of the top K variants, and the final SELECT returns all events from event_log associated with those cases.

Replace <K> with the desired number of top variants, and this query will return the corresponding events only for those cases.