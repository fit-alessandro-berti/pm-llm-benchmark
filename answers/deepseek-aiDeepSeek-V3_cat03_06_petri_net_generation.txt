To construct an accepting Petri net for the given insurance claim management process scenario, we need to define the places, transitions, and arcs that represent the states and activities. We also need to handle the loops for re-submission of documents and in-depth investigations. Below is the Python code that constructs the Petri net using `pm4py`:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="InsuranceClaimProcess")

# Define places
start = PetriNet.Place(name="start")
cr_done = PetriNet.Place(name="cr_done")
dv_done = PetriNet.Place(name="dv_done")
fc_done = PetriNet.Place(name="fc_done")
ca_done = PetriNet.Place(name="ca_done")
ap_done = PetriNet.Place(name="ap_done")
p_done = PetriNet.Place(name="p_done")
n_done = PetriNet.Place(name="n_done")
cl_done = PetriNet.Place(name="cl_done")
rds_done = PetriNet.Place(name="rds_done")
ii_done = PetriNet.Place(name="ii_done")

# Add places to the net
net.places.add(start)
net.places.add(cr_done)
net.places.add(dv_done)
net.places.add(fc_done)
net.places.add(ca_done)
net.places.add(ap_done)
net.places.add(p_done)
net.places.add(n_done)
net.places.add(cl_done)
net.places.add(rds_done)
net.places.add(ii_done)

# Define transitions
cr = PetriNet.Transition(name="cr", label="Claim Registration")
dv = PetriNet.Transition(name="dv", label="Document Verification")
fc = PetriNet.Transition(name="fc", label="Fraud Check")
ca = PetriNet.Transition(name="ca", label="Claim Assessment")
ap = PetriNet.Transition(name="ap", label="Approval")
p = PetriNet.Transition(name="p", label="Payment")
n = PetriNet.Transition(name="n", label="Notification")
cl = PetriNet.Transition(name="cl", label="Closure")
rds = PetriNet.Transition(name="rds", label="Re-Document Submission")
ii = PetriNet.Transition(name="ii", label="In-depth Investigation")

# Add transitions to the net
net.transitions.add(cr)
net.transitions.add(dv)
net.transitions.add(fc)
net.transitions.add(ca)
net.transitions.add(ap)
net.transitions.add(p)
net.transitions.add(n)
net.transitions.add(cl)
net.transitions.add(rds)
net.transitions.add(ii)

# Add arcs
petri_utils.add_arc_from_to(start, cr, net)
petri_utils.add_arc_from_to(cr, cr_done, net)
petri_utils.add_arc_from_to(cr_done, dv, net)
petri_utils.add_arc_from_to(dv, dv_done, net)
petri_utils.add_arc_from_to(dv_done, fc, net)
petri_utils.add_arc_from_to(fc, fc_done, net)
petri_utils.add_arc_from_to(fc_done, ca, net)
petri_utils.add_arc_from_to(ca, ca_done, net)
petri_utils.add_arc_from_to(ca_done, ap, net)
petri_utils.add_arc_from_to(ap, ap_done, net)
petri_utils.add_arc_from_to(ap_done, p, net)
petri_utils.add_arc_from_to(p, p_done, net)
petri_utils.add_arc_from_to(p_done, n, net)
petri_utils.add_arc_from_to(n, n_done, net)
petri_utils.add_arc_from_to(n_done, cl, net)
petri_utils.add_arc_from_to(cl, cl_done, net)

# Add arcs for loops
petri_utils.add_arc_from_to(dv_done, rds, net)
petri_utils.add_arc_from_to(rds, rds_done, net)
petri_utils.add_arc_from_to(rds_done, dv, net)
petri_utils.add_arc_from_to(fc_done, ii, net)
petri_utils.add_arc_from_to(ii, ii_done, net)
petri_utils.add_arc_from_to(ii_done, fc, net)

# Define initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[cl_done] = 1

# The Petri net is now constructed with initial and final markings
print("Petri net constructed successfully.")
```

### Explanation:
1. **Places:** Represent the states between activities (e.g., `cr_done` after Claim Registration).
2. **Transitions:** Represent the activities (e.g., `cr` for Claim Registration).
3. **Arcs:** Connect places and transitions to form the logical sequence.
4. **Loops:** Added for re-submission of documents (`rds`) and in-depth investigation (`ii`).
5. **Initial Marking (`im`):** A token in the `start` place represents a new claim.
6. **Final Marking (`fm`):** A token in the `cl_done` place represents a closed claim.

This Petri net captures the entire insurance claim management process, including loops for re-submission and in-depth investigation.