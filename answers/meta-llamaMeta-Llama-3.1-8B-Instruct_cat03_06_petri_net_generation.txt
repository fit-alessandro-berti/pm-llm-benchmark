Here's a Python code snippet to construct the accepting Petri net for the insurance claim management process as described:
```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance Claim Management")

# Define places and transitions
start = PetriNet.Place(name="start")
claim_registration = PetriNet.Transition(name="claim_registration", label="Claim Registration (CR)")
document_verification = PetriNet.Transition(name="document_verification", label="Document Verification (DV)")
fraud_check = PetriNet.Transition(name="fraud_check", label="Fraud Check (FC)")
re_document_submission = PetriNet.Transition(name="re_document_submission", label="Re-Document Submission (RDS)")
in_depth_investigation = PetriNet.Transition(name="in_depth_investigation", label="In-depth Investigation (II)")
claim_assessment = PetriNet.Transition(name="claim_assessment", label="Claim Assessment (CA)")
approval = PetriNet.Transition(name="approval", label="Approval (AP)")
payment = PetriNet.Transition(name="payment", label="Payment (P)")
notification = PetriNet.Transition(name="notification", label="Notification (N)")
closure = PetriNet.Transition(name="closure", label="Closure (CL)")

# Add places and transitions to the Petri net
net.places.add(start)
net.transitions.add(claim_registration)
net.transitions.add(document_verification)
net.transitions.add(fraud_check)
net.transitions.add(re_document_submission)
net.transitions.add(in_depth_investigation)
net.transitions.add(claim_assessment)
net.transitions.add(approval)
net.transitions.add(payment)
net.transitions.add(notification)
net.transitions.add(closure)

# Add arcs between transitions
petri_utils.add_arc_from_to(start, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, document_verification, net)
petri_utils.add_arc_from_to(document_verification, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, document_verification, net)  # Loop
petri_utils.add_arc_from_to(document_verification, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, fraud_check, net)  # Loop
petri_utils.add_arc_from_to(fraud_check, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, approval, net)
petri_utils.add_arc_from_to(approval, payment, net)
petri_utils.add_arc_from_to(payment, notification, net)
petri_utils.add_arc_from_to(notification, closure, net)

# Define initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[closure] = 1
```
This code creates an accepting Petri net with the described places, transitions, and arcs, and defines the initial and final markings. Note that I used Python 3.6+ syntax and the `pm4py` library. You may need to adjust the code to match your specific environment.