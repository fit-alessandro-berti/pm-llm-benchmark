```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create a new Petri net
net = PetriNet(name="Insurance Claim Management Process")

# Create places
p_start = PetriNet.Place("p_start")
p_after_c = PetriNet.Place("p_after_c")
p_after_cr = PetriNet.Place("p_after_cr")
p_after_dv = PetriNet.Place("p_after_dv")
p_fc_complete = PetriNet.Place("p_fc_complete")  # after FC is done, decide II or CA
p_after_fc = PetriNet.Place("p_after_fc")         # return here after II to try FC again
p_after_ca = PetriNet.Place("p_after_ca")
p_after_ap = PetriNet.Place("p_after_ap")
p_after_p = PetriNet.Place("p_after_p")
p_after_n = PetriNet.Place("p_after_n")
p_after_cl = PetriNet.Place("p_after_cl")

net.places.update([p_start, p_after_c, p_after_cr, p_after_dv, p_fc_complete, p_after_fc,
                   p_after_ca, p_after_ap, p_after_p, p_after_n, p_after_cl])

# Create transitions (activities)
# Labels correspond to activity names provided in the scenario
t_c = PetriNet.Transition("t_c", label="Insurance Claim (C)")
t_cr = PetriNet.Transition("t_cr", label="Claim Registration (CR)")
t_dv = PetriNet.Transition("t_dv", label="Document Verification (DV)")
t_rds = PetriNet.Transition("t_rds", label="Re-Document Submission (RDS)")
t_fc = PetriNet.Transition("t_fc", label="Fraud Check (FC)")
t_ii = PetriNet.Transition("t_ii", label="In-depth Investigation (II)")
t_ca = PetriNet.Transition("t_ca", label="Claim Assessment (CA)")
t_ap = PetriNet.Transition("t_ap", label="Approval (AP)")
t_p = PetriNet.Transition("t_p", label="Payment (P)")
t_n = PetriNet.Transition("t_n", label="Notification (N)")
t_cl = PetriNet.Transition("t_cl", label="Closure (CL)")

net.transitions.update([t_c, t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_p, t_n, t_cl])

# Add arcs to connect places and transitions
# Initial claim arrival
petri_utils.add_arc_from_to(p_start, t_c, net)
petri_utils.add_arc_from_to(t_c, p_after_c, net)

# Claim Registration
petri_utils.add_arc_from_to(p_after_c, t_cr, net)
petri_utils.add_arc_from_to(t_cr, p_after_cr, net)

# Document Verification
petri_utils.add_arc_from_to(p_after_cr, t_dv, net)
petri_utils.add_arc_from_to(t_dv, p_after_dv, net)

# After DV, either re-document submission (RDS) to return to DV loop, or proceed to Fraud Check
petri_utils.add_arc_from_to(p_after_dv, t_rds, net)  # loop back if documents incomplete
petri_utils.add_arc_from_to(t_rds, p_after_cr, net)

petri_utils.add_arc_from_to(p_after_dv, t_fc, net)   # proceed to FC if documents are complete
petri_utils.add_arc_from_to(t_fc, p_fc_complete, net)

# Fraud Check loop: if suspicious -> II -> back to FC; else proceed to CA
petri_utils.add_arc_from_to(p_fc_complete, t_ii, net) 
petri_utils.add_arc_from_to(t_ii, p_after_fc, net)
# After II, FC should be attempted again
petri_utils.add_arc_from_to(p_after_fc, t_fc, net)   # back to FC

petri_utils.add_arc_from_to(p_fc_complete, t_ca, net)
petri_utils.add_arc_from_to(t_ca, p_after_ca, net)

# After CA, if claim surpasses threshold -> Approval -> Payment; else directly Payment
petri_utils.add_arc_from_to(p_after_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, p_after_ap, net)
petri_utils.add_arc_from_to(p_after_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, p_after_p, net)

# Alternatively, skip AP if not needed
petri_utils.add_arc_from_to(p_after_ca, t_p, net)

# After Payment -> Notification -> Closure
petri_utils.add_arc_from_to(p_after_p, t_n, net)
petri_utils.add_arc_from_to(t_n, p_after_n, net)
petri_utils.add_arc_from_to(p_after_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, p_after_cl, net)

# Define initial and final markings
im = Marking()
im[p_start] = 1

fm = Marking()
fm[p_after_cl] = 1
```

**Explanation:**

- We start from `p_start` with a token, representing a new claim arriving.
- The first activity is "Insurance Claim (C)" represented by transition `t_c`.
- After the claim is filed (`t_c`), we do "Claim Registration (CR)`, then `Document Verification (DV)`.
- If documents are incomplete after DV, we perform "Re-Document Submission (RDS)" and loop back to do DV again.
- If documents are verified, we proceed to the "Fraud Check (FC)".
- If fraud is suspected, we do "In-depth Investigation (II)" and loop back to FC until no further investigation is needed.
- Once the claim is fraud-checked, we do "Claim Assessment (CA)".
- If the claim amount is high, "Approval (AP)" is required before "Payment (P)". If not, we skip AP and go directly to Payment.
- After payment, we send "Notification (N)" to the customer.
- Finally, we perform "Closure (CL)", and the process reaches the final marking at `p_after_cl`.

This Petri net models the described logic of the insurance claim management process, including loops for document re-submission and in-depth fraud investigations.