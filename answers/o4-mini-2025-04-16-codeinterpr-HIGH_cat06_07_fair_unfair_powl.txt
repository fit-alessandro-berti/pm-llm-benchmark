Below are two POWL models encoded in Python using pm4py’s POWL classes. The first model (“model_unfair”) contains an XORbranch after the skill assessment where a special `CommunityAffiliationCheck` can give an unfair lift. The second model (“model_fair”) replaces that XOR with a single, uniform `CulturalFitCheck` so no subgroup gets special treatment.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Common Activities
ReceiveApplication    = Transition(label="ReceiveApplication")
DataCompletenessCheck = Transition(label="DataCompletenessCheck")
RequestMoreInfo       = Transition(label="RequestMoreInfo")
SkillAssessment       = Transition(label="SkillAssessment")
CulturalFitCheck      = Transition(label="CulturalFitCheck")
CommunityAffiliationCheck = Transition(label="CommunityAffiliationCheck")
ManagerialReview      = Transition(label="ManagerialReview")
FinalDecision         = Transition(label="FinalDecision")

# 1) POWL Model WITH potential unfairness
#    Loop: ensure data completeness by repeating DataCompletenessCheck  optionally RequestMoreInfo
loop_data = OperatorPOWL(
    operator=Operator.LOOP,
    children=[DataCompletenessCheck, RequestMoreInfo]
)

#    XOR: after SkillAssessment either standard CulturalFitCheck or biased CommunityAffiliationCheck
xor_cultural = OperatorPOWL(
    operator=Operator.XOR,
    children=[CulturalFitCheck, CommunityAffiliationCheck]
)

#    Build the partial order
model_unfair = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        loop_data,
        SkillAssessment,
        xor_cultural,
        ManagerialReview,
        FinalDecision
    ]
)
#    Define sequencing
model_unfair.order.add_edge(ReceiveApplication, loop_data)
model_unfair.order.add_edge(loop_data, SkillAssessment)
model_unfair.order.add_edge(SkillAssessment, xor_cultural)
model_unfair.order.add_edge(xor_cultural, ManagerialReview)
model_unfair.order.add_edge(ManagerialReview, FinalDecision)


# 2) POWL Model WITHOUT unfairness
#    Same loop, but no XOR: everybody goes through the same CulturalFitCheck
model_fair = StrictPartialOrder(
    nodes=[
        ReceiveApplication,
        loop_data,
        SkillAssessment,
        CulturalFitCheck,
        ManagerialReview,
        FinalDecision
    ]
)
#    Define sequencing
model_fair.order.add_edge(ReceiveApplication, loop_data)
model_fair.order.add_edge(loop_data, SkillAssessment)
model_fair.order.add_edge(SkillAssessment, CulturalFitCheck)
model_fair.order.add_edge(CulturalFitCheck, ManagerialReview)
model_fair.order.add_edge(ManagerialReview, FinalDecision)

# (Optionally you can print or visualize the POWL objects)
print("Unfair model:", model_unfair)
print("Fair model:  ", model_fair)
```

Explanation of each:

• ReceiveApplication  
• * ( DataCompletenessCheck, RequestMoreInfo )  loop until all required fields are present  
• SkillAssessment  
– In **model_unfair**: XOR( CulturalFitCheck, CommunityAffiliationCheck )  
– In **model_fair**: CulturalFitCheck  
• ManagerialReview  
• FinalDecision  

In **model_unfair**, the XOR branch introduces a path (`CommunityAffiliationCheck`) that implicitly advantages applicants with certain local or club affiliations. In **model_fair**, every candidate must pass the same `CulturalFitCheck`, removing that source of bias.