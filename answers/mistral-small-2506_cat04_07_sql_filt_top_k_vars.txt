# DuckDB SQL Query for Process Variant Analysis

Here's a comprehensive solution that addresses all requirements:

```sql
WITH
-- Step 1: Extract ordered activity sequences per case
ordered_activities AS (
    SELECT
        case_id,
        LIST_AGG(activity ORDER BY timestamp) AS activity_sequence
    FROM event_log
    GROUP BY case_id
),

-- Step 2: Count cases per variant and identify top K variants
variant_counts AS (
    SELECT
        activity_sequence,
        COUNT(*) AS case_count
    FROM ordered_activities
    GROUP BY activity_sequence
    ORDER BY case_count DESC
    LIMIT :k  -- Parameter for top K variants
),

-- Step 3: Get case_ids of top K variants
top_variant_cases AS (
    SELECT
        o.case_id
    FROM ordered_activities o
    JOIN variant_counts v ON o.activity_sequence = v.activity_sequence
)

-- Step 4: Return all events from top K variant cases
SELECT
    e.*
FROM event_log e
JOIN top_variant_cases t ON e.case_id = t.case_id
ORDER BY e.case_id, e.timestamp;
```

## Explanation:

1. **Ordered Activity Sequences**:
   - The `ordered_activities` CTE creates a list of activities for each case, ordered by timestamp using `LIST_AGG(activity ORDER BY timestamp)`.

2. **Variant Counting**:
   - The `variant_counts` CTE groups these sequences to identify unique variants and counts how many cases follow each variant.
   - It then limits to the top K most frequent variants using `LIMIT :k` (where `:k` is a parameter you would set).

3. **Case Filtering**:
   - The `top_variant_cases` CTE identifies which case_ids belong to the top K variants.

4. **Final Result**:
   - The main query joins back to the original event log to return all events from cases that are part of the top K variants, maintaining the original order by case_id and timestamp.

## Usage Notes:
- Replace `:k` with your desired number of top variants (e.g., `5` for top 5 variants)
- The query handles all the requirements:
  - Correctly extracts ordered sequences
  - Groups and counts variants
  - Filters to top K variants
  - Returns all events from those cases
- The result is ordered by case_id and timestamp to maintain the process flow visibility