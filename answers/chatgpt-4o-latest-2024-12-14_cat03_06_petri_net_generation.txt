Below is the Python code to construct the accepting Petri net for the described insurance claim management process scenario:

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet(name="Insurance Claim Management Process")

# Create places
start = PetriNet.Place(name="start")
after_claim_registration = PetriNet.Place(name="after_CR")
after_document_verification = PetriNet.Place(name="after_DV")
after_fraud_check = PetriNet.Place(name="after_FC")
after_claim_assessment = PetriNet.Place(name="after_CA")
awaiting_approval = PetriNet.Place(name="awaiting_AP")
after_approval = PetriNet.Place(name="after_AP")
after_payment = PetriNet.Place(name="after_P")
after_notification = PetriNet.Place(name="after_N")
end = PetriNet.Place(name="end")

# Add places to the net
net.places.update([start, after_claim_registration, after_document_verification,
                   after_fraud_check, after_claim_assessment, awaiting_approval,
                   after_approval, after_payment, after_notification, end])

# Create transitions
claim_registration = PetriNet.Transition(name="CR", label="Claim Registration")
document_verification = PetriNet.Transition(name="DV", label="Document Verification")
fraud_check = PetriNet.Transition(name="FC", label="Fraud Check")
claim_assessment = PetriNet.Transition(name="CA", label="Claim Assessment")
approval = PetriNet.Transition(name="AP", label="Approval")
payment = PetriNet.Transition(name="P", label="Payment")
notification = PetriNet.Transition(name="N", label="Notification")
closure = PetriNet.Transition(name="CL", label="Closure")
re_document_submission = PetriNet.Transition(name="RDS", label="Re-Document Submission")
in_depth_investigation = PetriNet.Transition(name="II", label="In-Depth Investigation")

# Add transitions to the net
net.transitions.update([claim_registration, document_verification, fraud_check, 
                        claim_assessment, approval, payment, notification, 
                        closure, re_document_submission, in_depth_investigation])

# Add arcs
petri_utils.add_arc_from_to(start, claim_registration, net)
petri_utils.add_arc_from_to(claim_registration, after_claim_registration, net)

petri_utils.add_arc_from_to(after_claim_registration, document_verification, net)
petri_utils.add_arc_from_to(document_verification, after_document_verification, net)
petri_utils.add_arc_from_to(document_verification, re_document_submission, net)
petri_utils.add_arc_from_to(re_document_submission, after_claim_registration, net)

petri_utils.add_arc_from_to(after_document_verification, fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, after_fraud_check, net)
petri_utils.add_arc_from_to(fraud_check, in_depth_investigation, net)
petri_utils.add_arc_from_to(in_depth_investigation, after_document_verification, net)

petri_utils.add_arc_from_to(after_fraud_check, claim_assessment, net)
petri_utils.add_arc_from_to(claim_assessment, after_claim_assessment, net)

petri_utils.add_arc_from_to(after_claim_assessment, approval, net)
petri_utils.add_arc_from_to(approval, awaiting_approval, net)
petri_utils.add_arc_from_to(awaiting_approval, after_approval, net)

petri_utils.add_arc_from_to(after_claim_assessment, payment, net)
petri_utils.add_arc_from_to(after_approval, payment, net)
petri_utils.add_arc_from_to(payment, after_payment, net)

petri_utils.add_arc_from_to(after_payment, notification, net)
petri_utils.add_arc_from_to(notification, after_notification, net)
petri_utils.add_arc_from_to(after_notification, closure, net)
petri_utils.add_arc_from_to(closure, end, net)

# Define initial and final markings
im = Marking()
im[start] = 1

fm = Marking()
fm[end] = 1

# Output the constructed net and markings
print("Petri net created with initial and final markings.")
```

### Explanation of the Code
- **Places**: Represent different states in the process.
- **Transitions**: Represent activities in the process.
- **Arcs**: Define the logical flow and relationships, including loops for re-document submission (RDS) and in-depth investigation (II).
- **Initial Marking**: A token is placed in the `start` place.
- **Final Marking**: A token is placed in the `end` place, representing the closed claim.

This Petri net captures the described scenario's complexity with potential loops and logical sequences.