```python
# Define the activities involved in the process for easier reference
ACTIVITIES = [
    'RO',  # Receive Order
    'CA',  # Check Availability
    'RI',  # Reserve Items
    'PI',  # Pick Items
    'QC',  # Quality Check
    'PO',  # Pack Order
    'GSL', # Generate Shipping Label
    'D',   # Dispatch
    'IC',  # Invoice Customer
    'RP'   # Record Payment
]

# Initialize the Log Skeleton dictionary with empty sets/dictionary as per requirements
log_skeleton = {
    'equivalence': set(),
    'always_before': set(),
    'always_after': set(),
    'never_together': set(),
    'activ_freq': {},
    'directly_follows': set()
}

# 1. Activity Occurrences ('activ_freq')
# For a typical successful order fulfillment, each activity is expected to occur exactly once.
log_skeleton['activ_freq'] = {activity: {1} for activity in ACTIVITIES}

# 2. Directly-Follows Constraints ('directly_follows')
# The scenario describes a sequential flow for the core fulfillment process.
# RO -> CA -> RI -> PI -> QC -> PO -> GSL -> D
log_skeleton['directly_follows'] = {
    ('RO', 'CA'),
    ('CA', 'RI'),
    ('RI', 'PI'),
    ('PI', 'QC'),
    ('QC', 'PO'),
    ('PO', 'GSL'),
    ('GSL', 'D')
}

# 3. Always After ('always_after')
# - Dispatch (D) generally precedes Invoice Customer (IC), but not necessarily immediately.
# - Invoice Customer (IC) generally precedes Record Payment (RP), but not necessarily immediately.
log_skeleton['always_after'] = {
    ('D', 'IC'),  # If Dispatch occurs, Invoice Customer occurs later.
    ('IC', 'RP')  # If Invoice Customer occurs, Record Payment occurs later.
}

# 4. Always Before ('always_before')
# - If an activity occurs, its direct predecessor in the main flow must have occurred previously.
# - If Invoice Customer occurs, Dispatch must have occurred previously.
# - If Record Payment occurs, Invoice Customer must have occurred previously.
log_skeleton['always_before'] = {
    ('CA', 'RO'),   # If Check Availability occurs, Receive Order must have occurred previously.
    ('RI', 'CA'),   # If Reserve Items occurs, Check Availability must have occurred previously.
    ('PI', 'RI'),   # If Pick Items occurs, Reserve Items must have occurred previously.
    ('QC', 'PI'),   # If Quality Check occurs, Pick Items must have occurred previously.
    ('PO', 'QC'),   # If Pack Order occurs, Quality Check must have occurred previously.
    ('GSL', 'PO'),  # If Generate Shipping Label occurs, Pack Order must have occurred previously.
    ('D', 'GSL'),   # If Dispatch occurs, Generate Shipping Label must have occurred previously.
    ('IC', 'D'),    # If Invoice Customer occurs, Dispatch must have occurred previously.
    ('RP', 'IC')    # If Record Payment occurs, Invoice Customer must have occurred previously.
}

# 5. Equivalence ('equivalence')
# No explicit equivalence constraints are mentioned in the scenario that are not implicitly covered
# by all activities occurring exactly once. For example, if RO and D occur once, they have the
# same number of occurrences, but this constraint type is typically used for alternatives or
# parallel paths with coupled occurrences. Given the strict sequence and single occurrence,
# we leave this set empty.
log_skeleton['equivalence'] = set()

# 6. Never Together ('never_together')
# The scenario describes a single, cohesive order fulfillment process. There are no activities
# described as mutually exclusive within the same case (e.g., "Order Cancelled" vs. "Order Shipped").
log_skeleton['never_together'] = set()

# Print the resulting Log Skeleton
print(log_skeleton)
```