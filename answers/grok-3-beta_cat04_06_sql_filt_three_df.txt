Let's write a DuckDB SQL query to solve this problem. Let's break it down into steps using CTEs (Common Table Expressions) for clarity.

```sql
WITH activity_sequence AS (
    -- Assign row numbers to events within each case, ordered by timestamp
    SELECT 
        case_id,
        activity,
        timestamp,
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY timestamp) AS event_order
    FROM event_log
),
sequence_check AS (
    -- Check for the specific sequence of activities in direct succession
    SELECT 
        a1.case_id
    FROM activity_sequence a1
    JOIN activity_sequence a2
        ON a1.case_id = a2.case_id
        AND a1.event_order + 1 = a2.event_order
    JOIN activity_sequence a3
        ON a2.case_id = a3.case_id
        AND a2.event_order + 1 = a3.event_order
    WHERE 
        a1.activity = 'Approve Purchase Requisition'
        AND a2.activity = 'Create Order'
        AND a3.activity = 'Confirm Order'
),
time_check AS (
    -- Check the time difference between Create Order and Confirm Order
    SELECT DISTINCT
        a2.case_id
    FROM activity_sequence a1
    JOIN activity_sequence a2
        ON a1.case_id = a2.case_id
        AND a1.event_order + 1 = a2.event_order
    JOIN activity_sequence a3
        ON a2.case_id = a3.case_id
        AND a2.event_order + 1 = a3.event_order
    WHERE 
        a1.activity = 'Approve Purchase Requisition'
        AND a2.activity = 'Create Order'
        AND a3.activity = 'Confirm Order'
        AND DATEDIFF('day', a2.timestamp, a3.timestamp) > 5
),
cases_to_exclude AS (
    -- Combine both conditions: sequence exists AND time condition is met
    SELECT s.case_id
    FROM sequence_check s
    JOIN time_check t
        ON s.case_id = t.case_id
)
-- Return all events from cases that are NOT in the exclude list
SELECT 
    el.*
FROM event_log el
LEFT JOIN cases_to_exclude cte
    ON el.case_id = cte.case_id
WHERE cte.case_id IS NULL
ORDER BY el.case_id, el.timestamp;
```

### Explanation of the Query:

1. **activity_sequence CTE**:
   - Assigns a row number (`event_order`) to each event within a case, ordered by timestamp. This helps identify consecutive events.

2. **sequence_check CTE**:
   - Joins the `activity_sequence` table with itself to find cases where the three activities ('Approve Purchase Requisition', 'Create Order', 'Confirm Order') occur in direct succession.
   - Uses the `event_order` to ensure no other events are in between (checking consecutive row numbers).

3. **time_check CTE**:
   - Similar to `sequence_check`, but also calculates the time difference between 'Create Order' and 'Confirm Order' using `DATEDIFF`.
   - Only keeps cases where the difference is more than 5 days.

4. **cases_to_exclude CTE**:
   - Combines the results of `sequence_check` and `time_check` to identify cases that satisfy both conditions (specific sequence AND time difference > 5 days).

5. **Final SELECT**:
   - Uses a LEFT JOIN with `cases_to_exclude` to filter out events from cases that match the exclusion criteria.
   - Only returns events where the `case_id` is not in the `cases_to_exclude` list (i.e., `cte.case_id IS NULL`).
   - Orders the results by `case_id` and `timestamp` for readability.

### Key Points:
- The query ensures that the sequence of activities is checked for direct succession using `event_order`.
- The time difference is calculated specifically for the identified sequence using `DATEDIFF`.
- Cases meeting both conditions are excluded, and only events from other cases are returned.
- DuckDB's `DATEDIFF` function is used with the 'day' unit to calculate the time difference in days.

This query should efficiently handle the requirements while maintaining clarity through the use of CTEs. If the `event_log` table has additional columns or constraints, the query can be adjusted accordingly.