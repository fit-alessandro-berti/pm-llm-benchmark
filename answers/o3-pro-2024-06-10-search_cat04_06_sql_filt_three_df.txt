Here is one concise way to express the requirement in DuckDB SQL.  
The query

• orders every event inside its case,  
• looks at each triplet of consecutive events,  
• flags any case that contains the exact sequence  
  Approve Purchase Requisition  Create Order  Confirm Order  
  where the time between the middle and last event is more than 5 days, and  
• finally returns all events that do **not** belong to a flagged case.

```sql
-- 1) order each event inside its case ---------------------------------------
WITH ordered AS (
    SELECT
        case_id,
        activity,
        "timestamp",
        ROW_NUMBER() OVER (PARTITION BY case_id ORDER BY "timestamp") AS rn
    FROM event_log
),

-- 2) find the problematic sequence + timing ---------------------------------
sequence_found AS (
    SELECT DISTINCT o1.case_id
    FROM ordered o1
    JOIN ordered o2
      ON o2.case_id = o1.case_id AND o2.rn = o1.rn + 1          -- next event
    JOIN ordered o3
      ON o3.case_id = o1.case_id AND o3.rn = o1.rn + 2          -- next-next
    WHERE o1.activity = 'Approve Purchase Requisition'
      AND o2.activity = 'Create Order'
      AND o3.activity = 'Confirm Order'
      AND (o3."timestamp" - o2."timestamp") > INTERVAL '5 days' -- > 5 days
)

-- 3) return every event from the cases that are **not** flagged -------------
SELECT *
FROM event_log
WHERE case_id NOT IN (SELECT case_id FROM sequence_found)
ORDER BY case_id, "timestamp";
```

Explanation of the key points:

1. `ROW_NUMBER()` gives each event its position (`rn`) inside the case.  
   By joining on `rn+1` and `rn+2` we guarantee the three events are **directly consecutive**—no other activity can come between them.

2. The time-difference condition `(o3.timestamp  o2.timestamp) > INTERVAL '5 days'` is evaluated only for rows that already match the activity pattern.

3. After collecting all case_ids that satisfy both the sequence and the timing rule (`sequence_found`), the outer query simply excludes those cases, returning all remaining events.