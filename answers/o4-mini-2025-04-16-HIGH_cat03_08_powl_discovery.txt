Below is a POWL model in Pythonlike notation (you don’t need to run it, it just shows the final POWL structure) that captures:

• The mandatory linear part  
• An optional IQC–rework loop (zero or more IQCAS iterations)  
• A mandatory TST–rework loop (at least one TST, with optional RTTST iterations)  
• An optional labeling step  

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# 1. Define the atomic transitions
OR  = Transition(label="OR")   # Order Received
MS  = Transition(label="MS")   # Material Sourcing
QS  = Transition(label="QS")   # Quality Screening
AS  = Transition(label="AS")   # Assembly
IQC = Transition(label="IQC")  # In-line Quality Check
TST = Transition(label="TST")  # Testing
RT  = Transition(label="RT")   # Re-Testing
PK  = Transition(label="PK")   # Packaging
LB  = Transition(label="LB")   # Labeling
DP  = Transition(label="DP")   # Distribution Planning
D   = Transition(label="D")    # Dispatch

# silent “skip” transitions for optional parts
skip_iqc = SilentTransition()  
skip_lb  = SilentTransition()

# 2. Build the IQCrework loop:
#    A = single IQC
#    B = reassembly and another IQC
as_iqc = StrictPartialOrder(nodes=[AS, IQC])
as_iqc.order.add_edge(AS, IQC)

iqc_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[
        IQC,       # A: do IQC once
        as_iqc     # B: if failure, do ASIQC then back to A
    ]
)

# make it optional: either skip it altogether (case 4), or do the loop
iqc_phase = OperatorPOWL(
    operator=Operator.XOR,
    children=[skip_iqc, iqc_loop]
)

# 3. Build the TSTretest loop:
#    A = TST once
#    B = RTTST if it failed
rt_tst = StrictPartialOrder(nodes=[RT, TST])
rt_tst.order.add_edge(RT, TST)

tst_loop = OperatorPOWL(
    operator=Operator.LOOP,
    children=[TST, rt_tst]
)

# 4. Optional labeling
lb_choice = OperatorPOWL(
    operator=Operator.XOR,
    children=[LB, skip_lb]
)

# 5. Wire everything in one big partial order (which here is a total order)
root = StrictPartialOrder(
    nodes=[OR, MS, QS, AS, iqc_phase, tst_loop, PK, lb_choice, DP, D]
)

# sequencing edges
root.order.add_edge(OR,        MS)
root.order.add_edge(MS,        QS)
root.order.add_edge(QS,        AS)
root.order.add_edge(AS,        iqc_phase)
root.order.add_edge(iqc_phase, tst_loop)
root.order.add_edge(tst_loop,  PK)
root.order.add_edge(PK,        lb_choice)
root.order.add_edge(lb_choice, DP)
root.order.add_edge(DP,        D)

# `root` is now the POWL model of the entire process
```

Explanation of the structure:

1. OR  MS  QS  AS is always performed in sequence.  
2. After the first AS, we enter an exclusivechoice (XOR):  
   - skip_iqc (takes you directly to testing)  
   - or iqc_loop, which guarantees at least one IQC, and on failure does ASIQC again, repeating until passed.  
3. Once out of the IQC phase, we enter a mandatory testingloop (tst_loop) that runs TST at least once, and on failure does RTTST again.  
4. After testing, PK always runs, then an XOR to either do LB or skip it.  
5. Finally DP  D.  

This POWL model exactly reflects all five cases in the log:  
– Case 4 (no IQC, no RT) goes ORMSQSASskip_iqctst_loop (one TST)PKLB or skipDPD  
– Cases with multiple IQC/AS or RT/TST cycles follow the appropriate loop branches.