Here is a POWLmodel of the “ordersourcingscreeningassembly+IQCrework looptesting+retest looppack(optional labeling)distribution planningdispatch” process.  Note that we model the two loops with Operator.LOOP (first child A is the “work” step, second child B is the “check/retest” step), and we model the optional labeling as an XOR with a silent skip.

```python
import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# 1) define all atomic activities
or_tr = Transition(label="OR")      # Order Received
ms_tr = Transition(label="MS")      # Material Sourcing
qs_tr = Transition(label="QS")      # Quality Screening
as_tr = Transition(label="AS")      # Assembly
iqc_tr = Transition(label="IQC")    # Inline Quality Check
tst_tr = Transition(label="TST")    # Testing
rt_tr = Transition(label="RT")      # ReTesting
pk_tr = Transition(label="PK")      # Packaging
lb_tr = Transition(label="LB")      # Labeling
dp_tr = Transition(label="DP")      # Distribution Planning
d_tr  = Transition(label="D")       # Dispatch

# 2) silent transition to skip labeling
skip_lb = SilentTransition()

# 3) loops and choice
#   A=AS, B=IQC   do AS; then either exit (no IQC) or do IQC then AS again, etc.
rework_loop = OperatorPOWL(operator=Operator.LOOP, children=[as_tr, iqc_tr])

#   A=TST, B=RT  do TST; then either exit (no RT) or do RT then TST again, etc.
test_loop   = OperatorPOWL(operator=Operator.LOOP, children=[tst_tr, rt_tr])

# optional labeling: either LB or skip
lb_xor      = OperatorPOWL(operator=Operator.XOR,  children=[lb_tr, skip_lb])

# 4) assemble everything in a strict partial order (purely sequential here)
root = StrictPartialOrder(nodes=[
    or_tr,
    ms_tr,
    qs_tr,
    rework_loop,
    test_loop,
    pk_tr,
    lb_xor,
    dp_tr,
    d_tr
])

# 5) impose the global “” order
root.order.add_edge(or_tr,      ms_tr)
root.order.add_edge(ms_tr,      qs_tr)
root.order.add_edge(qs_tr,      rework_loop)
root.order.add_edge(rework_loop, test_loop)
root.order.add_edge(test_loop,   pk_tr)
root.order.add_edge(pk_tr,       lb_xor)
root.order.add_edge(lb_xor,      dp_tr)
root.order.add_edge(dp_tr,       d_tr)

# the object “root” now encodes the desired POWL model
```

If you prefer a more compact, textual specification of the same model:

PO = StrictPartialOrder(  
&nbsp;&nbsp;&nbsp;&nbsp;nodes = {  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OR, MS, QS, * (AS, IQC), * (TST, RT), PK, X(LB, ), DP, D  
&nbsp;&nbsp;&nbsp;&nbsp;},  
&nbsp;&nbsp;&nbsp;&nbsp;order = {  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ORMS, MSQS, QS*(AS,IQC), *(AS,IQC)*(TST,RT),  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*(TST,RT)PK, PKX(LB,), X(LB,)DP, DPD  
&nbsp;&nbsp;&nbsp;&nbsp;}  
)

This POWL model captures exactly:

• the linear flow ORMSQS  
• a potentially repeated “assemble & IQC” loop (can run zero, one or many IQC+reassembly cycles)  
• a potentially repeated “test & retest” loop  
• packaging, then optional labeling, then distribution planning, then dispatch.