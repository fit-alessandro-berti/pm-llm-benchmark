Here's the Log Skeleton for the given order fulfillment process scenario:

```python
log_skeleton = {
    'equivalence': {
        # No direct equivalence constraints in this process
    },
    'always_before': {
        ('CA', 'RI'),  # Check Availability must occur before Reserve Items
        ('RI', 'PI'),  # Reserve Items must occur before Pick Items
        ('PI', 'QC'),  # Pick Items must occur before Quality Check
        ('QC', 'PO'),  # Quality Check must occur before Pack Order
        ('PO', 'GSL'), # Pack Order must occur before Generate Shipping Label
        ('GSL', 'D'),  # Generate Shipping Label must occur before Dispatch
        ('D', 'IC'),   # Dispatch must occur before Invoice Customer
        ('IC', 'RP')   # Invoice Customer must occur before Record Payment
    },
    'always_after': {
        # Always After constraints can be derived from the Always Before ones
        ('RI', 'CA'),
        ('PI', 'RI'),
        ('QC', 'PI'),
        ('PO', 'QC'),
        ('GSL', 'PO'),
        ('D', 'GSL'),
        ('IC', 'D'),
        ('RP', 'IC')
    },
    'never_together': {
        # In a sequential process, no activities should be Never Together
        # But some parallel constraints might be needed if the process were more complex
        # For example, we might want to ensure that:
        # ('PI', 'QC') are never together - but this contradicts our process flow
        # So we'll leave this empty as all activities are sequential in this scenario
    },
    'directly_follows': {
        # In a strict sequential process, all transitions would be Directly-Follows
        # But that would be too restrictive - we'll leave this empty to allow some flexibility
        # For example, we could add:
        # ('PI', 'QC')  # Pick Items are directly followed by Quality Check
        # But this would make the process too rigid
        # So we'll leave it empty to allow for some flexibility in the actual sequence
    },
    'activ_freq': {
        'RO': {1},       # Receive Order occurs exactly once per case
        'CA': {1},       # Check Availability occurs exactly once per case
        'RI': {1},       # Reserve Items occurs exactly once per case
        'PI': {1},       # Pick Items occurs exactly once per case
        'QC': {1},       # Quality Check occurs exactly once per case
        'PO': {1},       # Pack Order occurs exactly once per case
        'GSL': {1},      # Generate Shipping Label occurs exactly once per case
        'D': {1},        # Dispatch occurs exactly once per case
        'IC': {1},       # Invoice Customer occurs exactly once per case
        'RP': {1}        # Record Payment occurs exactly once per case
    }
}
```

### Explanation:
1. **Always Before**: Represents the strict ordering constraints where one activity must occur before another.
2. **Always After**: Derived from Always Before (just reversed), showing that if B occurs, A must have happened before.
3. **Never Together**: Left empty since this is a sequential process with no parallel paths.
4. **Directly Follows**: Not used here to allow some flexibility in the sequence (though a strict sequential process could use it).
5. **Activity Frequencies**: All activities occur exactly once per case in this simple process.

This skeleton captures the essential ordering constraints while allowing for some flexibility in the exact sequence of operations (within the defined ordering constraints).