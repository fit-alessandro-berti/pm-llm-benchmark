Here's the complete **Python code** to construct an **accepting Petri net** for the **Insurance Claim Management Process** using `pm4py`, modeling all the required steps, conditional loops (for document re-submission and in-depth investigation), and proper initial and final markings.

```python
from pm4py.objects.petri_net.obj import PetriNet, Marking
from pm4py.objects.petri_net.utils import petri_utils

# Create the Petri net
net = PetriNet("InsuranceClaimManagement")

# Define places
start = PetriNet.Place("start")
after_cr = PetriNet.Place("after_cr")        # After Claim Registration
after_dv = PetriNet.Place("after_dv")        # After Document Verification
after_fc = PetriNet.Place("after_fc")        # After Fraud Check
after_ca = PetriNet.Place("after_ca")        # After Claim Assessment
after_ap = PetriNet.Place("after_ap")        # After Approval
after_p = PetriNet.Place("after_p")          # After Payment
after_n = PetriNet.Place("after_n")          # After Notification
end = PetriNet.Place("end")                  # Closure (final state)

# Define transitions (with labels)
t_cr = PetriNet.Transition("t_cr", "Claim Registration")
t_dv = PetriNet.Transition("t_dv", "Document Verification")
t_rds = PetriNet.Transition("t_rds", "Re-Document Submission")
t_fc = PetriNet.Transition("t_fc", "Fraud Check")
t_ii = PetriNet.Transition("t_ii", "In-depth Investigation")
t_ca = PetriNet.Transition("t_ca", "Claim Assessment")
t_ap = PetriNet.Transition("t_ap", "Approval")
t_p = PetriNet.Transition("t_p", "Payment")
t_n = PetriNet.Transition("t_n", "Notification")
t_cl = PetriNet.Transition("t_cl", "Closure")

# Add all places and transitions to the net
[net.places.add(p) for p in [start, after_cr, after_dv, after_fc, after_ca, after_ap, after_p, after_n, end]]
[net.transitions.add(t) for t in [t_cr, t_dv, t_rds, t_fc, t_ii, t_ca, t_ap, t_p, t_n, t_cl]]

# Add arcs to model the process flow

# Start -> Claim Registration
petri_utils.add_arc_from_to(start, t_cr, net)
petri_utils.add_arc_from_to(t_cr, after_cr, net)

# Claim Registration -> Document Verification
petri_utils.add_arc_from_to(after_cr, t_dv, net)

# Document Verification has two outcomes:
# - Success: proceed to Fraud Check
# - Failure: go to Re-Document Submission (RDS), then loop back to DV
petri_utils.add_arc_from_to(t_dv, after_dv, net)
petri_utils.add_arc_from_to(after_dv, t_fc, net)         # Normal path
petri_utils.add_arc_from_to(after_dv, t_rds, net)        # If documents incomplete
petri_utils.add_arc_from_to(t_rds, t_dv, net)            # Loop back to DV after resubmission

# Fraud Check -> two outcomes:
# - Clean: go to Claim Assessment
# - Suspicious: go to In-depth Investigation (II), then loop back to FC
petri_utils.add_arc_from_to(t_fc, after_fc, net)
petri_utils.add_arc_from_to(after_fc, t_ca, net)         # Proceed to assessment
petri_utils.add_arc_from_to(after_fc, t_ii, net)         # Trigger investigation if needed
petri_utils.add_arc_from_to(t_ii, t_fc, net)             # Loop back to FC after II

# Claim Assessment -> Approval (some claims need approval)
petri_utils.add_arc_from_to(t_ca, after_ca, net)
petri_utils.add_arc_from_to(after_ca, t_ap, net)
petri_utils.add_arc_from_to(t_ap, after_ap, net)

# After Approval (or if no approval needed, just after CA), go to Payment
# (We assume all claims go through approval for simplicity, or AP is implicit)
# So after_ap leads to Payment
petri_utils.add_arc_from_to(after_ap, t_p, net)
petri_utils.add_arc_from_to(t_p, after_p, net)

# Payment -> Notification
petri_utils.add_arc_from_to(after_p, t_n, net)
petri_utils.add_arc_from_to(t_n, after_n, net)

# Notification -> Closure
petri_utils.add_arc_from_to(after_n, t_cl, net)
petri_utils.add_arc_from_to(t_cl, end, net)

# Define initial and final markings
im = Marking()
im[start] = 1  # One token at the start

fm = Marking()
fm[end] = 1    # Final marking: one token in the end (closed claim) place

# Optional: print for debugging
print("Petri Net constructed with {} places and {} transitions.".format(len(net.places), len(net.transitions)))
print("Initial Marking:", {p.name: im[p] for p in im})
print("Final Marking:", {p.name: fm[p] for p in fm})
```

---

###  **Key Features of This Model:**

- **Sequential Flow:** CR  DV  FC  CA  AP  P  N  CL
- **Loop for Document Re-submission (RDS):**
  - If DV fails, go to RDS and loop back to DV.
- **Loop for In-depth Investigation (II):**
  - If FC raises flags, go to II and loop back to FC.
  - Can repeat multiple times.
- **Transitions are labeled** with meaningful activity names (visible in process mining tools).
- **Initial marking:** Token starts at `start`, representing a new claim.
- **Final marking:** Token ends at `end`, representing a closed claim.

---

###  Notes:

- This model assumes **all claims go through approval** (can be modified with a choice if needed).
- The loops (RDS and II) are **unbounded** — they can repeat any number of times.
- You can later use this accepting Petri net with PM4Py for **conformance checking**, **replay**, or **process discovery comparison**.

Let me know if you'd like a **visualization** of this net using `pm4py`!